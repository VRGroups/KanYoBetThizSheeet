//Developed by Muhammad Iqbal from scratch
//26666
#pragma dynamic 500000

#include <a_samp>
#include <streamer>

#include <sscanf2>
#include <foreach>

#include <nex-ac>

#include <a_mysql> // R39 - download it here: http://forum.sa-mp.com/showthread.php?t=56564
#include <easyDialog>
#include <eSelection>
#include <progress2>

#include <zcmd>
#include <strtok>
#include <YSI\y_iterate>
#include <callbacks>
//#include <sqlitei>       // by Slice - http://forum.sa-mp.com/showthread.php?t=303682

#define MAX_ZONE_NAME 28
#define SQL_HOSTNAME "127.0.0.1"
#define SQL_USERNAME "root"
#define SQL_DATABASE "yolrp"
#define SQL_PASSWORD "123"

#define SERVER_NAME 	 "[0.3.7] Vandora Ravens Roleplay"
#define SERVER_URL 		 "www.vandoraravens.xyz/forum"
#define SERVER_REVISION  "VR:RP v.0.1d | Dodol"
#define SERVER_CITY 	 (1) // (1) Los Santos, (2) San Fierro, (3) Las Venturas
#define MAX_SNOW_OBJECTS 10
#define UPDATE_INTERVAL 750
#define DIALOG_REP 29318
#define DIALOG_DON 23125
#define DIALOG_HEL 23126
#define DIALOG_ADM 23124
#define DIALOG_GENERAL 23284
#define DIALOG_CHAT 30292
#define DIALOG_BUS 2931
#define DIALOG_JO 31241
#define DIALOG_HOU 2882
#define DIALOG_VE 38182
#define COLOR_PINK 		  (0xFF66FFAA)
#define COLOR_BROWN       (0x993300AA)
#define COLOR_TWPINK 	  (0xE75480AA)
#define COLOR_OOC		  (0xE0FFFFAA)
#define COLOR_CLIENT      (0xAAC4E5FF)
#define COLOR_WHITE       (0xFFFFFFFF)
#define COLOR_RED         (0xFF0000FF)
#define COLOR_CYAN        (0x33CCFFFF)
#define COLOR_LIGHTRED    (0xFF6347FF)
#define COLOR_LIGHTGREEN  (0x9ACD32FF)
#define COLOR_YELLOW      (0xFFFF00FF)
#define COLOR_GREY        (0x888888C8)
#define COLOR_HOSPITAL    (0xFF8282FF)
#define COLOR_PURPLE      (0xD0AEEBFF)
#define COLOR_LIGHTYELLOW (0xF5DEB3FF)
#define COLOR_DARKBLUE    (0x1394BFFF)
#define COLOR_ORANGE      (0xFFA500FF)
#define COLOR_LIME        (0x00FF00FF)
#define COLOR_GREEN       (0x33CC33FF)
#define COLOR_BLUE        (0x2641FEFF)
#define COLOR_FACTION     (0xBDF38BFF)
#define COLOR_RADIO       (0x8D8DFFFF)
#define COLOR_SERVER      (0xFFFF90FF) // 6688FF
#define COLOR_DEPARTMENT  (0xF0CC00FF)
#define COLOR_ADMINCHAT   (0x33EE33FF)
#define DEFAULT_COLOR     (0xFFFFFFFF)
#define COLOR_RADIOCHAT   (0x996600AA)
#define COLOR_FACTIONCHAT (0x6699FFAA)
#define COLOR_NEWGREEN    (0x00E228FF)
#define COLOR_NEWBLUE     (0x80BCFF)
#define COLOR_DONATOR     (0xF2D113FF)
#define COLOR_DONATORCHAT (0xF2D113FF)
#define COLOR_LIGHTBLUE   (0x3AB3EDFF)
#define COLOR_INTERCOM    (0x58D3A6FF)
#define COLOR_FADVERT     (0x00AA00FF)
#define COLOR_WHATSAPP    (0xCCFFCC)

#define THREAD_CREATE_CHAR (1)
#define THREAD_CHECK_ACCOUNT (2)
#define THREAD_LOGIN (3)
#define THREAD_CHARACTERS (4)
#define THREAD_LOAD_CHARACTER (5)
#define THREAD_VERIFY_PASS (6)
#define THREAD_FIND_USERNAME (7)
#define THREAD_LOAD_INVENTORY (8)
#define THREAD_BAN_LOOKUP (9)
#define THREAD_LOAD_CONTACTS (10)
#define THREAD_LOAD_LOCATIONS (11)
#define THREAD_LOAD_TICKETS (12)
#define THREAD_SHOW_CHARACTER (13)

#define MODEL_SELECTION_GLASSES (1)
#define MODEL_SELECTION_HATS (2)
#define MODEL_SELECTION_BANDANAS (3)
#define MODEL_SELECTION_SKIN (4)
#define MODEL_SELECTION_INVENTORY (5)
#define MODEL_SELECTION_CLOTHES (6)
#define MODEL_SELECTION_DEALER (7)
#define MODEL_SELECTION_DEALER_ADD (8)
#define MODEL_SELECTION_BUY_CAR (9)
#define MODEL_SELECTION_FURNITURE (10)
#define MODEL_SELECTION_COLOR (11)
#define MODEL_SELECTION_SKINS (12)
#define MODEL_SELECTION_ADD_SKIN (13)
#define MODEL_SELECTION_FACTION_SKIN (14)
#define MODEL_SELECTION_WHEELS (15)
#define MODEL_SELECTION_FRISK (16)
#define MODEL_SELECTION_UNDERCOVER (17)
#define MODEL_SELECTION_OFFDUTYCLOTHES (18)
#define MODEL_SELECTION_ADMINCLOTHES (19)

#define FACTION_POLICE (1)
#define FACTION_NEWS (2)
#define FACTION_MEDIC (3)
#define FACTION_GOV (4)
#define FACTION_GANG (5)
#define FACTION_COMPANY (6)

#define JOB_COURIER (1)
#define JOB_MECHANIC (2)
#define JOB_TAXI (3)
#define JOB_UNLOADER (4)
#define JOB_MINER (5)
#define JOB_FOOD_VENDOR (6)
#define JOB_GARBAGE (7)
#define JOB_SORTER (8)
#define JOB_WEAPON_SMUGGLER (9)
#define JOB_LUMBER (10)

#define SendServerMessage(%0,%1) \
	SendClientMessageEx(%0, COLOR_ORANGE, "[SERVER]: "%1)

#define SendSyntaxMessage(%0,%1) \
	SendClientMessageEx(%0, COLOR_GREY, "[SYNTAX]:{FFFFFF} "%1) // COLOR_YELLOW

#define SendErrorMessage(%0,%1) \
	SendClientMessageEx(%0, COLOR_GREY, "[ERROR]:{FFFFFF} "%1)

#define SendAdminAction(%0,%1) \
	SendClientMessageEx(%0, COLOR_LIGHTBLUE, "[ADMIN]: "%1) // COLOR_YELLOW

#define SendHelperAction(%0,%1) \
	SendClientMessageEx(%0, COLOR_GREEN, "[HELPER]: "%1) // COLOR_YELLOW
	
#define SendEventMessage(%0,%1) \
	SendClientMessageEx(%0, COLOR_WHITE, "[{FFA500}EVENT{FFFFFF}]:"%1)

// Define Only..
//DONATOR
#define DonatorOnly			"[WARNING] Perintah ini hanya untuk donator, silahkan beli donator status untuk menggunakannya."
// System Neon
#pragma tabsize 0
#define neondialog 8131
//DONATOR END
#define MAX_BILLBOARDS (50)
#define MAX_REPORTS (50)
#define MAX_INVENTORY (120)
#define MAX_HOUSES (500)
#define MAX_HOUSE_STORAGE (10)
#define MAX_BUSINESSES (500)
#define MAX_DROPPED_ITEMS (5000)
#define MAX_ENTRANCES (100)
#define MAX_DEALERSHIP_CARS (40)
#define MAX_DYNAMIC_CARS (1500)
#define MAX_GAS_PUMPS (100)
#define MAX_FURNITURE (2000)
#define MAX_HOUSE_FURNITURE (30)
#define MAX_DYNAMIC_JOBS (25)
#define MAX_CONTACTS (20)
#define MAX_GPS_LOCATIONS (20)
#define MAX_CAR_STORAGE (5)
#define MAX_CRATES (200)
#define MAX_DRUG_PLANTS (200)
#define MAX_FACTIONS (15)
#define MAX_ARREST_POINTS (50)
#define MAX_PLAYER_TICKETS (10)
#define MAX_PLAYER_INVOICES (10)
#define MAX_BARRICADES (25)
#define MAX_BOOTHS (8)
#define MAX_GATES (400)
#define MAX_IMPOUND_LOTS (20)
#define MAX_ATM_MACHINES (100)
#define MAX_GARBAGE_BINS (50)
#define MAX_VENDORS (50)
#define MAX_WEAPON_RACKS (500)
#define MAX_SPEED_CAMERAS (100)
#define MAX_LISTED_ITEMS (10)
#define MAX_GRAFFITI_POINTS (20)
#define MAX_METAL_DETECTORS (20)

#define MAX_OWNABLE_CARS (5)
#define MAX_OWNABLE_HOUSES (3)
#define MAX_OWNABLE_BUSINESSES (3)

#define MAX_BACKPACKS (400)
#define MAX_BACKPACK_ITEMS (1000)
#define MAX_BACKPACK_CAPACITY (10)

#define MAX_ROADBLOCKS 50

#define PRISON_WORLD (10000)

//Lumberjack
#define     MAX_TREES       (100)   // tree limit
#define     MAX_LOGS        (300)   // dropped log limit
#define     MAX_BUYERS      (20)    // log buyer limit

#define     CUTTING_TIME    (8)		// required seconds to cut a tree down (Default: 8)
#define     LOG_LIMIT     	(10)    // how many logs a player can load to a bobcat (if you change this, don't forget to modify LogAttachOffsets array) (Default: 10)
#define     ATTACH_INDEX    (7)     // for setplayerattachedobject (Default: 7)
#define     TREE_RESPAWN    (300)   // required seconds to respawn a tree (Default: 300)
#define     LOG_LIFETIME	(180)   // life time of a dropped log, in seconds (Default: 120)
#define     LOG_PRICE       (50)    // price of a log (Default: 50)
#define     CSAW_PRICE      (100)  	// price of a chainsaw (Default: 500)

// Vehicle Bomb Stuff
#define BOMB_ARMTIME					15 		// Amount of seconds it takes to arm a bomb
#define BOMB_CHECKTIME 					10		// Amount of seconds it takes to check for bombs in a vehicle
#define BOMB_DISARMTIME					5		// Amount of seconds it takes to attempt to disarm a bomb
#define BOMB_USE_DISTANCE				3.0		// FLOAT, how far away the player has to be from the vehicle to use any bombs

#define VEHICLE_BOMB_TYPE_UNARMED		0
#define VEHICLE_BOMB_TYPE_IGNITION		1
#define VEHICLE_BOMB_TYPE_TIMER			2
#define VEHICLE_BOMB_TYPE_SPEED			3
#define VEHICLE_BOMB_TYPE_REMOTE		4

#define MAX_EXPLOSIVES_PER_PLAYER		1
#define MAX_EXPLOSIVES					MAX_PLAYERS * MAX_EXPLOSIVES_PER_PLAYER
//death
#define DEATH_RESET     true
//DEATH_RESET indicates whether damages should be reset when a player dies. Can be set to 'true' or 'false'. 
#define MAX_BODY_PARTS 7
#define MAX_WEAPONS 55
//      DIALOGS
#define D_DAMAGES 1
//      BODY PARTS
#define BODY_PART_TORSO 3
#define BODY_PART_GROIN 4
#define BODY_PART_RIGHT_ARM 5
#define BODY_PART_LEFT_ARM 6
#define BODY_PART_RIGHT_LEG 7
#define BODY_PART_LEFT_LEG 8
#define BODY_PART_HEAD 9
//Pizzajob
#define PIZZA_CHECKPOINTS            24 // Total Houses
#define PAY_PER_CHECKPOINT     100 // 10$ per delivered pizza
#define MAX_TIP                20 // Maximum Random Tip + 10$
#define CHECKPOINT_NONE        0 // No Checkpoint
#define PIZZA_CHECKPOINT       1 // Pizza Checkpoint
#define PIZZA_INDEX            9 // Pizza Index for SetPlayerAttachedObject

// Keys
#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
//atmklik
new donatorarmor[MAX_PLAYERS];
new kacangbag[MAX_PLAYERS];
new PlayerText:atmklik[MAX_PLAYERS][19]; //atmklik
new jmlduit[MAX_PLAYERS]; //atmklik
new	RentCar[MAX_PLAYERS],
	RentTime[MAX_PLAYERS],
	RentMoneySpent[MAX_PLAYERS];
new PlayerText:RentCarText[MAX_PLAYERS];

new pmdelay[MAX_PLAYERS];

new planech[MAX_PLAYERS];


// Server Pickups & 3D Texts
new pizza_jobpickup;
new pizza_restockpickup;
new Text3D:pizza_jobtext;
new Text3D:pizza_restocktext;
new koran_antarpickup;
new koran_jobpickup;
new Text3D:koran_antarkoran;
new Text3D:koran_jobtext;
new penyapu_pickup;
new Text3D:penyapu_text;
new truckerjob_pickup;
new truckerpos_pickup;

//paytoll
new bool:nopaytoll = false;
new TollGates[20];


// Server Vehicles
new pizzabikes[5];
new PizzaBikesPizzas[MAX_VEHICLES];
new mobilpenyapu[3];
new truckers[14];


// Player Variables
new IsInJob[MAX_PLAYERS];
new TipTime[MAX_PLAYERS];
new PlayerTutorialTime[MAX_PLAYERS];
new InfoTimer[MAX_PLAYERS];
new PlayerCustomer[MAX_PLAYERS];
new PlayerCheckpoint[MAX_PLAYERS];
new PlayerTips[MAX_PLAYERS];
new PlayerEarnings[MAX_PLAYERS];
new PlayerSkin[MAX_PLAYERS];

#define COLOR_ME 0xC2A2DAFF
#define COLOR_ERROR 0xFF0000FF

new Text3D:ame[MAX_PLAYERS];
new Text3D:ado[MAX_PLAYERS];
new amestatus[MAX_PLAYERS], adostatus[MAX_PLAYERS];
// Textdraws
new PlayerText:Pizza_Textdraw0[MAX_PLAYERS];
new PlayerText:Pizza_Textdraw1[MAX_PLAYERS];
new PlayerText:Pizza_Textdraw2[MAX_PLAYERS];
new PlayerText:PizzasText[MAX_PLAYERS];
new PlayerText:PizzaSymbol[MAX_PLAYERS];
new PlayerText:TipsText[MAX_PLAYERS];
new PlayerText:EarningsText[MAX_PLAYERS];
new PlayerText:TotalEarningsText[MAX_PLAYERS];
new PlayerText:TipTimeText[MAX_PLAYERS];

//playertext3d
new Text3D:event[MAX_PLAYERS];

// Timers
new TutorialTimer;

//Cek donator timer!
new CheckDonatorTimer[MAX_PLAYERS];

// Checkpoints for each house
new Float:Houses[PIZZA_CHECKPOINTS][4] = {
{2065.9780,-1703.4775,14.1484,90.8956},
{2068.2600,-1656.4601,13.5469,86.9378},
{2068.8579,-1643.8237,13.5469,90.3844},
{2068.7437,-1628.9187,13.8762,90.3844},
{2065.0508,-1583.8545,13.4814,92.2467},
{2003.0380,-1595.1025,13.5759,39.7419},
{2016.8215,-1629.8384,13.5469,270.7754},
{2015.4512,-1641.6316,13.7824,272.6556},
{2012.0426,-1656.4589,13.5547,268.4961},
{2017.1294,-1703.3452,14.2043,272.0217},
{2014.4487,-1732.6185,14.2353,271.6387},
{2139.1643,-1698.1489,15.0784,4.0066},
{2166.9363,-1672.0193,15.0749,46.6203},
{2244.2312,-1638.2906,15.9074,340.8198},
{2257.1416,-1644.8845,15.5164,353.3532},
{2282.2446,-1641.7231,15.8898,357.1133},
{2307.0203,-1678.1877,14.0012,180.0783},
{2328.2483,-1681.9125,14.8624,90.7775},
{2362.8362,-1644.1184,13.5332,0.849},
{2368.3418,-1674.5013,13.9063,179.1149},
{2393.2185,-1646.7593,13.6432,1.7900},
{2409.0159,-1673.8960,13.6045,180.0550},
{2413.9771,-1647.1270,14.0119,2.4167},
{2452.0852,-1642.3127,13.7357,1.4767}
};

// Forwards
forward ShowPlayerIntroTexts(playerid);
forward HidePlayerIntroTexts(playerid);
forward ShowPlayerInfoTexts(playerid);
forward HidePlayerInfoTexts(playerid);
forward TutorialTime();
forward ShowPlayerPizzaBikeTexts(playerid);
forward HidePlayerPizzaBikeTexts(playerid);
forward ShowTipTimeText(playerid);
forward HideTipTimeText(playerid);
//Pizza job end

//jobkoran
new speda[8];
//new bmxkoran[8];

new Float: bmx1[10][3] =
{
  { 1905.7938,-1128.9760,24.1360},
  { 2032.7908,-1082.7841,24.0833},
  { 2140.0906,-1083.4312,24.0036},
  { 2227.3660,-1160.5052,25.2793},
  { 2192.1072,-1235.3475,23.4729},
  { 2133.3477,-1229.3800,23.4854},
  { 2196.0557,-1283.3958,23.8440},
  { 2251.4763,-1282.4658,24.8758},
  { 2309.5779,-1326.8361,23.5075},
  { 2346.8096,-1375.9602,23.4974}
};
new antarkoran[MAX_PLAYERS];
new koran[MAX_PLAYERS];


//koran end

//penyapu
new Float: penyapu1[14][3] =
{
	{ 1685.8700, -1845.3700, 12.8700},
	{ 1746.7800, -1821.9399, 13.2300},
	{ 1781.7700, -1853.5000, 12.8100},
	{ 1819.3900, -1792.5400, 13.2900},
	{ 1723.2900, -1734.3800, 13.9500},
	{ 1603.7400, -1734.8101, 13.1700},
	{ 1531.5800, -1690.5300, 13.5200},
	{ 1487.0100, -1594.4800, 13.4600},
	{ 1427.2100, -1651.6100, 13.1000},
	{ 1390.5699, -1802.3300, 13.3900},
	{ 1521.0500, -1874.7200, 13.3300},
	{ 1818.9800, -1908.8300, 12.7800},
	{ 1959.5699, -1849.3400, 13.8600},
	{ 1916.6300, -1754.2000, 13.8600}
};

new penyapu[MAX_PLAYERS];
new mulainyapu[MAX_PLAYERS];
//END


//truckerjob
new Float: truckerjob[3][3] =
{
	{ 1415.0300, 1099.9399, 11.0800},
	{ 1394.2900, 1036.6000, 11.4400},
	{ 1409.2200, 983.4700, 12.2800}
};

new trucker[MAX_PLAYERS];
//END


new ServerStuf[MAX_PLAYERS];
new AyamUp[MAX_PLAYERS];
new TimerStack;
new Seatbelt[MAX_PLAYERS];
new BlackRadar;
new Damage[MAX_PLAYERS][MAX_BODY_PARTS][MAX_WEAPONS];
new sakittimer[MAX_PLAYERS];
new mobiltimer[MAX_PLAYERS];
new Grade[MAX_PLAYERS];
new inSakit[MAX_PLAYERS];
new snowOn[MAX_PLAYERS];
new snowObject[MAX_PLAYERS][20];
new updateTimer[MAX_PLAYERS];
new Text:Textdraw37;
new Text:Textdraw33;
new PlayerText:Textdraw32[MAX_PLAYERS];
new Text:Zones[MAX_PLAYERS];
forward Zones_Update();
enum SAZONE_MAIN { //Betamaster
		SAZONE_NAME[28],
		Float:SAZONE_AREA[6]
};
new levelexp = 3;
static const gSAZones[][SAZONE_MAIN] = {  // Majority of names and area coordinates adopted from Mabako's 'Zones Script' v0.2
	//	NAME                            AREA (Xmin,Ymin,Zmin,Xmax,Ymax,Zmax)
	{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"Los Santos Airport",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"Los Santos Airport",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"Los Santos Airport",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"Los Santos Airport",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"Los Santos Airport",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"Los Santos Airport",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Industrial",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	// Main Zones
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};
new Text3D:mylabel[MAX_PLAYERS];
new TruckingCheck[MAX_PLAYERS];
new Text3D:vehicle3Dtext[MAX_VEHICLES];
new vehiclecallsign[MAX_VEHICLES];


enum playerData {
	pID,
	pAccount,
	pLogged,
	pIP[16],
	pLoginDate[36],
	PlayerText:pTextdraws[83],
	pUsername[MAX_PLAYER_NAME + 1],
	pLoginAttempts,
	pCreated,
	pGender,
	pBirthdate[24],
	pOrigin[32],
	pSkin,
	pEditType,
	pGlasses,
	pHat,
	pBandana,
	Float:pPos[4],
	Float:pHealth,
	pInterior,
	pWorld,
	pCharacter,
	pHospital,
	pHospitalInt,
	pHospitalTime,
	pRepairTime,
	pKilled,
	pMoney,
	pBankMoney,
	pOwnsBillboard,
	pSavings,
	pAdmin,
	pShowFooter,
	pFooterTimer,
	pReportTime,
	pHelpTime,
	pSpectator,
	pJailTime,
	pKicked,
	pMuted,
	pDisplayStats,
	pCharacterMenu,
	pToggleGlasses,
	pToggleHat,
	pToggleBandana,
	pToggleArmor,
	pLastShot,
	pShotTime,
	pInventoryItem,
	pStorageItem,
	pStorageSelect,
	pProductModify,
 	pHelper,
	pGuns[13],
	pAmmo[13],
	pFLAttached, // FlashLight System
	pTLAttached, // Tac FlashLight system
	pTutorial,
	pTutorialTime,
	pTutorialStage,
	pTutorialObject,
	pHouse,
	pBusiness,
	pEntrance,
	pDealership,
	pContact,
	pGasPump,
	pGasStation,
	pEditPump,
	pEditFurniture,
	pEditGate,
	pEditRack,
	pSelectFurniture,
	pRefill,
	pRefillPrice,
	pDealerCar,
	pEditingItem[32 char],
	pHouseSeller,
	pHouseOffered,
	pHouseValue,
	pBusinessSeller,
	pBusinessOffered,
	pBusinessValue,
	pCarSeller,
	pCarOffered,
	pCarValue,
	pShakeOffer,
	pShakeType,
	pFriskOffer,
	pFoodSeller,
	pFoodType,
	pFoodPrice,
	pFactionOffer,
	pFactionOffered,
	pLoanOffer,
	pLoanOffered,
	pHouseLights,
	pPhone,
	pPhoneOff,
	pLottery,
	pLotteryB,
	pHunger,
	pThirst,
	pHungerTime,
	pThirstTime,
	pCooking,
	pCookingTime,
	pCookingHouse,
	pPlayingHours,
	pMinutes,
	Float:pArmorStatus,
	pArmorShown,
	pClothesType,
	pDrivingTest,
	pTestStage,
	pTestCar,
	pTestWarns,
	pFurnitureType,
	pJob,
	pTaxiFee,
	pTaxiTime,
	pTaxiPlayer,
	pTaxiDuty,
	pFirstAid,
	pAidTimer,
	pIncomingCall,
	pCallLine,
	pMining,
	pMineTime,
	pMineCount,
	pMinedRock,
	pCarryTrash,
	pCarryCrate,
	pCrateVehicle,
	pCrafting,
	pOpeningCrate,
	pHarvesting,
	pFaction,
	pFactionID,
	pFactionRank,
	pFactionDivision,
	pFactionEdit,
	pSelectedSlot,
	pOnDuty,
	pTazer,
	pBeanBag,
	pStunned,
	pCuffed,
	pHoldItem,
	pDragged,
	pDraggedBy,
	pDragTimer,
	pWarrants,
	pMDCPlayer,
	pTrackTime,
	pCP,
	pPrisoned,
	pInjured,
	pBroadcast,
	pNewsGuest,
	pSpamCount,
	pCommandCount,
	pMuteTime,
	pTransfer,
	pWaypoint,
	pLocation[32],
	Float:pWaypointPos[3],
	pFuelCan,
	pDisableOOC,
	pDisablePM,
	pDisableFaction,
	pDisableHelper,
	pDisableDonator,
	pDisableBC,
	pDisableSpeedo,
	pNameChange[32],
	pDrugUsed,
	pDrugTime,
	pFingerTime,
	pFingerItem,
	pHealthTime,
	pWeapon,
	pBackpackLoot,
	pGiveItem,
	pChannel,
	pChannel2,
	pChannel3,
	pChannel4,
	pEmergency,
	pDealerCall,
	pDealerCallMP,
	pDealerCallPP,
	pDealerCallSMGP,
	pDealerCallSP,
	pDealerCallRP,
	pDealerCallDP,
	pPlaceAd,
	pAdTime,
	pLoanAsk,
	pLoan,
	pRangeBooth,
	pTargets,
	pTargetLevel,
	pVendorTime,
	pLoopAnim,
	pExecute,
	pBoombox,
	pTakeItems,
	PlayerBar:pDrinkBar,
	pDrinking,
	pDrinkTime,
	pAdvertise[128 char],
	pTaxiCalled,
	pMechanicCalled,
	pSpeedTime,
	pRobATM,
	pMarker,
	pBleeding,
	pBleedTime,
	pLoadType,
	pLoadCrate,
	pLoading,
	pUnloading,
	pUnloadVehicle,
	pShipment,
	pDeliverShipment,
	pHoldWeapon,
	pUsedMagazine,
	pTask,
	pBankTask,
	pStoreTask,
	pTestTask,
	pWarnings,
 	pWarn1[32],
	pWarn2[32],
	pDonator,
	pForumName[32],
	pFightStyle,
	pSorting,
	pSortCrate,
	pHelperDuty,
	pAdminDuty,
	pDonatorDuty,
	pEventDuty,
	pSeekHelp,
	pHUD,
	pMaskID,
	pMaskOn,
	pHideTags,
	pFactionMod,
	pSwatMember,
	pClothes1,
	pClothes2,
	pClothes3,
	pCapacity,
	pPlayRadio,
	pLeaveTime,
	pLeaveIP[16],
	pGraffiti,
	pGraffitiTime,
	pGraffitiColor,
	pGraffitiText[64 char],
	pEditGraffiti,
	pAdminHide,
	pRep,
	pDetectorTime,
	pPicking,
	pPickCar,
	pPickTime,
	pJetpack,
	pFreeze,
	pFreezeTimer,
	Text3D:pNameTag,
	pSpawnPoint,
	pRoadBlock,
	pAFK,
	pDonatorTime
};

// Event mode by Lilx9
enum EventLists // Buat deklarasi enum array string.
{
	EventName[52],
	EventMode,
	EventModeName[52],
	Float:EventHealth,
	Float:EventArmor,
	EventGun1,
	EventGun2,
	EventGun3,
	EventScore,
	TeamRedScore,
	TeamBlueScore,
	EventMoney,
	EventSkin,
	EventSkinRed,
	EventSkinBlue,
	EventLMS,
	Float:EventPos[4],
	Float:EventPosRed[4],
	Float:EventPosBlue[4],
	EventInterior,
	EventVirtual,
	Text3D:PlayerInfo,
	bool:StatusEvent
};
new EventData[EventLists]; //buat deklarasi new dengan kombinasi enum.

enum EventTeeMee {
	red,
	blue,
	Kills
};
new EventTeam[MAX_PLAYERS][EventTeeMee];

new EventSetup[MAX_PLAYERS];
new Text:EventTextDraws[4];
new AllowCMD[MAX_PLAYERS];
// Event system end

enum FishTeeMee {
	FishPos[3],
	FishKG[5],
	FishList[52][5],
	FishName
};
new FishData[MAX_PLAYERS][FishTeeMee];

/* Basball system started
new HavingBall[MAX_PLAYERS];
new Anim[MAX_PLAYERS];
new Ball;
new BallStatus;
new Baller;
new ShootingBall;
new BallBounce;*/

enum reportData {
	rExists,
	rType,
	rPlayer,
	rText[128 char]
};

enum billboardData {
	bbID,
	bbExists,
	bbName[32],
	bbMessage[230],
	bbOwner,
	bbPrice,
	bbRange,
	Float:bbPos[4],
	Text3D:bbText3D
};

new BillBoardData[MAX_BILLBOARDS][billboardData];
new BillboardCheckout[MAX_PLAYERS];

enum inventoryData {
	invExists,
	invID,
	invItem[32 char],
	invModel,
	invQuantity
};

enum houseData {
	houseID,
	houseExists,
	houseOwner,
	housePrice,
	houseAddress[32],
	Float:housePos[4],
	Float:houseInt[4],
	houseInterior,
	houseExterior,
	houseExteriorVW,
	houseLocked,
	houseMoney,
	houseMapIcon,
	Text3D:houseText3D,
	housePickup,
	houseLights,
	houseWeapons[10],
	houseAmmo[10]
};

enum houseStorage {
	hItemID,
	hItemExists,
	hItemName[32 char],
	hItemModel,
	hItemQuantity
};

enum businessData {
	bizID,
	bizExists,
 	bizName[32],
	bizMessage[128],
	bizOwner,
	bizType,
	bizPrice,
	Float:bizPos[4],
	Float:bizInt[4],
	Float:bizSpawn[4],
	Float:bizDeliver[3],
	bizInterior,
	bizExterior,
	bizExteriorVW,
	bizLocked,
	bizVault,
	bizProducts,
	bizPickup,
	bizIcon,
	bizIconA,
	bizShipment,
	bizPrices[20],
	Text3D:bizText3D,
	Text3D:bizDeliverText3D,
	bizDeliverPickup
};

enum droppedItems {
	droppedID,
	droppedItem[32],
	droppedPlayer[24],
	droppedModel,
	droppedQuantity,
	Float:droppedPos[3],
	droppedWeapon,
	droppedAmmo,
	droppedInt,
	droppedWorld,
	droppedObject,
	Text3D:droppedText3D
};

enum rInfo
{
    sCreated,
    Float:sX,
    Float:sY,
    Float:sZ,
    sObject
};
new Roadblocks[MAX_ROADBLOCKS][rInfo];

enum entranceData {
	entranceID,
	entranceExists,
	entranceName[32],
	entrancePass[32],
	entranceIcon,
	entranceLocked,
	Float:entrancePos[4],
	Float:entranceInt[4],
	entranceInterior,
	entranceExterior,
	entranceExteriorVW,
	entranceType,
	entranceCustom,
	entranceWorld,
	entranceForklift[7],
	entrancePickup,
	entranceMapIcon,
	Text3D:entranceText3D
};

enum dealershipCars {
	vehID,
	vehModel,
	vehPrice
};

enum carData {
	carID,
	carExists,
	carModel,
	carOwner,
	Float:carPos[4],
	carColor1,
	carColor2,
	carPaintjob,
	carLocked,
	carMods[14],
	carImpounded,
	carImpoundPrice,
	carFaction,
	carSiren,
	carWeapons[5],
	carAmmo[5],
	carVehicle
};
new inSchool[MAX_PLAYERS];
enum carStorage {
	cItemID,
	cItemExists,
	cItemName[32 char],
	cItemModel,
	cItemQuantity
};

enum pumpData {
	pumpID,
	pumpExists,
	pumpBusiness,
	Float:pumpPos[4],
	pumpFuel,
	pumpObject,
	Text3D:pumpText3D
};

enum furnitureData {
	furnitureID,
	furnitureHouse,
	furnitureExists,
	furnitureModel,
	furnitureName[32],
	Float:furniturePos[3],
	Float:furnitureRot[3],
	furnitureObject
};

enum jobData {
	jobID,
	jobExists,
	jobType,
	Float:jobPos[3],
	Float:jobPoint[3],
	Float:jobDeliver[3],
	jobInterior,
	jobWorld,
	jobPointInt,
	jobPointWorld,
	jobPickups[3],
	Text3D:jobText3D[3]
};

enum contactData {
	contactID,
	contactExists,
	contactName[32],
	contactNumber
};

enum locationData {
	locationID,
	locationExists,
	locationName[32],
	Float:locationPos[3]
};

enum crateData {
	crateID,
	crateExists,
	crateType,
 	Float:cratePos[4],
	crateInterior,
	crateWorld,
	crateObject,
	crateVehicle,
	Text3D:crateText3D
};

enum plantData {
	plantID,
	plantExists,
	plantType,
	plantDrugs,
	Float:plantPos[4],
	plantInterior,
	plantWorld,
	plantObject,
	Text3D:plantText3D
};

enum factionData {
	factionID,
	factionExists,
	factionName[32],
	factionColor,
	factionType,
	factionRanks,
	factionDivisions,
	Float:factionLockerPos[3],
	factionLockerInt,
	factionLockerWorld,
	factionSkins[8],
	factionWeapons[10],
	factionAmmo[10],
	Text3D:factionText3D,
	factionPickup,
	Float:SpawnX,
	Float:SpawnY,
	Float:SpawnZ,
	SpawnInterior,
	SpawnVW
};

enum prisonData {
	prisonDoors[3],
	prisonCells[24],
	prisonDoorOpened[3],
	prisonCellOpened[24]
};

enum arrestPoints {
	arrestID,
	arrestExists,
	Float:arrestPos[3],
	arrestInterior,
	arrestWorld,
	Text3D:arrestText3D,
	arrestPickup
};

enum ticketData {
	ticketID,
	ticketExists,
	ticketFee,
	ticketDate[36],
	ticketReason[64]
};

enum barricadeData {
	cadeExists,
	cadeType,
	Float:cadePos[3],
	cadeObject
};

enum gateData {
	gateID,
	gateExists,
	gateOpened,
	gateModel,
	Float:gateSpeed,
	Float:gateRadius,
	gateTime,
	Float:gatePos[6],
	gateInterior,
	gateWorld,
	Float:gateMove[6],
	gateLinkID,
	gateFaction,
	gatePass[32],
	gateTimer,
	gateObject
};

enum backpackData {
	backpackID,
	backpackExists,
	backpackPlayer,
	backpackHouse,
	backpackVehicle,
	Float:backpackPos[3],
	backpackInterior,
	backpackWorld,
	Text3D:backpackText3D,
	backpackObject
};

enum backpackItems {
	bItemID,
	bItemBackpack,
	bItemExists,
	bItemName[32],
	bItemModel,
	bItemQuantity
};

enum impoundData {
	impoundID,
	impoundExists,
	Float:impoundLot[3],
	Float:impoundRelease[4],
	Text3D:impoundText3D,
	impoundPickup
};

enum atmData {
	atmID,
	atmExists,
	Float:atmPos[4],
	atmInterior,
	atmWorld,
	atmObject,
	Text3D:atmText3D
};

enum garbageData {
	garbageID,
	garbageExists,
 	garbageModel,
	garbageCapacity,
	Float:garbagePos[4],
	garbageInterior,
	garbageWorld,
	Text3D:garbageText3D,
	garbageObject
};

enum vendorData {
	vendorID,
	vendorExists,
	vendorType,
	Float:vendorPos[4],
	vendorInterior,
	vendorWorld,
	Text3D:vendorText3D,
	vendorObject
};

enum boomboxData {
	boomboxPlaced,
	Float:boomboxPos[3],
	boomboxInterior,
	boomboxWorld,
	boomboxObject,
	boomboxURL[128 char],
	Text3D:boomboxText3D
};

enum rackData {
	rackID,
	rackExists,
	rackHouse,
	Float:rackPos[4],
	rackInterior,
	rackWorld,
	rackWeapons[4],
	rackAmmo[4],
	rackObjects[5],
	Text3D:rackText3D
};

enum speedData {
	speedID,
	speedExists,
	Float:speedPos[4],
	Float:speedRange,
	Float:speedLimit,
	speedObject,
	Text3D:speedText3D
};

enum graffitiData {
	graffitiID,
	graffitiExists,
	Float:graffitiPos[4],
	graffitiIcon,
	graffitiObject,
	graffitiColor,
	graffitiText[64]
};

enum detectorData {
	detectorID,
	detectorExists,
	Float:detectorPos[4],
	detectorInterior,
	detectorWorld,
	detectorObject[2]
};

new g_iHandle;
new g_StatusOOC;
new g_StatusEvent;
new g_TaxVault;
new g_ServerLocked;
new Text:gServerTextdraws[4];

new g_ServerRestart;
new g_RestartTime;
new g_BoothUsed[MAX_BOOTHS];
new g_BoothObject[MAX_BOOTHS] = {-1, ...};

new g_aFireObjects[36] = {INVALID_OBJECT_ID, ...};
new g_aFireExtinguished[36];

new PrisonData[prisonData];
new Float:PrisonCells[24][3];

new GraffitiData[MAX_GRAFFITI_POINTS][graffitiData];
new MetalDetectors[MAX_METAL_DETECTORS][detectorData];
new BarricadeData[MAX_BARRICADES][barricadeData];

new VendorData[MAX_VENDORS][vendorData];
new SpeedData[MAX_SPEED_CAMERAS][speedData];

new BoomboxData[MAX_PLAYERS][boomboxData];
new RackData[MAX_WEAPON_RACKS][rackData];

new ATMData[MAX_ATM_MACHINES][atmData];
new GarbageData[MAX_GARBAGE_BINS][garbageData];

new BackpackData[MAX_BACKPACKS][backpackData];
new BackpackItems[MAX_BACKPACK_ITEMS][backpackItems];

new BackpackListed[MAX_PLAYERS][MAX_BACKPACK_CAPACITY];
new ImpoundData[MAX_IMPOUND_LOTS][impoundData];

new PlayerData[MAX_PLAYERS][playerData];
new Float:AccessoryData[MAX_PLAYERS][3][9];
new TicketData[MAX_PLAYERS][MAX_PLAYER_TICKETS][ticketData];
new ListedVehicles[MAX_PLAYERS][MAX_OWNABLE_CARS];

new InventoryData[MAX_PLAYERS][MAX_INVENTORY][inventoryData];
new ContactData[MAX_PLAYERS][MAX_CONTACTS][contactData];
new LocationData[MAX_PLAYERS][MAX_GPS_LOCATIONS][locationData];

new ListedFurniture[MAX_PLAYERS][MAX_HOUSE_FURNITURE];
new NearestItems[MAX_PLAYERS][MAX_LISTED_ITEMS];
new ListedContacts[MAX_PLAYERS][MAX_CONTACTS];

new ReportData[MAX_REPORTS][reportData];
new ArrestData[MAX_ARREST_POINTS][arrestPoints];

new BusinessData[MAX_BUSINESSES][businessData];
new PumpData[MAX_GAS_PUMPS][pumpData];
new DealershipCars[MAX_BUSINESSES][MAX_DEALERSHIP_CARS][dealershipCars];

new DroppedItems[MAX_DROPPED_ITEMS][droppedItems];
new EntranceData[MAX_ENTRANCES][entranceData];

new CarData[MAX_DYNAMIC_CARS][carData];
new CarStorage[MAX_DYNAMIC_CARS][MAX_CAR_STORAGE][carStorage];

new HouseData[MAX_HOUSES][houseData];
new HouseStorage[MAX_HOUSES][MAX_HOUSE_STORAGE][houseStorage];
new FurnitureData[MAX_FURNITURE][furnitureData];

new JobData[MAX_DYNAMIC_JOBS][jobData];
new CrateData[MAX_CRATES][crateData];
new PlantData[MAX_DRUG_PLANTS][plantData];

new FactionData[MAX_FACTIONS][factionData];
new FactionRanks[MAX_FACTIONS][15][32];
new FactionDivisions[MAX_FACTIONS][5][32];
new GateData[MAX_GATES][gateData];

new AssistanceNeeded[MAX_PLAYERS];
new Assisted[MAX_PLAYERS];

new robpossible;
new RobberyTimer[MAX_PLAYERS] = {-1, ...};
new	RobberyCounter[MAX_PLAYERS];


new IsInBus[MAX_PLAYERS];
new Timer1[MAX_PLAYERS];
new Timer2[MAX_PLAYERS];

new IsInShml[MAX_PLAYERS];
new IsInBa[MAX_PLAYERS];

new IsInNev[MAX_PLAYERS];

new Intropic[MAX_PLAYERS];

new InAmbulance[MAX_PLAYERS];
new InEnforcer[MAX_PLAYERS];
new InJourney[MAX_PLAYERS];
new InRaindance[MAX_PLAYERS];


/*
	0 to 10: Character textdraws
	11 to 22: ID card
	23 to 33: Character customization
	34 to 38: Speedometer
	39: Footer textdraw
	40 to 49: Stats textdraw
	50 to 57: Character textdraw
	58 to 61: Tutorial textdraws
	62: House light
	63 to 64: Hunger and thirst (percent)
	65 to 66: Hunger and thirst (model icons)
	67 to 68: Armor
	69: GPS
*/
new PlayerText:Textdrawhud[MAX_PLAYERS];
new PlayerText:Textdrawhud1[MAX_PLAYERS];
new PlayerCharacters[MAX_PLAYERS][3][MAX_PLAYER_NAME + 1];

enum coreVehicles {
	vehFuel,
	vehWindowsDown,
	vehTemporary,
	vehLoads,
	vehLoadType,
	vehCrate,
	vehTrash,
	vehRepairing,
	vehSirenOn,
	vehSirenObject,
	vehRadio,
	vehURL[128 char],
	Float:vehLoadHealth,
 	Float:vehLoadPos[3]
};

new CoreVehicles[MAX_VEHICLES][coreVehicles];

stock const g_aWeatherRotations[] = {
	14, 1, 7, 3, 5, 12, 9, 8, 15
};

enum eData
{
	explosiveID,
	explosiveOwner,
	explosiveTime,
	explosiveObject,
	explosiveSlot,
	Float:explosivePosition[3],
	Text3D:explosiveLabel
}

new explosiveData[MAX_EXPLOSIVES][eData];

enum e_Bomb_Vehicles
{
			bv_i_ArmedType,
			bv_i_ExplosionTimer,
			bv_i_BombOwner,
	bool: 	bv_b_BombActivated,
	bool:	bv_b_BombDisarmed
};

enum e_InventoryItems {
	e_InventoryItem[32],
	e_InventoryModel
};

new
	g_Bomb_Vehicles[MAX_VEHICLES][e_Bomb_Vehicles];

new const g_aInventoryItems[][e_InventoryItems] = {
	{"Marijuana", 1578},
	{"Cocaine", 1575},
	{"Heroin", 1577},
	{"Steroids", 1241},
	{"Marijuana Seeds", 1578},
	{"Cocaine Seeds", 1575},
	{"Heroin Opium Seeds", 1577},
	{"Golf Club", 333},
	{"Knife", 335},
	{"Shovel", 337},
	{"Katana", 339},
	{"Colt 45", 346},
	{"Desert Eagle", 348},
	{"Micro SMG", 352},
	{"Tec-9", 372},
	{"MP5", 353},
	{"Shotgun", 349},
	{"AK-47", 355},
	{"M4", 356},
	{"Rifle", 357},
	{"Sniper", 358},
	{"Magazine", 2039},
	{"Cooked Burger", 2703},
	{"Cooked Pizza", 2702},
	{"Car License", 1581},
	{"Weapon License A", 1581},
	{"Cellphone", 330},
	{"GPS System", 18875},
	{"Spray Can", 365},
	{"Water Bottle", 2958},
	{"Soda", 1543},
    {"Fuel Can", 1650},
	{"Crowbar", 18634},
	{"Boombox", 2226},
	{"Mask", 19036},
	{"First Aid", 1580},
	{"Repair Kit", 920},
	{"NOS Canister", 1010},
	{"Frozen Pizza", 2814},
	{"Frozen Burger", 2768},
	{"Ammo Cartridge", 2358},
	{"Armored Vest", 19142},
	{"Empty Bottle", 1484},
	{"Cardboard", 928},
	{"Chicken", 2663},
	{"Portable Radio", 18868},
	{"Sale Documents", 19805},
	{"Pen", 322},
	{"Lighter", 19998},
	{"Screwdriver", 18644},
	{"Credit Card", 1581},
	{"Motorbike License", 1581},
	{"Truck License", 1581},
	{"Airplane License", 1581},
	{"Helicopter License", 1581},
	{"Weapon License B", 1581},
	{"Weapon License C", 1581},
	{"Bomb", 1654}
};

new const Float:arrHospitalDeliver[2][3] = {
	{1177.8599, -1308.3982, 13.8301}, // -204.1655,-1735.7399,675.7687
	{1243.9304, 331.4186, 19.5547}
};

new const Float:arrHospitalSpawns[2][4] = {
	{1172.8372, -1325.3186, 15.4000, 270.0000},
	{1241.6802, 326.4038, 19.7555, 335.0000}
};

new const Float:g_arrWeaponDamage[] = {
	1.32, 1.32, 4.62, 4.62, 2.64, 4.62, 4.62, 4.62, 2.64, 13.53,
	4.62, 2.64, 4.62, 2.64, 4.62, 2.64, 0.00, 0.00, 0.00, 0.00,
	0.00, 0.00, 8.25, 13.2, 46.2, 49.5, 49.5, 39.6, 6.60, 8.25,
	9.90, 9.90, 6.60, 24.75, 41.25, 0.00, 0.00, 0.00, 46.2, 0.00,
	0.00, 2.64, 2.64, 0.00, 0.00, 0.00, 1.32
};


new const g_aWeaponSlots[] = {
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, 0, 0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12, 9, 9, 9, 11, 11, 11
};

/*new const g_aPreloadLibs[][] = {
    {"COLT45"},
	{"SILENCED"},
	{"PYTHON"},
	{"BUDDY"},
	{"RIFLE"},
	{"TEC"},
	{"GRENADE"},
	{"CRACK"},
	{"BASEBALL"},
	{"BSKTBALL"},
	{"DEALER"},
	{"MISC"},
	{"CARRY"},
	{"CRACK"},
	{"GRAFFITI"},
	{"VENDING"},
	{"SMOKING"}
};*/

new const g_aPreloadLibs[][] =
{
	"AIRPORT",      "ATTRACTORS",   "BAR",          "BASEBALL",     "BD_FIRE",
	"BEACH",        "BENCHPRESS",   "BF_INJECTION", "BIKE_DBZ",     "BIKED",
	"BIKEH",        "BIKELEAP",     "BIKES",        "BIKEV",        "BLOWJOBZ",
	"BMX",          "BOMBER",       "BOX",          "BSKTBALL",     "BUDDY",
	"BUS",          "CAMERA",       "CAR",          "CAR_CHAT",     "CARRY",
	"CASINO",       "CHAINSAW",     "CHOPPA",       "CLOTHES",      "COACH",
	"COLT45",       "COP_AMBIENT",  "COP_DVBYZ",    "CRACK",        "CRIB",
	"DAM_JUMP",     "DANCING",      "DEALER",       "DILDO",        "DODGE",
	"DOZER",        "DRIVEBYS",     "FAT",          "FIGHT_B",      "FIGHT_C",
	"FIGHT_D",      "FIGHT_E",      "FINALE",       "FINALE2",      "FLAME",
	"FLOWERS",      "FOOD",         "FREEWEIGHTS",  "GANGS",        "GFUNK",
	"GHANDS",       "GHETTO_DB",    "GOGGLES",      "GRAFFITI",     "GRAVEYARD",
	"GRENADE",      "GYMNASIUM",    "HAIRCUTS",     "HEIST9",       "INT_HOUSE",
	"INT_OFFICE",   "INT_SHOP",     "JST_BUISNESS", "KART",         "KISSING",
	"KNIFE",        "LAPDAN1",      "LAPDAN2",      "LAPDAN3",      "LOWRIDER",
	"MD_CHASE",     "MD_END",       "MEDIC",        "MISC",         "MTB",
	"MUSCULAR",     "NEVADA",       "ON_LOOKERS",   "OTB",          "PARACHUTE",
	"PARK",         "PAULNMAC",     "PED",          "PLAYER_DVBYS", "PLAYIDLES",
	"POLICE",       "POOL",         "POOR",         "PYTHON",       "QUAD",
	"QUAD_DBZ",     "RAPPING",      "RIFLE",        "RIOT",         "ROB_BANK",
	"ROCKET",       "RUNNINGMAN",   "RUSTLER",      "RYDER",        "SCRATCHING",
	"SEX",          "SHAMAL",       "SHOP",         "SHOTGUN",      "SILENCED",
	"SKATE",        "SMOKING",      "SNIPER",       "SNM",          "SPRAYCAN",
	"STRIP",        "SUNBATHE",     "SWAT",         "SWEET",        "SWIM",
	"SWORD",        "TANK",         "TATTOOS",      "TEC",          "TRAIN",
	"TRUCK",        "UZI",          "VAN",          "VENDING",      "VORTEX",
	"WAYFARER",     "WEAPONS",      "WOP",          "WUZI"
};

enum houseInteriors {
	eHouseInterior,
	Float:eHouseX,
	Float:eHouseY,
	Float:eHouseZ,
	Float:eHouseAngle
};

new const Float:arrHouseInteriors[20][houseInteriors] = {
	{10, 2269.8772, -1210.3240, 1047.5625, 90.0000},
    {2, 2468.2576, -1698.2361, 1013.5078, 90.0000},
	{3, 2495.8711, -1693.0996, 1014.7422, 180.0000},
	{5, 2233.7888, -1114.2689, 1050.8828, 0.0000},
	{9, 2317.8015, -1026.2113, 1050.2178, 0.0000},
	{3, 235.2923, 1187.3684, 1080.2578, 0.0000},
	{2, 226.2912, 1240.0554, 1082.1406, 90.0000},
	{1, 223.1618, 1287.5175, 1082.1406, 0.0000},
	{5, 226.9281, 1114.2813, 1080.9962, 270.0000},
	{15, 295.1485, 1473.1080, 1080.2578, 0.0000},
	{10, 23.9584, 1340.6075, 1084.3750, 0.0000},
	{4, 222.0425, 1140.7565, 1082.6094, 0.0000},
	{12, 2324.4209, -1148.9365, 1050.7101, 0.0000},
	{4, -261.1430, 1456.6396, 1084.3672, 90.0000},
	{5, 22.9676, 1403.8368, 1084.4297, 0.0000},
	{5, 140.3088, 1366.8196, 1083.8594, 0.0000},
	{6, 234.3149, 1064.2772, 1084.2114, 0.0000},
	{7, 225.7000, 1022.0012, 1084.0161, 0.0000},
	{5, 1298.9750, -796.4567, 1084.0078, 0.0000},
	{15, -283.8687, 1471.1174, 1084.3750, 90.0000}
};

new const Float:arrBoothPositions[MAX_BOOTHS][3] = {
    {300.5000, -138.5660, 1004.0625},
	{300.5000, -137.0286, 1004.0625},
	{300.5000, -135.5336, 1004.0625},
	{300.5000, -134.0436, 1004.0625},
	{300.5000, -132.5637, 1004.0625},
	{300.5000, -131.0782, 1004.0625},
	{300.5000, -129.5582, 1004.0625},
	{300.5000, -128.0786, 1004.0625}
};

new stock g_arrVehicleNames[][] = {
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
    "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
    "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach",
    "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
    "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
    "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
    "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
    "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
    "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
    "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
    "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt", "Tanker", "Roadtrain",
    "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
    "Fortune", "Cadrona", "SWAT Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
    "Blade", "Streak", "Freight", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
    "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
    "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
    "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "LSPD Car", "SFPD Car", "LVPD Car",
    "Police Rancher", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
    "Boxville", "Tiller", "Utility Trailer"
};

enum e_InteriorData {
	e_InteriorName[32],
	e_InteriorID,
	Float:e_InteriorX,
	Float:e_InteriorY,
	Float:e_InteriorZ
};

new const g_arrInteriorData[][e_InteriorData] = {
	{"24/7 1", 17, -25.884498, -185.868988, 1003.546875},
    {"24/7 2", 10, 6.091179, -29.271898, 1003.549438},
    {"24/7 3", 18, -30.946699, -89.609596, 1003.546875},
    {"24/7 4", 16, -25.132598, -139.066986, 1003.546875},
    {"24/7 5", 4, -27.312299, -29.277599, 1003.557250},
    {"24/7 6", 6, -26.691598, -55.714897, 1003.546875},
    {"Airport Ticket", 14, -1827.147338, 7.207417, 1061.143554},
    {"Airport Baggage", 14, -1861.936889, 54.908092, 1061.143554},
    {"Shamal", 1, 1.808619, 32.384357, 1199.593750},
    {"Andromada", 9, 315.745086, 984.969299, 1958.919067},
    {"Ammunation 1", 1, 286.148986, -40.644397, 1001.515625},
    {"Ammunation 2", 4, 286.800994, -82.547599, 1001.515625},
    {"Ammunation 3", 6, 296.919982, -108.071998, 1001.515625},
    {"Ammunation 4", 7, 314.820983, -141.431991, 999.601562},
    {"Ammunation 5", 6, 316.524993, -167.706985, 999.593750},
    {"Ammunation Booths", 7, 302.292877, -143.139099, 1004.062500},
    {"Ammunation Range", 7, 298.507934, -141.647048, 1004.054748},
    {"Blastin Fools Hallway", 3, 1038.531372, 0.111030, 1001.284484},
    {"Budget Inn Motel Room", 12, 444.646911, 508.239044, 1001.419494},
    {"Jefferson Motel", 15, 2215.454833, -1147.475585, 1025.796875},
    {"Off Track Betting Shop", 3, 833.269775, 10.588416, 1004.179687},
    {"Sex Shop", 3, -103.559165, -24.225606, 1000.718750},
    {"Meat Factory", 1, 963.418762, 2108.292480, 1011.030273},
    {"Zero's RC shop", 6, -2240.468505, 137.060440, 1035.414062},
    {"Dillimore Gas", 0, 663.836242, -575.605407, 16.343263},
    {"Catigula's Basement", 1, 2169.461181, 1618.798339, 999.976562},
    {"FC Janitor Room", 10, 1889.953369, 1017.438293, 31.882812},
    {"Woozie's Office", 1, -2159.122802, 641.517517, 1052.381713},
    {"Binco", 15, 207.737991, -109.019996, 1005.132812},
    {"Didier Sachs", 14, 204.332992, -166.694992, 1000.523437},
    {"Prolaps", 3, 207.054992, -138.804992, 1003.507812},
    {"Suburban", 1, 203.777999, -48.492397, 1001.804687},
    {"Victim", 5, 226.293991, -7.431529, 1002.210937},
    {"Zip", 18, 161.391006, -93.159156, 1001.804687},
    {"Club", 17, 493.390991, -22.722799, 1000.679687},
    {"Bar", 11, 501.980987, -69.150199, 998.757812},
    {"Lil' Probe Inn", 18, -227.027999, 1401.229980, 27.765625},
    {"Jay's Diner", 4, 457.304748, -88.428497, 999.554687},
    {"Gant Bridge Diner", 5, 454.973937, -110.104995, 1000.077209},
    {"Secret Valley Diner", 6, 435.271331, -80.958938, 999.554687},
    {"World of Coq", 1, 452.489990, -18.179698, 1001.132812},
    {"Welcome Pump", 1, 681.557861, -455.680053, -25.609874},
    {"Burger Shot", 10, 375.962463, -65.816848, 1001.507812},
    {"Cluckin' Bell", 9, 369.579528, -4.487294, 1001.858886},
    {"Well Stacked Pizza", 5, 373.825653, -117.270904, 1001.499511},
    {"Rusty Browns Donuts", 17, 381.169189, -188.803024, 1000.632812},
    {"Denise's Room", 1, 244.411987, 305.032989, 999.148437},
    {"Katie's Room", 2, 271.884979, 306.631988, 999.148437},
    {"Helena's Room", 3, 291.282989, 310.031982, 999.148437},
    {"Michelle's Room", 4, 302.180999, 300.722991, 999.148437},
    {"Barbara's Room", 5, 322.197998, 302.497985, 999.148437},
    {"Millie's Room", 6, 346.870025, 309.259033, 999.155700},
    {"Sherman Dam", 17, -959.564392, 1848.576782, 9.000000},
    {"Planning Dept", 3, 384.808624, 173.804992, 1008.382812},
    {"Area 51", 0, 223.431976, 1872.400268, 13.734375},
    {"LS Gym", 5, 772.111999, -3.898649, 1000.728820},
    {"SF Gym", 6, 774.213989, -48.924297, 1000.585937},
    {"LV Gym", 7, 773.579956, -77.096694, 1000.655029},
    {"B-Dup's House", 3, 1527.229980, -11.574499, 1002.097106},
    {"B-Dup's Crack Pad", 2, 1523.509887, -47.821197, 1002.130981},
    {"CJ's House", 3, 2496.049804, -1695.238159, 1014.742187},
    {"Madd Doggs Mansion", 5, 1267.663208, -781.323242, 1091.906250},
    {"OG Loc's House", 3, 513.882507, -11.269994, 1001.565307},
    {"Ryders House", 2, 2454.717041, -1700.871582, 1013.515197},
    {"Sweet's House", 1, 2527.654052, -1679.388305, 1015.498596},
    {"Crack Factory", 2, 2543.462646, -1308.379882, 1026.728393},
    {"Big Spread Ranch", 3, 1212.019897, -28.663099, 1000.953125},
    {"Fanny batters", 6, 761.412963, 1440.191650, 1102.703125},
    {"Strip Club", 2, 1204.809936, -11.586799, 1000.921875},
    {"Strip Club (Private Room)", 2, 1204.809936, 13.897239, 1000.921875},
    {"Unnamed Brothel", 3, 942.171997, -16.542755, 1000.929687},
    {"Tiger Skin Brothel", 3, 964.106994, -53.205497, 1001.124572},
    {"Pleasure Domes", 3, -2640.762939, 1406.682006, 906.460937},
    {"Liberty City Outside", 1, -729.276000, 503.086944, 1371.971801},
    {"Liberty City Inside", 1, -794.806396, 497.738037, 1376.195312},
    {"Gang House", 5, 2350.339843, -1181.649902, 1027.976562},
    {"Colonel Furhberger's", 8, 2807.619873, -1171.899902, 1025.570312},
    {"Crack Den", 5, 318.564971, 1118.209960, 1083.882812},
    {"Warehouse 1", 1, 1412.639892, -1.787510, 1000.924377},
    {"Warehouse 2", 18, 1302.519897, -1.787510, 1001.028259},
    {"Sweet's Garage", 0, 2522.000000, -1673.383911, 14.866223},
    {"Lil' Probe Inn Toilet", 18, -221.059051, 1408.984008, 27.773437},
    {"Unused Safe House", 12, 2324.419921, -1145.568359, 1050.710083},
    {"RC Battlefield", 10, -975.975708, 1060.983032, 1345.671875},
    {"Barber 1", 2, 411.625976, -21.433298, 1001.804687},
    {"Barber 2", 3, 418.652984, -82.639793, 1001.804687},
    {"Barber 3", 12, 412.021972, -52.649898, 1001.898437},
    {"Tatoo Parlor 1", 16, -204.439987, -26.453998, 1002.273437},
    {"Tatoo Parlor 2", 17, -204.439987, -8.469599, 1002.273437},
    {"Tatoo Parlor 3", 3, -204.439987, -43.652496, 1002.273437},
    {"LS Police HQ", 6, 246.783996, 63.900199, 1003.640625},
    {"SF Police HQ", 10, 246.375991, 109.245994, 1003.218750},
    {"LV Police HQ", 3, 288.745971, 169.350997, 1007.171875},
    {"Driving School", 3, -2029.798339, -106.675910, 1035.171875},
    {"8-Track", 7, -1398.065307, -217.028900, 1051.115844},
    {"Bloodbowl", 15, -1398.103515, 937.631164, 1036.479125},
    {"Dirt Track", 4, -1444.645507, -664.526000, 1053.572998},
    {"Kickstart", 14, -1465.268676, 1557.868286, 1052.531250},
    {"Vice Stadium", 1, -1401.829956, 107.051300, 1032.273437},
    {"SF Garage", 0, -1790.378295, 1436.949829, 7.187500},
    {"LS Garage", 0, 1643.839843, -1514.819580, 13.566620},
    {"SF Bomb Shop", 0, -1685.636474, 1035.476196, 45.210937},
    {"Blueberry Warehouse", 0, 76.632553, -301.156829, 1.578125},
    {"LV Warehouse 1", 0, 1059.895996, 2081.685791, 10.820312},
    {"LV Warehouse 2 (hidden part)", 0, 1059.180175, 2148.938720, 10.820312},
    {"Caligula's Hidden Room", 1, 2131.507812, 1600.818481, 1008.359375},
    {"Bank", 0, 2315.952880, -1.618174, 26.742187},
    {"Bank (Behind Desk)", 0, 2319.714843, -14.838361, 26.749565},
    {"New LSPD", 0,	230.9909,	79.2285,	1043.4015},
    {"LS Atrium", 18, 1710.433715, -1669.379272, 20.225049}
};

new const Float:g_arrDrivingCheckpoints[][] = {
    {-2064.9561, -67.7125, 34.8247},
    {-2110.5261, -67.8857, 34.8247},
    {-2154.2473, -67.6854, 34.8231},
    {-2169.3850, -82.5202, 34.8302},
    {-2169.8767, -114.5743, 34.8188},
    {-2170.6482, -162.7804, 34.8249},
    {-2215.5796, -187.5162, 34.8745},
    {-2244.0376, -187.6771, 34.8235},
    {-2259.1860, -202.9163, 34.9007},
    {-2259.7864, -253.0544, 39.7875},
    {-2260.3638, -300.5378, 48.1640},
    {-2259.5361, -339.2552, 50.5190},
    {-2258.4385, -371.1333, 50.5193},
    {-2236.2454, -416.2657, 50.5155},
    {-2195.2356, -459.0606, 49.3517},
    {-2155.1711, -497.7458, 41.1217},
    {-2117.1301, -536.1792, 34.2394},
    {-2059.1565, -577.5410, 29.0998},
    {-1984.6453, -582.2720, 25.5633},
    {-1925.5862, -583.2345, 24.0926},
    {-1885.5591, -583.6432, 24.0940},
    {-1821.1207, -583.9514, 15.9855},
    {-1816.3672, -559.6774, 15.8619},
    {-1821.3180, -527.9517, 14.6263},
    {-1819.6934, -462.3056, 14.6151},
    {-1809.8923, -396.5690, 16.1884},
    {-1798.9331, -317.3351, 24.3122},
    {-1796.9186, -239.6917, 17.8804},
    {-1797.0546, -168.9667, 9.4126},
    {-1797.6467, -125.6053, 5.1712},
    {-1811.8171, -114.1203, 5.1504},
    {-1841.5179, -114.4944, 5.1483},
    {-1882.5660, -106.9792, 14.5634},
    {-1911.3077, -79.0253, 24.6949},
    {-1938.0209, -62.3110, 25.2069},
    {-1975.7996, -64.1764, 27.7167},
    {-2014.0769, -67.5033, 34.8182},
    {-2040.5736, -67.4500, 34.8250},
    {-2046.2883, -84.8129, 34.8103},
    {-2068.5259, -84.6942, 34.8201}
};

new const Float:g_arrPrisonSpawns[][] = {
	{1217.8539,-1344.5790,796.7456,90.0000},
    {1217.8678,-1341.3213,796.7456,90.0000},
    {1217.2465,-1337.8044,796.7456,90.0000},
    {1217.9287,-1334.7639,796.7456,90.0000},
    {1217.8746,-1331.4298,796.7456,90.0000},
    {1217.5286,-1328.4138,796.7456,90.0000},
    {1202.8230,-1327.8770,796.7505,270.0000},
    {1203.4220,-1331.0464,796.7505,270.0000},
    {1203.0822,-1334.2010,796.7505,270.0000},
    {1203.3068,-1337.5503,796.7505,270.0000},
    {1203.2917,-1340.3719,796.7505,270.0000},
    {1203.1689,-1343.8762,796.7505,270.0000},
    {1203.0190,-1343.8212,800.2859,270.0000},
    {1203.1254,-1340.6129,800.2859,270.0000},
    {1203.5780,-1337.3750,800.2859,270.0000},
    {1203.7159,-1334.1960,800.2859,270.0000},
    {1203.6014,-1331.0227,800.2859,270.0000},
    {1203.2318,-1327.8788,800.2859,270.0000},
    {1217.8292,-1328.4882,800.2859,90.0000},
    {1217.6486,-1331.5758,800.2859,90.0000},
    {1217.9084,-1335.0168,800.2859,90.0000},
    {1217.6915,-1338.0559,800.2859,90.0000},
    {1217.5966,-1341.0157,800.2859,90.0000},
    {1217.3633,-1344.3766,800.2859,90.0000}
};

new const g_aLegalMods[][] = {
    {400, 1024, 1021, 1020, 1019, 1018, 1013, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {401, 1145, 1144, 1143, 1142, 1020, 1019, 1017, 1013, 1007, 1006, 1005, 1004, 1003, 1001, 0000, 0000, 0000, 0000},
    {404, 1021, 1020, 1019, 1017, 1016, 1013, 1007, 1002, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {405, 1023, 1021, 1020, 1019, 1018, 1014, 1001, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {410, 1024, 1023, 1021, 1020, 1019, 1017, 1013, 1007, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {415, 1023, 1019, 1018, 1017, 1007, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {418, 1021, 1020, 1016, 1006, 1002, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {420, 1021, 1019, 1005, 1004, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {421, 1023, 1021, 1020, 1019, 1018, 1016, 1014, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {422, 1021, 1020, 1019, 1017, 1013, 1007, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {426, 1021, 1019, 1006, 1005, 1004, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {436, 1022, 1021, 1020, 1019, 1017, 1013, 1007, 1006, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {439, 1145, 1144, 1143, 1142, 1023, 1017, 1013, 1007, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {477, 1021, 1020, 1019, 1018, 1017, 1007, 1006, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {478, 1024, 1022, 1021, 1020, 1013, 1012, 1005, 1004, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {489, 1024, 1020, 1019, 1018, 1016, 1013, 1006, 1005, 1004, 1002, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {491, 1145, 1144, 1143, 1142, 1023, 1021, 1020, 1019, 1018, 1017, 1014, 1007, 1003, 0000, 0000, 0000, 0000, 0000},
    {492, 1016, 1006, 1005, 1004, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {496, 1143, 1142, 1023, 1020, 1019, 1017, 1011, 1007, 1006, 1003, 1002, 1001, 0000, 0000, 0000, 0000, 0000, 0000},
    {500, 1024, 1021, 1020, 1019, 1013, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {516, 1021, 1020, 1019, 1018, 1017, 1016, 1015, 1007, 1004, 1002, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {517, 1145, 1144, 1143, 1142, 1023, 1020, 1019, 1018, 1017, 1016, 1007, 1003, 1002, 0000, 0000, 0000, 0000, 0000},
    {518, 1145, 1144, 1143, 1142, 1023, 1020, 1018, 1017, 1013, 1007, 1006, 1005, 1003, 1001, 0000, 0000, 0000, 0000},
    {527, 1021, 1020, 1018, 1017, 1015, 1014, 1007, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {529, 1023, 1020, 1019, 1018, 1017, 1012, 1011, 1007, 1006, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {534, 1185, 1180, 1179, 1178, 1127, 1126, 1125, 1124, 1123, 1122, 1106, 1101, 1100, 0000, 0000, 0000, 0000, 0000},
    {535, 1121, 1120, 1119, 1118, 1117, 1116, 1115, 1114, 1113, 1110, 1109, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {536, 1184, 1183, 1182, 1181, 1128, 1108, 1107, 1105, 1104, 1103, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {540, 1145, 1144, 1143, 1142, 1024, 1023, 1020, 1019, 1018, 1017, 1007, 1006, 1004, 1001, 0000, 0000, 0000, 0000},
    {542, 1145, 1144, 1021, 1020, 1019, 1018, 1015, 1014, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {546, 1145, 1144, 1143, 1142, 1024, 1023, 1019, 1018, 1017, 1007, 1006, 1004, 1002, 1001, 0000, 0000, 0000, 0000},
    {547, 1143, 1142, 1021, 1020, 1019, 1018, 1016, 1003, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {549, 1145, 1144, 1143, 1142, 1023, 1020, 1019, 1018, 1017, 1012, 1011, 1007, 1003, 1001, 0000, 0000, 0000, 0000},
    {550, 1145, 1144, 1143, 1142, 1023, 1020, 1019, 1018, 1006, 1005, 1004, 1003, 1001, 0000, 0000, 0000, 0000, 0000},
    {551, 1023, 1021, 1020, 1019, 1018, 1016, 1006, 1005, 1003, 1002, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {558, 1168, 1167, 1166, 1165, 1164, 1163, 1095, 1094, 1093, 1092, 1091, 1090, 1089, 1088, 0000, 0000, 0000, 0000},
    {559, 1173, 1162, 1161, 1160, 1159, 1158, 1072, 1071, 1070, 1069, 1068, 1067, 1066, 1065, 0000, 0000, 0000, 0000},
    {560, 1170, 1169, 1141, 1140, 1139, 1138, 1033, 1032, 1031, 1030, 1029, 1028, 1027, 1026, 0000, 0000, 0000, 0000},
    {561, 1157, 1156, 1155, 1154, 1064, 1063, 1062, 1061, 1060, 1059, 1058, 1057, 1056, 1055, 1031, 1030, 1027, 1026},
    {562, 1172, 1171, 1149, 1148, 1147, 1146, 1041, 1040, 1039, 1038, 1037, 1036, 1035, 1034, 0000, 0000, 0000, 0000},
    {565, 1153, 1152, 1151, 1150, 1054, 1053, 1052, 1051, 1050, 1049, 1048, 1047, 1046, 1045, 0000, 0000, 0000, 0000},
    {567, 1189, 1188, 1187, 1186, 1133, 1132, 1131, 1130, 1129, 1102, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {575, 1177, 1176, 1175, 1174, 1099, 1044, 1043, 1042, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {576, 1193, 1192, 1191, 1190, 1137, 1136, 1135, 1134, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {580, 1023, 1020, 1018, 1017, 1007, 1006, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {589, 1145, 1144, 1024, 1020, 1018, 1017, 1016, 1013, 1007, 1006, 1005, 1004, 1000, 0000, 0000, 0000, 0000, 0000},
    {600, 1022, 1020, 1018, 1017, 1013, 1007, 1006, 1005, 1004, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {603, 1145, 1144, 1143, 1142, 1024, 1023, 1020, 1019, 1018, 1017, 1007, 1006, 1001, 0000, 0000, 0000, 0000, 0000}
};
new g_hMaleSkins[16] = {
    78,79,134,135,137,181,212,213,230,239,252,128,26,234,221,220
};

new g_hAdminSkins[2] = {
    217,193
};

new g_hFemaleSkins[14] = {
    65,77,129,130,131,157,196,197,198,201,215,224,225,238
};
new g_aMaleSkins[185] = {
	1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60,
	61, 62, 66, 68, 72, 73, 78, 79, 80, 81, 82, 83, 84, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 142, 143, 144, 146,
	147, 153, 154, 155, 156, 158, 159, 160, 161, 162, 167, 168, 170, 171, 173, 174, 175, 176,
	177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 200, 202, 203, 204, 206,
	208, 209, 210, 212, 213, 217, 220, 221, 222, 223, 228, 229, 230, 234, 235, 236, 239, 240,
	241, 242, 247, 248, 249, 250, 253, 254, 255, 258, 259, 260, 261, 262, 268, 272, 273, 289,
	290, 291, 292, 293, 294, 295, 296, 297, 299
};

new g_aFemaleSkins[77] = {
    9, 10, 11, 12, 13, 31, 38, 39, 40, 41, 53, 54, 55, 56, 63, 64, 65, 69,
    75, 76, 77, 85, 88, 89, 90, 91, 92, 93, 129, 130, 131, 138, 140, 141,
    145, 148, 150, 151, 152, 157, 169, 178, 190, 191, 192, 193, 194, 195,
    196, 197, 198, 199, 201, 205, 207, 211, 214, 215, 216, 219, 224, 225,
    226, 231, 232, 233, 237, 238, 243, 244, 245, 246, 251, 256, 257, 263,
    298
};

enum e_FurnitureData {
	e_FurnitureType,
	e_FurnitureName[32],
	e_FurnitureModel
};

new const g_aFurnitureTypes[][] = {
	{"Frames"},
	{"Tables"},
	{"Chairs"},
	{"Beds"},
	{"Cabinets"},
	{"Television Sets"},
	{"Kitchen Appliances"},
	{"Bathroom Appliances"},
	{"Misc Furniture"}
};

new const g_aFurnitureData[][e_FurnitureData] = {
	{1, "Frame 1", 2289},
	{1, "Frame 2", 2288},
	{1, "Frame 3", 2287},
	{1, "Frame 4", 2286},
	{1, "Frame 5", 2285},
	{1, "Frame 6", 2284},
    {1, "Frame 7", 2283},
    {1, "Frame 8", 2282},
    {1, "Frame 9", 2281},
    {1, "Frame 10", 2280},
    {1, "Frame 11", 2279},
	{1, "Frame 12", 2278},
	{1, "Frame 13", 2277},
	{1, "Frame 14", 2276},
	{1, "Frame 15", 2275},
	{1, "Frame 16", 2274},
    {1, "Frame 17", 2273},
    {1, "Frame 18", 2272},
    {1, "Frame 19", 2271},
    {1, "Frame 20", 2270},
    {2, "Table 1", 1433},
	{2, "Table 2", 1998},
	{2, "Table 3", 2008},
	{2, "Table 4", 2180},
	{2, "Table 5", 2185},
    {2, "Table 6", 2205},
    {2, "Table 7", 2314},
    {2, "Table 8", 2635},
    {2, "Table 9", 2637},
    {2, "Table 10", 2644},
	{2, "Table 11", 2747},
	{2, "Table 12", 2764},
	{2, "Table 13", 2763},
	{2, "Table 14", 2762},
	{2, "Table 15", 936},
	{2, "Table 16", 937},
	{2, "Table 17", 941},
	{2, "Table 18", 2115},
	{2, "Table 19", 2116},
	{2, "Table 20", 2112},
	{2, "Table 21", 2111},
	{2, "Table 22", 2110},
	{2, "Table 23", 2109},
	{2, "Table 24", 2085},
	{2, "Table 25", 2032},
	{2, "Table 26", 2031},
	{2, "Table 27", 2030},
	{2, "Table 28", 2029},
    {3, "Chair 1", 1671},
    {3, "Chair 2", 1704},
    {3, "Chair 3", 1705},
    {3, "Chair 4", 1708},
    {3, "Chair 5", 1711},
    {3, "Chair 6", 1715},
    {3, "Chair 7", 1721},
    {3, "Chair 8", 1724},
    {3, "Chair 9", 1727},
    {3, "Chair 10", 1729},
    {3, "Chair 11", 1735},
    {3, "Chair 12", 1739},
    {3, "Chair 13", 1805},
    {3, "Chair 14", 1806},
    {3, "Chair 15", 1810},
    {3, "Chair 16", 1811},
    {3, "Chair 17", 2079},
    {3, "Chair 18", 2120},
    {3, "Chair 19", 2124},
    {3, "Chair 20", 2356},
    {3, "Chair 21", 1768},
    {3, "Chair 22", 1766},
    {3, "Chair 23", 1764},
    {3, "Chair 24", 1763},
    {3, "Chair 25", 1761},
    {3, "Chair 26", 1760},
    {3, "Chair 27", 1757},
    {3, "Chair 28", 1756},
    {3, "Chair 29", 1753},
    {3, "Chair 30", 1713},
    {3, "Chair 31", 1712},
    {3, "Chair 32", 1706},
    {3, "Chair 33", 1703},
    {3, "Chair 34", 1702},
    {3, "Chair 35", 1754},
    {3, "Chair 36", 1755},
    {3, "Chair 37", 1758},
    {3, "Chair 38", 1759},
    {3, "Chair 39", 1762},
    {3, "Chair 40", 1765},
    {3, "Chair 41", 1767},
    {3, "Chair 42", 1769},
	{4, "Bed 1", 1700},
	{4, "Bed 2", 1701},
	{4, "Bed 3", 1725},
	{4, "Bed 4", 1745},
	{4, "Bed 5", 1793},
	{4, "Bed 6", 1794},
	{4, "Bed 7", 1795},
	{4, "Bed 8", 1796},
	{4, "Bed 9", 1797},
	{4, "Bed 10", 1771},
	{4, "Bed 11", 1798},
	{4, "Bed 12", 1799},
    {4, "Bed 13", 1800},
    {4, "Bed 14", 1801},
    {4, "Bed 15", 1802},
    {4, "Bed 16", 1812},
    {4, "Bed 17", 2090},
    {4, "Bed 18", 2299},
    {5, "Cabinet 1", 1416},
	{5, "Cabinet 2", 1417},
	{5, "Cabinet 3", 1741},
	{5, "Cabinet 4", 1742},
	{5, "Cabinet 5", 1743},
	{5, "Cabinet 6", 2025},
	{5, "Cabinet 7", 2065},
	{5, "Cabinet 8", 2066},
	{5, "Cabinet 9", 2067},
	{5, "Cabinet 10", 2087},
    {5, "Cabinet 11", 2088},
    {5, "Cabinet 12", 2094},
    {5, "Cabinet 13", 2095},
    {5, "Cabinet 14", 2306},
    {5, "Cabinet 15", 2307},
	{5, "Cabinet 16", 2323},
	{5, "Cabinet 17", 2328},
	{5, "Cabinet 18", 2329},
	{5, "Cabinet 19", 2330},
	{5, "Cabinet 20", 2708},
	{6, "Television 1", 1518},
	{6, "Television 2", 1717},
	{6, "Television 3", 1747},
	{6, "Television 4", 1748},
	{6, "Television 5", 1749},
	{6, "Television 6", 1750},
	{6, "Television 7", 1752},
	{6, "Television 8", 1781},
	{6, "Television 9", 1791},
	{6, "Television 10", 1792},
    {6, "Television 11", 2312},
	{6, "Television 12", 2316},
	{6, "Television 13", 2317},
	{6, "Television 14", 2318},
	{6, "Television 15", 2320},
	{6, "Television 16", 2595},
	{6, "Television 17", 16377},
	{7, "Kitchen 1", 2013},
	{7, "Kitchen 2", 2017},
	{7, "Kitchen 3", 2127},
	{7, "Kitchen 4", 2130},
	{7, "Kitchen 5", 2131},
	{7, "Kitchen 6", 2132},
	{7, "Kitchen 7", 2135},
	{7, "Kitchen 8", 2136},
	{7, "Kitchen 9", 2144},
	{7, "Kitchen 10", 2147},
    {7, "Kitchen 11", 2149},
    {7, "Kitchen 12", 2150},
    {7, "Kitchen 13", 2415},
    {7, "Kitchen 14", 2417},
    {7, "Kitchen 15", 2421},
    {7, "Kitchen 16", 2426},
    {7, "Kitchen 17", 2014},
    {7, "Kitchen 18", 2015},
    {7, "Kitchen 19", 2016},
    {7, "Kitchen 20", 2018},
    {7, "Kitchen 21", 2019},
    {7, "Kitchen 22", 2022},
    {7, "Kitchen 23", 2133},
    {7, "Kitchen 24", 2134},
	{7, "Kitchen 25", 2137},
	{7, "Kitchen 26", 2138},
	{7, "Kitchen 27", 2139},
	{7, "Kitchen 28", 2140},
	{7, "Kitchen 29", 2141},
	{7, "Kitchen 30", 2142},
	{7, "Kitchen 31", 2143},
	{7, "Kitchen 32", 2145},
	{7, "Kitchen 33", 2148},
	{7, "Kitchen 34", 2151},
	{7, "Kitchen 35", 2152},
	{7, "Kitchen 36", 2153},
	{7, "Kitchen 37", 2154},
	{7, "Kitchen 38", 2155},
	{7, "Kitchen 39", 2156},
	{7, "Kitchen 40", 2157},
	{7, "Kitchen 41", 2158},
	{7, "Kitchen 42", 2159},
	{7, "Kitchen 43", 2160},
	{7, "Kitchen 44", 2134},
	{7, "Kitchen 45", 2135},
	{7, "Kitchen 46", 2338},
	{7, "Kitchen 47", 2341},
	{8, "Bathroom 1", 2514},
	{8, "Bathroom 2", 2516},
	{8, "Bathroom 3", 2517},
	{8, "Bathroom 4", 2518},
	{8, "Bathroom 5", 2520},
	{8, "Bathroom 6", 2521},
	{8, "Bathroom 7", 2522},
	{8, "Bathroom 8", 2523},
	{8, "Bathroom 9", 2524},
	{8, "Bathroom 10", 2525},
    {8, "Bathroom 11", 2526},
    {8, "Bathroom 12", 2527},
    {8, "Bathroom 13", 2528},
    {8, "Bathroom 14", 2738},
    {8, "Bathroom 15", 2739},
	{9, "Washer", 1208},
	{9, "Ceiling Fan", 1661},
	{9, "Moose Head", 1736},
	{9, "Radiator", 1738},
	{9, "Mop and Pail", 1778},
	{9, "Water Cooler", 1808},
	{9, "Water Cooler 2", 2002},
	{9, "Money Safe", 1829},
	{9, "Printer", 2186},
	{9, "Computer", 2190},
	{9, "Treadmill", 2627},
	{9, "Bench Press", 2629},
	{9, "Exercise Bike", 2630},
	{9, "Mat 1", 2631},
	{9, "Mat 2", 2632},
	{9, "Mat 3", 2817},
	{9, "Mat 4", 2818},
	{9, "Mat 5", 2833},
	{9, "Mat 6", 2834},
	{9, "Mat 7", 2835},
	{9, "Mat 8", 2836},
	{9, "Mat 9", 2841},
	{9, "Mat 10", 2842},
	{9, "Mat 11", 2847},
	{9, "Book Pile 1", 2824},
	{9, "Book Pile 2", 2826},
	{9, "Book Pile 3", 2827},
	{9, "Basketball", 2114},
	{9, "Lamp 1", 2108},
	{9, "Lamp 2", 2106},
	{9, "Lamp 3", 2069},
	{9, "Dresser 1", 2569},
	{9, "Dresser 2", 2570},
	{9, "Dresser 3", 2573},
	{9, "Dresser 4", 2574},
	{9, "Dresser 5", 2576},
	{9, "Book", 2894}
};

native IsValidVehicle(vehicleid);
native WP_Hash(buffer[], len, const str[]);

main() {
	print("Vandora Ravens Roleplay");
}

SQL_Connect() {
	g_iHandle = mysql_connect(SQL_HOSTNAME, SQL_USERNAME, SQL_DATABASE, SQL_PASSWORD);

	if (mysql_errno(g_iHandle) != 0) {
	    printf("[SQL] Koneksi \"%s\" gagal!\a", SQL_HOSTNAME);
	}
	else {
		printf("[SQL] Koneksi \"%s\" berhasil!", SQL_HOSTNAME);
	}
}

SQL_CreateAccount(const username[], const password[])
{
	new
	    query[512],
	    buffer[129];

	WP_Hash(buffer, sizeof(buffer), password);

	format(query, sizeof(query), "INSERT INTO `accounts` (`Username`, `Password`, `RegisterDate`, `LoginDate`) VALUES('%s', '%s', '%s', '%s')", username, buffer, ReturnDate(), ReturnDate());
	mysql_tquery(g_iHandle, query);
}

SQL_CheckAccount(playerid)
{
	new
	    query[128];

    format(query, sizeof(query), "SELECT `Username` FROM `characters` WHERE `Character` = '%s'", ReturnName(playerid));
	mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_FIND_USERNAME);
}

SQL_AttemptLogin(playerid, const password[])
{
	new
		query[300],
		buffer[129];

	WP_Hash(buffer, sizeof(buffer), password);

	format(query, sizeof(query), "SELECT `ID` FROM `accounts` WHERE `Username` = '%s' AND `Password` = '%s'", PlayerData[playerid][pUsername], buffer);
    mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_LOGIN);
}

stock SQL_IsLogged(playerid) {
	return (PlayerData[playerid][pLogged] && PlayerData[playerid][pCharacter] > 0);
}
stock Float:cache_get_field_float(row, const field_name[])
{
	new
	    str[16];

	cache_get_field_content(row, field_name, str, g_iHandle, sizeof(str));
	return floatstr(str);
}
stock ViewBillboards(playerid)
{
	new
	    string[128];

	format(string, sizeof(string), "SELECT * FROM `billboards` ORDER BY `bbID` DESC");
	mysql_tquery(g_iHandle, string, "OnViewBillboards", "d", playerid);
	return 1;
}
stock ViewFactions(playerid)
{
	new string[1040];
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionExists]) {
 		format(string, sizeof(string), "%s{FFFFFF}Faction ({FFBF00}%i{FFFFFF}) | %s\n", string, i, FactionData[i][factionName]);
	}
	Dialog_Show(playerid, FactionsList, DIALOG_STYLE_MSGBOX, "Factions List", string, "Tutup", "");
	return 1;
}
stock SQL_ReturnEscaped(const string[])
{
	new
	    entry[256];

	mysql_real_escape_string(string, entry, g_iHandle);
	return entry;
}

SQL_SaveCharacter(playerid)
{
	if (!PlayerData[playerid][pLogged] && !PlayerData[playerid][pCharacter])
		return 0;

	new
	    query[2048];

	if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && !PlayerData[playerid][pDrivingTest])
	{
	    PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
	    PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

	    GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
	    GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

	    GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
	    GetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]);

	    if (!PlayerData[playerid][pKilled] && PlayerData[playerid][pHealth] == 0.0) {
	        PlayerData[playerid][pHealth] = 100.0;
		}
		if (PlayerData[playerid][pRangeBooth] == -1) {
			UpdateWeapons(playerid);
		}
	}
	format(query, sizeof(query), "UPDATE `characters` SET `Created` = '%d', `Gender` = '%d', `Birthdate` = '%s', `Origin` = '%s', `Skin` = '%d', `PosX` = '%.4f', `PosY` = '%.4f', `PosZ` = '%.4f', `PosA` = '%.4f', `Health` = '%.4f', `Interior` = '%d', `World` = '%d', `Hospital` = '%d', `HospitalInt` = '%d', `Money` = '%d', `BankMoney` = '%d', `OwnsBillboard` = '%d', `Savings` = '%d', `Admin` = '%d', `JailTime` = '%d', `Muted` = '%d', `Helper` = '%d'",
		PlayerData[playerid][pCreated],
		PlayerData[playerid][pGender],
		PlayerData[playerid][pBirthdate],
		PlayerData[playerid][pOrigin],
		PlayerData[playerid][pSkin],
		PlayerData[playerid][pPos][0],
		PlayerData[playerid][pPos][1],
		PlayerData[playerid][pPos][2],
		PlayerData[playerid][pPos][3],
		PlayerData[playerid][pHealth],
		PlayerData[playerid][pInterior],
		PlayerData[playerid][pWorld],
		PlayerData[playerid][pHospital],
		PlayerData[playerid][pHospitalInt],
		PlayerData[playerid][pMoney],
		PlayerData[playerid][pBankMoney],
		PlayerData[playerid][pOwnsBillboard],
		PlayerData[playerid][pSavings],
		PlayerData[playerid][pAdmin],
		PlayerData[playerid][pJailTime],
		PlayerData[playerid][pMuted],
  		PlayerData[playerid][pHelper]
	);
	for (new i = 0; i < 13; i ++) {
		format(query, sizeof(query), "%s, `Gun%d` = '%d', `Ammo%d` = '%d'", query, i + 1, PlayerData[playerid][pGuns][i], i + 1, PlayerData[playerid][pAmmo][i]);
	}
	format(query, sizeof(query), "%s, `House` = '%d', `Business` = '%d', `Entrance` = '%d', `Phone` = '%d', `Lottery` = '%d', `LotteryB` = '%d', `Hunger` = '%d', `Thirst` = '%d', `PlayingHours` = '%d', `Minutes` = '%d', `ArmorStatus` = '%.4f', `Job` = '%d', `Faction` = '%d', `FactionRank` = '%d', `FactionDivision` = '%d', `Prisoned` = '%d', `Injured` = '%d', `Warrants` = '%d', `Channel` = '%d', `Bleeding` = '%d', `pRep` = '%d', `AdminHide` = '%d', `SpawnPoint` = '%d'",
		query,
		PlayerData[playerid][pHouse],
		PlayerData[playerid][pBusiness],
		PlayerData[playerid][pEntrance],
		PlayerData[playerid][pPhone],
		PlayerData[playerid][pLottery],
		PlayerData[playerid][pLotteryB],
		PlayerData[playerid][pHunger],
		PlayerData[playerid][pThirst],
		PlayerData[playerid][pPlayingHours],
		PlayerData[playerid][pMinutes],
		PlayerData[playerid][pArmorStatus],
		PlayerData[playerid][pJob],
		PlayerData[playerid][pFactionID],
		PlayerData[playerid][pFactionRank],
		PlayerData[playerid][pFactionDivision],
		PlayerData[playerid][pPrisoned],
		PlayerData[playerid][pInjured],
		PlayerData[playerid][pWarrants],
		PlayerData[playerid][pChannel],
		PlayerData[playerid][pBleeding],
		PlayerData[playerid][pRep],
		PlayerData[playerid][pAdminHide],
		PlayerData[playerid][pSpawnPoint]
	);
	format(query, sizeof(query), "%s, `Warnings` = '%d', `Warn1` = '%s', `Warn2` = '%s', `ForumName` = '%s', `Donator` = '%d', `FightStyle` = '%d', `MaskID` = '%d', `FactionMod` = '%d', `SwatMember` = '%d', `Clothes1` = '%d', `Clothes2` = '%d', `Clothes3` = '%d', `Capacity` = '%d', `Channel2` = '%d', `Channel3` = '%d', `Channel4` = '%d', `DonatorTime` = '%d' WHERE `ID` = '%d'",
	    query,
	    PlayerData[playerid][pWarnings],
	    SQL_ReturnEscaped(PlayerData[playerid][pWarn1]),
	    SQL_ReturnEscaped(PlayerData[playerid][pWarn2]),
	    SQL_ReturnEscaped(PlayerData[playerid][pForumName]),
	    PlayerData[playerid][pDonator],
	    PlayerData[playerid][pFightStyle],
	    PlayerData[playerid][pMaskID],
	    PlayerData[playerid][pFactionMod],
	    PlayerData[playerid][pSwatMember],
	    PlayerData[playerid][pClothes1],
	    PlayerData[playerid][pClothes2],
	    PlayerData[playerid][pClothes3],
	    PlayerData[playerid][pCapacity],
   		PlayerData[playerid][pChannel2],
		PlayerData[playerid][pChannel3],
		PlayerData[playerid][pChannel4],
		PlayerData[playerid][pDonatorTime],
		PlayerData[playerid][pID]
	);
	mysql_tquery(g_iHandle, query);

	SQL_SaveAccessories(playerid);
	return 1;
}

SQL_SaveAccessories(playerid)
{
    if (!PlayerData[playerid][pLogged])
		return 0;

	new
	    query[768];

    format(query, sizeof(query), "UPDATE `characters` SET `Glasses` = '%d', `Hat` = '%d', `Bandana` = '%d', `GlassesPos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
	    PlayerData[playerid][pGlasses],
	    PlayerData[playerid][pHat],
	    PlayerData[playerid][pBandana],
		AccessoryData[playerid][0][0],
        AccessoryData[playerid][0][1],
        AccessoryData[playerid][0][2],
        AccessoryData[playerid][0][3],
        AccessoryData[playerid][0][4],
        AccessoryData[playerid][0][5],
        AccessoryData[playerid][0][6],
        AccessoryData[playerid][0][7],
        AccessoryData[playerid][0][8]
	);
    format(query, sizeof(query), "%s, `HatPos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
        query,
		AccessoryData[playerid][1][0],
        AccessoryData[playerid][1][1],
        AccessoryData[playerid][1][2],
        AccessoryData[playerid][1][3],
        AccessoryData[playerid][1][4],
        AccessoryData[playerid][1][5],
        AccessoryData[playerid][1][6],
        AccessoryData[playerid][1][7],
        AccessoryData[playerid][1][8]
	);
	format(query, sizeof(query), "%s, `BandanaPos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f' WHERE `ID` = '%d'",
	    query,
		AccessoryData[playerid][2][0],
        AccessoryData[playerid][2][1],
        AccessoryData[playerid][2][2],
        AccessoryData[playerid][2][3],
        AccessoryData[playerid][2][4],
        AccessoryData[playerid][2][5],
        AccessoryData[playerid][2][6],
        AccessoryData[playerid][2][7],
        AccessoryData[playerid][2][8],
        PlayerData[playerid][pID]
	);
	mysql_tquery(g_iHandle, query);
	return 1;
}
stock IsPlayerInWater(playerid)
{
	new anim = GetPlayerAnimationIndex(playerid);
 	if (((anim >=  1538) && (anim <= 1542)) || (anim == 1544) || (anim == 1250) || (anim == 1062)) return 1;
  	return 0;
}

/*stock IsPlayerAiming(playerid)
{
new anim = GetPlayerAnimationIndex(playerid);
if (((anim >= 1160) && (anim <= 1163)) || (anim == 1167) || (anim == 1365) || (anim == 1643) || (anim == 1453) || (anim == 220)) return 1;
return 0;
}*/
stock GetBillboardByID(sqlid)
{
	for (new i = 0; i != MAX_BILLBOARDS; i ++) if (BillBoardData[i][bbExists] && BillBoardData[i][bbID] == sqlid)
	    return i;

	return -1;
}


stock GetInitials(const string[])
{
	new
	    ret[32],
		index = 0;

	for (new i = 0, l = strlen(string); i != l; i ++)
	{
	    if (('A' <= string[i] <= 'Z') && (i == 0 || string[i - 1] == ' '))
			ret[index++] = string[i];
	}
	return ret;
}

stock Float:GetVehicleSpeed(vehicleid)
{
	new
	Float:	speed_x,
	Float:	speed_y,
	Float:	speed_z,
	Float:	temp_speed;

	GetVehicleVelocity(vehicleid, speed_x, speed_y, speed_z);

	temp_speed = floatsqroot( ( (speed_x * speed_x ) + ( speed_y * speed_y ) ) + ( speed_z * speed_z ) ) * 136.666667;

	return temp_speed;
}

stock GetDistance(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
	return floatround(floatsqroot(((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2)) + ((z1 - z2) * (z1 - z2))));
}

stock GivePlayerHealth(playerid,health)
{
	new Float:health1;
	GetPlayerHealth(playerid,health1);
	SetPlayerHealth(playerid, health1+health);
	return 1;
}

stock GivePlayerArmour(playerid,armour)
{
	new Float:armour1;
	GetPlayerArmour(playerid,armour1);
	SetPlayerArmour(playerid, armour1+armour);
	return 1;
}

stock Float:DistanceCameraTargetToLocation(Float:fCameraX, Float:fCameraY, Float:fCameraZ, Float:fObjectX, Float:fObjectY, Float:fObjectZ, Float:fVectorX, Float:fVectorY, Float:fVectorZ)
{
	new
		Float:fX,
		Float:fY,
		Float:fZ,
		Float:fDistance;

	fDistance = GetDistance(fCameraX, fCameraY, fCameraZ, fObjectX, fObjectY, fObjectZ);

	fX = fVectorX * fDistance + fCameraX;
	fY = fVectorY * fDistance + fCameraY;
	fZ = fVectorZ * fDistance + fCameraZ;

	return floatsqroot((fX - fObjectX) * (fX - fObjectX) + (fY - fObjectY) * (fY - fObjectY) + (fZ - fObjectZ) * (fZ - fObjectZ));
}
forward Sakit(playerid);
public Sakit(playerid)
{
		inSakit[playerid] = 1;
		SendServerMessage(playerid, "Kamu sudah bisa menerima kematianmu.");
		return 1;
}

forward CekSakit(playerid);
public CekSakit(playerid)
{
	new Float:darah[MAX_PLAYERS];
	GetPlayerHealth(playerid, darah[playerid]);
	if (darah[playerid] <= 20.0)
    {
       	GameTextForPlayer(playerid,"kamu Sakit, beli obat di Rumah sakit",10000,4);
        SetPlayerDrunkLevel(playerid, 9000); // gini g bisa ?
    }
    else{
        SetPlayerDrunkLevel(playerid, 0);
        SetTimer("CekSakit", 1000, false);
	}
    
    return 1;
}

//AFK system
public OnPlayerPause(playerid)
{
	if(!PlayerData[playerid][pAFK])
	{
		PlayerData[playerid][pAFK] = true;
		TogglePlayerControllable(playerid, 0);
		SetPVarInt(playerid, "LastColor", GetPlayerColor(playerid)); //save player variable color!.
		SetPlayerColor(playerid, 0x00000000);
	}
	else return 0;
	return 1;
}

public OnPlayerResume(playerid)
{
	SendServerMessage(playerid, "Kamu sekarang sedang dalam mode AFK!, ketik /afk untuk kembali bermain");
	return 1;
}

//church
forward Prayer(playerid);
public Prayer(playerid)
{
	new Float:armor[MAX_PLAYERS];
	GetPlayerArmour(playerid, armor[playerid]);
	if (armor[playerid] == 0)
		{
			SetPlayerArmour(playerid, 20.0);
			SendClientMessage(playerid, COLOR_DONATOR, "Tuhan telah memberkati dirimu.");
		}
	else
		{
			SendClientMessage(playerid, COLOR_DONATOR, "Kamu saat ini baik baik saja, tetap jalankan perintah tuhan !");
		}
		ClearAnimations(playerid);
		return 1;
}

forward timer12(playerid);
public timer12(playerid)
{
        if (PlayerData[playerid][pHunger] < 20)
            return SendErrorMessage(playerid, "Kamu sedang lapar sekarang ini , makanlah segera.");
		else if (PlayerData[playerid][pThirst] < 20)
            return SendErrorMessage(playerid, "Kamu sedang haus sekarang ini , minumlah segera.");
		else if (PlayerData[playerid][pHunger] < 20 && PlayerData[playerid][pThirst] < 20)
		    return SendErrorMessage(playerid, "Kamu sedang haus dan lapar sekarang ini , makan dan minumlah segera.");
		return 1;
}
forward OnJailAccount(index);
public OnJailAccount(index)
{
	new
		string[128],
		name[24],
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);
	GetPVarString(index, "OnJailAccount", name, 24);
	//GetPVarString(index, "OnJailAccountReason", reason, 64);

	if(cache_affected_rows(g_iHandle)) {
		format(string, sizeof(string), "Kamu berhasil menangkap akun %s.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);

	}
	else {
		format(string, sizeof(string), "Ada masalah dengan pemenjaraan akun %s.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);
	}

	DeletePVar(index, "OnJailAccount");

	return 1;
}

forward robtimer(playerid);
public robtimer(playerid)
{
	if (ATM_Nearest(playerid) == -1) return SendErrorMessage(playerid, "Kamu gagal mencuri uang di ATM karena kamu terlalu jauh darinya.");
    new string[128];
    new cash = random(500);
    GiveMoney(playerid, cash);

    format(string, sizeof(string), "Kamu berhasil meuncuri uang senilai $%d dari ATM!", cash);
    SendClientMessage(playerid, COLOR_WHITE, string);
    ResetRobbery(playerid);
    ClearAnimations(playerid);
    return 1;
}

forward waittimer();
public waittimer()
{
	robpossible = 1;
}

forward RobberyUpdate(playerid);
public RobberyUpdate(playerid)
{
	if(RobberyCounter[playerid] > 1)
	{
	    RobberyCounter[playerid]--;

     	new string[32];
     	format(string, sizeof(string), "~w~Mencuri ATM: %s%d", (RobberyCounter[playerid] <= 5) ? ("~r~~h~") : ("~y~"), RobberyCounter[playerid]);
     	GameTextForPlayer(playerid, string, 1000, 4);
	}
	return 1;
}

forward OnBillboardCreated(bizid);
public OnBillboardCreated(bizid)
{
	if (bizid == -1 || !BillBoardData[bizid][bbExists])
	    return 0;

	BillBoardData[bizid][bbID] = cache_insert_id(g_iHandle);
	Billboard_Save(bizid);

	return 1;
}

public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 415, 426, 560:
        {
			if(newstate) 
			{
				ShowPlayerFooter(playerid, "Kamu ~g~mengaktifkan~w~ suara sirene!");
				FlashTime[vehicleid] = SetTimerEx("OnVehicleLightFlash", 115, true, "d", vehicleid);
			}
			else
			{
				new panels, doors, lights, tires;
				ShowPlayerFooter(playerid, "Kamu ~g~mematikan~w~ suara sirene!");
				KillTimer(FlashTime[vehicleid]);
				GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
				UpdateVehicleDamageStatus(vehicleid, panels, doors, 0, tires);
			}
        }
    }
    return 1;
}

forward OnVehicleLightFlash(vehicleid);
public OnVehicleLightFlash(vehicleid)
{
    new panels, doors, lights, tires;
    GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
    switch(Flash[vehicleid])
    {
        case 0: UpdateVehicleDamageStatus(vehicleid, panels, doors, 2, tires);
        case 1: UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
        case 2: UpdateVehicleDamageStatus(vehicleid, panels, doors, 2, tires);
        case 3: UpdateVehicleDamageStatus(vehicleid, panels, doors, 4, tires);
        case 4: UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
        case 5: UpdateVehicleDamageStatus(vehicleid, panels, doors, 4, tires);
    }
    if(Flash[vehicleid] >= 5) Flash[vehicleid] = 0;
    else Flash[vehicleid]++;
	return 1;
}

stock ResetRobbery(playerid)
{
	if(RobberyTimer[playerid] != -1) KillTimer(RobberyTimer[playerid]);
    RobberyTimer[playerid] = -1;
    RobberyCounter[playerid] = 0;
	return 1;
}

stock SetVehicleIndicator(vehicleid, leftindicator=0, rightindicator=0)
{
	if(!leftindicator & !rightindicator) return false;
	new Float:_vX[2], Float:_vY[2], Float:_vZ[2];
	if(rightindicator)
	{
	    if(IsTrailerAttachedToVehicle(vehicleid))
	    {
	        new trailerid = GetVehicleModel(GetVehicleTrailer(vehicleid));
            GetVehicleModelInfo(trailerid, VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
 			CarData[vehicleid][IndicatorXYZ][4] = CreateObject(19294, 0, 0, 0,0,0,0);
			AttachObjectToVehicle(CarData[vehicleid][IndicatorXYZ][4], GetVehicleTrailer(vehicleid),  _vX[0]/2.4, -_vY[0]/3.35, -1.0 ,0,0,0);
		}
	    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
 		CarData[vehicleid][IndicatorXYZ][0] = CreateObject(19294, 0, 0, 0,0,0,0);
		AttachObjectToVehicle(CarData[vehicleid][IndicatorXYZ][0], vehicleid,  _vX[0]/2.23, _vY[0]/2.23, 0.1 ,0,0,0);
 		CarData[vehicleid][IndicatorXYZ][1] = CreateObject(19294, 0, 0, 0,0,0,0);
		AttachObjectToVehicle(CarData[vehicleid][IndicatorXYZ][1], vehicleid,  _vX[0]/2.23, -_vY[0]/2.23, 0.1 ,0,0,0);
	}
	if(leftindicator)
	{
	    if(IsTrailerAttachedToVehicle(vehicleid))
	    {
	    	new trailerid = GetVehicleModel(GetVehicleTrailer(vehicleid));
            GetVehicleModelInfo(trailerid, VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
 			CarData[vehicleid][IndicatorXYZ][vehicleid][5] = CreateObject(19294, 0, 0, 0,0,0,0);
			AttachObjectToVehicle(CarData[vehicleid][IndicatorXYZ][vehicleid][5], GetVehicleTrailer(vehicleid),  -_vX[0]/2.4, -_vY[0]/3.35, -1.0 ,0,0,0);
		}
	    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, _vX[0], _vY[0], _vZ[0]);
 		CarData[vehicleid][IndicatorXYZ][2] = CreateObject(19294, 0, 0, 0,0,0,0);
		AttachObjectToVehicle(CarData[vehicleid][IndicatorXYZ][2], vehicleid,  -_vX[0]/2.23, _vY[0]/2.23, 0.1 ,0,0,0);
 		CarData[vehicleid][IndicatorXYZ][3] = CreateObject(19294, 0, 0, 0,0,0,0);
		AttachObjectToVehicle(CarData[vehicleid][IndicatorXYZ][3], vehicleid,  -_vX[0]/2.23, -_vY[0]/2.23, 0.1 ,0,0,0);
	}
	return 1;
}

stock ATMRobberyIP(playerid)
{
    //static
	    //string[2048];

	//string[0] = 0;
    foreach (new i : Player) if (PlayerData[i][pRobATM])
	{
		if(RobberyCounter[playerid] == 5) KillTimer(RobberyTimer[playerid]);
		{
			SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "LAPORAN: Perampokan ATM sedang berlangsung. [Lokasi: %s]", GetPlayerLocation(i));
		}
	}
	return 1;
}

forward Billboard_Load();
public Billboard_Load()
{
    new
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_BILLBOARDS)
	{
	    BillBoardData[i][bbExists] = true;
	   	BillBoardData[i][bbID] = cache_get_field_int(i, "bbID");

		cache_get_field_content(i, "bbName", BillBoardData[i][bbName], g_iHandle, 32);
        cache_get_field_content(i, "bbMessage", BillBoardData[i][bbMessage], g_iHandle, 230);

		BillBoardData[i][bbOwner] = cache_get_field_int(i, "bbOwner");
		BillBoardData[i][bbPrice] = cache_get_field_int(i, "bbPrice");
		BillBoardData[i][bbRange] = cache_get_field_int(i, "bbRange");
		BillBoardData[i][bbPos][0] = cache_get_field_float(i, "bbPosX");
		BillBoardData[i][bbPos][1] = cache_get_field_float(i, "bbPosY");
		BillBoardData[i][bbPos][2] = cache_get_field_float(i, "bbPosZ");
		Billboard_Refresh(i);
	}
	return 1;
}

forward OnViewBillboards(extraid, name[]);
public OnViewBillboards(extraid, name[])
{
	new
	    string[1024],
	    desc[128],
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(extraid, "Tidak ada papan iklan yang ditemukan!");

	for (new i = 0; i < rows; i ++) {
	    cache_get_field_content(i, "bbName", desc, g_iHandle, sizeof(desc));

	    //format(string, sizeof(string), "%s{FFFFFF}%s ({FFBF00}%i{FFFFFF})\n", string, desc, i);
	    format(string, sizeof(string), "%s{FFFFFF}Billboard ({FFBF00}%i{FFFFFF}) | %s | $%d\n", string, i, desc, BillBoardData[i][bbPrice]);
	}
	format(desc, sizeof(desc), "Badan Billboard Los Santos", name);
	Dialog_Show(extraid, Billboards, DIALOG_STYLE_LIST, desc, string, "Tutup", "");
	return 1;
}
forward StopChatting(playerid);
public StopChatting(playerid)
{
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

forward DestroyWater(objectid);
public DestroyWater(objectid)
{
	if (IsValidDynamicObject(objectid))
	    DestroyDynamicObject(objectid);

	return 0;
}

forward HornA(playerid);
public HornA(playerid)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	PlayerPlaySound(playerid, 1147, X, Y, Z);
}

forward HornB(playerid);
public HornB(playerid)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	PlayerPlaySound(playerid, 1147, X, Y+5, Z);
}

forward PlayerPutBombInVehicle(seconds, playerid, vehicleid, bomb_type, bomb_timer);
public PlayerPutBombInVehicle(seconds, playerid, vehicleid, bomb_type, bomb_timer)
{
	if(!seconds)
	{
		TogglePlayerControllable(playerid, 1);
		new
			Float: 	f_Pos[3];

		GetVehiclePos(vehicleid, f_Pos[0], f_Pos[1], f_Pos[2]);

		if(!IsPlayerInRangeOfPoint(playerid, BOMB_USE_DISTANCE, f_Pos[0], f_Pos[1], f_Pos[2]))
		{
			SendClientMessage(playerid, COLOR_GREY, "ERROR: Kamu tidak cukup dekat dengan kendaraan ini lagi.");
			return 1;
		}

		g_Bomb_Vehicles[vehicleid][bv_i_ArmedType] = bomb_type;
		g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer] = bomb_timer;
		g_Bomb_Vehicles[vehicleid][bv_i_BombOwner] = playerid;


		if(bomb_type == VEHICLE_BOMB_TYPE_TIMER)
		{
			//SetTimerEx("BombActivated", 1000, 0, "d", vehicleid);
			BombActivated(vehicleid);
		}

		DeletePVar(playerid, "PuttingBomb");

		SendClientMessage(playerid, COLOR_ORANGE, "Kamu telah memasang bom.");

		GameTextForPlayer(playerid, "~r~Bom dipasang", 2000, 3);

		TogglePlayerControllable(playerid, 1);

		return 1;
	}

	new
		szString[69];

	format(szString, sizeof(szString), "~g~Memasang Bomb...~n~~r~%d ~n~ ~y~Ketik ~r~/bomb put~y~ lagi untuk membatalkan", seconds);
	GameTextForPlayer(playerid, szString, 2000, 3);

	SetPVarInt(playerid, "PuttingBomb", SetTimerEx("PlayerPutBombInVehicle", 1000, 0, "ddddd", seconds - 1, playerid, vehicleid, bomb_type, bomb_timer));

	return 1;
}

forward BombActivated(vehicleid);
public BombActivated(vehicleid)
{
	if(g_Bomb_Vehicles[vehicleid][bv_b_BombDisarmed])
	{
		return 1;
	}

	if(!g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer])
	{
		ExplodeVehicleBomb(vehicleid);
		g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer]--;
		SetTimerEx("BombActivated", 400, 0, "d", vehicleid);
		return 1;
	}

	new
		Float:	f_Pos[3];

	GetVehiclePos(vehicleid, f_Pos[0], f_Pos[1], f_Pos[2]);

	if(g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer] < 0)
	{
		CreateExplosion(f_Pos[0], f_Pos[1], f_Pos[2], 4, 2.0); // Extra effects
		CreateExplosion(f_Pos[0], f_Pos[1], f_Pos[2], 5, 2.0); // Extra effects

		if(g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer] == -2)
		{
			CreateExplosion(f_Pos[0], f_Pos[1], f_Pos[2], 1, 2.0); // Small explosion
		}

		if(g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer] < -3)
		{
			return 1;
		}

		g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer]--;
		SetTimerEx("BombActivated", 400, 0, "d", vehicleid);
		return 1;
	}

	g_Bomb_Vehicles[vehicleid][bv_b_BombActivated] = true;

	if(g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer] == 1)
	{
		PlayVehicleBombSound(vehicleid, 17803); // Clicking sound
	}

	if(g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer] == 2)
	{
		PlayVehicleBombSound(vehicleid, 6400); // Digital sound
	}

	g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer]--;

	SetTimerEx("BombActivated", 1000, 0, "d", vehicleid);

	return 1;
}

forward ArmSpeedBomb(vehicleid);
public ArmSpeedBomb(vehicleid)
{
	if(GetVehicleSpeed(vehicleid) < 40.0)
	{
		g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer] = 2;
		BombActivated(vehicleid);
		return 1;
	}

	SetTimerEx("ArmSpeedBomb", 400, 0, "d", vehicleid);

	return 1;
}

forward CheckForBombs(playerid, vehicleid);
public CheckForBombs(playerid, vehicleid)
{
	DeletePVar(playerid, "CheckingForBombs");
	SetPVarInt(playerid, "CheckedCarForBombs", vehicleid);

	new
		Float: f_vPos[3];

	GetVehiclePos(vehicleid, f_vPos[0], f_vPos[1], f_vPos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, BOMB_USE_DISTANCE, f_vPos[0], f_vPos[1], f_vPos[2]))
	{
		SendClientMessage(playerid, COLOR_GREY, "Kamu tidak cukup dekat dengan kendaraan itu.");
		return 1;
	}

	if(g_Bomb_Vehicles[vehicleid][bv_i_ArmedType])
	{
		SendClientMessage(playerid, COLOR_RED, "Kamu telah menemukan sebuah bom aktif di dalam kendaraan!");
		if(g_Bomb_Vehicles[vehicleid][bv_b_BombActivated])
		{
			SendClientMessage(playerid, COLOR_RED, "HATI-HATI! Bom itu aktif dan mungkin akan meledak!");
		}
		SetPVarInt(playerid, "FoundBombInCar", vehicleid);
	}

	else if(g_Bomb_Vehicles[vehicleid][bv_b_BombDisarmed])
	{
		SendClientMessage(playerid, COLOR_ORANGE, "Kamu telah menemukan sebuah bom yang aktif.");
	}

	else
	{
		SendClientMessage(playerid, COLOR_ORANGE, "Kamu tidak menemukan bom atau apapun itu.");
	}
	return 1;
}

forward DisarmBomb(playerid, vehicleid);
public DisarmBomb(playerid, vehicleid)
{
	DeletePVar(playerid, "DisarmingBomb");

	new
		Float: f_vPos[3];

	GetVehiclePos(vehicleid, f_vPos[0], f_vPos[1], f_vPos[2]);

	if(!IsPlayerInRangeOfPoint(playerid, BOMB_USE_DISTANCE, f_vPos[0], f_vPos[1], f_vPos[2]))
	{
		SendClientMessage(playerid, COLOR_GREY, "Kamu tidak cukup dekat dengan kendaraan itu.");
		return 1;
	}

	ResetBombInfo(vehicleid);

	g_Bomb_Vehicles[vehicleid][bv_b_BombDisarmed] = true;

	SendClientMessage(playerid, COLOR_ORANGE, "Kamu berhasil menjinakan bom dan bom telah ditambahkan ke inventory kamu.");
	Inventory_Add(playerid, "Bomb", 1654);

	return 1;
}

forward flushExplosiveData();
public flushExplosiveData()
{
	for(new i = 0; i < MAX_EXPLOSIVES; i++)
	{
		destroyExplosive(i);
	}
}

forward detonateExplosives(playerid);
public detonateExplosives(playerid)
{
	/*
	    I've added a `count` variable in here for the purpose of not repeating
	    a snippet of code. Say for example you wanted to give the player a wanted level
	    for exploding a bomb, but they place down 10 bombs. That's 10x the wanted level!
	    Instead, you can use the `count` variable to control this.

	    if (count > 1)
	    {
	        // Run this code once
	    }
	*/

	new
		count = 0
	;
	for(new i = 0; i < MAX_EXPLOSIVES; i++)
	{
		if(explosiveData[i][explosiveOwner] == playerid)
		{
			detonateExplosive(playerid, explosiveData[i][explosiveSlot]);
			count++;
		}
	}
}

forward detonateExplosive(playerid, playerSlot);
public detonateExplosive(playerid, playerSlot)
{
	new
		bool:found
	;

	for(new i = 0; i < MAX_EXPLOSIVES; i++)
	{
		if(explosiveData[i][explosiveOwner] == playerid)
		{
			if(explosiveData[i][explosiveSlot] == playerSlot)
			{
				/*
				    Create the explosion at the XYZ provided....
				    This WILL cause player damage.
				*/
				CreateExplosion(explosiveData[i][explosivePosition][0], explosiveData[i][explosivePosition][1], explosiveData[i][explosivePosition][2], 2, 1.0);

				destroyExplosive(i); // destroy this explosive

				found = true;
			}
		}
	}

	if (!found)
	{
	    // No explosives found
	}
}

forward checkPlayerExplosives(playerid);
public checkPlayerExplosives(playerid)
{
	new returnValue = 0;

	for(new i = 0; i < MAX_EXPLOSIVES; i++)
	{
		if(explosiveData[i][explosiveOwner] == playerid)
		{
			returnValue++;
		}
	}

	return returnValue;
}

forward destroyPlayersExplosives(playerid);
public destroyPlayersExplosives(playerid)
{
	for(new i = 0; i < MAX_EXPLOSIVES; i++)
	{
		if(explosiveData[i][explosiveOwner] == playerid)
		{
			destroyExplosive(i);
		}
	}
}

forward findExplosiveSlot();
public findExplosiveSlot()
{
	for(new i = 0; i < MAX_EXPLOSIVES; i++)
	{
		if(explosiveData[i][explosiveOwner] == INVALID_PLAYER_ID)
		{
			return i;
		}
	}

	return INVALID_PLAYER_ID;
}

forward destroyExplosive(explosiveEyeD);
public destroyExplosive(explosiveEyeD)
{
	explosiveData[explosiveEyeD][explosiveOwner] 			= INVALID_PLAYER_ID;
	explosiveData[explosiveEyeD][explosiveSlot]				= INVALID_PLAYER_ID;
	explosiveData[explosiveEyeD][explosiveTime] 			= INVALID_PLAYER_ID;
	explosiveData[explosiveEyeD][explosivePosition][0] 		= 0.0000;
	explosiveData[explosiveEyeD][explosivePosition][1] 		= 0.0000;
	explosiveData[explosiveEyeD][explosivePosition][2]		= 0.0000;
	Delete3DTextLabel(explosiveData[explosiveEyeD][explosiveLabel]);
	DestroyDynamicObject(explosiveData[explosiveEyeD][explosiveObject]);

	return 1;
}

forward DefuseC4(playerid, idOfExplosive);
public DefuseC4(playerid, idOfExplosive)
{
	new
		defuseMessage[128],
		pName[MAX_PLAYER_NAME]
	;

	GetPlayerName(explosiveData[idOfExplosive][explosiveOwner], pName, sizeof(pName));

	if (explosiveData[idOfExplosive][explosiveOwner] != INVALID_PLAYER_ID)
	{
		new allahuAkbar = random(3);

		switch(allahuAkbar)
		{
			case 0 .. 1:
			{
				format(defuseMessage, sizeof(defuseMessage), "Oh tidak!  memotong kawat yang salah dan peledak %s meledak tepat diwajahmu.", pName);
				SendClientMessage(playerid, COLOR_RED, defuseMessage);
				detonateExplosive(explosiveData[idOfExplosive][explosiveOwner], explosiveData[idOfExplosive][explosiveSlot]);
			}

			case 2:
			{
				format(defuseMessage, sizeof(defuseMessage), "Kamu telah menjinakkan sebuah bahan peledak. Itu milik %s. Bom telah ditambahkan ke inventory kamu.", pName);
				SendClientMessage(playerid, COLOR_ORANGE, defuseMessage);
				destroyExplosive(idOfExplosive);
				Inventory_Add(playerid, "Bomb", 1654);
			}
		}
	}

	ClearAnimations(playerid);
}

forward RandomFire();
public RandomFire()
{
	for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	{
	    g_aFireExtinguished[i] = 0;

	    if (IsValidDynamicObject(g_aFireObjects[i]))
	        DestroyDynamicObject(g_aFireObjects[i]);
	}
	switch (random(5))
	{
	    case 0:
	    {
			g_aFireObjects[0] = CreateDynamicObject(18691, 1930.4942, -1784.1799, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1930.5037, -1782.1473, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1930.5136, -1779.6364, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1930.5238, -1777.1058, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1930.5346, -1774.5141, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1930.5428, -1772.4306, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1930.5507, -1770.4219, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1930.5588, -1768.3559, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1929.1459, -1767.9173, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1928.8776, -1769.5853, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1928.8422, -1772.0158, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1928.8189, -1773.6047, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1928.8001, -1774.8883, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1928.7772, -1776.4462, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1928.7534, -1778.0637, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1928.7347, -1779.3225, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1928.7145, -1780.7152, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1928.6938, -1782.1208, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1928.6655, -1784.0491, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1935.3200, -1783.8045, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1935.2098, -1781.6428, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1935.0748, -1778.9934, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1934.9506, -1776.5572, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1934.8343, -1774.2791, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1934.7189, -1772.0156, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1934.6302, -1770.2773, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[26] = CreateDynamicObject(18691, 1934.5228, -1768.1666, 10.7728, 0.0, 0.0, 0.0);
		}
		case 1:
		{
			g_aFireObjects[0] = CreateDynamicObject(18691, 1238.8894, -1563.0980, 10.9999, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1241.6730, -1562.6481, 11.0068, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1243.2508, -1561.0845, 10.9444, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1245.5793, -1560.6265, 10.9450, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1247.4980, -1560.4841, 10.9455, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1249.9790, -1560.3701, 10.9539, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1249.5944, -1562.7432, 11.0053, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1247.4562, -1562.7996, 11.0045, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1245.7386, -1563.1572, 10.9990, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1243.7620, -1563.7636, 10.9896, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1242.2908, -1563.0959, 10.9999, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1242.3502, -1564.7818, 10.9740, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1244.8713, -1564.6507, 10.9760, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1246.8665, -1564.5694, 10.9772, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1249.1672, -1563.8638, 10.9881, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1250.8759, -1563.9959, 10.9861, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1252.2437, -1562.3538, 11.0113, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1252.4475, -1561.7529, 13.6369, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1250.9642, -1561.7822, 13.6519, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1248.5258, -1561.3541, 13.8278, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1245.9611, -1561.1191, 13.5507, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1242.7899, -1561.6608, 13.7519, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1250.3793, -1561.5445, 10.9462, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1252.8653, -1561.6358, 10.9468, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1252.9653, -1563.4675, 10.9942, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1252.5823, -1563.9747, 10.9864, 0.0, 0.0, 0.0);
		}
		case 2:
		{
		    g_aFireObjects[0] = CreateDynamicObject(18691, 1786.4844, -1164.2786, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1787.8876, -1164.3374, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1790.0416, -1164.8181, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1791.7430, -1165.1977, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1793.3637, -1165.5594, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1794.8229, -1165.8847, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1796.5830, -1166.2770, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1798.3182, -1166.6638, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1798.2283, -1166.9202, 22.1465, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1797.1246, -1166.2222, 22.5881, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1796.1480, -1165.5697, 22.5401, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1795.4377, -1165.1295, 22.1495, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1794.7139, -1164.6824, 21.4488, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1789.6914, -1164.0892, 22.3047, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1788.5687, -1163.1995, 22.3698, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1788.0295, -1162.8452, 21.9937, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1786.2319, -1163.1064, 21.8608, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1785.3194, -1163.1263, 21.9294, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1791.5643, -1163.1118, 21.3996, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1791.8800, -1164.3983, 22.2759, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1791.8519, -1165.1618, 22.5094, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1788.8287, -1163.4260, 22.0600, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1790.2512, -1164.0129, 21.2942, 0.0, 0.0, 0.0);
		}
		case 3:
		{
		    g_aFireObjects[0] = CreateDynamicObject(18691, 1315.0238, -1368.2282, 10.9438, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1314.0100, -1368.2265, 10.9438, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1312.6562, -1368.2235, 10.9399, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1311.8308, -1367.5294, 10.9296, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1310.9281, -1367.4926, 10.9273, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1309.7708, -1367.4902, 10.9252, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1308.6425, -1367.4877, 10.9232, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1307.3302, -1368.0213, 10.9332, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1306.0062, -1368.3232, 10.9355, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1304.3460, -1368.3197, 10.9354, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1304.4842, -1369.0036, 10.9451, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1305.8629, -1369.4384, 10.9513, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1307.2315, -1369.3804, 10.9512, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1309.0936, -1369.7593, 10.9550, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1310.8515, -1369.5230, 10.9544, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1312.0820, -1369.2214, 10.9522, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1309.4581, -1367.9462, 13.2241, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1307.8933, -1367.5498, 13.5101, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1307.3311, -1369.9162, 13.0364, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1306.5539, -1370.5288, 12.7001, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1310.9852, -1369.3835, 12.2585, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1310.3361, -1370.6992, 12.9585, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1313.2864, -1370.2733, 10.9708, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1313.3056, -1371.2634, 10.9838, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1311.6168, -1370.8870, 10.9735, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1308.9244, -1371.1181, 10.9726, 0.0, 0.0, 0.0);
			g_aFireObjects[26] = CreateDynamicObject(18691, 1306.5335, -1370.7678, 10.9712, 0.0, 0.0, 0.0);
		}
		case 4:
		{
		    g_aFireObjects[0] = CreateDynamicObject(18691, 997.7821, -910.8650, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 998.0914, -911.5863, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 998.2116, -913.0366, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 998.3492, -914.6963, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 998.4992, -916.5079, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 998.6508, -918.3324, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 998.7961, -920.0861, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 998.9600, -922.0629, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 999.1196, -923.9867, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 999.2616, -925.7003, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 999.4187, -927.5945, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 999.5601, -929.3013, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1000.5933, -931.6047, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1002.6428, -931.3463, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1004.6893, -931.3514, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1007.2104, -931.1424, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1009.8325, -930.9251, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1012.1341, -930.7343, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1014.4911, -930.5388, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1014.4734, -932.3157, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1013.0949, -932.3657, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1011.4746, -932.4245, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1009.7496, -932.4875, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1008.1029, -932.5473, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1006.0109, -932.6234, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1003.9039, -932.7000, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[26] = CreateDynamicObject(18691, 1002.0654, -932.7668, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[27] = CreateDynamicObject(18691, 1002.6585, -933.5130, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[28] = CreateDynamicObject(18691, 1004.5731, -933.4433, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[29] = CreateDynamicObject(18691, 1006.4688, -933.3743, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[30] = CreateDynamicObject(18691, 1008.4611, -933.3016, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[31] = CreateDynamicObject(18691, 1010.4176, -933.2304, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[32] = CreateDynamicObject(18691, 1012.0813, -933.1698, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[33] = CreateDynamicObject(18691, 1013.1374, -933.1314, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[34] = CreateDynamicObject(18691, 1015.3114, -933.0523, 39.5696, 0.0, 0.0, 0.0);
		}
	}
	new
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	GetDynamicObjectPos(g_aFireObjects[0], fX, fY, fZ);

	foreach (new i : Player)
	{
	    if (GetFactionType(i) == FACTION_MEDIC)
	    {
			Waypoint_Set(i, "Fire Scene", fX, fY, fZ);
	    }
	}
	//CreateExplosion(fX, fY, fZ, 12, 5.0);
	SendFactionMessageEx(FACTION_MEDIC, COLOR_RADIO, "RADIO: Api telah terlihat di %s (ditandai di peta).", GetLocation(fX, fY, fZ));
	return 1;
}

forward BreakCuffs(playerid, userid);
public BreakCuffs(playerid, userid)
{
	if (PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid) || !Inventory_HasItem(playerid, "Crowbar") || !IsPlayerNearPlayer(playerid, userid, 6.0) || !PlayerData[userid][pCuffed])
	    return 1;

	if (random(2))
	{
	    ShowPlayerFooter(playerid, "Kamu ~r~gagal~w~ untuk melepaskan borgol.");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah gagal melepaskan borgol.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[userid][pCuffed] = 0;
	    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

	    ShowPlayerFooter(playerid, "Kamu ~g~berhasil~w~ melepaskan borgol.");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah melepaskan borgol dari pergelangan tangan %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	return 1;
}

forward SpawnTimer(playerid);
public SpawnTimer(playerid)
{
	if (SQL_IsLogged(playerid))
	{
	    TogglePlayerControllable(playerid, 1);
	}
	return 1;
}

forward RemoveAttachedObject(playerid, slot);
public RemoveAttachedObject(playerid, slot)
{
	if (IsPlayerConnected(playerid) && IsPlayerAttachedObjectSlotUsed(playerid, slot))
	{
	    RemovePlayerAttachedObject(playerid, slot);
	}
	return 1;
}

forward MineTime(playerid);
public MineTime(playerid)
{
	PlayerData[playerid][pMineTime] = 0;
}

forward DestroyBlood(objectid);
public DestroyBlood(objectid)
{
	DestroyDynamicObject(objectid);
}

forward ExpireMarker(playerid);
public ExpireMarker(playerid)
{
	if (!PlayerData[playerid][pMarker])
	    return 0;

    if (GetFactionType(playerid) == FACTION_GANG || (GetFactionType(playerid) != FACTION_GANG && PlayerData[playerid][pOnDuty]))
		SetFactionColor(playerid);

	else SetPlayerColor(playerid, DEFAULT_COLOR);
	return 1;
}

forward HidePlayerBox(playerid, PlayerText:boxid);
public HidePlayerBox(playerid, PlayerText:boxid)
{
	if (!IsPlayerConnected(playerid) || !SQL_IsLogged(playerid))
	    return 0;

	PlayerTextDrawHide(playerid, boxid);
	PlayerTextDrawDestroy(playerid, boxid);

	return 1;
}

forward Advertise(playerid);
public Advertise(playerid)
{
	if (!SQL_IsLogged(playerid) || !strlen(PlayerData[playerid][pAdvertise]))
	    return 0;

	new
	    text[128];

	strunpack(text, PlayerData[playerid][pAdvertise]);

	foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
	    SendClientMessageEx(i, 0x00AA00FF, "[IKLAN]: %s (Nomor Kontak: %d (($s))", text, PlayerData[playerid][pPhone], ReturnName(playerid, 0));
	}
	PlayerData[playerid][pAdvertise][0] = 0;
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	switch(dialogid)
	{
		//truckerjob
		case 1987:
		{
        	if(!response)return 1;
        	else
            {
				new vehicleid = GetPlayerVehicleID(playerid);
                switch(listitem)// Checking which listitem was selected
                {
                    case 0:// The first item listed

                    {   
                        new trailerModel = GetVehicleModel(GetVehicleTrailer(vehicleid));
                        if(GetVehicleModel(vehicleid) == 514) //trailer pakaian dan makanan
                        {
	                            if(IsTrailerAttachedToVehicle(vehicleid) && trailerModel == 435)
								{
			                        if(trucker[playerid] ==1)
			                        {
		                        		new rand = random(sizeof(truckerjob));
						    			SetPlayerCheckpoint(playerid,truckerjob[rand][0],truckerjob[rand][1],truckerjob[rand][2],3.0);
										trucker[playerid] = 2;
										return 1; // ini bisa juga return true;
									}
								}
								else
									{
									SendClientMessage(playerid,COLOR_RED,"* Trailer kamu salah, silahkan ganti trailer yang cocok");
		                        	new vehicleids = GetPlayerVehicleID(playerid);
								    new trailerId = GetVehicleTrailer(vehicleids);
									DetachTrailerFromVehicle(trailerId);
									SetVehicleToRespawn(trailerId);
									}
						}
					}
					case 1:// The first item listed

                    {
                        new trailerModel = GetVehicleModel(GetVehicleTrailer(vehicleid));
                        if(GetVehicleModel(vehicleid) == 514) //trailer box pos
                        {

                            if(IsTrailerAttachedToVehicle(vehicleid) && trailerModel == 591)
							{
		                        if(trucker[playerid] ==1)
		                        {
	                        		new rand = random(sizeof(truckerjob));
					    			SetPlayerCheckpoint(playerid,truckerjob[rand][0],truckerjob[rand][1],truckerjob[rand][2],3.0);
									trucker[playerid] = 2;
									return 1; // ini bisa juga return true;
								}
							}
							else{
							SendClientMessage(playerid,COLOR_RED,"* Trailer kamu salah, silahkan ganti trailer yang cocok");
							new vehicleids = GetPlayerVehicleID(playerid);
                        	new trailerId = GetVehicleTrailer(vehicleids);
                        	DetachTrailerFromVehicle(trailerId);
                        	SetVehicleToRespawn(trailerId);
								}
	   		    			}
						}
				case 2:// The first item listed

                    {
                        new trailerModel = GetVehicleModel(GetVehicleTrailer(vehicleid));
                        if(GetVehicleModel(vehicleid) == 514) //trailer batu dan pasir
                        {

                            if(IsTrailerAttachedToVehicle(vehicleid) && trailerModel == 450)
							{
		                        if(trucker[playerid] ==1)
		                        {
	                        		new rand = random(sizeof(truckerjob));
					    			SetPlayerCheckpoint(playerid,truckerjob[rand][0],truckerjob[rand][1],truckerjob[rand][2],3.0);
									trucker[playerid] = 2;
									return 1; // ini bisa juga return true;
								}
							}
							else{
								SendClientMessage(playerid,COLOR_RED,"* Trailer kamu salah, silahkan ganti trailer yang cocok");
								new vehicleids = GetPlayerVehicleID(playerid);
	                        	new trailerId = GetVehicleTrailer(vehicleids);
	                        	DetachTrailerFromVehicle(trailerId);
	                        	SetVehicleToRespawn(trailerId);
								}
	   		    			}
						}
                	case 3:// The first item listed

                    {
                        new trailerModel = GetVehicleModel(GetVehicleTrailer(vehicleid));
                        if(GetVehicleModel(vehicleid) == 514) //trailer petrol
                        {

                            if(IsTrailerAttachedToVehicle(vehicleid) && trailerModel == 584)
							{
		                        if(trucker[playerid] ==1)
		                        {
	                        		new rand = random(sizeof(truckerjob));
					    			SetPlayerCheckpoint(playerid,truckerjob[rand][0],truckerjob[rand][1],truckerjob[rand][2],3.0);
									trucker[playerid] = 2;
									return 1; // ini bisa juga return true;
								}
							}
							else{
							SendClientMessage(playerid,COLOR_RED,"* Trailer kamu salah, silahkan ganti trailer yang cocok");
							new vehicleids = GetPlayerVehicleID(playerid);
                        	new trailerId = GetVehicleTrailer(vehicleids);
                        	DetachTrailerFromVehicle(trailerId);
                        	SetVehicleToRespawn(trailerId);
							}
						}
					}
   				}
			}
		}
		//====================NEON DIALOG BY AFA============
		case 1997:
            {
                if(!response)return 1;
        		else
            	{
            	    switch(listitem)// Checking which listitem was selected
                	{
						case 0:
      					{
                        	SetPVarInt(playerid, "Status", 1);
	                    	SetPVarInt(playerid, "neon", CreateDynamicObject(18648,0,0,0,0,0,0));
	                    	SetPVarInt(playerid, "neon1", CreateDynamicObject(18648,0,0,0,0,0,0));
	                    	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	                    	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
	                    	SendClientMessage(playerid, 0xFFFFFFAA, "Neon installed");
                     	}
                      	case 1:
                       	{
                        	SetPVarInt(playerid, "Status", 1);
                        	SetPVarInt(playerid, "neon2", CreateDynamicObject(18647,0,0,0,0,0,0));
                        	SetPVarInt(playerid, "neon3", CreateDynamicObject(18647,0,0,0,0,0,0));
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon2"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon3"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	SendClientMessage(playerid, 0xFFFFFFAA, "Neon installed");
       			 		}
             			case 2:
                		{
                        	SetPVarInt(playerid, "Status", 1);
                        	SetPVarInt(playerid, "neon4", CreateDynamicObject(18649,0,0,0,0,0,0));
                        	SetPVarInt(playerid, "neon5", CreateDynamicObject(18649,0,0,0,0,0,0));
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon4"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon5"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	SendClientMessage(playerid, 0xFFFFFFAA, "Neon installed");
                        }
                        case 3:
                        {
                  			SetPVarInt(playerid, "Status", 1);
                        	SetPVarInt(playerid, "neon6", CreateDynamicObject(18652,0,0,0,0,0,0));
                        	SetPVarInt(playerid, "neon7", CreateDynamicObject(18652,0,0,0,0,0,0));
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon6"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon7"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	SendClientMessage(playerid, 0xFFFFFFAA, "Neon installed");
                		}
                  		case 4:
                    	{
                        	SetPVarInt(playerid, "Status", 1);
                        	SetPVarInt(playerid, "neon8", CreateDynamicObject(18651,0,0,0,0,0,0));
                        	SetPVarInt(playerid, "neon9", CreateDynamicObject(18651,0,0,0,0,0,0));
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon8"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon9"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	SendClientMessage(playerid, 0xFFFFFFAA, "Neon installed");
                		}
                  		case 5:
                    	{
                        	SetPVarInt(playerid, "Status", 1);
                        	SetPVarInt(playerid, "neon10", CreateDynamicObject(18650,0,0,0,0,0,0));
                        	SetPVarInt(playerid, "neon11", CreateDynamicObject(18650,0,0,0,0,0,0));
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon10"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon11"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	SendClientMessage(playerid, 0xFFFFFFAA, "Neon installed");
                		}
               			case 6:
                  		{
                    		SetPVarInt(playerid, "Status", 1);
	                    	SetPVarInt(playerid, "neon12", CreateDynamicObject(18648,0,0,0,0,0,0));
	                    	SetPVarInt(playerid, "neon13", CreateDynamicObject(18648,0,0,0,0,0,0));
                        	SetPVarInt(playerid, "neon14", CreateDynamicObject(18649,0,0,0,0,0,0));
                        	SetPVarInt(playerid, "neon15", CreateDynamicObject(18649,0,0,0,0,0,0));
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon12"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon13"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon14"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon15"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	SendClientMessage(playerid, 0xFFFFFFAA, "Neon installed");
                		}
                 		case 7:
                   		{
                        	SetPVarInt(playerid, "Status", 1);
	                    	SetPVarInt(playerid, "neon16", CreateDynamicObject(18648,0,0,0,0,0,0));
	                    	SetPVarInt(playerid, "neon17", CreateDynamicObject(18648,0,0,0,0,0,0));
	                    	SetPVarInt(playerid, "neon18", CreateDynamicObject(18652,0,0,0,0,0,0));
                        	SetPVarInt(playerid, "neon19", CreateDynamicObject(18652,0,0,0,0,0,0));
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon16"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon17"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon18"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon19"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	SendClientMessage(playerid, 0xFFFFFFAA, "Neon installed");
                		}
                		case 8:
                  		{
                        	SetPVarInt(playerid, "Status", 1);
                        	SetPVarInt(playerid, "neon20", CreateDynamicObject(18647,0,0,0,0,0,0));
                        	SetPVarInt(playerid, "neon21", CreateDynamicObject(18647,0,0,0,0,0,0));
                        	SetPVarInt(playerid, "neon22", CreateDynamicObject(18652,0,0,0,0,0,0));
                        	SetPVarInt(playerid, "neon23", CreateDynamicObject(18652,0,0,0,0,0,0));
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon20"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon21"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon22"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon23"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	SendClientMessage(playerid, 0xFFFFFFAA, "Neon installed");
                		}
                 		case 9:
                   		{
                        	SetPVarInt(playerid, "Status", 1);
                        	SetPVarInt(playerid, "neon24", CreateDynamicObject(18647,0,0,0,0,0,0));
                        	SetPVarInt(playerid, "neon25", CreateDynamicObject(18647,0,0,0,0,0,0));
                        	SetPVarInt(playerid, "neon26", CreateDynamicObject(18650,0,0,0,0,0,0));
                        	SetPVarInt(playerid, "neon27", CreateDynamicObject(18650,0,0,0,0,0,0));
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon24"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon25"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon26"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon27"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	SendClientMessage(playerid, 0xFFFFFFAA, "Neon installed");
       			 		}
                 		case 10:
                 		{
                        	SetPVarInt(playerid, "Status", 1);
                        	SetPVarInt(playerid, "neon28", CreateDynamicObject(18649,0,0,0,0,0,0));
                        	SetPVarInt(playerid, "neon29", CreateDynamicObject(18649,0,0,0,0,0,0));
                        	SetPVarInt(playerid, "neon30", CreateDynamicObject(18652,0,0,0,0,0,0));
                        	SetPVarInt(playerid, "neon31", CreateDynamicObject(18652,0,0,0,0,0,0));
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon28"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon29"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon30"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon31"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	SendClientMessage(playerid, 0xFFFFFFAA, "Neon installed");
                		}
              		  	case 11:
                   		{
                   			SetPVarInt(playerid, "Status", 1);
                        	SetPVarInt(playerid, "neon32", CreateDynamicObject(18652,0,0,0,0,0,0));
                        	SetPVarInt(playerid, "neon33", CreateDynamicObject(18652,0,0,0,0,0,0));
                        	SetPVarInt(playerid, "neon34", CreateDynamicObject(18650,0,0,0,0,0,0));
                        	SetPVarInt(playerid, "neon35", CreateDynamicObject(18650,0,0,0,0,0,0));
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon32"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon33"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon34"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	AttachDynamicObjectToVehicle(GetPVarInt(playerid, "neon35"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
                        	SendClientMessage(playerid, 0xFFFFFFAA, "Neon installed");
               			}
				       	case 12:
			   			{
					   		DestroyDynamicObject(GetPVarInt(playerid, "neon")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon1")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon2")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon3"));
		                	DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon4")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon5")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon6")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon7"));
		         			DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon8")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon9")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon10")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon11"));
		                	DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon12")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon13")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon14")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon15"));
		                	DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon16")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon17")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon18")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon19"));
		                	DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon20")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon21")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon22")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon23"));
		             		DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon24")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon25")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon26")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon27"));
		                	DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon28")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon29")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon30")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon31"));
		                	DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon32")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon33")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon34")); DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon35"));
						return 1;
                        }
                    }
           		 }
            }
		case 17719:
		{
	    	if(!response)return 1;
	    	else
	 		{
   				new ide = strval(inputtext);
	    		if (IsPlayerConnected(ide))
	    		{
		    		if(ide != INVALID_PLAYER_ID)
		    		{
						if(jmlduit[playerid]> 0 || PlayerData[ide][pBankMoney] >= jmlduit[playerid] )
						{
			        		PlayerData[playerid][pBankMoney] -= jmlduit[playerid];
			        		PlayerData[ide][pBankMoney] += jmlduit[playerid];
			        		new pengirim[200], penerima[200];
			        		new namapengirim[MAX_PLAYER_NAME], namapenerima[MAX_PLAYER_NAME];
		    				GetPlayerName(playerid, namapengirim, sizeof(namapengirim));
		    				GetPlayerName(ide, namapenerima, sizeof(namapenerima));
			        		format(pengirim, sizeof(pengirim), "kamu telah mengirim sebanyak $%d Kepada %s  ).", jmlduit[playerid], namapenerima);
			        		format(penerima, sizeof(penerima), "SMS Banking : Kamu menerima $%d , dikirim oleh %s  ).", jmlduit[playerid], namapengirim);
		            		SendClientMessage(playerid, COLOR_PINK, pengirim);
		            		SendClientMessage(ide, COLOR_PINK, penerima);
							}
						else
						{
				    		SendClientMessage(playerid, 0xA3B4C5FF, "harus lebih dari 0 yang kamu kirim");
			 			}
					}
					else
					{
						SendClientMessage(playerid, 0xA3B4C5FF, "Id tidak ada");
					}
				}
			}
		}
		case 17718:
		{
		    if(!response)return 1;
		    else
	  		{
     			new ide = strval(inputtext);
	    		if (PlayerData[playerid][pBankMoney]>= ide)
	    		{
	        		jmlduit[playerid] = ide;
	        		ShowPlayerDialog(playerid,17719, DIALOG_STYLE_INPUT, "Transfer", "Masukan Id player tujuan \n Contoh: 1", "Oke", "Batal");
				}
				else
				{
		    		SendClientMessage(playerid, 0xA3B4C5FF, "Uang di Bank kurang");
				}
			}
		}
		case 17717:
		{
		    if(!response)return 1;
		    else
	  		{
        		new ide = strval(inputtext);
  				if (PlayerData[playerid][pBankMoney]>= ide)
	    		{
	        		PlayerData[playerid][pBankMoney] -= ide;
         			GiveMoney(playerid,ide);
         			new tootal[256];
         			format(tootal, sizeof(tootal), "   Kamu Mengambil uang sebanyak $ %d .", ide);
         			SendClientMessage(playerid, COLOR_PINK, tootal);
				}
				else
				{
		    		SendClientMessage(playerid, 0xA3B4C5FF, "Uang di Bank kurang");
				}
			}
		}
		case 12211:
		{
  			if(!response)return 1;
  			else
	    	{
      			new string[128];
	        	format(string, sizeof(string), "[HELPER]: %s sedang butuh bantuan. Gunakan /assist %d untuk membantu mereka.", ReturnName(playerid, 0), playerid);
	        	format(string, sizeof(string), "[HELPER]: Permintaan bantuan telah diterima oleh %s. Gunakan /assist %d untuk membantu mereka.", ReturnName(playerid, 0), playerid);
				SendHelperMessage(COLOR_NEWGREEN, string);
				format(string, sizeof(string), "[REQUEST] %s %s", inputtext), ReturnName(playerid, 0);
				SendHelperMessage(COLOR_WHITE, string);
				AssistanceNeeded[playerid] = 1;
    		}
		}
		case 12212:
		{
  			if(!response)return 1;
  			else
	    	{
      			new string[128];
	        	format(string, sizeof(string), "[FACTION MANAGEMENT]: %s meminta nama faction mereka untuk diubah. Silahkan hubungi mereka.", ReturnName(playerid, 0), playerid);
				SendAdminAlert(COLOR_NEWGREEN, string);
				format(string, sizeof(string), "[DETAILS]: %s %s", inputtext), ReturnName(playerid, 0);
				SendAdminAlert(COLOR_WHITE, string);
    		}
		}
		case 12250:
		{
  			if(!response)return 1;
	    	else
		    {
      			switch(listitem)
       			{
          			case 0:
	            	{
               			if(PlayerData[playerid][pMoney] >= 3000)
                 		{
	                    	PlayerData[playerid][pMoney] -= 3000;
	                    	new id = Inventory_Add(playerid, "Magazine", 2039);

	                    	if (id == -1)
        						return SendErrorMessage(playerid, "Kamu tidak memiliki sisa persediaan slot.");

	                    	SendClientMessage(playerid, COLOR_WHITE, "Kamu berhasil membeli sebuah Magazine dari Black Market senilai $3000.");
						}
						else return SendErrorMessage(playerid, "Kamu tidak punya uang untuk melanjutkan pembelian.");
         			}
            		case 1:
		            {
               			if(PlayerData[playerid][pMoney] >= 4000)
                 		{
	                    	PlayerData[playerid][pMoney] -= 4000;
	                    	new id = Inventory_Add(playerid, "Ammo Cartridge", 2358);

							if (id == -1)
        						return SendErrorMessage(playerid, "Kamu tidak memiliki sisa persediaan slot.");

	                    	SendClientMessage(playerid, COLOR_WHITE, "Kamu berhasil membeli sebuah Ammo Cartridge dari Black Market senilai $4000.");
						}
						else return SendErrorMessage(playerid, "Kamu tidak punya uang untuk melanjutkan pembelian.");
            		}
            		case 2:
		            {
               			if(PlayerData[playerid][pMoney] >= 3000)
                 		{
                 		    if (Inventory_Count(playerid, "Armored Vest") >= 3)
		                		return SendErrorMessage(playerid, "Kamu sudah punya 3 Armored Vest, kamu tidak bisa membelinya lagi.");

                            new id = Inventory_Add(playerid, "Armored Vest", 19142);

							if (id == -1)
        						return SendErrorMessage(playerid, "Kamu tidak memiliki sisa persediaan slot.");

	                    	PlayerData[playerid][pMoney] -= 3000;
	                    	SendClientMessage(playerid, COLOR_WHITE, "Kamu telah membeli Armored Vest dari Black Market dengan harga $3000.");
						}
						else return SendErrorMessage(playerid, "Kamu tidak punya uang untuk melanjutkan pembelian.");
            		}
            		case 3:
		            {
               			if(PlayerData[playerid][pMoney] >= 4000)
                 		{
	                    	PlayerData[playerid][pMoney] -= 4000;
	                    	SetPlayerArmour(playerid, 100.0);
	                    	SendClientMessage(playerid, COLOR_WHITE, "Kamu telah membeli Heavy Armored Vest dari Black Market dengan harga $4000.");
						}
						else return SendErrorMessage(playerid, "Kamu tidak punya uang untuk melanjutkan pembelian.");
            		}
            		case 4:
		            {
               			if(PlayerData[playerid][pMoney] >= 7000)
                 		{
	                    	PlayerData[playerid][pMoney] -= 7000;
	                    	new id = Inventory_Add(playerid, "Bomb", 1654);

							if (id == -1)
        						return SendErrorMessage(playerid, "Kamu tidak memiliki sisa persediaan slot.");

	                    	SendClientMessage(playerid, COLOR_WHITE, "Kamu telah membeli Bomb dari Black Market dengan harga $7000.");
						}
						else return SendErrorMessage(playerid, "Kamu tidak punya uang untuk melanjutkan pembelian.");
            		}
				}
			}
		}
	}
	return 0;
}

forward KickHouse(playerid, id);
public KickHouse(playerid, id)
{
	if (GetFactionType(playerid) != FACTION_POLICE || House_Nearest(playerid) != id)
	    return 0;

	switch (random(6))
	{
	    case 0..2:
	    {
	        ShowPlayerFooter(playerid, "Kamu ~r~gagal~w~ mendobrak pintu.");
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah gagal mendobrak pintu.", ReturnName(playerid, 0));
		}
		default:
		{
		    HouseData[id][houseLocked] = 0;
		    House_Save(id);

		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah berhasil mendobrak pintu.", ReturnName(playerid, 0));
		    ShowPlayerFooter(playerid, "Tekan ~y~'F'~w~ untuk masuk ke rumah.");
		}
	}
	return 1;
}

forward KickBusiness(playerid, id);
public KickBusiness(playerid, id)
{
	if (GetFactionType(playerid) != FACTION_POLICE || Business_Nearest(playerid) != id)
	    return 0;

	switch (random(6))
	{
	    case 0..2:
	    {
	        ShowPlayerFooter(playerid, "Kamu ~r~gagal~w~ mendobrak pintu.");
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah gagal mendobrak pintu.", ReturnName(playerid, 0));
		}
		default:
		{
		    BusinessData[id][bizLocked] = 0;
		    Business_Save(id);

		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah berhasil mendobrak pintu.", ReturnName(playerid, 0));
		    ShowPlayerFooter(playerid, "Tekan ~y~'F'~w~ untuk masuk.");
		}
	}
	return 1;
}

forward UpdateBooth(playerid, id);
public UpdateBooth(playerid, id)
{
	if (PlayerData[playerid][pRangeBooth] != id || !g_BoothUsed[id])
	    return 0;

	if (PlayerData[playerid][pTargets] == 10)
	{
	    PlayerData[playerid][pTargets] = 0;

	    switch (PlayerData[playerid][pTargetLevel]++)
	    {
	        case 0:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 25, 15000);
	            SendServerMessage(playerid, "Kamu berhasil naik level (1/5).");
	        }
	        case 1:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 28, 15000);
	            SendServerMessage(playerid, "Kamu berhasil naik level (2/5).");
	        }
	        case 2:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 29, 15000);
	            SendServerMessage(playerid, "Kamu berhasil naik level (3/5).");
	        }
	        case 3:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 30, 15000);
	            SendServerMessage(playerid, "Kamu berhasil naik level (4/5).");
	        }
	        case 4:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 27, 15000);
	            SendServerMessage(playerid, "Kamu berhasil naik level (5/5).");
	        }
	        case 5:
	        {
	            Booth_Leave(playerid);
	            SendServerMessage(playerid, "Kamu berhasil menyelesaikan tantangan menembak!");
	        }
	    }
	}
	Booth_Refresh(playerid);
	return 1;
}

stock PlayerHasTazer(playerid)
{
	return (GetPlayerWeapon(playerid) == 23 && PlayerData[playerid][pTazer]);
}

stock PlayerHasBeanBag(playerid)
{
	return (GetPlayerWeapon(playerid) == 25 && PlayerData[playerid][pBeanBag]);
}

stock SetPlayerToFacePlayer(playerid, targetid)
{
	new
	    Float:x[2],
	    Float:y[2],
	    Float:z[2],
	    Float:angle;

	GetPlayerPos(targetid, x[0], y[0], z[0]);
	GetPlayerPos(playerid, x[1], y[1], z[1]);

	angle = (180.0 - atan2(x[1] - x[0], y[1] - y[0]));
	SetPlayerFacingAngle(playerid, angle + (5.0 * -1));
}

stock DisableWaypoint(playerid)
{
    if (PlayerData[playerid][pWaypoint])
	{
 		PlayerData[playerid][pWaypoint] = 0;

 		DisablePlayerCheckpoint(playerid);
  		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][69]);
	}
	return 1;
}

stock GetAdminSQL(level)
{
	    new astring[28];
		if(level == 1)format(astring, sizeof(astring), "Trial Administrator");
		else if(level == 2)format(astring, sizeof(astring), "Administrator");
		else if(level == 3)format(astring, sizeof(astring), "Senior Administrator");
		else if(level == 4)format(astring, sizeof(astring), "Lead Administrator");
		else if(level == 5)format(astring, sizeof(astring), "Head Administrator");
		else if(level == 6)format(astring, sizeof(astring), "Management");
		return astring;
}

stock AdminRankName(playerid)
{
	 	new astring[50];
		if (PlayerData[playerid][pAdmin] == 1)format(astring, sizeof(astring), "Moderator");
		else if (PlayerData[playerid][pAdmin] == 2)format(astring, sizeof(astring), "Junior Administrator");
		else if (PlayerData[playerid][pAdmin] == 3)format(astring, sizeof(astring), "General Administrator");
		else if (PlayerData[playerid][pAdmin] == 4)format(astring, sizeof(astring), "Senior Admin Of Helper");
		else if (PlayerData[playerid][pAdmin] == 5)format(astring, sizeof(astring), "Senior Admin Of Familly");
		else if (PlayerData[playerid][pAdmin] == 6)format(astring, sizeof(astring), "Senior Admin Of Faction");
		else if (PlayerData[playerid][pAdmin] == 7)format(astring, sizeof(astring), "Vice Head Administrator");
		else if (PlayerData[playerid][pAdmin] == 8)format(astring, sizeof(astring), "Head Administrator");
		else if (PlayerData[playerid][pAdmin] == 9)format(astring, sizeof(astring), "Scripter");
		else if (PlayerData[playerid][pAdmin] == 10)format(astring, sizeof(astring), "Developer");
		else if (PlayerData[playerid][pHelper] == 1)format(astring, sizeof(astring), "Trial Helper");
		else if (PlayerData[playerid][pHelper] == 2)format(astring, sizeof(astring), "General Helper");
		else if (PlayerData[playerid][pHelper] == 3)format(astring, sizeof(astring), "Senior Helper");
		else if (PlayerData[playerid][pHelper] == 4)format(astring, sizeof(astring), "Lead Helper");
		else if (PlayerData[playerid][pHelper] == 5)format(astring, sizeof(astring), "Head Helper");
		else if (PlayerData[playerid][pHelper] == 6)format(astring, sizeof(astring), "Management");
		return astring;
}

stock HelperRankName(playerid)
{
	 	new astring[28];
		if (PlayerData[playerid][pHelper] == 1)format(astring, sizeof(astring), "Trial Helper");
		else if (PlayerData[playerid][pHelper] == 2)format(astring, sizeof(astring), "General Helper");
		else if (PlayerData[playerid][pHelper] == 3)format(astring, sizeof(astring), "Senior Helper");
		else if (PlayerData[playerid][pHelper] == 4)format(astring, sizeof(astring), "Lead Helper");
		else if (PlayerData[playerid][pHelper] == 5)format(astring, sizeof(astring), "Head Helper");
		else if (PlayerData[playerid][pHelper] == 6)format(astring, sizeof(astring), "Management");
		return astring;
}

stock DonatorRankName(playerid)
{
	 	new astring[28];
		if (PlayerData[playerid][pDonator] == 1)format(astring, sizeof(astring), "Bronze Donator");
		else if (PlayerData[playerid][pDonator] == 2)format(astring, sizeof(astring), "Silver Donator");
		else if (PlayerData[playerid][pDonator] == 3)format(astring, sizeof(astring), "Gold Donator");
		else if (PlayerData[playerid][pDonator] == 4)format(astring, sizeof(astring), "Platinum Donator");
		else if (PlayerData[playerid][pDonator] == 5)format(astring, sizeof(astring), "Diamond Donator");
		else if (PlayerData[playerid][pDonator] == 6)format(astring, sizeof(astring), "Donator Management");
		return astring;
}

stock TerminateConnection(playerid)
{
	if (BoomboxData[playerid][boomboxPlaced])
		Boombox_Destroy(playerid);

	if (PlayerData[playerid][pRangeBooth] != -1)
		Booth_Leave(playerid);

	if (PlayerData[playerid][pFirstAid])
	    KillTimer(PlayerData[playerid][pAidTimer]);

	if (PlayerData[playerid][pDrivingTest])
	    DestroyVehicle(PlayerData[playerid][pTestCar]);

	if (PlayerData[playerid][pShowFooter])
	    KillTimer(PlayerData[playerid][pFooterTimer]);

	if (PlayerData[playerid][pTaxiPlayer] != INVALID_PLAYER_ID)
	    LeaveTaxi(playerid, PlayerData[playerid][pTaxiPlayer]);

	if (PlayerData[playerid][pDragged])
	    KillTimer(PlayerData[playerid][pDragTimer]);

	if (PlayerData[playerid][pFreeze])
	    KillTimer(PlayerData[playerid][pFreezeTimer]);

	foreach (new i : Player)
	{
	    if (PlayerData[i][pLastShot] == playerid) {
	        PlayerData[i][pLastShot] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pHouseSeller] == playerid) {
		    PlayerData[i][pHouseSeller] = INVALID_PLAYER_ID;
		    PlayerData[i][pHouseOffered] = -1;
		}
		if (PlayerData[i][pBusinessSeller] == playerid) {
		    PlayerData[i][pBusinessSeller] = INVALID_PLAYER_ID;
		    PlayerData[i][pBusinessOffered] = -1;
		}
		if (PlayerData[i][pCarSeller] == playerid) {
		    PlayerData[i][pCarSeller] = INVALID_PLAYER_ID;
		    PlayerData[i][pCarOffered] = -1;
		}
		if (PlayerData[i][pShakeOffer] == playerid) {
		    PlayerData[i][pShakeOffer] = INVALID_PLAYER_ID;
		    PlayerData[i][pShakeType] = 0;
		}
		if (PlayerData[i][pFriskOffer] == playerid) {
		    PlayerData[i][pFriskOffer] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pFoodSeller] == playerid) {
		    PlayerData[i][pFoodSeller] = INVALID_PLAYER_ID;
		    PlayerData[i][pFoodType] = 0;
		}
		if (PlayerData[i][pFactionOffer] == playerid) {
		    PlayerData[i][pFactionOffer] = INVALID_PLAYER_ID;
		    PlayerData[i][pFactionOffered] = -1;
		}
		if (PlayerData[i][pLoanOffer] == playerid) {
		    PlayerData[i][pLoanOffer] = INVALID_PLAYER_ID;
		    PlayerData[i][pLoanOffered] = -1;
		}
		if (PlayerData[i][pDraggedBy] == playerid) {
		    KillTimer(PlayerData[i][pDragTimer]);

		    PlayerData[i][pDragged] = 0;
            PlayerData[i][pDraggedBy] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pMDCPlayer] == playerid) {
		    PlayerData[i][pMDCPlayer] = INVALID_PLAYER_ID;
		    PlayerData[i][pTrackTime] = 0;
		}
		if (PlayerData[i][pNewsGuest] == playerid) {
		    PlayerData[i][pNewsGuest] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pGiveItem] == playerid) {
		    PlayerData[i][pGiveItem] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pTakeItems] == playerid) {
		    PlayerData[i][pTakeItems] = INVALID_PLAYER_ID;
		}
	}
	for(new i; i < MAX_VEHICLES; i++)
	{
		if(g_Bomb_Vehicles[i][bv_i_BombOwner] == playerid)
		{
			g_Bomb_Vehicles[i][bv_i_BombOwner] = INVALID_PLAYER_ID;
		}
	}
	SQL_SaveCharacter(playerid);
	ResetNameTag(playerid);
	Report_Clear(playerid);
	ResetStatistics(playerid);
	return 1;
}

stock IsTaskCompleted(playerid)
{
	if ((PlayerData[playerid][pTask] > 0) && (PlayerData[playerid][pBankTask] > 0 && PlayerData[playerid][pStoreTask] > 0 && PlayerData[playerid][pTestTask] > 0))
	    return 1;

	return 0;
}

stock IsTaskActive(playerid)
{
	if ((PlayerData[playerid][pTask] > 0) && (!PlayerData[playerid][pBankTask] || !PlayerData[playerid][pStoreTask] || !PlayerData[playerid][pTestTask]))
	    return 1;

	return 0;
}

stock HoldWeapon(playerid, weaponid)
{
	RemovePlayerAttachedObject(playerid, 4);

	PlayerData[playerid][pHoldWeapon] = weaponid;
    PlayerData[playerid][pUsedMagazine] = 0;

	if (weaponid != 0)
	{
		SetPlayerAttachedObject(playerid, 4, GetWeaponModel(weaponid), 6);
  		SetPlayerArmedWeapon(playerid, 0);
	}
	return 1;
}

stock GetWeapon(playerid)
{
	new weaponid = GetPlayerWeapon(playerid);

	if (1 <= weaponid <= 46 && PlayerData[playerid][pGuns][g_aWeaponSlots[weaponid]] == weaponid)
 		return weaponid;

	return 0;
}

stock IsBleedableWeapon(weaponid)
{
	switch (weaponid) {
	    case 4, 8, 9, 22..38: return 1;
	}
	return 0;
}

stock CreateBlood(playerid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetTimerEx("DestroyBlood", 1500, false, "d", CreateDynamicObject(18668, x, y, z - 1.5, 0.0, 0.0, 0.0));

	return 1;
}

stock ExplodeVehicleBomb(vehicleid)
{
	SetVehicleHealth(vehicleid, 50.0);

	new
		Float: f_vPos[3];

	GetVehiclePos(vehicleid, f_vPos[0], f_vPos[1], f_vPos[2]);

	CreateExplosion(f_vPos[0], f_vPos[1], f_vPos[2], 4, 5.0); // Extra effects
	CreateExplosion(f_vPos[0], f_vPos[1], f_vPos[2], 5, 5.0); // Extra effects

	CreateExplosion(f_vPos[0], f_vPos[1], f_vPos[2], 6, 5.0); // Big one

	ResetBombInfo(vehicleid);
}

stock PlayVehicleBombSound(vehicleid, sound)
{
	new
		Float:	v_Pos[3];

	GetVehiclePos(vehicleid, v_Pos[0], v_Pos[1], v_Pos[2]);

	for(new i; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerInVehicle(i, vehicleid))
		{
			PlayerPlaySound(i, sound, v_Pos[0], v_Pos[1],v_Pos[2]);
		}
		else
		{
			if(IsPlayerInRangeOfPoint(i, 10.0, v_Pos[0], v_Pos[1], v_Pos[2]))
			{
				PlayerPlaySound(i, sound, v_Pos[0], v_Pos[1],v_Pos[2]);
			}
		}
	}
}

stock CreateRoadblock(Object,Float:x,Float:y,Float:z,Float:Angle)
{
    for(new i = 0; i < sizeof(Roadblocks); i++)
  	{
  	    if(Roadblocks[i][sCreated] == 0)
  	    {
            Roadblocks[i][sCreated] = 1;
            Roadblocks[i][sX] = x;
            Roadblocks[i][sY] = y;
            Roadblocks[i][sZ] = z-0.7;
            Roadblocks[i][sObject] = CreateDynamicObject(Object, x, y, z-0.9, 0, 0, Angle);
	        return 1;
  	    }
  	}
  	return 0;
}

stock PlayerText:ShowPlayerBox(playerid, color)
{
	new
	    PlayerText:textid;

    textid = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "_");
	PlayerTextDrawFont(playerid, textid, 1);
	PlayerTextDrawLetterSize(playerid, textid, 0.500000, 50.000000);
	PlayerTextDrawColor(playerid, textid, -1);
	PlayerTextDrawUseBox(playerid, textid, 1);
	PlayerTextDrawBoxColor(playerid, textid, color);
	PlayerTextDrawTextSize(playerid, textid, 640.000000, 30.000000);
	PlayerTextDrawShow(playerid, textid);

	return textid;
}

stock Graffiti_Refresh(id)
{
	if (id != -1 && GraffitiData[id][graffitiExists])
	{
		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

        GraffitiData[id][graffitiIcon] = CreateDynamicMapIcon(GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 23, 0, -1, -1, -1, 300.0, MAPICON_GLOBAL);
		GraffitiData[id][graffitiObject] = CreateDynamicObject(19482, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 0.0, 0.0, GraffitiData[id][graffitiPos][3]);

		SetDynamicObjectMaterial(GraffitiData[id][graffitiObject], 0, 0, "none", "none", 0);
		SetDynamicObjectMaterialText(GraffitiData[id][graffitiObject], 0, GraffitiData[id][graffitiText], OBJECT_MATERIAL_SIZE_256x128, "Arial", 24, 1, GraffitiData[id][graffitiColor], 0, 0);
	}
	return 1;
}

stock IsSprayingInProgress(id)
{
	foreach (new i : Player)
	{
	    if (PlayerData[i][pGraffiti] == id && IsPlayerInRangeOfPoint(i, 5.0, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2]))
	        return 1;
	}
	return 0;
}

stock Graffiti_Nearest(playerid)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++) if (GraffitiData[i][graffitiExists] && IsPlayerInRangeOfPoint(playerid, 5.0, GraffitiData[i][graffitiPos][0], GraffitiData[i][graffitiPos][1], GraffitiData[i][graffitiPos][2]))
	    return i;

	return -1;
}

stock Graffiti_Delete(id)
{
    if (id != -1 && GraffitiData[id][graffitiExists])
	{
	    new
	        string[64];

		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

		format(string, sizeof(string), "DELETE FROM `graffiti` WHERE `graffitiID` = '%d'", GraffitiData[id][graffitiID]);
		mysql_tquery(g_iHandle, string);

		GraffitiData[id][graffitiExists] = false;
		GraffitiData[id][graffitiText][0] = 0;
		GraffitiData[id][graffitiID] = 0;
	}
	return 1;
}

stock Graffiti_Save(id)
{
	new
	    query[384];

	format(query, sizeof(query), "UPDATE `graffiti` SET `graffitiX` = '%.4f', `graffitiY` = '%.4f', `graffitiZ` = '%.4f', `graffitiAngle` = '%.4f', `graffitiColor` = '%d', `graffitiText` = '%s' WHERE `graffitiID` = '%d'",
        GraffitiData[id][graffitiPos][0],
        GraffitiData[id][graffitiPos][1],
        GraffitiData[id][graffitiPos][2],
        GraffitiData[id][graffitiPos][3],
		GraffitiData[id][graffitiColor],
		SQL_ReturnEscaped(GraffitiData[id][graffitiText]),
		GraffitiData[id][graffitiID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Graffiti_Create(Float:x, Float:y, Float:z, Float:angle)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++)
	{
	    if (!GraffitiData[i][graffitiExists])
	    {
			GraffitiData[i][graffitiExists] = 1;
			GraffitiData[i][graffitiPos][0] = x;
			GraffitiData[i][graffitiPos][1] = y;
			GraffitiData[i][graffitiPos][2] = z;
			GraffitiData[i][graffitiPos][3] = angle - 90.0;
			GraffitiData[i][graffitiColor] = 0xFFFFFFFF;

			format(GraffitiData[i][graffitiText], 32, "Graffiti");

			Graffiti_Refresh(i);
			mysql_tquery(g_iHandle, "INSERT INTO `graffiti` (`graffitiColor`) VALUES(0)", "OnGraffitiCreated", "d", i);

			return i;
		}
	}
	return -1;
}

stock Speed_Refresh(speedid)
{
	if (speedid != -1 && SpeedData[speedid][speedExists])
	{
	    new
	        string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		    DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		    DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "[Kamera %d]\n{FFFFFF}Kecepatan: %.0f mph", speedid, SpeedData[speedid][speedLimit]);

		SpeedData[speedid][speedText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2] + 2.5, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
        SpeedData[speedid][speedObject] = CreateDynamicObject(18880, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2], 0.0, 0.0, SpeedData[speedid][speedPos][3]);
	}
	return 1;
}

stock Speed_Save(speedid)
{
	new
	    query[255];

	format(query, sizeof(query), "UPDATE `speedcameras` SET `speedRange` = '%.4f', `speedLimit` = '%.4f', `speedX` = '%.4f', `speedY` = '%.4f', `speedZ` = '%.4f', `speedAngle` = '%.4f' WHERE `speedID` = '%d'",
	    SpeedData[speedid][speedRange],
	    SpeedData[speedid][speedLimit],
	    SpeedData[speedid][speedPos][0],
	    SpeedData[speedid][speedPos][1],
	    SpeedData[speedid][speedPos][2],
	    SpeedData[speedid][speedPos][3],
	    SpeedData[speedid][speedID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Speed_Nearest(playerid)
{
	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (SpeedData[i][speedExists] && IsPlayerInRangeOfPoint(playerid, SpeedData[i][speedRange], SpeedData[i][speedPos][0], SpeedData[i][speedPos][1], SpeedData[i][speedPos][2]))
	    return i;

	return -1;
}

stock Speed_Delete(speedid)
{
    if (speedid != -1 && SpeedData[speedid][speedExists])
	{
	    new
	        string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		    DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		    DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "DELETE FROM `speedcameras` WHERE `speedID` = '%d'", SpeedData[speedid][speedID]);
		mysql_tquery(g_iHandle, string);

		SpeedData[speedid][speedExists] = false;
		SpeedData[speedid][speedLimit] = 0.0;
		SpeedData[speedid][speedRange] = 0.0;
		SpeedData[speedid][speedID] = 0;
	}
	return 1;
}

stock Speed_Create(playerid, Float:limit, Float:range)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (!SpeedData[i][speedExists])
	{
	    SpeedData[i][speedExists] = true;
	    SpeedData[i][speedRange] = range;
        SpeedData[i][speedLimit] = limit;

		SpeedData[i][speedPos][0] = x + (1.5 * floatsin(-angle, degrees));
	    SpeedData[i][speedPos][1] = y + (1.5 * floatcos(-angle, degrees));
	    SpeedData[i][speedPos][2] = z - 1.2;
	    SpeedData[i][speedPos][3] = angle;

	    Speed_Refresh(i);
	    mysql_tquery(g_iHandle, "INSERT INTO `speedcameras` (`speedRange`) VALUES(0.0)", "OnSpeedCreated", "d", i);
	    return i;
	}
	return -1;
}

stock IsPlayerOnPhone(playerid)
{
	if (PlayerData[playerid][pEmergency] > 0 || PlayerData[playerid][pPlaceAd] > 0 || PlayerData[playerid][pDealerCall] > 0 || PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
	    return 1;

	return 0;
}

stock FlipVehicle(vehicleid)
{
	new
	    Float:fAngle;

	GetVehicleZAngle(vehicleid, fAngle);

	SetVehicleZAngle(vehicleid, fAngle);
	SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
}

stock StopVehicleRadio(vehicleid)
{
	if ((IsValidVehicle(vehicleid) && IsEngineVehicle(vehicleid)) && CoreVehicles[vehicleid][vehRadio])
	{
	    CoreVehicles[vehicleid][vehRadio] = 0;

	    foreach (new i : Player)
		{
			if (IsPlayerInVehicle(i, vehicleid))
			{
			    StopAudioStreamForPlayer(i);
			    PlayerData[i][pPlayRadio] = 0;
			}
	    }
	}
	return 1;
}

stock SetVehicleRadio(vehicleid, url[])
{
	if (IsValidVehicle(vehicleid) && IsEngineVehicle(vehicleid))
	{
        CoreVehicles[vehicleid][vehRadio] = 1;
        strpack(CoreVehicles[vehicleid][vehURL], url, 128 char);

        foreach (new i : Player)
		{
			if (IsPlayerInVehicle(i, vehicleid))
			{
			    PlayerData[i][pPlayRadio] = 1;

			    StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, url);
            }
        }
	}
	return 1;
}
stock ResetVehicle(vehicleid)
{
	if (1 <= vehicleid <= MAX_VEHICLES)
	{
	    if (CoreVehicles[vehicleid][vehSirenOn] && IsValidDynamicObject(CoreVehicles[vehicleid][vehSirenObject]))
	        DestroyDynamicObject(CoreVehicles[vehicleid][vehSirenObject]);

	    CoreVehicles[vehicleid][vehFuel] = 100;
		CoreVehicles[vehicleid][vehWindowsDown] = false;
		CoreVehicles[vehicleid][vehTemporary] = 0;
  		CoreVehicles[vehicleid][vehLoads] = 0;
		CoreVehicles[vehicleid][vehLoadType] = 0;
		CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
		CoreVehicles[vehicleid][vehTrash] = 0;
		CoreVehicles[vehicleid][vehRepairing] = 0;
		CoreVehicles[vehicleid][vehSirenOn] = 0;
		CoreVehicles[vehicleid][vehRadio] = 0;
	}
	return 1;
}

stock RespawnVehicle(vehicleid)
{
	new id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    Car_Spawn(id);
	}
	else SetVehicleToRespawn(vehicleid);

	ResetVehicle(vehicleid);
	return 1;
}

stock GetWeaponCount(playerid)
{
	new
		count,
	    weapon,
	    ammo;

	for (new i = 0; i < 12; i ++)
	{
	    GetPlayerWeaponData(playerid, i, weapon, ammo);

	    if (weapon > 0 && ammo > 0) count++;
	}
	return count;
}

stock Boombox_Place(playerid)
{
	new
	    Float:angle;

	GetPlayerFacingAngle(playerid, angle);

	strpack(BoomboxData[playerid][boomboxURL], "", 128 char);
	GetPlayerPos(playerid, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]);

	BoomboxData[playerid][boomboxPlaced] = true;
	BoomboxData[playerid][boomboxInterior] = GetPlayerInterior(playerid);
	BoomboxData[playerid][boomboxWorld] = GetPlayerVirtualWorld(playerid);

    BoomboxData[playerid][boomboxObject] = CreateDynamicObject(2226, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2] - 0.9, 0.0, 0.0, angle, BoomboxData[playerid][boomboxWorld], BoomboxData[playerid][boomboxInterior]);
    BoomboxData[playerid][boomboxText3D] = CreateDynamic3DTextLabel("[Boombox]\n{FFFFFF}/boombox untuk menggunakan boombox ini.", COLOR_DEPARTMENT, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2] - 0.7, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BoomboxData[playerid][boomboxWorld], BoomboxData[playerid][boomboxInterior]);

	return 1;
}

stock Boombox_Nearest(playerid)
{
	foreach (new i : Player) if (BoomboxData[i][boomboxPlaced] && GetPlayerInterior(playerid) == BoomboxData[i][boomboxInterior] && GetPlayerVirtualWorld(playerid) == BoomboxData[i][boomboxWorld] && IsPlayerInRangeOfPoint(playerid, 30.0, BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2])) {
     	return i;
	}
	return INVALID_PLAYER_ID;
}

stock Boombox_SetURL(playerid, url[])
{
	if (BoomboxData[playerid][boomboxPlaced])
	{
	    strpack(BoomboxData[playerid][boomboxURL], url, 128 char);

	    foreach (new i : Player) if (PlayerData[i][pBoombox] == playerid) {
	        StopAudioStreamForPlayer(i);
	        PlayAudioStreamForPlayer(i, url, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2], 30.0, 1);
		}
	}
	return 1;
}

stock Boombox_Destroy(playerid)
{
	if (BoomboxData[playerid][boomboxPlaced])
	{
		if (IsValidDynamicObject(BoomboxData[playerid][boomboxObject]))
		    DestroyDynamicObject(BoomboxData[playerid][boomboxObject]);

		if (IsValidDynamic3DTextLabel(BoomboxData[playerid][boomboxText3D]))
		    DestroyDynamic3DTextLabel(BoomboxData[playerid][boomboxText3D]);

		foreach (new i : Player) if (PlayerData[i][pBoombox] == playerid) {
		    StopAudioStreamForPlayer(i);
		}
        BoomboxData[playerid][boomboxPlaced] = false;
        BoomboxData[playerid][boomboxInterior] = 0;
        BoomboxData[playerid][boomboxWorld] = 0;
	}
	return 1;
}

stock Taxi_ShowCalls(playerid)
{
    static
	    string[2048];

	string[0] = 0;

	foreach (new i : Player) if (PlayerData[i][pTaxiCalled]) {
	    format(string, sizeof(string), "%s%d: %s (%s)\n", string, i, ReturnName(i, 0), GetPlayerLocation(i));
	}
	if (!strlen(string)) {
	    SendErrorMessage(playerid, "Tidak ada panggilan taxi yang diterima.");
	}
	else Dialog_Show(playerid, AcceptTaxi, DIALOG_STYLE_LIST, "Panggilan Taxi", string, "Terima", "Batal");
	return 1;
}

stock Mechanic_ShowCalls(playerid)
{
    static
	    string[2048];

	string[0] = 0;

	foreach (new i : Player) if (PlayerData[i][pMechanicCalled]) {
	    format(string, sizeof(string), "%s%d: %s (%s)\n", string, i, ReturnName(i, 0), GetPlayerLocation(i));
	}
	if (!strlen(string)) {
	    SendErrorMessage(playerid, "Tidak ada panggilan kerja yang diterima.");
	}
	else Dialog_Show(playerid, AcceptMechanic, DIALOG_STYLE_LIST, "Panggilan Kerja", string, "Terima", "Batal");
	return 1;
}

stock IsShipmentAccepted(businessid)
{
	foreach (new i : Player) if (PlayerData[i][pJob] == JOB_COURIER && PlayerData[i][pShipment] == businessid) {
	    return 1;
	}
	return 0;
}

stock CancelShipment(playerid)
{
    PlayerData[playerid][pShipment] = -1;

    if (PlayerData[playerid][pDeliverShipment])
    {
		PlayerData[playerid][pDeliverShipment] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}
stock ShowShipments(playerid)
{
    static
	    string[2048],
		type[24];

	string[0] = 0;

	for (new i = 0; i < MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizShipment] && !IsShipmentAccepted(i))
	{
	    switch (BusinessData[i][bizType]) {
	        case 1: type = "Retail Supplies";
	        case 2: type = "Ammunition";
	        case 3: type = "Clothing";
	        case 4: type = "Food Supplies";
			case 6: type = "Gasoline/Retail";
			case 7: type = "Furniture";
		}
	    format(string, sizeof(string), "%s%d: %s (%s)\n", string, i, BusinessData[i][bizName], type);
	}
	if (!strlen(string)) {
	    SendErrorMessage(playerid, "Tidak ada pengiriman yang diterima.");
	}
	else Dialog_Show(playerid, AcceptShipment, DIALOG_STYLE_LIST, "Pengiriman", string, "Terima", "Batak");
	return 1;
}
stock GetWheelName(componentid)
{
	new
		name[12];

	enum g_eWheelData {
	    g_eWheelModel,
	    g_eWheelName[12 char]
	};

	new const g_aWheelData[][g_eWheelData] = {
	    {1025, !"Offroad"},
	    {1073, !"Shadow"},
	    {1074, !"Mega"},
	    {1075, !"Rimshine"},
	    {1076, !"Wires"},
	    {1077, !"Classic"},
	    {1078, !"Twist"},
	    {1079, !"Cutter"},
	    {1080, !"Switch"},
	    {1081, !"Grove"},
	    {1082, !"Import"},
	    {1083, !"Dollar"},
	    {1084, !"Trance"},
	    {1085, !"Atomic"},
	    {1096, !"Ahab"},
	    {1097, !"Virtual"},
	    {1098, !"Access"}
	};
	for (new i = 0; i < sizeof(g_aWheelData); i ++) if (g_aWheelData[i][g_eWheelModel] == componentid) {
	    strunpack(name, g_aWheelData[i][g_eWheelName]);

	    return name;
	}
	strunpack(name, !"Unknown");
	return name;
}

stock SetVehicleColor(vehicleid, color1, color2)
{
    new id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carColor1] = color1;
	    CarData[id][carColor2] = color2;
	    Car_Save(id);
	}
	return ChangeVehicleColor(vehicleid, color1, color2);
}

stock SetVehiclePaintjob(vehicleid, paintjobid)
{
    new id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carPaintjob] = paintjobid;
	    Car_Save(id);
	}
	return ChangeVehiclePaintjob(vehicleid, paintjobid);
}

stock RemoveComponent(vehicleid, componentid)
{
	if (!IsValidVehicle(vehicleid) || (componentid < 1000 || componentid > 1193))
	    return 0;

	new
		id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carMods][GetVehicleComponentType(componentid)] = 0;
	    Car_Save(id);
	}
	return RemoveVehicleComponent(vehicleid, componentid);
}

stock AddComponent(vehicleid, componentid)
{
	if (!IsValidVehicle(vehicleid) || (componentid < 1000 || componentid > 1193))
	    return 0;

	new
		id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carMods][GetVehicleComponentType(componentid)] = componentid;
	    Car_Save(id);
	}
	return AddVehicleComponent(vehicleid, componentid);
}

stock ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0)
{
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);

	PlayerData[playerid][pLoopAnim] = true;
	ShowPlayerFooter(playerid, "Tekan ~y~SPASI~w~ untuk memberhentikan animasi.");

	return 1;
}

stock AnimationCheck(playerid)
{
	return (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !PlayerData[playerid][pKilled] && !PlayerData[playerid][pFreeze] && !PlayerData[playerid][pCuffed] && !PlayerData[playerid][pStunned] && !PlayerData[playerid][pFirstAid] && !PlayerData[playerid][pCrafting] && PlayerData[playerid][pGraffiti] == -1);
}

stock PreloadAnimations(playerid)
{
	for (new i = 0; i < sizeof(g_aPreloadLibs); i ++) {
	    ApplyAnimation(playerid, g_aPreloadLibs[i], "null", 4.0, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

stock Vendor_Create(playerid, type)
{
	for (new i = 0; i != MAX_VENDORS; i ++) if (!VendorData[i][vendorExists])
	{
	    VendorData[i][vendorExists] = true;
	    VendorData[i][vendorType] = type;

	    GetPlayerPos(playerid, VendorData[i][vendorPos][0], VendorData[i][vendorPos][1], VendorData[i][vendorPos][2]);
	    GetPlayerFacingAngle(playerid, VendorData[i][vendorPos][3]);

	    VendorData[i][vendorPos][0] = VendorData[i][vendorPos][0] + (1.5 * floatsin(-VendorData[i][vendorPos][3], degrees));
	    VendorData[i][vendorPos][1] = VendorData[i][vendorPos][1] + (1.5 * floatcos(-VendorData[i][vendorPos][3], degrees));

		VendorData[i][vendorInterior] = GetPlayerInterior(playerid);
		VendorData[i][vendorWorld] = GetPlayerVirtualWorld(playerid);

		Vendor_Refresh(i);
		mysql_tquery(g_iHandle, "INSERT INTO `vendors` (`vendorType`) VALUES(0)", "OnVendorCreated", "d", i);
		return i;
	}
	return -1;
}

stock Vendor_Delete(vendorid)
{
	if (vendorid != -1 && VendorData[vendorid][vendorExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `vendors` WHERE `vendorID` = '%d'", VendorData[vendorid][vendorID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(VendorData[vendorid][vendorText3D]))
	        DestroyDynamic3DTextLabel(VendorData[vendorid][vendorText3D]);

		if (IsValidDynamicObject(VendorData[vendorid][vendorObject]))
		    DestroyDynamicObject(VendorData[vendorid][vendorObject]);

	    VendorData[vendorid][vendorExists] = false;
	    VendorData[vendorid][vendorType] = 0;
	    VendorData[vendorid][vendorID] = 0;
	}
	return 1;
}

Vendor_Nearest(playerid)
{
    for (new i = 0; i != MAX_VENDORS; i ++) if (VendorData[i][vendorExists] && IsPlayerInRangeOfPoint(playerid, 2.0, VendorData[i][vendorPos][0], VendorData[i][vendorPos][1], VendorData[i][vendorPos][2]))
	{
		if (GetPlayerInterior(playerid) == VendorData[i][vendorInterior] && GetPlayerVirtualWorld(playerid) == VendorData[i][vendorWorld])
			return i;
	}
	return -1;
}

stock Vendor_Refresh(vendorid)
{
	if (vendorid != -1 && VendorData[vendorid][vendorExists])
	{
	    if (IsValidDynamic3DTextLabel(VendorData[vendorid][vendorText3D]))
	        DestroyDynamic3DTextLabel(VendorData[vendorid][vendorText3D]);

		if (IsValidDynamicObject(VendorData[vendorid][vendorObject]))
		    DestroyDynamicObject(VendorData[vendorid][vendorObject]);

		new
			string[64];

		format(string, sizeof(string), "[Vendors %d]\n{FFFFFF}Tekan 'F' untuk menggunakan vendor ini.", vendorid);
		VendorData[vendorid][vendorText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, VendorData[vendorid][vendorPos][0], VendorData[vendorid][vendorPos][1], VendorData[vendorid][vendorPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, VendorData[vendorid][vendorWorld], VendorData[vendorid][vendorInterior]);

		switch (VendorData[vendorid][vendorType]) {
		    case 1: VendorData[vendorid][vendorObject] = CreateDynamicObject(1340, VendorData[vendorid][vendorPos][0], VendorData[vendorid][vendorPos][1], VendorData[vendorid][vendorPos][2], 0.0, 0.0, VendorData[vendorid][vendorPos][3] - 90.0, VendorData[vendorid][vendorWorld], VendorData[vendorid][vendorInterior]);
		    case 2: VendorData[vendorid][vendorObject] = CreateDynamicObject(1209, VendorData[vendorid][vendorPos][0], VendorData[vendorid][vendorPos][1], VendorData[vendorid][vendorPos][2] - 1.0, 0.0, 0.0, VendorData[vendorid][vendorPos][3], VendorData[vendorid][vendorWorld], VendorData[vendorid][vendorInterior]);
		}
	}
	return 1;
}

stock Vendor_Save(vendorid)
{
	new
	    query[300];

	format(query, sizeof(query), "UPDATE `vendors` SET `vendorType` = '%d', `vendorX` = '%.4f', `vendorY` = '%.4f', `vendorZ` = '%.4f', `vendorA` = '%.4f', `vendorInterior` = '%d', `vendorWorld` = '%d' WHERE `vendorID` = '%d'",
        VendorData[vendorid][vendorType],
        VendorData[vendorid][vendorPos][0],
        VendorData[vendorid][vendorPos][1],
        VendorData[vendorid][vendorPos][2],
        VendorData[vendorid][vendorPos][3],
        VendorData[vendorid][vendorInterior],
        VendorData[vendorid][vendorWorld],
        VendorData[vendorid][vendorID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Garbage_Create(playerid, type)
{
	for (new i = 0; i != MAX_GARBAGE_BINS; i ++) if (!GarbageData[i][garbageExists])
	{
	    switch (type) {
	        case 1: GarbageData[i][garbageModel] = 1236;
	        case 2: GarbageData[i][garbageModel] = 1300;
	    }
	    GarbageData[i][garbageExists] = true;
	    GarbageData[i][garbageCapacity] = 0;

	    GetPlayerPos(playerid, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]);
	    GetPlayerFacingAngle(playerid, GarbageData[i][garbagePos][3]);

		switch (type) {
		    case 1: {
		    	GarbageData[i][garbagePos][0] = GarbageData[i][garbagePos][0] + (1.8 * floatsin(-GarbageData[i][garbagePos][3], degrees));
			    GarbageData[i][garbagePos][1] = GarbageData[i][garbagePos][1] + (1.8 * floatcos(-GarbageData[i][garbagePos][3], degrees));
			}
			case 2: {
		    	GarbageData[i][garbagePos][0] = GarbageData[i][garbagePos][0] + (1.0 * floatsin(-GarbageData[i][garbagePos][3], degrees));
			    GarbageData[i][garbagePos][1] = GarbageData[i][garbagePos][1] + (1.0 * floatcos(-GarbageData[i][garbagePos][3], degrees));
			}
		}
		GarbageData[i][garbageInterior] = GetPlayerInterior(playerid);
		GarbageData[i][garbageWorld] = GetPlayerVirtualWorld(playerid);

		Garbage_Refresh(i);
		mysql_tquery(g_iHandle, "INSERT INTO `garbage` (`garbageCapacity`) VALUES(0)", "OnGarbageCreated", "d", i);
		return i;
	}
	return -1;
}

stock Garbage_Delete(garbageid)
{
	if (garbageid != -1 && GarbageData[garbageid][garbageExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `garbage` WHERE `garbageID` = '%d'", GarbageData[garbageid][garbageID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]))
	        DestroyDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]);

		if (IsValidDynamicObject(GarbageData[garbageid][garbageObject]))
		    DestroyDynamicObject(GarbageData[garbageid][garbageObject]);

	    GarbageData[garbageid][garbageExists] = false;
	    GarbageData[garbageid][garbageCapacity] = 0;
	    GarbageData[garbageid][garbageID] = 0;
	}
	return 1;
}

Garbage_Nearest(playerid)
{
    for (new i = 0; i != MAX_GARBAGE_BINS; i ++) if (GarbageData[i][garbageExists] && IsPlayerInRangeOfPoint(playerid, 3.0, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]))
	{
		if (GetPlayerInterior(playerid) == GarbageData[i][garbageInterior] && GetPlayerVirtualWorld(playerid) == GarbageData[i][garbageWorld])
			return i;
	}
	return -1;
}

stock Garbage_Refresh(garbageid)
{
	if (garbageid != -1 && GarbageData[garbageid][garbageExists])
	{
	    if (IsValidDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]))
	        DestroyDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]);

		if (IsValidDynamicObject(GarbageData[garbageid][garbageObject]))
		    DestroyDynamicObject(GarbageData[garbageid][garbageObject]);

		new
			string[64];

		format(string, sizeof(string), "[Garbage %d]\n{FFFFFF}Kapasitas Sampah: %d/20", garbageid, GarbageData[garbageid][garbageCapacity]);

		GarbageData[garbageid][garbageText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, GarbageData[garbageid][garbagePos][0], GarbageData[garbageid][garbagePos][1], GarbageData[garbageid][garbagePos][2], 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GarbageData[garbageid][garbageWorld], GarbageData[garbageid][garbageInterior]);
		GarbageData[garbageid][garbageObject] = CreateDynamicObject(GarbageData[garbageid][garbageModel], GarbageData[garbageid][garbagePos][0], GarbageData[garbageid][garbagePos][1], (GarbageData[garbageid][garbageModel] == 1236) ? (GarbageData[garbageid][garbagePos][2] - 0.4) : (GarbageData[garbageid][garbagePos][2] - 0.6), 0.0, 0.0, GarbageData[garbageid][garbagePos][3], GarbageData[garbageid][garbageWorld], GarbageData[garbageid][garbageInterior]);
	}
	return 1;
}

stock Garbage_Save(garbageid)
{
	new
	    query[300];

	format(query, sizeof(query), "UPDATE `garbage` SET `garbageModel` = '%d', `garbageCapacity` = '%d', `garbageX` = '%.4f', `garbageY` = '%.4f', `garbageZ` = '%.4f', `garbageA` = '%.4f', `garbageInterior` = '%d', `garbageWorld` = '%d' WHERE `garbageID` = '%d'",
        GarbageData[garbageid][garbageModel],
        GarbageData[garbageid][garbageCapacity],
        GarbageData[garbageid][garbagePos][0],
        GarbageData[garbageid][garbagePos][1],
        GarbageData[garbageid][garbagePos][2],
        GarbageData[garbageid][garbagePos][3],
        GarbageData[garbageid][garbageInterior],
        GarbageData[garbageid][garbageWorld],
        GarbageData[garbageid][garbageID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Booth_GetPlayer(id)
{
	foreach (new i : Player) if (PlayerData[i][pRangeBooth] == id) {
	    return i;
	}
	return INVALID_PLAYER_ID;
}

stock Booth_Leave(playerid)
{
	if (PlayerData[playerid][pRangeBooth] != -1)
	{
	    if (IsValidDynamicObject(g_BoothObject[PlayerData[playerid][pRangeBooth]])) {
	        DestroyDynamicObject(g_BoothObject[PlayerData[playerid][pRangeBooth]]);

	        g_BoothObject[PlayerData[playerid][pRangeBooth]] = -1;
	    }
    	ResetPlayerWeapons(playerid);
   		SetWeapons(playerid);

		g_BoothUsed[PlayerData[playerid][pRangeBooth]] = false;
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][81]);

		PlayerData[playerid][pRangeBooth] = -1;
  		PlayerData[playerid][pTargets] = 0;
  		PlayerData[playerid][pTargetLevel] = 0;
	}
	return 1;
}

stock Booth_Refresh(playerid)
{
	new id = PlayerData[playerid][pRangeBooth];

	if (id == -1)
	    return 0;

	if (IsValidDynamicObject(g_BoothObject[id])) {
	    DestroyDynamicObject(g_BoothObject[id]);
	}
	g_BoothObject[id] = CreateDynamicObject(1583, arrBoothPositions[id][0] - 15.0, arrBoothPositions[id][1] + 1.5, arrBoothPositions[id][2], 0.0, 0.0, 90.0);

	return MoveDynamicObject(g_BoothObject[id], arrBoothPositions[id][0] - 1.0, arrBoothPositions[id][1] + 1.5, arrBoothPositions[id][2], (!PlayerData[playerid][pTargetLevel]) ? (2.0) : (2.0 + (PlayerData[playerid][pTargetLevel] * 1.2)));
}

stock UpdateWeapons(playerid)
{
	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pGuns][i])
    {
		if ((i == 2 && PlayerData[playerid][pTazer]) || (i == 3 && PlayerData[playerid][pBeanBag]))
		    continue;

        GetPlayerWeaponData(playerid, i, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);

        if (PlayerData[playerid][pGuns][i] != 0 && !PlayerData[playerid][pAmmo][i]) {
            PlayerData[playerid][pGuns][i] = 0;
		}
	}
	return 1;
}

stock ATM_Delete(atmid)
{
	if (atmid != -1 && ATMData[atmid][atmExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `atm` WHERE `atmID` = '%d'", ATMData[atmid][atmID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamicObject(ATMData[atmid][atmObject]))
	        DestroyDynamicObject(ATMData[atmid][atmObject]);

	    if (IsValidDynamic3DTextLabel(ATMData[atmid][atmText3D]))
	        DestroyDynamic3DTextLabel(ATMData[atmid][atmText3D]);

	    ATMData[atmid][atmExists] = false;
	    ATMData[atmid][atmID] = 0;
	}
	return 1;
}

ATM_Nearest(playerid)
{
    for (new i = 0; i != MAX_ATM_MACHINES; i ++) if (ATMData[i][atmExists] && IsPlayerInRangeOfPoint(playerid, 2.5, ATMData[i][atmPos][0], ATMData[i][atmPos][1], ATMData[i][atmPos][2]))
	{
		if (GetPlayerInterior(playerid) == ATMData[i][atmInterior] && GetPlayerVirtualWorld(playerid) == ATMData[i][atmWorld])
			return i;
	}
	return -1;
}
stock IsPlayerInZone(playerid, zoneid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	return (x > ZoneInfo[zoneid][zMinX] && x < ZoneInfo[zoneid][zMaxX] && y > ZoneInfo[zoneid][zMinY] && y < ZoneInfo[zoneid][zMaxY]);
}
stock ATM_Create(playerid)
{
    new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_ATM_MACHINES; i ++) if (!ATMData[i][atmExists])
		{
		    ATMData[i][atmExists] = true;

		    x += 1.0 * floatsin(-angle, degrees);
			y += 1.0 * floatcos(-angle, degrees);

            ATMData[i][atmPos][0] = x;
            ATMData[i][atmPos][1] = y;
            ATMData[i][atmPos][2] = z;
            ATMData[i][atmPos][3] = angle;

            ATMData[i][atmInterior] = GetPlayerInterior(playerid);
            ATMData[i][atmWorld] = GetPlayerVirtualWorld(playerid);

			ATM_Refresh(i);
			mysql_tquery(g_iHandle, "INSERT INTO `atm` (`atmInterior`) VALUES(0)", "OnATMCreated", "d", i);

			return i;
		}
	}
	return -1;
}

stock ATM_Refresh(atmid)
{
	if (atmid != -1 && ATMData[atmid][atmExists])
	{
	    if (IsValidDynamicObject(ATMData[atmid][atmObject]))
	        DestroyDynamicObject(ATMData[atmid][atmObject]);

	    if (IsValidDynamic3DTextLabel(ATMData[atmid][atmText3D]))
	        DestroyDynamic3DTextLabel(ATMData[atmid][atmText3D]);

		new
	        string[64];

		format(string, sizeof(string), "[ATM %d]\n{FFFFFF}/atm untuk menggunakan atm.", atmid);

		ATMData[atmid][atmObject] = CreateDynamicObject(2942, ATMData[atmid][atmPos][0], ATMData[atmid][atmPos][1], ATMData[atmid][atmPos][2] - 0.4, 0.0, 0.0, ATMData[atmid][atmPos][3], ATMData[atmid][atmWorld], ATMData[atmid][atmInterior]);
        ATMData[atmid][atmText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, ATMData[atmid][atmPos][0], ATMData[atmid][atmPos][1], ATMData[atmid][atmPos][2], 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, ATMData[atmid][atmWorld], ATMData[atmid][atmInterior]);

		return 1;
	}
	return 0;
}

stock ATM_Save(atmid)
{
	new
	    query[200];

	format(query, sizeof(query), "UPDATE `atm` SET `atmX` = '%.4f', `atmY` = '%.4f', `atmZ` = '%.4f', `atmA` = '%.4f', `atmInterior` = '%d', `atmWorld` = '%d' WHERE `atmID` = '%d'",
	    ATMData[atmid][atmPos][0],
	    ATMData[atmid][atmPos][1],
	    ATMData[atmid][atmPos][2],
	    ATMData[atmid][atmPos][3],
	    ATMData[atmid][atmInterior],
	    ATMData[atmid][atmWorld],
	    ATMData[atmid][atmID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock IsVehicleImpounded(vehicleid)
{
    new id = Car_GetID(vehicleid);

	if (id != -1 && CarData[id][carImpounded] != -1 && CarData[id][carImpoundPrice] > 0)
	    return 1;

	return 0;
}

stock Impound_Delete(impoundid)
{
    if (impoundid != -1 && ImpoundData[impoundid][impoundExists])
	{
	    new
	        query[64];

		format(query, sizeof(query), "DELETE FROM `impoundlots` WHERE `impoundID` = '%d'", ImpoundData[impoundid][impoundID]);
		mysql_tquery(g_iHandle, query);

        if (IsValidDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]))
		    DestroyDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]);

	    if (IsValidDynamicPickup(ImpoundData[impoundid][impoundPickup]))
		    DestroyDynamicPickup(ImpoundData[impoundid][impoundPickup]);

		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists] && CarData[i][carImpounded] == ImpoundData[impoundid][impoundID]) {
		    CarData[i][carImpounded] = 0;
		    CarData[i][carImpoundPrice] = 0;
		    Car_Save(i);
		}
        ImpoundData[impoundid][impoundExists] = false;
        ImpoundData[impoundid][impoundID] = 0;
	}
	return 1;
}

stock GetImpoundByID(sqlid)
{
	for (new i = 0; i < MAX_IMPOUND_LOTS; i ++) if (ImpoundData[i][impoundExists] && ImpoundData[i][impoundID] == sqlid) {
	    return i;
	}
	return -1;
}

stock Impound_Nearest(playerid)
{
	for (new i = 0; i < MAX_IMPOUND_LOTS; i ++) if (ImpoundData[i][impoundExists] && IsPlayerInRangeOfPoint(playerid, 20.0, ImpoundData[i][impoundLot][0], ImpoundData[i][impoundLot][1], ImpoundData[i][impoundLot][2])) {
	    return i;
	}
	return -1;
}

stock Impound_Create(Float:x, Float:y, Float:z)
{
	for (new i = 0; i != MAX_IMPOUND_LOTS; i ++) if (!ImpoundData[i][impoundExists])
	{
	    ImpoundData[i][impoundExists] = true;
	    ImpoundData[i][impoundLot][0] = x;
	    ImpoundData[i][impoundLot][1] = y;
	    ImpoundData[i][impoundLot][2] = z;
	    ImpoundData[i][impoundRelease][0] = 0.0;
	    ImpoundData[i][impoundRelease][1] = 0.0;
	    ImpoundData[i][impoundRelease][2] = 0.0;

		mysql_tquery(g_iHandle, "INSERT INTO `impoundlots` (`impoundLotX`) VALUES('0.0')", "OnImpoundCreated", "d", i);
		Impound_Refresh(i);

		return i;
	}
	return -1;
}

stock Impound_Refresh(impoundid)
{
	if (impoundid != -1 && ImpoundData[impoundid][impoundExists])
	{
	    new
	        string[64];

		if (IsValidDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]))
		    DestroyDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]);

	    if (IsValidDynamicPickup(ImpoundData[impoundid][impoundPickup]))
		    DestroyDynamicPickup(ImpoundData[impoundid][impoundPickup]);

		format(string, sizeof(string), "[Impound %d]\n{FFFFFF}/impound untuk menyita kendaraan.", impoundid);
        ImpoundData[impoundid][impoundText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, ImpoundData[impoundid][impoundLot][0], ImpoundData[impoundid][impoundLot][1], ImpoundData[impoundid][impoundLot][2], 25.0);
        ImpoundData[impoundid][impoundPickup] = CreateDynamicPickup(1239, 23, ImpoundData[impoundid][impoundLot][0], ImpoundData[impoundid][impoundLot][1], ImpoundData[impoundid][impoundLot][2]);
	}
	return 1;
}

stock Impound_Save(impoundid)
{
	new
		query[300];

	format(query, sizeof(query), "UPDATE `impoundlots` SET `impoundLotX` = '%.4f', `impoundLotY` = '%.4f', `impoundLotZ` = '%.4f', `impoundReleaseX` = '%.4f', `impoundReleaseY` = '%.4f', `impoundReleaseZ` = '%.4f', `impoundReleaseA` = '%.4f' WHERE `impoundID` = '%d'",
        ImpoundData[impoundid][impoundLot][0],
        ImpoundData[impoundid][impoundLot][1],
        ImpoundData[impoundid][impoundLot][2],
        ImpoundData[impoundid][impoundRelease][0],
        ImpoundData[impoundid][impoundRelease][1],
        ImpoundData[impoundid][impoundRelease][2],
        ImpoundData[impoundid][impoundRelease][3],
        ImpoundData[impoundid][impoundID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Backpack_Items(playerid, id)
{
 	if (id != -1 && BackpackData[id][backpackExists])
 	{
 	    new
	        string[MAX_BACKPACK_CAPACITY * 32],
			count = 0;

	    for (new i = 0; i < MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id)
	    {
	        if (BackpackItems[i][bItemQuantity] == 1)
	            format(string, sizeof(string), "%s%s\n", string, BackpackItems[i][bItemName]);

			else format(string, sizeof(string), "%s%s (%d)\n", string, BackpackItems[i][bItemName], BackpackItems[i][bItemQuantity]);

			BackpackListed[playerid][count++] = i;
		}
		strcat(string, "Ambil Tas");

		PlayerData[playerid][pBackpackLoot] = id;
		Dialog_Show(playerid, BackpackLoot, DIALOG_STYLE_LIST, "Tas", string, "Pilih", "Batal");
	}
	return 1;
}

stock Backpack_Open(playerid)
{
	new id = GetPlayerBackpack(playerid);

	if (id != -1)
	{
	    new
	        string[MAX_BACKPACK_CAPACITY * 32],
			count = 0;

		string = "Simpan Item\n";

	    for (new i = 0; i < MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id)
	    {
	        if (BackpackItems[i][bItemQuantity] == 1)
	            format(string, sizeof(string), "%s%s\n", string, BackpackItems[i][bItemName]);

			else format(string, sizeof(string), "%s%s (%d)\n", string, BackpackItems[i][bItemName], BackpackItems[i][bItemQuantity]);

			BackpackListed[playerid][count++] = i;
		}
		Dialog_Show(playerid, Backpack, DIALOG_STYLE_LIST, "Tas", string, "Pilih", "Batal");
	}
	return 1;
}

stock Backpack_GetItems(id)
{
	new count;

	for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id) {
	    count++;
	}
	return count;
}

stock Backpack_GetFreeID()
{
	for (new i = 0; i != MAX_BACKPACKS; i ++) if (!BackpackData[i][backpackExists]) {
	    return i;
	}
	return -1;
}

stock Backpack_Refresh(id)
{
	if (id != -1 && BackpackData[id][backpackExists])
	{
	    if (IsValidDynamicObject(BackpackData[id][backpackObject]))
		    DestroyDynamicObject(BackpackData[id][backpackObject]);

		if (IsValidDynamic3DTextLabel(BackpackData[id][backpackText3D]))
		    DestroyDynamic3DTextLabel(BackpackData[id][backpackText3D]);

		if (!BackpackData[id][backpackPlayer]) {
	        BackpackData[id][backpackObject] = CreateDynamicObject(3026, BackpackData[id][backpackPos][0], BackpackData[id][backpackPos][1], BackpackData[id][backpackPos][2] - 0.8, -90.0, 0.0, 0.0, BackpackData[id][backpackWorld], BackpackData[id][backpackInterior]);
    	   	BackpackData[id][backpackText3D] = CreateDynamic3DTextLabel("[TAS]\n{FFFFFF}Tekan 'N' untuk melihat item-item.", COLOR_DEPARTMENT, BackpackData[id][backpackPos][0], BackpackData[id][backpackPos][1], BackpackData[id][backpackPos][2] - 0.8, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BackpackData[id][backpackWorld], BackpackData[id][backpackInterior]);
		}
	}
	return 1;
}

stock Backpack_GetItemID(id, name[])
{
	for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id && !strcmp(BackpackItems[i][bItemName], name, true)) {
	    return i;
	}
	return -1;
}

stock Backpack_GetFreeItem()
{
	for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if (!BackpackItems[i][bItemExists]) {
	    return i;
	}
	return -1;
}

stock Backpack_HasItem(id, name[])
{
	if (id != -1 && BackpackData[id][backpackExists])
		return Backpack_GetItemID(id, name) != -1;

	return 0;
}

stock Backpack_Count(id, name[])
{
	new itemid;

	if (id != -1 && BackpackData[id][backpackExists])
	{
		itemid = Backpack_GetItemID(id, name);

		if (itemid != -1)
		    return BackpackItems[itemid][bItemQuantity];
	}
	return 0;
}

stock Backpack_Add(id, name[], model, quantity = 1)
{
	new
	    query[128];

	if (id != -1 && BackpackData[id][backpackExists])
	{
	    new itemid = Backpack_GetItemID(id, name);

	    if (itemid != -1)
		{
	        format(query, sizeof(query), "UPDATE `backpackitems` SET `itemQuantity` = `itemQuantity` + %d WHERE `itemID` = '%d'", quantity, BackpackItems[itemid][bItemID]);
	        mysql_tquery(g_iHandle, query);

			return BackpackItems[itemid][bItemQuantity] += quantity;
		}
		else if ((itemid = Backpack_GetFreeItem()) != -1)
		{
		    format(BackpackItems[itemid][bItemName], 32, name);

		    BackpackItems[itemid][bItemBackpack] = id;
		    BackpackItems[itemid][bItemExists] = true;
		    BackpackItems[itemid][bItemModel] = model;
		    BackpackItems[itemid][bItemQuantity] = quantity;

	        format(query, sizeof(query), "INSERT INTO `backpackitems` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", BackpackData[id][backpackID], name, model, quantity);
	        mysql_tquery(g_iHandle, query, "OnBackpackAdd", "dd", id, itemid);

	        return 1;
		}
	}
	return 0;
}

stock Backpack_Remove(id, name[], quantity = 1)
{
	new
	    query[128];

	if (id != -1 && BackpackData[id][backpackExists])
	{
	    new itemid = Backpack_GetItemID(id, name);

	    if (itemid != -1)
		{
			if (BackpackItems[itemid][bItemQuantity] > 0)
			{
				BackpackItems[itemid][bItemQuantity] -= quantity;
			}
			if (BackpackItems[itemid][bItemQuantity] < 1)
			{
		        format(query, sizeof(query), "DELETE FROM `backpackitems` WHERE `itemID` = '%d'", BackpackItems[itemid][bItemID]);
		        mysql_tquery(g_iHandle, query);

			    BackpackItems[itemid][bItemBackpack] = -1;
			    BackpackItems[itemid][bItemExists] = false;
			    BackpackItems[itemid][bItemModel] = 0;
		    	BackpackItems[itemid][bItemQuantity] = 0;
		    }
			else
			{
                format(query, sizeof(query), "UPDATE `backpackitems` SET `itemQuantity` = `itemQuantity` - %d WHERE `itemID` = '%d'", quantity, BackpackItems[itemid][bItemID]);
		        mysql_tquery(g_iHandle, query);
			}
		    return 1;
		}
	}
	return 0;
}

stock GetHouseBackpack(houseid)
{
	for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackHouse] == HouseData[houseid][houseID]) {
	    return i;
	}
	return -1;
}

stock GetVehicleBackpack(carid)
{
	for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackVehicle] == CarData[carid][carID]) {
	    return i;
	}
	return -1;
}

stock GetPlayerBackpack(playerid)
{
	for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackPlayer] == PlayerData[playerid][pID]) {
	    return i;
	}
	return -1;
}

stock Backpack_Create(playerid)
{
	new id = Backpack_GetFreeID();

	if (id != -1)
	{
		BackpackData[id][backpackExists] = true;
		BackpackData[id][backpackPlayer] = PlayerData[playerid][pID];
		BackpackData[id][backpackHouse] = 0;
		BackpackData[id][backpackVehicle] = 0;
		BackpackData[id][backpackPos][0] = 0.0;
		BackpackData[id][backpackPos][1] = 0.0;
		BackpackData[id][backpackPos][2] = 0.0;

		mysql_tquery(g_iHandle, "INSERT INTO `backpacks` (`backpackInterior`) VALUES(0)", "OnBackpackCreated", "d", id);
		return id;
	}
	return -1;
}

stock Backpack_Delete(id)
{
	if (id != -1 && BackpackData[id][backpackExists])
	{
	    new
	        str[64];

		format(str, sizeof(str), "DELETE FROM `backpacks` WHERE `backpackID` = '%d'", BackpackData[id][backpackID]);
		mysql_tquery(g_iHandle, str);

		if (IsValidDynamicObject(BackpackData[id][backpackObject]))
		    DestroyDynamicObject(BackpackData[id][backpackObject]);

		if (IsValidDynamic3DTextLabel(BackpackData[id][backpackText3D]))
		    DestroyDynamic3DTextLabel(BackpackData[id][backpackText3D]);

        BackpackData[id][backpackExists] = false;
        BackpackData[id][backpackID] = 0;
        BackpackData[id][backpackPlayer] = 0;
        BackpackData[id][backpackHouse] = 0;
        BackpackData[id][backpackVehicle] = 0;
	}
	return 1;
}

stock Backpack_Save(id)
{
	new
	    query[256];

    format(query, sizeof(query), "UPDATE `backpacks` SET `backpackPlayer` = '%d', `backpackHouse` = '%d', `backpackVehicle` = '%d', `backpackX` = '%.4f', `backpackY` = '%.4f', `backpackZ` = '%.4f', `backpackInterior` = '%d', `backpackWorld` = '%d' WHERE `backpackID` = '%d'",
        BackpackData[id][backpackPlayer],
        BackpackData[id][backpackHouse],
        BackpackData[id][backpackVehicle],
        BackpackData[id][backpackPos][0],
        BackpackData[id][backpackPos][1],
        BackpackData[id][backpackPos][2],
        BackpackData[id][backpackInterior],
        BackpackData[id][backpackWorld],
        BackpackData[id][backpackID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock StartTutorial(playerid)
{
	ShowHungerTextdraw(playerid, 0);
	TogglePlayerControllable(playerid, 0);

    PlayerData[playerid][pTutorial] = 1;
    PlayerData[playerid][pTutorialTime] = 10;

	#if SERVER_CITY == 1
	    SetPlayerPos(playerid, 1806.737, -2043.505, 44.733);
	    SetPlayerCameraPos(playerid, 1670.9019,-2278.3835,31.0582);
		SetPlayerCameraLookAt(playerid, 1644.2184,-2321.8347,13.3828);
	#elseif SERVER_CITY == 2
		SetPlayerPos(playerid, -2399.519287, 321.964355, 17.035743);
		SetPlayerCameraPos(playerid, -2399.519287, 321.964355, 37.035743);
		SetPlayerCameraLookAt(playerid, -2399.951416, 322.215942, 37.015625);
	#elseif SERVER_CITY == 3
	    SetPlayerPos(playerid, 1694.187622, 1448.494506, -7.181461);
		SetPlayerCameraPos(playerid, 1694.187622, 1448.494506, 12.818538);
		SetPlayerCameraLookAt(playerid, 1693.687744, 1448.484497, 12.763537);
	#endif

	for (new i = 58; i < 62; i ++) {
	    PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
	}
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

stock IsValidObjectModel(modelid)
{
	if (modelid < 0 || modelid > 20000)
	    return 0;

    switch (modelid)
	{
		case 18632..18645, 18646..18658, 18659..18667, 18668..19299, 19301..19515, 18631, 331, 333..339, 318..321, 325, 326, 341..344, 346..353, 355..370, 372:
			return 1;
	}
    new const g_arrModelData[] =
	{
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128,
        -515899393, -134217729, -1, -1, 33554431, -1, -1, -1, -14337, -1, -33,
      	127, 0, 0, 0, 0, 0, -8388608, -1, -1, -1, -16385, -1, -1, -1, -1, -1,
       -1, -1, -33, -1, -771751937, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, 33554431, -25, -1, -1, -1, -1, -1, -1,
       -1073676289, -2147483648, 34079999, 2113536, -4825600, -5, -1, -3145729,
       -1, -16777217, -63, -1, -1, -1, -1, -201326593, -1, -1, -1, -1, -1,
       -257, -1, 1073741823, -133122, -1, -1, -65, -1, -1, -1, -1, -1, -1,
       -2146435073, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1073741823, -64, -1,
       -1, -1, -1, -2635777, 134086663, 0, -64, -1, -1, -1, -1, -1, -1, -1,
       -536870927, -131069, -1, -1, -1, -1, -1, -1, -1, -1, -16384, -1,
       -33554433, -1, -1, -1, -1, -1, -1610612737, 524285, -128, -1,
       2080309247, -1, -1, -1114113, -1, -1, -1, 66977343, -524288, -1, -1, -1,
       -1, -2031617, -1, 114687, -256, -1, -4097, -1, -4097, -1, -1,
       1010827263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32768, -1, -1, -1, -1, -1,
       2147483647, -33554434, -1, -1, -49153, -1148191169, 2147483647,
       -100781080, -262145, -57, 134217727, -8388608, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1048577, -1, -449, -1017, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1835009, -2049, -1, -1, -1, -1, -1, -1,
       -8193, -1, -536870913, -1, -1, -1, -1, -1, -87041, -1, -1, -1, -1, -1,
       -1, -209860, -1023, -8388609, -2096897, -1, -1048577, -1, -1, -1, -1,
       -1, -1, -897, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1610612737,
       -3073, -28673, -1, -1, -1, -1537, -1, -1, -13, -1, -1, -1, -1, -1985,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1056964609, -1, -1, -1,
       -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -236716037, -1, -1, -1, -1, -1, -1, -1, -536870913, 3, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -2097153, -2109441, -1, 201326591, -4194304, -1, -1,
       -241, -1, -1, -1, -1, -1, -1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, -32768, -1, -1, -1, -2, -671096835, -1, -8388609, -66323585, -13,
       -1793, -32257, -247809, -1, -1, -513, 16252911, 0, 0, 0, -131072,
       33554383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8356095, 0, 0, 0, 0, 0,
       0, -256, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -268435449, -1, -1, -2049, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       92274627, -65536, -2097153, -268435457, 591191935, 1, 0, -16777216, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127
	};
 	return ((modelid >= 0) && ((modelid / 32) < sizeof(g_arrModelData)) && (g_arrModelData[modelid / 32] & (1 << (modelid % 32))));
}

forward CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ);
public CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	new id = -1;

	if (GateData[gateid][gateExists] && GateData[gateid][gateOpened])
 	{
	 	MoveDynamicObject(GateData[gateid][gateObject], fX, fY, fZ, speed, fRotX, fRotY, fRotZ);

	 	if ((id = GetGateByID(linkid)) != -1)
            MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], speed, GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);

		GateData[id][gateOpened] = 0;
		return 1;
	}
	return 0;
}

/*stock Gate_Operate(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
	    new id = -1;

		if (!GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = true;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gateMove][0], GateData[gateid][gateMove][1], GateData[gateid][gateMove][2], GateData[gateid][gateSpeed], GateData[gateid][gateMove][3], GateData[gateid][gateMove][4], GateData[gateid][gateMove][5]);

            if (GateData[gateid][gateTime] > 0) {
				GateData[gateid][gateTimer] = SetTimerEx("CloseGate", GateData[gateid][gateTime], false, "ddfffffff", gateid, GateData[gateid][gateLinkID], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);
			}
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = true;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gateMove][0], GateData[id][gateMove][1], GateData[id][gateMove][2], GateData[id][gateSpeed], GateData[id][gateMove][3], GateData[id][gateMove][4], GateData[id][gateMove][5]);
			}
		}
		else if (GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = false;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);

            if (GateData[gateid][gateTime] > 0) {
				KillTimer(GateData[gateid][gateTimer]);
		    }
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = false;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gateSpeed], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);
			}
		}
	}
	return 1;
}*/
stock Gate_Operate(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
	    new id = -1;
		Gate_Save(gateid);
		if (!GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = true;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gateMove][0], GateData[gateid][gateMove][1], GateData[gateid][gateMove][2], GateData[gateid][gateSpeed], GateData[gateid][gateMove][3], GateData[gateid][gateMove][4], GateData[gateid][gateMove][5]);

            if (GateData[gateid][gateTime] > 0) {
				GateData[gateid][gateTimer] = SetTimerEx("CloseGate", GateData[gateid][gateTime], false, "ddfffffff", gateid, GateData[gateid][gateLinkID], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);
			}
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = true;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gateMove][0], GateData[id][gateMove][1], GateData[id][gateMove][2], GateData[id][gateSpeed], GateData[id][gateMove][3], GateData[id][gateMove][4], GateData[id][gateMove][5]);
			}
		}
		else if (GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = false;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);

            if (GateData[gateid][gateTime] > 0) {
				KillTimer(GateData[gateid][gateTimer]);
		    }
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = false;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gateSpeed], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);
			}
		}
	}
	return 1;
}

stock Gate_Create(playerid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_GATES; i ++) if (!GateData[i][gateExists])
		{
		    GateData[i][gateExists] = true;
			GateData[i][gateModel] = 980;
			GateData[i][gateSpeed] = 3.0;
			GateData[i][gateRadius] = 5.0;
			GateData[i][gateOpened] = 0;
			GateData[i][gateTime] = 0;

			GateData[i][gatePos][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gatePos][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gatePos][2] = z;
			GateData[i][gatePos][3] = 0.0;
			GateData[i][gatePos][4] = 0.0;
			GateData[i][gatePos][5] = angle;

			GateData[i][gateMove][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gateMove][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gateMove][2] = z - 10.0;
			GateData[i][gateMove][3] = -1000.0;
			GateData[i][gateMove][4] = -1000.0;
			GateData[i][gateMove][5] = -1000.0;

            GateData[i][gateInterior] = GetPlayerInterior(playerid);
            GateData[i][gateWorld] = GetPlayerVirtualWorld(playerid);

            GateData[i][gateLinkID] = -1;
            GateData[i][gateFaction] = -1;

            GateData[i][gatePass][0] = '\0';
            GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);

			mysql_tquery(g_iHandle, "INSERT INTO `gates` (`gateModel`) VALUES(980)", "OnGateCreated", "d", i);
			return i;
		}
	}
	return -1;
}

stock Gate_Delete(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
		new
		    query[64];

		format(query, sizeof(query), "DELETE FROM `gates` WHERE `gateID` = '%d'", GateData[gateid][gateID]);
		mysql_tquery(g_iHandle, query);

		if (IsValidDynamicObject(GateData[gateid][gateObject]))
		    DestroyDynamicObject(GateData[gateid][gateObject]);

		for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateLinkID] == GateData[gateid][gateID]) {
		    GateData[i][gateLinkID] = -1;
		    Gate_Save(i);
		}
		if (GateData[gateid][gateOpened] && GateData[gateid][gateTime] > 0) {
		    KillTimer(GateData[gateid][gateTimer]);
		}
	    GateData[gateid][gateExists] = false;
	    GateData[gateid][gateID] = 0;
	    GateData[gateid][gateOpened] = 0;
	}
	return 1;
}

stock Gate_Save(gateid)
{
	new
	    query[768];

	format(query, sizeof(query), "UPDATE `gates` SET `gateModel` = '%d', `gateSpeed` = '%.4f', `gateRadius` = '%.4f', `gateTime` = '%d', `gateX` = '%.4f', `gateY` = '%.4f', `gateZ` = '%.4f', `gateRX` = '%.4f', `gateRY` = '%.4f', `gateRZ` = '%.4f', `gateInterior` = '%d', `gateWorld` = '%d', `gateMoveX` = '%.4f', `gateMoveY` = '%.4f', `gateMoveZ` = '%.4f', `gateMoveRX` = '%.4f', `gateMoveRY` = '%.4f', `gateMoveRZ` = '%.4f', `gateLinkID` = '%d', `gateFaction` = '%d', `gatePass` = '%s' WHERE `gateID` = '%d'",
	    GateData[gateid][gateModel],
	    GateData[gateid][gateSpeed],
	    GateData[gateid][gateRadius],
	    GateData[gateid][gateTime],
	    GateData[gateid][gatePos][0],
	    GateData[gateid][gatePos][1],
	    GateData[gateid][gatePos][2],
	    GateData[gateid][gatePos][3],
	    GateData[gateid][gatePos][4],
	    GateData[gateid][gatePos][5],
	    GateData[gateid][gateInterior],
	    GateData[gateid][gateWorld],
	    GateData[gateid][gateMove][0],
	    GateData[gateid][gateMove][1],
	    GateData[gateid][gateMove][2],
	    GateData[gateid][gateMove][3],
	    GateData[gateid][gateMove][4],
	    GateData[gateid][gateMove][5],
	    GateData[gateid][gateLinkID],
	    GateData[gateid][gateFaction],
	    SQL_ReturnEscaped(GateData[gateid][gatePass]),
	    GateData[gateid][gateID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock ChangeName(playerid, name[], bool:logging = true)
{
	new
	    id = PlayerData[playerid][pCharacter] - 1,
		query[160],
		oldname[24];

	GetPlayerName(playerid, oldname, sizeof(oldname));

	if (logging)
	{
	    format(query, sizeof(query), "INSERT INTO `namechanges` (`OldName`, `NewName`, `Date`) VALUES('%s', '%s', '%s')", oldname, name, ReturnDate());
		mysql_tquery(g_iHandle, query);
	}
    format(PlayerCharacters[playerid][id], MAX_PLAYER_NAME + 1, name);
	SetPlayerName(playerid, name);

	format(query, sizeof(query), "UPDATE `characters` SET `Character` = '%s' WHERE `Character` = '%s'", name, oldname);
	mysql_tquery(g_iHandle, query);

	return 1;
}

stock Tax_Percent(price)
{
	return floatround((float(price) / 100) * 85);
}

stock Tax_AddMoney(amount)
{
	g_TaxVault = g_TaxVault + amount;

	Server_Save();

	return 0;
}
stock RentCar_Tax(price)
{
	g_TaxVault = g_TaxVault + price;

	Server_Save();
	return 1;
}
stock Tax_AddPercent(price)
{
	new money = (price - Tax_Percent(price));

	g_TaxVault = g_TaxVault + money;

	Server_Save();
	return 1;
}

stock file_parse_int(File:handle, const field[])
{
	new
	    str[16];

	return (file_parse(handle, field, str), strval(str));
}

stock file_parse(File:handle, const field[], dest[], size = sizeof(dest))
{
	if (!handle)
	    return 0;

	new
	    str[128],
		pos = strlen(field);

	fseek(handle, 0, seek_start);

	while (fread(handle, str)) if (strfind(str, field, true) == 0 && (str[pos] == '=' || str[pos] == ' '))
	{
	    strmid(dest, str, (str[pos] == '=') ? (pos + 1) : (pos + 3), strlen(str), size);

		if ((pos = strfind(dest, "\r")) != -1)
			dest[pos] = '\0';
   		else if ((pos = strfind(dest, "\n")) != -1)
     		dest[pos] = '\0';

		return 1;
	}
	return 0;
}

cache_get_field_int(row, const field_name[])
{
	new
	    str[12];

	cache_get_field_content(row, field_name, str, g_iHandle, sizeof(str));
	return strval(str);
}

Ticket_Add(suspectid, price, reason[])
{
	new
	    string[160];

	for (new i = 0; i != MAX_PLAYER_TICKETS; i ++) if (!TicketData[suspectid][i][ticketExists])
	{
	    TicketData[suspectid][i][ticketExists] = true;
	    TicketData[suspectid][i][ticketFee] = price;

	    format(TicketData[suspectid][i][ticketDate], 36, ReturnDate());
	    format(TicketData[suspectid][i][ticketReason], 64, reason);

		format(string, sizeof(string), "INSERT INTO `tickets` (`ID`, `ticketFee`, `ticketDate`, `ticketReason`) VALUES('%d', '%d', '%s', '%s')", PlayerData[suspectid][pID], price, TicketData[suspectid][i][ticketDate], SQL_ReturnEscaped(reason));
		mysql_tquery(g_iHandle, string, "OnTicketCreated", "dd", suspectid, i);

		return i;
	}
	return -1;
}

Ticket_Remove(playerid, ticketid)
{
	if (ticketid != -1 && TicketData[playerid][ticketid][ticketExists])
	{
	    new
	        string[90];

		format(string, sizeof(string), "DELETE FROM `tickets` WHERE `ID` = '%d' AND `ticketID` = '%d'", PlayerData[playerid][pID], TicketData[playerid][ticketid][ticketID]);
		mysql_tquery(g_iHandle, string);

	    TicketData[playerid][ticketid][ticketExists] = false;
	    TicketData[playerid][ticketid][ticketID] = 0;
	    TicketData[playerid][ticketid][ticketFee] = 0;
	}
	return 1;
}

Waypoint_Set(playerid, name[], Float:x, Float:y, Float:z)
{
    format(PlayerData[playerid][pLocation], 32, name);

    PlayerData[playerid][pWaypoint] = 1;
   	PlayerData[playerid][pWaypointPos][0] = x;
    PlayerData[playerid][pWaypointPos][1] = y;
   	PlayerData[playerid][pWaypointPos][2] = z;

	SetPlayerCheckpoint(playerid, x, y, z, 3.0);
	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][69]);

	return 1;
}

Location_Add(playerid, name[], Float:x, Float:y, Float:z)
{
	new
	    query[192];

	for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (!LocationData[playerid][i][locationExists])
	{
	    LocationData[playerid][i][locationExists] = true;
	    format(LocationData[playerid][i][locationName], 32, name);

	    LocationData[playerid][i][locationPos][0] = x;
	    LocationData[playerid][i][locationPos][1] = y;
	    LocationData[playerid][i][locationPos][2] = z;

		format(query, sizeof(query), "INSERT INTO `gps` (`ID`, `locationName`, `locationX`, `locationY`, `locationZ`) VALUES('%d', '%s', '%.4f', '%.4f', '%.4f')", PlayerData[playerid][pID], SQL_ReturnEscaped(name), x, y, z);
		mysql_tquery(g_iHandle, query, "OnLocationCreated", "dd", playerid, i);

		return i;
	}
	return -1;
}

Location_GetID(playerid, name[])
{
    for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (LocationData[playerid][i][locationExists] && !strcmp(LocationData[playerid][i][locationName], name, true)) {
        return i;
	}
	return -1;
}

Location_Delete(playerid, name[])
{
	new
		query[96];

    for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (LocationData[playerid][i][locationExists] && !strcmp(LocationData[playerid][i][locationName], name))
	{
	    LocationData[playerid][i][locationExists] = false;

	    LocationData[playerid][i][locationPos][0] = 0.0;
	    LocationData[playerid][i][locationPos][1] = 0.0;
	    LocationData[playerid][i][locationPos][2] = 0.0;

	    format(query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d' AND `locationID` = '%d'", PlayerData[playerid][pID], LocationData[playerid][i][locationID]);
	    mysql_tquery(g_iHandle, query);
		return 1;
	}
	return 0;
}

stock SetPlayerPosEx(playerid, Float:x, Float:y, Float:z, time = 2000)
{
	if (PlayerData[playerid][pFreeze])
	{
	    KillTimer(PlayerData[playerid][pFreezeTimer]);

	    PlayerData[playerid][pFreeze] = 0;
	    TogglePlayerControllable(playerid, 1);
	}
	SetPlayerPos(playerid, x, y, z + 0.5);
	TogglePlayerControllable(playerid, 0);
	PlayerTextDrawShow(playerid, Textdrawhud[playerid]);
	PlayerTextDrawShow(playerid, Textdrawhud1[playerid]);
	PlayerData[playerid][pFreeze] = 1;
	PlayerData[playerid][pFreezeTimer] = SetTimerEx("SetPlayerToUnfreeze", time, false, "dfff", playerid, x, y, z);
	return 1;
}

forward SetPlayerToUnfreeze(playerid, Float:x, Float:y, Float:z);
public SetPlayerToUnfreeze(playerid, Float:x, Float:y, Float:z)
{
	if (!IsPlayerInRangeOfPoint(playerid, 15.0, x, y, z))
	    return 0;

	PlayerData[playerid][pFreeze] = 0;

	SetPlayerPos(playerid, x, y, z);
	TogglePlayerControllable(playerid, 1);
	PlayerTextDrawHide(playerid, Textdrawhud[playerid]);
	PlayerTextDrawHide(playerid, Textdrawhud1[playerid]);
	return 1;
}

forward RefillUpdate(playerid, vehicleid);
public RefillUpdate(playerid, vehicleid)
{
	if (!PlayerData[playerid][pFuelCan] || GetNearestVehicle(playerid) != vehicleid)
	    return 0;

	CoreVehicles[vehicleid][vehFuel] = (CoreVehicles[vehicleid][vehFuel] + 15 >= 100) ? (100) : (CoreVehicles[vehicleid][vehFuel] + 15);

	PlayerData[playerid][pFuelCan] = 0;
	SendServerMessage(playerid, "Kamu telah mengisi kendaraan kamu dengan sekaleng bahan bakar.");
	return 1;
}

stock EquipWeapon(playerid, weapon[])
{
	if (PlayerData[playerid][pChannel4] < 2)
	    return SendErrorMessage(playerid, "Kamu harus bermain minimal hingga level 2.");

	if (IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Kamu harus keluar dari mobil terlebih dahulu.");

	if (!strcmp(weapon, "Colt 45", true))
	{
	    if (!Inventory_HasItem(playerid, "Colt 45"))
	        return SendErrorMessage(playerid, "Kamu tidak memiliki senjata ini.");

	    if (PlayerHasWeapon(playerid, 22))
	        return SendErrorMessage(playerid, "Kamu sudah memiliki senjata ini.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Kamu sudah menggunakan senjata ini (Tekan 'N' untuk menyimpannya).");

		HoldWeapon(playerid, 22);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan Colt 45 kosong dan menggenggamnya.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Tekan 'N' untuk menyimpan senjata. Kamu harus memasukan peluru untuk menggunakannya.");
	}
	else if (!strcmp(weapon, "Desert Eagle", true))
	{
	    if (!Inventory_HasItem(playerid, "Desert Eagle"))
	        return SendErrorMessage(playerid, "Kamu tidak memiliki senjata ini.");

	    if (PlayerHasWeapon(playerid, 24))
	        return SendErrorMessage(playerid, "Kamu sudah memiliki senjata ini.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Kamu sudah menggunakan senjata ini (Tekan 'N' untuk menyimpannya).");

		HoldWeapon(playerid, 24);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan Desert Eagle kosong dan menggenggamnya.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Tekan 'N' untuk menyimpan senjata. Kamu harus memasukan peluru untuk menggunakannya.");
	}
	else if (!strcmp(weapon, "Shotgun", true))
	{
	    if (!Inventory_HasItem(playerid, "Shotgun"))
	        return SendErrorMessage(playerid, "Kamu tidak punya senjata ini.");

	    if (PlayerHasWeapon(playerid, 25))
	        return SendErrorMessage(playerid, "Kamu sudah punya senjata ini.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Kamu sedang menggenggam senjata (tekan 'N' untuk menyimpannya).");

		HoldWeapon(playerid, 25);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan Shotgun kosong dan menggenggamnya.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Tekan 'N' untuk menyimpan senjata. Kamu harus memasukan peluru untuk menggunakannya.");
	}
	else if (!strcmp(weapon, "Micro SMG", true))
	{
	    if (!Inventory_HasItem(playerid, "Micro SMG"))
	        return SendErrorMessage(playerid, "Kamu tidak punya senjata ini.");

	    if (PlayerHasWeapon(playerid, 28))
	        return SendErrorMessage(playerid, "Kamu sudah punya senjata ini.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Kamu sedang menggenggam senjata (tekan 'N' untuk menyimpannya).");

		HoldWeapon(playerid, 28);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan Micro SMG kosong dan menggenggamnya.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Tekan 'N' untuk menyimpan senjata. Kamu harus memasukan peluru untuk menggunakannya.");
	}
	else if (!strcmp(weapon, "Tec-9", true))
	{
	    if (!Inventory_HasItem(playerid, "Tec-9"))
	        return SendErrorMessage(playerid, "Kamu tidak punya senjata ini.");

	    if (PlayerHasWeapon(playerid, 32))
	        return SendErrorMessage(playerid, "Kamu sudah punya senjata ini.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Kamu sedang menggenggam senjata (tekan 'N' untuk menyimpannya).");

		HoldWeapon(playerid, 32);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan Tec-9 kosong dan menggenggamnya.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Tekan 'N' untuk menyimpan senjata. Kamu harus memasukan peluru untuk menggunakannya.");
	}
	else if (!strcmp(weapon, "MP5", true))
	{
	    if (!Inventory_HasItem(playerid, "MP5"))
	        return SendErrorMessage(playerid, "Kamu tidak punya senjata ini.");

	    if (PlayerHasWeapon(playerid, 29))
	        return SendErrorMessage(playerid, "Kamu sudah punya senjata ini.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Kamu sedang menggenggam senjata (tekan 'N' untuk menyimpannya).");

		HoldWeapon(playerid, 29);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan MP5 kosong dan menggenggamnya.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Tekan 'N' untuk menyimpan senjata. Kamu harus memasukan peluru untuk menggunakannya.");
	}
	else if (!strcmp(weapon, "AK-47", true))
	{
	    if (!Inventory_HasItem(playerid, "AK-47"))
	        return SendErrorMessage(playerid, "Kamu tidak punya senjata ini.");

	    if (PlayerHasWeapon(playerid, 30))
	        return SendErrorMessage(playerid, "Kamu sudah punya senjata ini.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Kamu sedang menggenggam senjata (tekan 'N' untuk menyimpannya).");

		HoldWeapon(playerid, 30);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan AK-47 kosong dan menggenggamnya.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Tekan 'N' untuk menyimpan senjata. Kamu harus memasukan peluru untuk menggunakannya.");
	}
	else if (!strcmp(weapon, "M4", true))
	{
	    if (!Inventory_HasItem(playerid, "M4"))
	        return SendErrorMessage(playerid, "Kamu tidak punya senjata ini.");

	    if (PlayerHasWeapon(playerid, 31))
	        return SendErrorMessage(playerid, "Kamu sudah punya senjata ini.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Kamu sedang menggenggam senjata (tekan 'N' untuk menyimpannya).");

		HoldWeapon(playerid, 31);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan M4 kosong dan menggenggamnya.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Tekan 'N' untuk menyimpan senjata. Kamu harus memasukan peluru untuk menggunakannya.");
	}
	else if (!strcmp(weapon, "Rifle", true))
	{
	    if (!Inventory_HasItem(playerid, "Rifle"))
	        return SendErrorMessage(playerid, "Kamu tidak punya senjata ini.");

	    if (PlayerHasWeapon(playerid, 33))
	        return SendErrorMessage(playerid, "Kamu sudah punya senjata ini.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Kamu sedang menggenggam senjata (tekan 'N' untuk menyimpannya) .");

		HoldWeapon(playerid, 33);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan Rifle kosong dan menggenggamnya.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Tekan 'N' untuk menyimpan senjata. Kamu harus memasukan peluru untuk menggunakannya.");
	}
	else if (!strcmp(weapon, "Sniper", true))
	{
	    if (!Inventory_HasItem(playerid, "Sniper"))
	        return SendErrorMessage(playerid, "Kamu tidak punya senjata ini.");

	    if (PlayerHasWeapon(playerid, 34))
	        return SendErrorMessage(playerid, "Kamu sudah punya senjata ini.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Kamu sedang menggenggam senjata (tekan 'N' untuk menyimpannya) .");

		HoldWeapon(playerid, 34);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan Sniper kosong dan menggenggamnya.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Tekan 'N' untuk menyimpan senjata. Kamu harus memasukan peluru untuk menggunakannya.");
	}
	else if (!strcmp(weapon, "Golf Club", true))
	{
	    if (!Inventory_HasItem(playerid, "Golf Club"))
	        return SendErrorMessage(playerid, "Kamu tidak punya senjata ini.");

	    if (PlayerHasWeapon(playerid, 2))
	        return SendErrorMessage(playerid, "Kamu sudah punya senjata ini.");

	    GiveWeaponToPlayer(playerid, 2, 1);

	    Inventory_Remove(playerid, "Golf Club");
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan tongkat Golf dan menggenggamnya.", ReturnName(playerid, 0));
	}
	else if (!strcmp(weapon, "Knife", true))
	{
	    if (!Inventory_HasItem(playerid, "Knife"))
	        return SendErrorMessage(playerid, "Kamu tidak punya senjata ini.");

	    if (PlayerHasWeapon(playerid, 4))
	        return SendErrorMessage(playerid, "Kamu sudah punya senjata ini.");

	    GiveWeaponToPlayer(playerid, 4, 1);

	    Inventory_Remove(playerid, "Knife");
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan Knife dan menggenggamnya.", ReturnName(playerid, 0));
	}
	else if (!strcmp(weapon, "Shovel", true))
	{
	    if (!Inventory_HasItem(playerid, "Shovel"))
	        return SendErrorMessage(playerid, "Kamu tidak punya senjata ini.");

	    if (PlayerHasWeapon(playerid, 6))
	        return SendErrorMessage(playerid, "Kamu sudah punya senjata ini.");

	    GiveWeaponToPlayer(playerid, 6, 1);

	    Inventory_Remove(playerid, "Shovel");
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan Shovel dan menggenggamnya.", ReturnName(playerid, 0));
	}
    else if (!strcmp(weapon, "Katana", true))
	{
	    if (!Inventory_HasItem(playerid, "Katana"))
	        return SendErrorMessage(playerid, "Kamu tidak punya senjata ini.");

	    if (PlayerHasWeapon(playerid, 8))
	        return SendErrorMessage(playerid, "Kamu sudah punya senjata ini.");

	    GiveWeaponToPlayer(playerid, 8, 1);

	    Inventory_Remove(playerid, "Katana");
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan Katana dan menggenggamnya.", ReturnName(playerid, 0));
	}
	return 1;
}

stock SetPlayerInPrison(playerid)
{
	new idx = random(sizeof(g_arrPrisonSpawns));

	SetPlayerPosEx(playerid, g_arrPrisonSpawns[idx][0], g_arrPrisonSpawns[idx][1], g_arrPrisonSpawns[idx][2] + 0.3);
	SetPlayerFacingAngle(playerid, g_arrPrisonSpawns[idx][3]);

	SetPlayerInterior(playerid, 5);
	SetPlayerVirtualWorld(playerid, PRISON_WORLD);

	ShowHungerTextdraw(playerid, 0);
	SetCameraBehindPlayer(playerid);
}

stock ViewCharges(playerid, name[])
{
	new
	    string[128];

	format(string, sizeof(string), "SELECT * FROM `warrants` WHERE `Suspect` = '%s' ORDER BY `ID` DESC", SQL_ReturnEscaped(name));
	mysql_tquery(g_iHandle, string, "OnViewCharges", "ds", playerid, name);
	return 1;
}

stock AddWarrant(targetid, playerid, const description[])
{
	new
	    string[255];

	format(string, sizeof(string), "INSERT INTO `warrants` (`Suspect`, `Username`, `Date`, `Description`) VALUES('%s', '%s', '%s', '%s')", ReturnName(targetid), ReturnName(playerid), ReturnDate(), SQL_ReturnEscaped(description));
	mysql_tquery(g_iHandle, string);
}

stock GetPlayerLocationEx(playerid, &Float:fX, &Float:fY, &Float:fZ)
{
	new
	    id = -1;

    if ((id = House_Inside(playerid)) != -1)
	{
		fX = HouseData[id][housePos][0];
		fY = HouseData[id][housePos][1];
		fZ = HouseData[id][housePos][2];
	}
	else if ((id = Business_Inside(playerid)) != -1)
	{
		fX = BusinessData[id][bizPos][0];
		fY = BusinessData[id][bizPos][1];
		fZ = BusinessData[id][bizPos][2];
	}
	else if ((id = Entrance_Inside(playerid)) != -1)
	{
		fX = EntranceData[id][entrancePos][0];
		fY = EntranceData[id][entrancePos][1];
		fZ = EntranceData[id][entrancePos][2];
	}
	else GetPlayerPos(playerid, fX, fY, fZ);
	return 1;
}

stock GetPlayerLocation(playerid)
{
	new
	    Float:fX,
	    Float:fY,
		Float:fZ,
		string[32],
		id = -1;

	if ((id = House_Inside(playerid)) != -1)
	{
		fX = HouseData[id][housePos][0];
		fY = HouseData[id][housePos][1];
		fZ = HouseData[id][housePos][2];
	}
	else if ((id = Business_Inside(playerid)) != -1)
	{
		fX = BusinessData[id][bizPos][0];
		fY = BusinessData[id][bizPos][1];
		fZ = BusinessData[id][bizPos][2];
	}
	else if ((id = Entrance_Inside(playerid)) != -1)
	{
		fX = EntranceData[id][entrancePos][0];
		fY = EntranceData[id][entrancePos][1];
		fZ = EntranceData[id][entrancePos][2];
	}
	else GetPlayerPos(playerid, fX, fY, fZ);

	format(string, 32, GetLocation(fX, fY, fZ));
	return string;
}

stock GetLocation(Float:fX, Float:fY, Float:fZ)
{
    enum e_ZoneData
	{
     	e_ZoneName[32 char],
     	Float:e_ZoneArea[6]
	};
	new const g_arrZoneData[][e_ZoneData] =
	{
		{!"The Big Ear", 	              {-410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00}},
		{!"Aldea Malvada",                {-1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00}},
		{!"Angel Pine",                   {-2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00}},
		{!"Arco del Oeste",               {-901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00}},
		{!"Avispa Country Club",          {-2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00}},
		{!"Avispa Country Club",          {-2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10}},
		{!"Avispa Country Club",          {-2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10}},
		{!"Avispa Country Club",          {-2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70}},
		{!"Back o Beyond",                {-1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00}},
		{!"Battery Point",                {-2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00}},
		{!"Bayside",                      {-2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00}},
		{!"Bayside Marina",               {-2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00}},
		{!"Beacon Hill",                  {-399.60, -1075.50, -1.40, -319.00, -977.50, 198.50}},
		{!"Blackfield",                   {964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90}},
		{!"Blackfield",                   {964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90}},
		{!"Blackfield Chapel",            {1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90}},
		{!"Blackfield Chapel",            {1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90}},
		{!"Blackfield Intersection",      {1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90}},
		{!"Blackfield Intersection",      {1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90}},
		{!"Blackfield Intersection",      {1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90}},
		{!"Blackfield Intersection",      {1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90}},
		{!"Blueberry",                    {104.50, -220.10, 2.30, 349.60, 152.20, 200.00}},
		{!"Blueberry",                    {19.60, -404.10, 3.80, 349.60, -220.10, 200.00}},
		{!"Blueberry Acres",              {-319.60, -220.10, 0.00, 104.50, 293.30, 200.00}},
		{!"Caligula's Palace",            {2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90}},
		{!"Caligula's Palace",            {2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90}},
		{!"Calton Heights",               {-2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00}},
		{!"Chinatown",                    {-2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00}},
		{!"City Hall",                    {-2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00}},
		{!"Come-A-Lot",                   {2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90}},
		{!"Commerce",                     {1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90}},
		{!"Commerce",                     {1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90}},
		{!"Commerce",                     {1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90}},
		{!"Commerce",                     {1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90}},
		{!"Commerce",                     {1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90}},
		{!"Commerce",                     {1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90}},
		{!"Conference Center",            {1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90}},
		{!"Conference Center",            {1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90}},
		{!"Cranberry Station",            {-2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00}},
		{!"Creek",                        {2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90}},
		{!"Dillimore",                    {580.70, -674.80, -9.50, 861.00, -404.70, 200.00}},
		{!"Doherty",                      {-2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00}},
		{!"Doherty",                      {-2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00}},
		{!"Downtown",                     {-1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00}},
		{!"Downtown",                     {-1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00}},
		{!"Downtown",                     {-1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00}},
		{!"Downtown",                     {-1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00}},
		{!"Downtown",                     {-2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00}},
		{!"Downtown",                     {-1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00}},
		{!"Downtown Los Santos",          {1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90}},
		{!"Downtown Los Santos",          {1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90}},
		{!"Downtown Los Santos",          {1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90}},
		{!"Downtown Los Santos",          {1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90}},
		{!"Downtown Los Santos",          {1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90}},
		{!"East Beach",                   {2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90}},
		{!"East Beach",                   {2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90}},
		{!"East Beach",                   {2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90}},
		{!"East Beach",                   {2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90}},
		{!"East Los Santos",              {2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90}},
		{!"East Los Santos",              {2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90}},
		{!"East Los Santos",              {2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90}},
		{!"East Los Santos",              {2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90}},
		{!"East Los Santos",              {2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90}},
		{!"Easter Basin",                 {-1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00}},
		{!"Easter Basin",                 {-1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -50.00, -4.50, -947.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40}},
		{!"Easter Bay Chemicals",         {-1132.80, -768.00, 0.00, -956.40, -578.10, 200.00}},
		{!"Easter Bay Chemicals",         {-1132.80, -787.30, 0.00, -956.40, -768.00, 200.00}},
		{!"El Castillo del Diablo",       {-464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00}},
		{!"El Corona",                    {1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90}},
		{!"El Corona",                    {1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90}},
		{!"El Quebrados",                 {-1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00}},
		{!"Esplanade East",               {-1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00}},
		{!"Esplanade East",               {-1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00}},
		{!"Esplanade East",               {-1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30}},
		{!"Esplanade North",              {-2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00}},
		{!"Esplanade North",              {-1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00}},
		{!"Esplanade North",              {-1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00}},
		{!"Fallen Tree",                  {-792.20, -698.50, -5.30, -452.40, -380.00, 200.00}},
		{!"Fallow Bridge",                {434.30, 366.50, 0.00, 603.00, 555.60, 200.00}},
		{!"Fern Ridge",                   {508.10, -139.20, 0.00, 1306.60, 119.50, 200.00}},
		{!"Financial",                    {-1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00}},
		{!"Fisher's Lagoon",              {1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00}},
		{!"Flint Intersection",           {-187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90}},
		{!"Flint Range",                  {-594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00}},
		{!"Fort Carson",                  {-376.20, 826.30, -3.00, 123.70, 1220.40, 200.00}},
		{!"Foster Valley",                {-2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00}},
		{!"Foster Valley",                {-2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00}},
		{!"Frederick Bridge",             {2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00}},
		{!"Gant Bridge",                  {-2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00}},
		{!"Gant Bridge",                  {-2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00}},
		{!"Ganton",                       {2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90}},
		{!"Ganton",                       {2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90}},
		{!"Garcia",                       {-2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00}},
		{!"Garcia",                       {-2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00}},
		{!"Garver Bridge",                {-1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90}},
		{!"Garver Bridge",                {-1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90}},
		{!"Garver Bridge",                {-1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30}},
		{!"Glen Park",                    {1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90}},
		{!"Glen Park",                    {1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90}},
		{!"Glen Park",                    {1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90}},
		{!"Green Palms",                  {176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00}},
		{!"Greenglass College",           {964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90}},
		{!"Greenglass College",           {964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90}},
		{!"Hampton Barns",                {603.00, 264.30, 0.00, 761.90, 366.50, 200.00}},
		{!"Hankypanky Point",             {2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00}},
		{!"Harry Gold Parkway",           {1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90}},
		{!"Hashbury",                     {-2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00}},
		{!"Hilltop Farm",                 {967.30, -450.30, -3.00, 1176.70, -217.90, 200.00}},
		{!"Hunter Quarry",                {337.20, 710.80, -115.20, 860.50, 1031.70, 203.70}},
		{!"Idlewood",                     {1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90}},
		{!"Idlewood",                     {2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90}},
		{!"Idlewood",                     {1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90}},
		{!"Jefferson",                    {1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90}},
		{!"Jefferson",                    {2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90}},
		{!"Jefferson",                    {2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90}},
		{!"Jefferson",                    {2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90}},
		{!"Jefferson",                    {2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90}},
		{!"Jefferson",                    {2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90}},
		{!"Julius Thruway East",          {2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90}},
		{!"Julius Thruway East",          {2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90}},
		{!"Julius Thruway East",          {2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90}},
		{!"Julius Thruway East",          {2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90}},
		{!"Julius Thruway North",         {2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90}},
		{!"Julius Thruway North",         {2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90}},
		{!"Julius Thruway North",         {2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90}},
		{!"Julius Thruway North",         {1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90}},
		{!"Julius Thruway North",         {1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90}},
		{!"Julius Thruway North",         {1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90}},
		{!"Julius Thruway North",         {1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90}},
		{!"Julius Thruway North",         {1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90}},
		{!"Julius Thruway South",         {1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90}},
		{!"Julius Thruway South",         {2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90}},
		{!"Julius Thruway West",          {1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90}},
		{!"Julius Thruway West",          {1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90}},
		{!"Juniper Hill",                 {-2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00}},
		{!"Juniper Hollow",               {-2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00}},
		{!"K.A.C.C. Military Fuels",      {2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90}},
		{!"Kincaid Bridge",               {-1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90}},
		{!"Kincaid Bridge",               {-1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90}},
		{!"Kincaid Bridge",               {-1087.90, 855.30, -89.00, -961.90, 986.20, 110.90}},
		{!"King's",                       {-2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00}},
		{!"King's",                       {-2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00}},
		{!"King's",                       {-2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00}},
		{!"LVA Freight Depot",            {1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90}},
		{!"LVA Freight Depot",            {1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90}},
		{!"LVA Freight Depot",            {1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90}},
		{!"Las Barrancas",                {-926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00}},
		{!"Las Brujas",                   {-365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00}},
		{!"Las Colinas",                  {1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90}},
		{!"Las Colinas",                  {2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90}},
		{!"Las Colinas",                  {2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90}},
		{!"Las Colinas",                  {2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90}},
		{!"Las Colinas",                  {2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90}},
		{!"Las Payasadas",                {-354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00}},
		{!"Las Venturas Airport",         {1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90}},
		{!"Las Venturas Airport",         {1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50}},
		{!"Last Dime Motel",              {1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90}},
		{!"Leafy Hollow",                 {-1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00}},
		{!"Liberty City",                 {-1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00}},
		{!"Lil' Probe Inn",               {-90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00}},
		{!"Linden Side",                  {2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90}},
		{!"Linden Station",               {2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90}},
		{!"Linden Station",               {2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40}},
		{!"Little Mexico",                {1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90}},
		{!"Little Mexico",                {1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90}},
		{!"Los Flores",                   {2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90}},
		{!"Los Flores",                   {2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90}},
		{!"Los Santos International",     {1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90}},
		{!"Los Santos International",     {1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90}},
		{!"Los Santos International",     {1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90}},
		{!"Los Santos International",     {2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90}},
		{!"Marina",                       {647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90}},
		{!"Marina",                       {647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90}},
		{!"Marina",                       {807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90}},
		{!"Market",                       {787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90}},
		{!"Market",                       {952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90}},
		{!"Market",                       {1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90}},
		{!"Market",                       {926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90}},
		{!"Market Station",               {787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80}},
		{!"Martin Bridge",                {-222.10, 293.30, 0.00, -122.10, 476.40, 200.00}},
		{!"Missionary Hill",              {-2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00}},
		{!"Montgomery",                   {1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00}},
		{!"Montgomery",                   {1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00}},
		{!"Montgomery Intersection",      {1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00}},
		{!"Montgomery Intersection",      {1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00}},
		{!"Mulholland",                   {1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90}},
		{!"Mulholland",                   {1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90}},
		{!"Mulholland",                   {1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90}},
		{!"Mulholland",                   {1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90}},
		{!"Mulholland",                   {1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90}},
		{!"Mulholland",                   {1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90}},
		{!"Mulholland",                   {768.60, -954.60, -89.00, 952.60, -860.60, 110.90}},
		{!"Mulholland",                   {687.80, -860.60, -89.00, 911.80, -768.00, 110.90}},
		{!"Mulholland",                   {737.50, -768.00, -89.00, 1142.20, -674.80, 110.90}},
		{!"Mulholland",                   {1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90}},
		{!"Mulholland",                   {952.60, -937.10, -89.00, 1096.40, -860.60, 110.90}},
		{!"Mulholland",                   {911.80, -860.60, -89.00, 1096.40, -768.00, 110.90}},
		{!"Mulholland",                   {861.00, -674.80, -89.00, 1156.50, -600.80, 110.90}},
		{!"Mulholland Intersection",      {1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90}},
		{!"North Rock",                   {2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00}},
		{!"Ocean Docks",                  {2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90}},
		{!"Ocean Docks",                  {2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90}},
		{!"Ocean Docks",                  {2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90}},
		{!"Ocean Flats",                  {-2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00}},
		{!"Octane Springs",               {338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00}},
		{!"Old Venturas Strip",           {2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90}},
		{!"Palisades",                    {-2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00}},
		{!"Palomino Creek",               {2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00}},
		{!"Paradiso",                     {-2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00}},
		{!"Pershing Square",              {1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90}},
		{!"Pilgrim",                      {2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90}},
		{!"Pilgrim",                      {2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90}},
		{!"Pilson Intersection",          {1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90}},
		{!"Pirates in Men's Pants",       {1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90}},
		{!"Playa del Seville",            {2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90}},
		{!"Prickle Pine",                 {1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90}},
		{!"Prickle Pine",                 {1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90}},
		{!"Queens",                       {-2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00}},
		{!"Queens",                       {-2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00}},
		{!"Queens",                       {-2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00}},
		{!"Randolph Industrial Estate",   {1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90}},
		{!"Redsands East",                {1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90}},
		{!"Redsands East",                {1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90}},
		{!"Redsands East",                {1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90}},
		{!"Redsands West",                {1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90}},
		{!"Redsands West",                {1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90}},
		{!"Redsands West",                {1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90}},
		{!"Redsands West",                {1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90}},
		{!"Regular Tom",                  {-405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00}},
		{!"Richman",                      {647.50, -1118.20, -89.00, 787.40, -954.60, 110.90}},
		{!"Richman",                      {647.50, -954.60, -89.00, 768.60, -860.60, 110.90}},
		{!"Richman",                      {225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90}},
		{!"Richman",                      {225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90}},
		{!"Richman",                      {321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90}},
		{!"Richman",                      {321.30, -1044.00, -89.00, 647.50, -860.60, 110.90}},
		{!"Richman",                      {321.30, -860.60, -89.00, 687.80, -768.00, 110.90}},
		{!"Richman",                      {321.30, -768.00, -89.00, 700.70, -674.80, 110.90}},
		{!"Robada Intersection",          {-1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90}},
		{!"Roca Escalante",               {2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90}},
		{!"Roca Escalante",               {2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90}},
		{!"Rockshore East",               {2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90}},
		{!"Rockshore West",               {1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90}},
		{!"Rockshore West",               {2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90}},
		{!"Rodeo",                        {72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90}},
		{!"Rodeo",                        {72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90}},
		{!"Rodeo",                        {225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90}},
		{!"Rodeo",                        {225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90}},
		{!"Rodeo",                        {334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90}},
		{!"Rodeo",                        {312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90}},
		{!"Rodeo",                        {422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90}},
		{!"Rodeo",                        {558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90}},
		{!"Rodeo",                        {466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90}},
		{!"Rodeo",                        {422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90}},
		{!"Rodeo",                        {466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90}},
		{!"Rodeo",                        {334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90}},
		{!"Royal Casino",                 {2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90}},
		{!"San Andreas Sound",            {2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00}},
		{!"Santa Flora",                  {-2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00}},
		{!"Santa Maria Beach",            {342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90}},
		{!"Santa Maria Beach",            {72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90}},
		{!"Shady Cabin",                  {-1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00}},
		{!"Shady Creeks",                 {-1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00}},
		{!"Shady Creeks",                 {-2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00}},
		{!"Sobell Rail Yards",            {2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90}},
		{!"Spinybed",                     {2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90}},
		{!"Starfish Casino",              {2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90}},
		{!"Starfish Casino",              {2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90}},
		{!"Starfish Casino",              {2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90}},
		{!"Temple",                       {1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90}},
		{!"Temple",                       {1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90}},
		{!"Temple",                       {1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90}},
		{!"Temple",                       {952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90}},
		{!"Temple",                       {1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90}},
		{!"Temple",                       {1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90}},
		{!"The Camel's Toe",              {2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90}},
		{!"The Clown's Pocket",           {2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90}},
		{!"The Emerald Isle",             {2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90}},
		{!"The Farm",                     {-1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90}},
		{!"The Four Dragons Casino",      {1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90}},
		{!"The High Roller",              {1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90}},
		{!"The Mako Span",                {1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00}},
		{!"The Panopticon",               {-947.90, -304.30, -1.10, -319.60, 327.00, 200.00}},
		{!"The Pink Swan",                {1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90}},
		{!"The Sherman Dam",              {-968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00}},
		{!"The Strip",                    {2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90}},
		{!"The Strip",                    {2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90}},
		{!"The Strip",                    {2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90}},
		{!"The Strip",                    {2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90}},
		{!"The Visage",                   {1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90}},
		{!"The Visage",                   {1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90}},
		{!"Unity Station",                {1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50}},
		{!"Valle Ocultado",               {-936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00}},
		{!"Verdant Bluffs",               {930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90}},
		{!"Verdant Bluffs",               {1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90}},
		{!"Verdant Bluffs",               {1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90}},
		{!"Verdant Meadows",              {37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00}},
		{!"Verona Beach",                 {647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90}},
		{!"Verona Beach",                 {1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90}},
		{!"Verona Beach",                 {1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90}},
		{!"Vinewood",                     {787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90}},
		{!"Vinewood",                     {787.40, -1130.80, -89.00, 952.60, -954.60, 110.90}},
		{!"Vinewood",                     {647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90}},
		{!"Vinewood",                     {647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90}},
		{!"Whitewood Estates",            {883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90}},
		{!"Whitewood Estates",            {1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90}},
		{!"Willowfield",                  {1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90}},
		{!"Willowfield",                  {2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90}},
		{!"Willowfield",                  {2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90}},
		{!"Willowfield",                  {2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90}},
		{!"Willowfield",                  {2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90}},
		{!"Yellow Bell Station",          {1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00}},
		{!"Los Santos",                   {44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00}},
		{!"Las Venturas",                 {869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00}},
		{!"Bone County",                  {-480.50, 596.30, -242.90, 869.40, 2993.80, 900.00}},
		{!"Tierra Robada",                {-2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00}},
		{!"Tierra Robada",                {-1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00}},
		{!"San Fierro",                   {-2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00}},
		{!"Red County",                   {-1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00}},
		{!"Flint County",                 {-1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00}},
		{!"Whetstone",                    {-2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}}
	};
	new
	    name[32] = "San Andreas";

	for (new i = 0; i != sizeof(g_arrZoneData); i ++) if ((fX >= g_arrZoneData[i][e_ZoneArea][0] && fX <= g_arrZoneData[i][e_ZoneArea][3]) && (fY >= g_arrZoneData[i][e_ZoneArea][1] && fY <= g_arrZoneData[i][e_ZoneArea][4]) && (fZ >= g_arrZoneData[i][e_ZoneArea][2] && fZ <= g_arrZoneData[i][e_ZoneArea][5])) {
		strunpack(name, g_arrZoneData[i][e_ZoneName]);

		break;
	}
	return name;
}

stock Float:GetPlayerDistanceFromPlayer(playerid, targetid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);
	return GetPlayerDistanceFromPoint(playerid, x, y, z);
}

/*CREATE TABLE `detectors` (
	`detectorID` INT(12) AUTO_INCREMENT,
	`detectorX` FLOAT DEFAULT 0.0,
	`detectorY` FLOAT DEFAULT 0.0,
	`detectorZ` FLOAT DEFAULT 0.0,
	`detectorAngle` FLOAT DEFAULT 0.0,
	`detectorInterior` INT(12) DEFAULT 0,
	`detectorWorld` INT(12) DEFAULT 0,
	PRIMARY KEY(`detectorID`)
);*/

stock Detector_Delete(id)
{
    if (id != -1 && MetalDetectors[id][detectorExists])
	{
	    new
	        query[64];

	    DestroyDynamicObject(MetalDetectors[id][detectorObject][0]);
	    DestroyDynamicObject(MetalDetectors[id][detectorObject][1]);

		format(query, sizeof(query), "DELETE FROM `detectors` WHERE `detectorID` = '%d'", MetalDetectors[id][detectorID]);
		mysql_tquery(g_iHandle, query);

		MetalDetectors[id][detectorID] = 0;
		MetalDetectors[id][detectorExists] = 0;
	}
	return 1;
}

stock Detector_Refresh(id)
{
	if (id != -1 && MetalDetectors[id][detectorExists])
	{
	    MetalDetectors[id][detectorObject][0] = CreateDynamicObject(2412, MetalDetectors[id][detectorPos][0], MetalDetectors[id][detectorPos][1], MetalDetectors[id][detectorPos][2] - 0.9, 0.0, 0.0, MetalDetectors[id][detectorPos][3], MetalDetectors[id][detectorWorld], MetalDetectors[id][detectorInterior]);
		MetalDetectors[id][detectorObject][1] = CreateDynamicObject(2412, MetalDetectors[id][detectorPos][0] + (1.0 * floatsin(-(MetalDetectors[id][detectorPos][3] - 90), degrees)), MetalDetectors[id][detectorPos][1] + (1.0 * floatcos(-(MetalDetectors[id][detectorPos][3] - 90), degrees)), MetalDetectors[id][detectorPos][2] - 0.9, 0.0, 0.0, MetalDetectors[id][detectorPos][3], MetalDetectors[id][detectorWorld], MetalDetectors[id][detectorInterior]);
	}
	return 1;
}

stock Detector_Nearest(playerid)
{
    for (new i = 0; i < MAX_METAL_DETECTORS; i ++) if (MetalDetectors[i][detectorExists])
	{
	    if (IsPlayerInRangeOfPoint(playerid, 1.0, MetalDetectors[i][detectorPos][0], MetalDetectors[i][detectorPos][1], MetalDetectors[i][detectorPos][2]) && GetPlayerInterior(playerid) == MetalDetectors[i][detectorInterior] && GetPlayerVirtualWorld(playerid) == MetalDetectors[i][detectorWorld])
	        return i;
	}
	return -1;
}

stock IsPlayerArmed(playerid)
{
	new
	    weapon,
	    ammo;

	for (new i = 0; i < 13; i ++) {
	    GetPlayerWeaponData(playerid, i, weapon, ammo);

		if (ammo > 0) {
			switch (weapon) {
			    case 1, 2, 4, 6, 8, 9, 15, 22..38: return 1;
			}
		}
	}
	return 0;
}


stock PlayerPlaySoundEx(playerid, sound)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);

	foreach (new i : Player) if (IsPlayerInRangeOfPoint(i, 20.0, x, y, z)) {
	    PlayerPlaySound(i, sound, x, y, z);
	}
	return 1;
}

stock GetNearestPlayerInView(playerid, Float:distance = 2.0)
{
	new
	    Float:fAngle,
		Float:fPosX,
		Float:fPosY,
		Float:fPosZ;

	GetPlayerFacingAngle(playerid, fAngle);
	GetPlayerPos(playerid, fPosX, fPosY, fPosZ);

	fPosX += distance * floatsin(-fAngle, degrees);
	fPosY += distance * floatcos(-fAngle, degrees);

	foreach (new i : Player) if (IsPlayerInRangeOfPoint(i, 2.0, fPosX, fPosY, fPosZ)) {
	    return i;
	}
	return INVALID_PLAYER_ID;
}

stock CancelCall(playerid)
{
    if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
 		PlayerData[PlayerData[playerid][pCallLine]][pCallLine] = INVALID_PLAYER_ID;
   		PlayerData[PlayerData[playerid][pCallLine]][pIncomingCall] = 0;

		PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
		PlayerData[playerid][pIncomingCall] = 0;
	}
	return 1;
}

stock PlayReloadAnimation(playerid, weaponid)
{
	switch (weaponid)
	{
	    case 22: ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.0, 0, 0, 0, 0, 0);
		case 23: ApplyAnimation(playerid, "SILENCED", "Silence_reload", 4.0, 0, 0, 0, 0, 0);
		case 24: ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 0);
		case 25, 27: ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.0, 0, 0, 0, 0, 0);
		case 26: ApplyAnimation(playerid, "COLT45", "sawnoff_reload", 4.0, 0, 0, 0, 0, 0);
		case 29..31, 33, 34: ApplyAnimation(playerid, "RIFLE", "rifle_load", 4.0, 0, 0, 0, 0, 0);
		case 28, 32: ApplyAnimation(playerid, "TEC", "tec_reload", 4.0, 0, 0, 0, 0, 0);
	}
	return 1;
}

stock LeaveTaxi(playerid, driverid)
{
	if (driverid != INVALID_PLAYER_ID && IsPlayerConnected(driverid))
	{
	    GiveMoney(playerid, -PlayerData[playerid][pTaxiFee]);
   		GiveMoney(driverid, PlayerData[playerid][pTaxiFee]);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar $%d kepada taxi driver.", ReturnName(playerid, 0), PlayerData[playerid][pTaxiFee]);

	    PlayerData[playerid][pTaxiFee] = 0;
	    PlayerData[playerid][pTaxiTime] = 0;
	    PlayerData[playerid][pTaxiPlayer] = INVALID_PLAYER_ID;
	}
	return 1;
}

stock IsFurnitureItem(item[])
{
    for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (!strcmp(g_aFurnitureData[i][e_FurnitureName], item)) {
        return 1;
	}
	return 0;
}

stock GetFurnitureNameByModel(model)
{
	new
	    name[32];

	for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (g_aFurnitureData[i][e_FurnitureModel] == model) {
		strcat(name, g_aFurnitureData[i][e_FurnitureName]);

		break;
	}
	return name;
}

stock PlayerHasWeapon(playerid, weaponid)
{
	new
	    weapon,
	    ammo;

	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pGuns][i] == weaponid) {
	    GetPlayerWeaponData(playerid, i, weapon, ammo);

	    if (weapon == weaponid && ammo > 0) return 1;
	}
	return 0;
}

stock IsPumpOccupied(pumpid)
{
	foreach (new i : Player) if (PlayerData[i][pRefill] != INVALID_VEHICLE_ID) {
	    if (PlayerData[i][pGasPump] == pumpid) return 1;
	}
	return 0;
}

stock IsWheelModel(modelid)
{
    switch (modelid) {
		case 1025, 1073..1085, 1096..1098: return 1;
	}
    return 0;
}

stock IsNOSCompatible(modelid)
{
	switch (modelid) {
	    case 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449: return 0;
	}
    return 1;
}

stock IsLegalComponent(modelid, componentid)
{
    if (IsWheelModel(componentid) || (1086 <= componentid <= 1087) || (componentid >= 1008 && componentid <= 1010))
	{
	    if (!IsNOSCompatible(modelid))
			return 1;
    }
	else
	{
	    for (new i = 0; i < sizeof(g_aLegalMods); i ++)
	    {
	        if (g_aLegalMods[i][0] != modelid)
				continue;

			else for (new l = 1; l < 22; l ++) if (g_aLegalMods[i][l] == componentid) {
			    return 1;
			}
		}
	}
	return 0;
}

ShowHungerTextdraw(playerid, enable)
{
	if (!enable) {
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][65]);
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][66]);

		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][63]);
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][64]);
	}
	else if (PlayerData[playerid][pHUD] && PlayerData[playerid][pJailTime] < 1) {
	    PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][65]);
		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][66]);

		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][63]);
		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][64]);
	}
	return 1;
}

SendPlayerToPlayer(playerid, targetid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);

	if (IsPlayerInAnyVehicle(playerid))
	{
	    SetVehiclePos(GetPlayerVehicleID(playerid), x, y + 2, z);
		LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(targetid));
	}
	else
		SetPlayerPosEx(playerid, x + 1, y, z);

	SetPlayerInterior(playerid, GetPlayerInterior(targetid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

	PlayerData[playerid][pHouse] = PlayerData[targetid][pHouse];
	PlayerData[playerid][pBusiness] = PlayerData[targetid][pBusiness];
	PlayerData[playerid][pEntrance] = PlayerData[targetid][pEntrance];
	PlayerData[playerid][pHospitalInt]  = PlayerData[targetid][pHospitalInt];
}

StopRefilling(playerid)
{
    PlayerData[playerid][pGasPump] = -1;
    PlayerData[playerid][pGasStation] = -1;
   	PlayerData[playerid][pRefill] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pRefillPrice] = 0;
}

SetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pGuns][i] > 0 && PlayerData[playerid][pAmmo][i] > 0) {
	    GivePlayerWeapon(playerid, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);
	}
	return 1;
}

SetAccessories(playerid)
{
    for (new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) {
	    RemovePlayerAttachedObject(playerid, i);
	}
	if (PlayerData[playerid][pToggleGlasses]) RemovePlayerAttachedObject(playerid, 0);
	else if (PlayerData[playerid][pGlasses] != 0) SetPlayerAttachedObject(playerid, 0, PlayerData[playerid][pGlasses], 2, AccessoryData[playerid][0][0], AccessoryData[playerid][0][1], AccessoryData[playerid][0][2], AccessoryData[playerid][0][3], AccessoryData[playerid][0][4], AccessoryData[playerid][0][5], AccessoryData[playerid][0][6], AccessoryData[playerid][0][7], AccessoryData[playerid][0][8]);

	if (PlayerData[playerid][pToggleHat]) RemovePlayerAttachedObject(playerid, 1);
	else if (PlayerData[playerid][pHat] != 0) SetPlayerAttachedObject(playerid, 1, PlayerData[playerid][pHat], 2, AccessoryData[playerid][1][0], AccessoryData[playerid][1][1], AccessoryData[playerid][1][2], AccessoryData[playerid][1][3], AccessoryData[playerid][1][4], AccessoryData[playerid][1][5], AccessoryData[playerid][1][6], AccessoryData[playerid][1][7], AccessoryData[playerid][1][8]);

    if (PlayerData[playerid][pToggleBandana]) RemovePlayerAttachedObject(playerid, 2);
	else if (PlayerData[playerid][pBandana] != 0) SetPlayerAttachedObject(playerid, 2, PlayerData[playerid][pBandana], 2, AccessoryData[playerid][2][0], AccessoryData[playerid][2][1], AccessoryData[playerid][2][2], AccessoryData[playerid][2][3], AccessoryData[playerid][2][4], AccessoryData[playerid][2][5], AccessoryData[playerid][2][6], AccessoryData[playerid][2][7], AccessoryData[playerid][2][8]);

	if (Inventory_HasItem(playerid, "Backpack")) SetPlayerAttachedObject(playerid, 5, 3026, 1, -0.134207, -0.093048, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	else RemovePlayerAttachedObject(playerid, 5);
}

SQL_LoadCharacter(playerid, characterid)
{
	if (characterid < 1 || characterid > 3)
		return 0;

	new
		query[160];

	format(query, sizeof(query), "UPDATE `characters` SET `LastLogin` = '%d' WHERE `Username` = '%s' AND `Character` = '%s'", gettime(), PlayerData[playerid][pUsername], PlayerCharacters[playerid][characterid - 1]);
	mysql_tquery(g_iHandle, query);

	format(query, sizeof(query), "SELECT * FROM `characters` WHERE `Username` = '%s' AND `Character` = '%s'", PlayerData[playerid][pUsername], PlayerCharacters[playerid][characterid - 1]);
	mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_LOAD_CHARACTER);

	return 1;
}

ShowCharacterMenu(playerid)
{
	new str[32];

	if (PlayerData[playerid][pCharacter] != 0)
	{
	    PlayerData[playerid][pCharacter] = 0;

		for (new i = 0; i < 8; i ++) {
  			PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		for (new i = 71; i < 81; i ++) {
  			PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		}
	}
	for (new i = 0; i < 8; i ++)
	{
	    if (i < 3) {
	        format(str, sizeof(str), "%s", (!PlayerCharacters[playerid][i][0]) ? ("Slot Kosong") : (PlayerCharacters[playerid][i]));

			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][i + 5], str);
	    }
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
	}
	SelectTextDraw(playerid, -1);
}

GetClosestGarbage(playerid)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_GARBAGE_BINS; i ++) if (GarbageData[i][garbageExists] && GarbageData[i][garbageCapacity] > 0 && GetPlayerInterior(playerid) == GarbageData[i][garbageInterior] && GetPlayerVirtualWorld(playerid) == GarbageData[i][garbageWorld])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestBusiness(playerid, type)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizType] == type && GetPlayerInterior(playerid) == BusinessData[i][bizExterior] && GetPlayerVirtualWorld(playerid) == BusinessData[i][bizExteriorVW])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestEntrance(playerid, type)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceType] == type && GetPlayerInterior(playerid) == EntranceData[i][entranceExterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceExteriorVW])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestJobPoint(playerid, type)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && JobData[i][jobType] == type && GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, JobData[i][jobPoint][0], JobData[i][jobPoint][1], JobData[i][jobPoint][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestJob(playerid, type)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && JobData[i][jobType] == type && GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, JobData[i][jobPos][0], JobData[i][jobPos][1], JobData[i][jobPos][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestHospital(playerid)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < sizeof(arrHospitalSpawns); i ++)
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

IsWeaponModel(model) {
    new const g_aWeaponModels[] = {
		0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
		325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
		353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
		367, 368, 368, 371
    };
    for (new i = 0; i < sizeof(g_aWeaponModels); i ++) if (g_aWeaponModels[i] == model) {
        return 1;
	}
	return 0;
}

GetWeaponModel(weaponid) {
    new const g_aWeaponModels[] = {
		0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
		325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
		353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
		367, 368, 368, 371
    };
    if (1 <= weaponid <= 46)
        return g_aWeaponModels[weaponid];

	return 0;
}

DropPlayerItem(playerid, itemid, quantity = 1)
{
	if (itemid == -1 || !InventoryData[playerid][itemid][invExists])
	    return 0;

    new
		Float:x,
  		Float:y,
    	Float:z,
		Float:angle,
		string[32];

	strunpack(string, InventoryData[playerid][itemid][invItem]);

	if (InventoryData[playerid][itemid][invQuantity] < 2)
	{
		if (!strcmp(string, "Colt 45") && PlayerData[playerid][pHoldWeapon] == 22)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Desert Eagle") && PlayerData[playerid][pHoldWeapon] == 24)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Shotgun") && PlayerData[playerid][pHoldWeapon] == 25)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Micro SMG") && PlayerData[playerid][pHoldWeapon] == 28)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "MP5") && PlayerData[playerid][pHoldWeapon] == 29)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Tec-9") && PlayerData[playerid][pHoldWeapon] == 32)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "AK-47") && PlayerData[playerid][pHoldWeapon] == 30)
			HoldWeapon(playerid, 0);

        else if (!strcmp(string, "M4") && PlayerData[playerid][pHoldWeapon] == 31)
			HoldWeapon(playerid, 0);

	 	else if (!strcmp(string, "Rifle") && PlayerData[playerid][pHoldWeapon] == 33)
		 	HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Sniper") && PlayerData[playerid][pHoldWeapon] == 34)
			HoldWeapon(playerid, 0);
	}
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	DropItem(string, ReturnName(playerid, 0), InventoryData[playerid][itemid][invModel], quantity, x, y, z - 0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
 	Inventory_Remove(playerid, string, quantity);

	ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.1, 0, 0, 0, 0, 0, 1);
 	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menjatukan sebuah \"%s\".", ReturnName(playerid, 0), string);
	return 1;
}

DropItem(item[], player[], model, quantity, Float:x, Float:y, Float:z, interior, world, weaponid = 0, ammo = 0)
{
	new
	    query[300];

	for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if (!DroppedItems[i][droppedModel])
	{
	    format(DroppedItems[i][droppedItem], 32, item);
	    format(DroppedItems[i][droppedPlayer], 24, player);

		DroppedItems[i][droppedModel] = model;
		DroppedItems[i][droppedQuantity] = quantity;
		DroppedItems[i][droppedWeapon] = weaponid;
  		DroppedItems[i][droppedAmmo] = ammo;
		DroppedItems[i][droppedPos][0] = x;
		DroppedItems[i][droppedPos][1] = y;
		DroppedItems[i][droppedPos][2] = z;

		DroppedItems[i][droppedInt] = interior;
		DroppedItems[i][droppedWorld] = world;

		if (IsWeaponModel(model)) {
			DroppedItems[i][droppedObject] = CreateDynamicObject(model, x, y, z, 93.7, 120.0, 120.0, world, interior);
		} else {
			DroppedItems[i][droppedObject] = CreateDynamicObject(model, x, y, z, 0.0, 0.0, 0.0, world, interior);
		}
 		DroppedItems[i][droppedText3D] = CreateDynamic3DTextLabel(item, COLOR_CYAN, x, y, z, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, world, interior);

		if (strcmp(item, "Demo Soda") != 0)
		{
	 		format(query, sizeof(query), "INSERT INTO `dropped` (`itemName`, `itemPlayer`, `itemModel`, `itemQuantity`, `itemWeapon`, `itemAmmo`, `itemX`, `itemY`, `itemZ`, `itemInt`, `itemWorld`) VALUES('%s', '%s', '%d', '%d', '%d', '%d', '%.4f', '%.4f', '%.4f', '%d', '%d')", item, player, model, quantity, weaponid, ammo, x, y, z, interior, world);
			mysql_tquery(g_iHandle, query, "OnDroppedItem", "d", i);
		}
		return i;
	}
	return -1;
}

Item_Nearest(playerid)
{
    for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if (DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2]))
	{
	    if (GetPlayerInterior(playerid) == DroppedItems[i][droppedInt] && GetPlayerVirtualWorld(playerid) == DroppedItems[i][droppedWorld])
	        return i;
	}
	return -1;
}

Item_SetQuantity(itemid, amount)
{
	new
	    string[64];

	if (itemid != -1 && DroppedItems[itemid][droppedModel])
	{
	    DroppedItems[itemid][droppedQuantity] = amount;

	    format(string, sizeof(string), "UPDATE `dropped` SET `itemQuantity` = %d WHERE `ID` = '%d'", amount, DroppedItems[itemid][droppedID]);
		mysql_tquery(g_iHandle, string);
	}
	return 1;
}

Item_Delete(itemid)
{
    static
	    query[64];

    if (itemid != -1 && DroppedItems[itemid][droppedModel])
	{
        DroppedItems[itemid][droppedModel] = 0;
		DroppedItems[itemid][droppedQuantity] = 0;
	    DroppedItems[itemid][droppedPos][0] = 0.0;
	    DroppedItems[itemid][droppedPos][1] = 0.0;
	    DroppedItems[itemid][droppedPos][2] = 0.0;
	    DroppedItems[itemid][droppedInt] = 0;
	    DroppedItems[itemid][droppedWorld] = 0;

	    DestroyDynamicObject(DroppedItems[itemid][droppedObject]);
	    DestroyDynamic3DTextLabel(DroppedItems[itemid][droppedText3D]);

	    format(query, sizeof(query), "DELETE FROM `dropped` WHERE `ID` = '%d'", DroppedItems[itemid][droppedID]);
	    mysql_tquery(g_iHandle, query);
	}
	return 1;
}

PickupItem(playerid, itemid)
{
	if (itemid != -1 && DroppedItems[itemid][droppedModel])
	{
	    new id = Inventory_Add(playerid, DroppedItems[itemid][droppedItem], DroppedItems[itemid][droppedModel], DroppedItems[itemid][droppedQuantity]);

	    if (id == -1)
	        return SendErrorMessage(playerid, "Tidak ada slot kosong di inventory kamu.");

	    Item_Delete(itemid);
	}
	return 1;
}

SetFactionMarker(playerid, type, color)
{
    foreach (new i : Player) if (GetFactionType(i) == type) {
    	SetPlayerMarkerForPlayer(i, playerid, color);
	}
	PlayerData[playerid][pMarker] = 1;
	SetTimerEx("ExpireMarker", 300000, false, "d", playerid);
	return 1;
}

Faction_GetName(playerid)
{
    new
		factionid = PlayerData[playerid][pFaction],
		name[32] = "None";

 	if (factionid == -1)
	    return name;

	format(name, 32, FactionData[factionid][factionName]);
	return name;
}

Faction_GetRank(playerid)
{
    new
		factionid = PlayerData[playerid][pFaction],
		rank[32] = "None";

 	if (factionid == -1)
	    return rank;

	format(rank, 32, FactionRanks[factionid][PlayerData[playerid][pFactionRank] - 1]);
	return rank;
}

Player_Warn1(playerid)
{
	new warn1[32] = "None";

	format(warn1, 32, PlayerData[playerid][pWarn1]);
	return warn1;
}

Player_Warn2(playerid)
{
	new warn2[32] = "None";

	format(warn2, 32, PlayerData[playerid][pWarn2]);
	return warn2;
}

Faction_GetDivision(playerid)
{
    new
		factionid = PlayerData[playerid][pFaction],
		division[32] = "None";

 	if (factionid == -1)
	    return division;

	format(division, 32, FactionDivisions[factionid][PlayerData[playerid][pFactionDivision] - 1]);
	return division;
}

Arrest_Delete(arrestid)
{
	if (arrestid != -1 && ArrestData[arrestid][arrestExists])
	{
	    static
	        string[64];

        if (IsValidDynamicPickup(ArrestData[arrestid][arrestPickup]))
		    DestroyDynamicPickup(ArrestData[arrestid][arrestPickup]);

		if (IsValidDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]))
		    DestroyDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]);

		format(string, sizeof(string), "DELETE FROM `arrestpoints` WHERE `arrestID` = '%d'", ArrestData[arrestid][arrestID]);
		mysql_tquery(g_iHandle, string);

		ArrestData[arrestid][arrestExists] = false;
		ArrestData[arrestid][arrestID] = 0;
	}
	return 1;
}

Arrest_Create(Float:x, Float:y, Float:z, interior, world)
{
	for (new i = 0; i < MAX_ARREST_POINTS; i ++) if (!ArrestData[i][arrestExists])
	{
	    ArrestData[i][arrestExists] = true;
	    ArrestData[i][arrestPos][0] = x;
	    ArrestData[i][arrestPos][1] = y;
	    ArrestData[i][arrestPos][2] = z;
	    ArrestData[i][arrestInterior] = interior;
	    ArrestData[i][arrestWorld] = world;

	    mysql_tquery(g_iHandle, "INSERT INTO `arrestpoints` (`arrestInterior`) VALUES(0)", "OnArrestCreated", "d", i);
		Arrest_Refresh(i);
		return i;
	}
	return -1;
}

Arrest_Save(arrestid)
{
	static
	    query[220];

	format(query, sizeof(query), "UPDATE `arrestpoints` SET `arrestX` = '%.4f', `arrestY` = '%.4f', `arrestZ` = '%.4f', `arrestInterior` = '%d', `arrestWorld` = '%d' WHERE `arrestID` = '%d'",
	    ArrestData[arrestid][arrestPos][0],
	    ArrestData[arrestid][arrestPos][1],
	    ArrestData[arrestid][arrestPos][2],
	    ArrestData[arrestid][arrestInterior],
	    ArrestData[arrestid][arrestWorld],
	    ArrestData[arrestid][arrestID]
	);
	return mysql_tquery(g_iHandle, query);
}

Arrest_Refresh(arrestid)
{
	if (arrestid != -1 && ArrestData[arrestid][arrestExists])
	{
	    static
	        string[64];

		if (IsValidDynamicPickup(ArrestData[arrestid][arrestPickup]))
		    DestroyDynamicPickup(ArrestData[arrestid][arrestPickup]);

		if (IsValidDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]))
		    DestroyDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]);

		format(string, sizeof(string), "[Arrest %d]\n{FFFFFF}/arrest untuk menangkap tersangka.", arrestid);

		ArrestData[arrestid][arrestPickup] = CreateDynamicPickup(1247, 23, ArrestData[arrestid][arrestPos][0], ArrestData[arrestid][arrestPos][1], ArrestData[arrestid][arrestPos][2], ArrestData[arrestid][arrestWorld], ArrestData[arrestid][arrestInterior]);
  		ArrestData[arrestid][arrestText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, ArrestData[arrestid][arrestPos][0], ArrestData[arrestid][arrestPos][1], ArrestData[arrestid][arrestPos][2], 25.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, ArrestData[arrestid][arrestWorld], ArrestData[arrestid][arrestInterior]);
	}
	return 1;
}

Rack_Save(rackid)
{
	static
	    query[512];

	format(query, sizeof(query), "UPDATE `gunracks` SET `rackHouse` = '%d', `rackX` = '%.4f', `rackY` = '%.4f', `rackZ` = '%.4f', `rackA` = '%.4f', `rackInterior` = '%d', `rackWorld` = '%d', `rackWeapon1` = '%d', `rackWeapon2` = '%d', `rackWeapon3` = '%d', `rackWeapon4` = '%d', `rackAmmo1` = '%d', `rackAmmo2` = '%d', `rackAmmo3` = '%d', `rackAmmo4` = '%d' WHERE `rackID` = '%d'",
	    RackData[rackid][rackHouse],
	    RackData[rackid][rackPos][0],
	    RackData[rackid][rackPos][1],
	    RackData[rackid][rackPos][2],
	    RackData[rackid][rackPos][3],
	    RackData[rackid][rackInterior],
	    RackData[rackid][rackWorld],
	    RackData[rackid][rackWeapons][0],
	    RackData[rackid][rackWeapons][1],
	    RackData[rackid][rackWeapons][2],
	    RackData[rackid][rackWeapons][3],
	    RackData[rackid][rackAmmo][0],
	    RackData[rackid][rackAmmo][1],
	    RackData[rackid][rackAmmo][2],
	    RackData[rackid][rackAmmo][3],
	    RackData[rackid][rackID]
	);
	return mysql_tquery(g_iHandle, query);
}

Rack_Nearest(playerid)
{
	for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if (RackData[i][rackExists] && IsPlayerInRangeOfPoint(playerid, 3.0, RackData[i][rackPos][0], RackData[i][rackPos][1], RackData[i][rackPos][2]))
	{
		if (GetPlayerInterior(playerid) == RackData[i][rackInterior] && GetPlayerVirtualWorld(playerid) == RackData[i][rackWorld])
		    return i;
	}
	return -1;
}

Rack_Count(houseid)
{
	new count;

	for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if (RackData[i][rackExists] && RackData[i][rackHouse] == HouseData[houseid][houseID]) {
	    count++;
	}
	return count;
}

Rack_ShowGuns(playerid, rackid)
{
	if (rackid != -1 && RackData[rackid][rackExists])
	{
	    new
	        string[128];

		for (new i = 0; i < 4; i ++)
		{
		    if (!RackData[rackid][rackWeapons][i])
		        format(string, sizeof(string), "%s%d: Slot Kosong\n", string, i + 1);

			else format(string, sizeof(string), "%s%d: %s - %d Peluru\n", string, i + 1, ReturnWeaponName(RackData[rackid][rackWeapons][i]), RackData[rackid][rackAmmo][i]);
		}
		Dialog_Show(playerid, RackWeapons, DIALOG_STYLE_LIST, "Rak Senjata", string, "Pilih", "Batal");
	}
	return 1;
}

Rack_Delete(rackid)
{
    if (rackid != -1 && RackData[rackid][rackExists])
	{
	    static
	        string[64];

	    format(string, sizeof(string), "DELETE FROM `gunracks` WHERE `rackID` = '%d'", RackData[rackid][rackID]);
	    mysql_tquery(g_iHandle, string);

        for (new i = 0; i < 5; i ++) if (IsValidDynamicObject(RackData[rackid][rackObjects][i])) {
			DestroyDynamicObject(RackData[rackid][rackObjects][i]);
		}
		if (IsValidDynamic3DTextLabel(RackData[rackid][rackText3D])) {
		    DestroyDynamic3DTextLabel(RackData[rackid][rackText3D]);
		}
		RackData[rackid][rackExists] = false;
		RackData[rackid][rackID] = 0;
		RackData[rackid][rackHouse] = 0;
	}
	return 1;
}

Rack_Create(playerid, houseid)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if (!RackData[i][rackExists])
		{
		    x += 1.5 * floatsin(-angle, degrees);
		    y += 1.5 * floatcos(-angle, degrees);

		    RackData[i][rackExists] = true;
		    RackData[i][rackHouse] = (houseid == -1) ? (-1) : (HouseData[houseid][houseID]);

		    RackData[i][rackPos][0] = x;
		    RackData[i][rackPos][1] = y;
		    RackData[i][rackPos][2] = z;
		    RackData[i][rackPos][3] = angle;
		    RackData[i][rackInterior] = GetPlayerInterior(playerid);
		    RackData[i][rackWorld] = GetPlayerVirtualWorld(playerid);

		    Rack_Refresh(i);
		    mysql_tquery(g_iHandle, "INSERT INTO `gunracks` (`rackHouse`) VALUES(0)", "OnRackCreated", "d", i);

		    return i;
		}
	}
	return -1;
}

Rack_RefreshGuns(rackid)
{
    if (rackid != -1 && RackData[rackid][rackExists])
	{
    	new
			Float:x,
	        Float:y,
			Float:z;

		z = RackData[rackid][rackPos][2] + 2.19;

		for (new i = 0; i < 4; i ++) if (IsValidDynamicObject(RackData[rackid][rackObjects][i])) {
		    DestroyDynamicObject(RackData[rackid][rackObjects][i]);

			RackData[rackid][rackObjects][i] = INVALID_OBJECT_ID;
		}
		for (new i = 0; i < 4; i ++)
		{
		    if (RackData[rackid][rackWeapons][i])
			{
				x = RackData[rackid][rackPos][0] - (0.2 * floatsin(-RackData[rackid][rackPos][3], degrees) + (0.45 * floatsin(-RackData[rackid][rackPos][3] - 90, degrees)));
				y = RackData[rackid][rackPos][1] - (0.2 * floatcos(-RackData[rackid][rackPos][3], degrees) + (0.45 * floatcos(-RackData[rackid][rackPos][3] - 90, degrees)));

		        RackData[rackid][rackObjects][i] = CreateDynamicObject(GetWeaponModel(RackData[rackid][rackWeapons][i]), x, y, z, 94.7, 93.7, (22 <= RackData[rackid][rackWeapons][i] <= 38) ? (RackData[rackid][rackPos][3] + 90.0) : (RackData[rackid][rackPos][3]), RackData[rackid][rackWorld], RackData[rackid][rackInterior]);
			}
			else
			{
			    RackData[rackid][rackObjects][i] = INVALID_OBJECT_ID;
			}
			z = z - 0.69;
		}
	}
	return 1;
}

Rack_Refresh(rackid)
{
	if (rackid != -1 && RackData[rackid][rackExists])
	{
	    static
	        str[64];

		if (IsValidDynamicObject(RackData[rackid][rackObjects][4])) {
		    DestroyDynamicObject(RackData[rackid][rackObjects][4]);
		}
		if (IsValidDynamic3DTextLabel(RackData[rackid][rackText3D])) {
		    DestroyDynamic3DTextLabel(RackData[rackid][rackText3D]);
		}
		format(str, sizeof(str), "[Rack %d]\n{FFFFFF}/gunrack untuk menggunakan rak ini.", rackid);
		RackData[rackid][rackText3D] = CreateDynamic3DTextLabel(str, COLOR_DEPARTMENT, RackData[rackid][rackPos][0], RackData[rackid][rackPos][1], RackData[rackid][rackPos][2] + 1.2, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, RackData[rackid][rackWorld], RackData[rackid][rackInterior]);

		Rack_RefreshGuns(rackid);
        RackData[rackid][rackObjects][4] = CreateDynamicObject(2475, RackData[rackid][rackPos][0], RackData[rackid][rackPos][1], RackData[rackid][rackPos][2], 0.0, 0.0, RackData[rackid][rackPos][3], RackData[rackid][rackWorld], RackData[rackid][rackInterior]);
	}
	return 1;
}

forward Detector_Load();
public Detector_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_METAL_DETECTORS)
	{
    	MetalDetectors[i][detectorExists] = 1;
	    MetalDetectors[i][detectorID] = cache_get_field_int(i, "detectorID");
	    MetalDetectors[i][detectorPos][0] = cache_get_field_float(i, "detectorX");
	    MetalDetectors[i][detectorPos][1] = cache_get_field_float(i, "detectorY");
	    MetalDetectors[i][detectorPos][2] = cache_get_field_float(i, "detectorZ");
	    MetalDetectors[i][detectorPos][3] = cache_get_field_float(i, "detectorAngle");
	    MetalDetectors[i][detectorInterior] = cache_get_field_int(i, "detectorInterior");
	    MetalDetectors[i][detectorWorld] = cache_get_field_int(i, "detectorWorld");

		Detector_Refresh(i);
	}
	return 1;
}

forward Graffiti_Load();
public Graffiti_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_GRAFFITI_POINTS)
	{
	    cache_get_field_content(i, "graffitiText", GraffitiData[i][graffitiText], g_iHandle, 64);

    	GraffitiData[i][graffitiExists] = 1;
	    GraffitiData[i][graffitiID] = cache_get_field_int(i, "graffitiID");
	    GraffitiData[i][graffitiPos][0] = cache_get_field_float(i, "graffitiX");
	    GraffitiData[i][graffitiPos][1] = cache_get_field_float(i, "graffitiY");
	    GraffitiData[i][graffitiPos][2] = cache_get_field_float(i, "graffitiZ");
	    GraffitiData[i][graffitiPos][3] = cache_get_field_float(i, "graffitiAngle");
	    GraffitiData[i][graffitiColor] = cache_get_field_int(i, "graffitiColor");

		Graffiti_Refresh(i);
	}
	return 1;
}

forward Speed_Load();
public Speed_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_SPEED_CAMERAS)
	{
	    SpeedData[i][speedExists] = true;
	    SpeedData[i][speedID] = cache_get_field_int(i, "speedID");
	    SpeedData[i][speedRange] = cache_get_field_float(i, "speedRange");
	    SpeedData[i][speedLimit] = cache_get_field_float(i, "speedLimit");
	    SpeedData[i][speedPos][0] = cache_get_field_float(i, "speedX");
	    SpeedData[i][speedPos][1] = cache_get_field_float(i, "speedY");
	    SpeedData[i][speedPos][2] = cache_get_field_float(i, "speedZ");
	    SpeedData[i][speedPos][3] = cache_get_field_float(i, "speedAngle");

	    Speed_Refresh(i);
	}
	return 1;
}

forward Rack_Load();
public Rack_Load()
{
    static
	    rows,
	    fields,
		str[24];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_WEAPON_RACKS)
	{
	    RackData[i][rackExists] = true;
	    RackData[i][rackID] = cache_get_field_int(i, "rackID");
	    RackData[i][rackHouse] = cache_get_field_int(i, "rackHouse");
     	RackData[i][rackPos][0] = cache_get_field_float(i, "rackX");
        RackData[i][rackPos][1] = cache_get_field_float(i, "rackY");
        RackData[i][rackPos][2] = cache_get_field_float(i, "rackZ");
        RackData[i][rackPos][3] = cache_get_field_float(i, "rackA");
        RackData[i][rackInterior] = cache_get_field_int(i, "rackInterior");
		RackData[i][rackWorld] = cache_get_field_int(i, "rackWorld");

		for (new j = 0; j < 4; j ++) {
		    format(str, 24, "rackWeapon%d", j + 1);
		    RackData[i][rackWeapons][j] = cache_get_field_int(i, str);

            format(str, 24, "rackAmmo%d", j + 1);
		    RackData[i][rackAmmo][j] = cache_get_field_int(i, str);
		}
		Rack_Refresh(i);
	}
	return 1;
}

forward Vendor_Load();
public Vendor_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_VENDORS)
	{
	    VendorData[i][vendorExists] = true;
	    VendorData[i][vendorID] = cache_get_field_int(i, "vendorID");
	    VendorData[i][vendorType] = cache_get_field_int(i, "vendorType");
	    VendorData[i][vendorPos][0] = cache_get_field_float(i, "vendorX");
        VendorData[i][vendorPos][1] = cache_get_field_float(i, "vendorY");
        VendorData[i][vendorPos][2] = cache_get_field_float(i, "vendorZ");
        VendorData[i][vendorPos][3] = cache_get_field_float(i, "vendorA");
        VendorData[i][vendorInterior] = cache_get_field_int(i, "vendorInterior");
		VendorData[i][vendorWorld] = cache_get_field_int(i, "vendorWorld");

		Vendor_Refresh(i);
	}
	return 1;
}

forward Garbage_Load();
public Garbage_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_GARBAGE_BINS)
	{
	    GarbageData[i][garbageExists] = true;
	    GarbageData[i][garbageID] = cache_get_field_int(i, "garbageID");
	    GarbageData[i][garbageModel] = cache_get_field_int(i, "garbageModel");
	    GarbageData[i][garbageCapacity] = cache_get_field_int(i, "garbageCapacity");
	    GarbageData[i][garbagePos][0] = cache_get_field_float(i, "garbageX");
        GarbageData[i][garbagePos][1] = cache_get_field_float(i, "garbageY");
        GarbageData[i][garbagePos][2] = cache_get_field_float(i, "garbageZ");
        GarbageData[i][garbagePos][3] = cache_get_field_float(i, "garbageA");
        GarbageData[i][garbageInterior] = cache_get_field_int(i, "garbageInterior");
		GarbageData[i][garbageWorld] = cache_get_field_int(i, "garbageWorld");

		Garbage_Refresh(i);
	}
	return 1;
}

forward ATM_Load();
public ATM_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_ATM_MACHINES)
	{
	    ATMData[i][atmExists] = true;
	    ATMData[i][atmID] = cache_get_field_int(i, "atmID");
	    ATMData[i][atmPos][0] = cache_get_field_float(i, "atmX");
        ATMData[i][atmPos][1] = cache_get_field_float(i, "atmY");
        ATMData[i][atmPos][2] = cache_get_field_float(i, "atmZ");
        ATMData[i][atmPos][3] = cache_get_field_float(i, "atmA");
        ATMData[i][atmInterior] = cache_get_field_int(i, "atmInterior");
		ATMData[i][atmWorld] = cache_get_field_int(i, "atmWorld");

		ATM_Refresh(i);
	}
	return 1;
}
forward IsARentCar(carid);
public IsARentCar(carid)
{
	for(new i = 0; i < MAX_DYNAMIC_CARS; i++)
	{
		if(CarData[i][carVehicle] == carid && CarData[i][carFaction] == 6)
		{
			return 1;
		}
	}
	return 0;
}
forward Impound_Load();
public Impound_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_IMPOUND_LOTS)
	{
	    ImpoundData[i][impoundExists] = true;
	    ImpoundData[i][impoundID] = cache_get_field_int(i, "impoundID");
	    ImpoundData[i][impoundLot][0] = cache_get_field_float(i, "impoundLotX");
        ImpoundData[i][impoundLot][1] = cache_get_field_float(i, "impoundLotY");
        ImpoundData[i][impoundLot][2] = cache_get_field_float(i, "impoundLotZ");
        ImpoundData[i][impoundRelease][0] = cache_get_field_float(i, "impoundReleaseX");
        ImpoundData[i][impoundRelease][1] = cache_get_field_float(i, "impoundReleaseY");
        ImpoundData[i][impoundRelease][2] = cache_get_field_float(i, "impoundReleaseZ");
        ImpoundData[i][impoundRelease][3] = cache_get_field_float(i, "impoundReleaseA");

		Impound_Refresh(i);
	}
	return 1;
}

forward Backpack_Load();
public Backpack_Load()
{
    static
	    rows,
	    fields,
		str[64];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_BACKPACKS)
	{
	    BackpackData[i][backpackExists] = true;
	    BackpackData[i][backpackID] = cache_get_field_int(i, "backpackID");
	    BackpackData[i][backpackPlayer] = cache_get_field_int(i, "backpackPlayer");
	    BackpackData[i][backpackHouse] = cache_get_field_int(i, "backpackHouse");
	    BackpackData[i][backpackVehicle] = cache_get_field_int(i, "backpackVehicle");
	    BackpackData[i][backpackPos][0] = cache_get_field_float(i, "backpackX");
	    BackpackData[i][backpackPos][1] = cache_get_field_float(i, "backpackY");
	    BackpackData[i][backpackPos][2] = cache_get_field_float(i, "backpackZ");
	    BackpackData[i][backpackInterior] = cache_get_field_int(i, "backpackInterior");
	    BackpackData[i][backpackWorld] = cache_get_field_int(i, "backpackWorld");

	    if (!BackpackData[i][backpackPlayer]) {
	        Backpack_Refresh(i);
		}
	}
	for (new i = 0; i < MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists]) {
		format(str, sizeof(str), "SELECT * FROM `backpackitems` WHERE `ID` = '%d'", BackpackData[i][backpackID]);

		mysql_tquery(g_iHandle, str, "OnLoadBackpack", "d", i);
	}
	return 1;
}

forward Gate_Load();
public Gate_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_GATES)
	{
	    GateData[i][gateExists] = true;
	    GateData[i][gateOpened] = false;

	    GateData[i][gateID] = cache_get_field_int(i, "gateID");
	    GateData[i][gateModel] = cache_get_field_int(i, "gateModel");
	    GateData[i][gateSpeed] = cache_get_field_float(i, "gateSpeed");
	    GateData[i][gateRadius] = cache_get_field_float(i, "gateRadius");
	    GateData[i][gateTime] = cache_get_field_int(i, "gateTime");
	    GateData[i][gateInterior] = cache_get_field_int(i, "gateInterior");
	    GateData[i][gateWorld] = cache_get_field_int(i, "gateWorld");

	    GateData[i][gatePos][0] = cache_get_field_float(i, "gateX");
	    GateData[i][gatePos][1] = cache_get_field_float(i, "gateY");
	    GateData[i][gatePos][2] = cache_get_field_float(i, "gateZ");
	    GateData[i][gatePos][3] = cache_get_field_float(i, "gateRX");
	    GateData[i][gatePos][4] = cache_get_field_float(i, "gateRY");
	    GateData[i][gatePos][5] = cache_get_field_float(i, "gateRZ");

        GateData[i][gateMove][0] = cache_get_field_float(i, "gateMoveX");
	    GateData[i][gateMove][1] = cache_get_field_float(i, "gateMoveY");
	    GateData[i][gateMove][2] = cache_get_field_float(i, "gateMoveZ");
	    GateData[i][gateMove][3] = cache_get_field_float(i, "gateMoveRX");
	    GateData[i][gateMove][4] = cache_get_field_float(i, "gateMoveRY");
	    GateData[i][gateMove][5] = cache_get_field_float(i, "gateMoveRZ");

        GateData[i][gateLinkID] = cache_get_field_int(i, "gateLinkID");
	    GateData[i][gateFaction] = cache_get_field_int(i, "gateFaction");

	    cache_get_field_content(i, "gatePass", GateData[i][gatePass], g_iHandle, 32);

	    GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);
	}
	return 1;
}

forward Arrest_Load();
public Arrest_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_ARREST_POINTS)
	{
	    ArrestData[i][arrestExists] = true;

	    ArrestData[i][arrestID] = cache_get_field_int(i, "arrestID");
	    ArrestData[i][arrestPos][0] = cache_get_field_float(i, "arrestX");
	    ArrestData[i][arrestPos][1] = cache_get_field_float(i, "arrestY");
	    ArrestData[i][arrestPos][2] = cache_get_field_float(i, "arrestZ");
	    ArrestData[i][arrestInterior] = cache_get_field_int(i, "arrestInterior");
	    ArrestData[i][arrestWorld] = cache_get_field_int(i, "arrestWorld");

	    Arrest_Refresh(i);
	}
	return 1;
}

forward Faction_Load();
public Faction_Load()
{
	static
	    rows,
	    fields,
		str[32];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_FACTIONS)
	{
	    FactionData[i][factionExists] = true;
	    FactionData[i][factionID] = cache_get_field_int(i, "factionID");

	    cache_get_field_content(i, "factionName", FactionData[i][factionName], g_iHandle, 32);

	    FactionData[i][factionColor] = cache_get_field_int(i, "factionColor");
	    FactionData[i][factionType] = cache_get_field_int(i, "factionType");
	    FactionData[i][factionRanks] = cache_get_field_int(i, "factionRanks");
	    FactionData[i][factionDivisions] = cache_get_field_int(i, "factionDivisions");
	    FactionData[i][factionLockerPos][0] = cache_get_field_float(i, "factionLockerX");
	    FactionData[i][factionLockerPos][1] = cache_get_field_float(i, "factionLockerY");
	    FactionData[i][factionLockerPos][2] = cache_get_field_float(i, "factionLockerZ");
	    FactionData[i][factionLockerInt] = cache_get_field_int(i, "factionLockerInt");
	    FactionData[i][factionLockerWorld] = cache_get_field_int(i, "factionLockerWorld");

		//Spawning
		FactionData[i][SpawnX] = cache_get_field_float(i, "SpawnX");
	 	FactionData[i][SpawnY] = cache_get_field_float(i, "SpawnY");
   		FactionData[i][SpawnZ] = cache_get_field_float(i, "SpawnZ");
		FactionData[i][SpawnInterior] = cache_get_field_int(i, "SpawnInterior");
  		FactionData[i][SpawnVW] = cache_get_field_int(i, "SpawnVW");

	    for (new j = 0; j < 8; j ++) {
	        format(str, sizeof(str), "factionSkin%d", j + 1);

	        FactionData[i][factionSkins][j] = cache_get_field_int(i, str);
		}
        for (new j = 0; j < 10; j ++) {
	        format(str, sizeof(str), "factionWeapon%d", j + 1);

	        FactionData[i][factionWeapons][j] = cache_get_field_int(i, str);

	        format(str, sizeof(str), "factionAmmo%d", j + 1);

			FactionData[i][factionAmmo][j] = cache_get_field_int(i, str);
		}
		for (new j = 0; j < 15; j ++) {
		    format(str, sizeof(str), "factionRank%d", j + 1);

		    cache_get_field_content(i, str, FactionRanks[i][j], g_iHandle, 32);
		}
		for (new j = 0; j < 5; j ++) {
		    format(str, sizeof(str), "factionDivision%d", j + 1);

 		    cache_get_field_content(i, str, FactionDivisions[i][j], g_iHandle, 32);
		}
		Faction_Refresh(i);
	}
	return 1;
}

forward Plant_Load();
public Plant_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_DRUG_PLANTS)
	{
	    PlantData[i][plantExists] = true;
	    PlantData[i][plantID] = cache_get_field_int(i, "plantID");
	    PlantData[i][plantType] = cache_get_field_int(i, "plantType");
	    PlantData[i][plantDrugs] = cache_get_field_int(i, "plantDrugs");
	    PlantData[i][plantPos][0] = cache_get_field_float(i, "plantX");
	    PlantData[i][plantPos][1] = cache_get_field_float(i, "plantY");
	    PlantData[i][plantPos][2] = cache_get_field_float(i, "plantZ");
	    PlantData[i][plantPos][3] = cache_get_field_float(i, "plantA");
	    PlantData[i][plantInterior] = cache_get_field_int(i, "plantInterior");
	    PlantData[i][plantWorld] = cache_get_field_int(i, "plantWorld");

		Plant_Refresh(i);
	}
	return 1;
}

forward Crate_Load();
public Crate_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_CRATES)
	{
	    CrateData[i][crateExists] = true;
	    CrateData[i][crateID] = cache_get_field_int(i, "crateID");
	    CrateData[i][crateType] = cache_get_field_int(i, "crateType");
	    CrateData[i][cratePos][0] = cache_get_field_float(i, "crateX");
	    CrateData[i][cratePos][1] = cache_get_field_float(i, "crateY");
	    CrateData[i][cratePos][2] = cache_get_field_float(i, "crateZ");
	    CrateData[i][cratePos][3] = cache_get_field_float(i, "crateA");
	    CrateData[i][crateInterior] = cache_get_field_int(i, "crateInterior");
	    CrateData[i][crateWorld] = cache_get_field_int(i, "crateWorld");
		CrateData[i][crateVehicle] = INVALID_VEHICLE_ID;

		Crate_Refresh(i);
	}
	return 1;
}

forward Job_Load();
public Job_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

    for (new i = 0; i < rows; i ++) if (i < MAX_DYNAMIC_JOBS)
	{
	    JobData[i][jobExists] = true;
	    JobData[i][jobID] = cache_get_field_int(i, "jobID");
	    JobData[i][jobType] = cache_get_field_int(i, "jobType");
	    JobData[i][jobPos][0] = cache_get_field_float(i, "jobPosX");
	    JobData[i][jobPos][1] = cache_get_field_float(i, "jobPosY");
	    JobData[i][jobPos][2] = cache_get_field_float(i, "jobPosZ");
	    JobData[i][jobInterior] = cache_get_field_int(i, "jobInterior");
	    JobData[i][jobWorld] = cache_get_field_int(i, "jobWorld");
        JobData[i][jobPoint][0] = cache_get_field_float(i, "jobPointX");
	    JobData[i][jobPoint][1] = cache_get_field_float(i, "jobPointY");
	    JobData[i][jobPoint][2] = cache_get_field_float(i, "jobPointZ");
	    JobData[i][jobDeliver][0] = cache_get_field_float(i, "jobDeliverX");
	    JobData[i][jobDeliver][1] = cache_get_field_float(i, "jobDeliverY");
	    JobData[i][jobDeliver][2] = cache_get_field_float(i, "jobDeliverZ");
	    JobData[i][jobPointInt] = cache_get_field_int(i, "jobPointInt");
	    JobData[i][jobPointWorld] = cache_get_field_int(i, "jobPointWorld");

 	    Job_Refresh(i);
	}
	return 1;
}

forward Entrance_Load();
public Entrance_Load()
{
    static
	    rows,
	    fields;

    cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_ENTRANCES)
	{
	    EntranceData[i][entranceExists] = true;
    	EntranceData[i][entranceID] = cache_get_field_int(i, "entranceID");

		cache_get_field_content(i, "entranceName", EntranceData[i][entranceName], g_iHandle, 32);
		cache_get_field_content(i, "entrancePass", EntranceData[i][entrancePass], g_iHandle, 32);

	    EntranceData[i][entranceIcon] = cache_get_field_int(i, "entranceIcon");
	    EntranceData[i][entranceLocked] = cache_get_field_int(i, "entranceLocked");
	    EntranceData[i][entrancePos][0] = cache_get_field_float(i, "entrancePosX");
	    EntranceData[i][entrancePos][1] = cache_get_field_float(i, "entrancePosY");
	    EntranceData[i][entrancePos][2] = cache_get_field_float(i, "entrancePosZ");
	    EntranceData[i][entrancePos][3] = cache_get_field_float(i, "entrancePosA");
	    EntranceData[i][entranceInt][0] = cache_get_field_float(i, "entranceIntX");
	    EntranceData[i][entranceInt][1] = cache_get_field_float(i, "entranceIntY");
	    EntranceData[i][entranceInt][2] = cache_get_field_float(i, "entranceIntZ");
	    EntranceData[i][entranceInt][3] = cache_get_field_float(i, "entranceIntA");
	    EntranceData[i][entranceInterior] = cache_get_field_int(i, "entranceInterior");
	    EntranceData[i][entranceExterior] = cache_get_field_int(i, "entranceExterior");
	    EntranceData[i][entranceExteriorVW] = cache_get_field_int(i, "entranceExteriorVW");
	    EntranceData[i][entranceType] = cache_get_field_int(i, "entranceType");
	    EntranceData[i][entranceCustom] = cache_get_field_int(i, "entranceCustom");
	    EntranceData[i][entranceWorld] = cache_get_field_int(i, "entranceWorld");

		if (EntranceData[i][entranceType] == 3)
		    CreateForklifts(i);

	    Entrance_Refresh(i);
	}
	return 1;
}

forward Dropped_Load();
public Dropped_Load()
{
	static
	    rows,
	    fields;

    cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_DROPPED_ITEMS)
	{
	    DroppedItems[i][droppedID] = cache_get_field_int(i, "ID");

		cache_get_field_content(i, "itemName", DroppedItems[i][droppedItem], g_iHandle, 32);
		cache_get_field_content(i, "itemPlayer", DroppedItems[i][droppedPlayer], g_iHandle, 24);

		DroppedItems[i][droppedModel] = cache_get_field_int(i, "itemModel");
		DroppedItems[i][droppedQuantity] = cache_get_field_int(i, "itemQuantity");
		DroppedItems[i][droppedWeapon] = cache_get_field_int(i, "itemWeapon");
		DroppedItems[i][droppedAmmo] = cache_get_field_int(i, "itemAmmo");
		DroppedItems[i][droppedPos][0] = cache_get_field_float(i, "itemX");
		DroppedItems[i][droppedPos][1] = cache_get_field_float(i, "itemY");
		DroppedItems[i][droppedPos][2] = cache_get_field_float(i, "itemZ");
		DroppedItems[i][droppedInt] = cache_get_field_int(i, "itemInt");
		DroppedItems[i][droppedWorld] = cache_get_field_int(i, "itemWorld");

		if (IsWeaponModel(DroppedItems[i][droppedModel])) {
    	   	DroppedItems[i][droppedObject] = CreateDynamicObject(DroppedItems[i][droppedModel], DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 93.7, 120.0, 120.0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
		} else {
			DroppedItems[i][droppedObject] = CreateDynamicObject(DroppedItems[i][droppedModel], DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 0.0, 0.0, 0.0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
		}
		DroppedItems[i][droppedText3D] = CreateDynamic3DTextLabel(DroppedItems[i][droppedItem], COLOR_CYAN, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
	}
	return 1;
}

forward Business_Load();
public Business_Load()
{
    static
	    rows,
	    fields,
		str[64];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_BUSINESSES)
	{
	    BusinessData[i][bizExists] = true;
	    BusinessData[i][bizID] = cache_get_field_int(i, "bizID");

		cache_get_field_content(i, "bizName", BusinessData[i][bizName], g_iHandle, 32);
        cache_get_field_content(i, "bizMessage", BusinessData[i][bizMessage], g_iHandle, 128);

		BusinessData[i][bizOwner] = cache_get_field_int(i, "bizOwner");
		BusinessData[i][bizType] = cache_get_field_int(i, "bizType");
		BusinessData[i][bizPrice] = cache_get_field_int(i, "bizPrice");
		BusinessData[i][bizPos][0] = cache_get_field_float(i, "bizPosX");
		BusinessData[i][bizPos][1] = cache_get_field_float(i, "bizPosY");
		BusinessData[i][bizPos][2] = cache_get_field_float(i, "bizPosZ");
		BusinessData[i][bizPos][3] = cache_get_field_float(i, "bizPosA");
		BusinessData[i][bizInt][0] = cache_get_field_float(i, "bizIntX");
		BusinessData[i][bizInt][1] = cache_get_field_float(i, "bizIntY");
		BusinessData[i][bizInt][2] = cache_get_field_float(i, "bizIntZ");
		BusinessData[i][bizInt][3] = cache_get_field_float(i, "bizIntA");
		BusinessData[i][bizSpawn][0] = cache_get_field_float(i, "bizSpawnX");
		BusinessData[i][bizSpawn][1] = cache_get_field_float(i, "bizSpawnY");
		BusinessData[i][bizSpawn][2] = cache_get_field_float(i, "bizSpawnZ");
		BusinessData[i][bizSpawn][3] = cache_get_field_float(i, "bizSpawnA");
		BusinessData[i][bizDeliver][0] = cache_get_field_float(i, "bizDeliverX");
		BusinessData[i][bizDeliver][1] = cache_get_field_float(i, "bizDeliverY");
		BusinessData[i][bizDeliver][2] = cache_get_field_float(i, "bizDeliverZ");
		BusinessData[i][bizShipment] = cache_get_field_int(i, "bizShipment");
		BusinessData[i][bizInterior] = cache_get_field_int(i, "bizInterior");
		BusinessData[i][bizExterior] = cache_get_field_int(i, "bizExterior");
		BusinessData[i][bizExteriorVW] = cache_get_field_int(i, "bizExteriorVW");
		BusinessData[i][bizLocked] = cache_get_field_int(i, "bizLocked");
		BusinessData[i][bizVault] = cache_get_field_int(i, "bizVault");
		BusinessData[i][bizProducts] = cache_get_field_int(i, "bizProducts");

		for (new j = 0; j < 20; j ++)
		{
			format(str, 32, "bizPrice%d", j + 1);
			BusinessData[i][bizPrices][j] = cache_get_field_int(i, str);
		}
		Business_Refresh(i);
	}
	for (new i = 0; i < MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists])
	{
		if (BusinessData[i][bizType] == 5) {
			format(str, sizeof(str), "SELECT * FROM `dealervehicles` WHERE `ID` = '%d'", BusinessData[i][bizID]);

			mysql_tquery(g_iHandle, str, "Business_LoadCars", "d", i);
		}
		else if (BusinessData[i][bizType] == 6) {
			format(str, sizeof(str), "SELECT * FROM `pumps` WHERE `ID` = '%d'", BusinessData[i][bizID]);

			mysql_tquery(g_iHandle, str, "Pump_Load", "d", i);
		}
	}
	return 1;
}

forward House_Load();
public House_Load()
{
	static
	    rows,
	    fields,
		str[128];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_HOUSES)
	{
		HouseData[i][houseExists] = true;
		HouseData[i][houseLights] = false;

		HouseData[i][houseID] = cache_get_field_int(i, "houseID");
		HouseData[i][houseOwner] = cache_get_field_int(i, "houseOwner");
		HouseData[i][housePrice] = cache_get_field_int(i, "housePrice");

		cache_get_field_content(i, "houseAddress", HouseData[i][houseAddress], g_iHandle, 32);

		HouseData[i][housePos][0] = cache_get_field_float(i, "housePosX");
		HouseData[i][housePos][1] = cache_get_field_float(i, "housePosY");
		HouseData[i][housePos][2] = cache_get_field_float(i, "housePosZ");
		HouseData[i][housePos][3] = cache_get_field_float(i, "housePosA");
		HouseData[i][houseInt][0] = cache_get_field_float(i, "houseIntX");
		HouseData[i][houseInt][1] = cache_get_field_float(i, "houseIntY");
		HouseData[i][houseInt][2] = cache_get_field_float(i, "houseIntZ");
		HouseData[i][houseInt][3] = cache_get_field_float(i, "houseIntA");
		HouseData[i][houseInterior] = cache_get_field_int(i, "houseInterior");
		HouseData[i][houseExterior] = cache_get_field_int(i, "houseExterior");
		HouseData[i][houseExteriorVW] = cache_get_field_int(i, "houseExteriorVW");
        HouseData[i][houseLocked] = cache_get_field_int(i, "houseLocked");
        HouseData[i][houseMoney] = cache_get_field_int(i, "houseMoney");

        for (new j = 0; j < 10; j ++)
		{
            format(str, 24, "houseWeapon%d", j + 1);
            HouseData[i][houseWeapons][j] = cache_get_field_int(i, str);

            format(str, 24, "houseAmmo%d", j + 1);
            HouseData[i][houseAmmo][j] = cache_get_field_int(i, str);
		}
		House_Refresh(i);
	}
	for (new i = 0; i < MAX_HOUSES; i ++) if (HouseData[i][houseExists]) {
		format(str, sizeof(str), "SELECT * FROM `housestorage` WHERE `ID` = '%d'", HouseData[i][houseID]);

		mysql_tquery(g_iHandle, str, "OnLoadStorage", "d", i);

		format(str, sizeof(str), "SELECT * FROM `furniture` WHERE `ID` = '%d'", HouseData[i][houseID]);

		mysql_tquery(g_iHandle, str, "OnLoadFurniture", "d", i);
	}
	return 1;
}

stock Car_GetRealID(carid)
{
	if (carid == -1 || !CarData[carid][carExists] || CarData[carid][carVehicle] == INVALID_VEHICLE_ID)
	    return INVALID_VEHICLE_ID;

	return CarData[carid][carVehicle];
}

stock Car_GetID(vehicleid)
{
	for (new i = 0; i != MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists] && CarData[i][carVehicle] == vehicleid) {
	    return i;
	}
	return -1;
}

stock Car_Spawn(carid)
{
	if (carid != -1 && CarData[carid][carExists])
	{
		if (IsValidVehicle(CarData[carid][carVehicle]))
		    DestroyVehicle(CarData[carid][carVehicle]);

		if (CarData[carid][carColor1] == -1)
		    CarData[carid][carColor1] = random(127);

		if (CarData[carid][carColor2] == -1)
		    CarData[carid][carColor2] = random(127);

		CarData[carid][carVehicle] = CreateVehicle(CarData[carid][carModel], CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2], CarData[carid][carPos][3], CarData[carid][carColor1], CarData[carid][carColor2], (CarData[carid][carOwner] != 0) ? (-1) : (1200000), CarData[carid][carSiren]);
        if (CarData[carid][carVehicle] != INVALID_VEHICLE_ID)
        {
            if (CarData[carid][carPaintjob] != -1)
            {
                ChangeVehiclePaintjob(CarData[carid][carVehicle], CarData[carid][carPaintjob]);
			}
			if (CarData[carid][carLocked])
			{
			    new
					engine, lights, alarm, doors, bonnet, boot, objective;

				GetVehicleParamsEx(CarData[carid][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
			    SetVehicleParamsEx(CarData[carid][carVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
			}
			for (new i = 0; i < 14; i ++)
			{
			    if (CarData[carid][carMods][i]) AddVehicleComponent(CarData[carid][carVehicle], CarData[carid][carMods][i]);
			}
			ResetVehicle(CarData[carid][carVehicle]);
			return 1;
		}
	}
	return 0;
}

forward Car_Load();
public Car_Load()
{
	static
	    rows,
	    fields,
		str[128];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_DYNAMIC_CARS)
	{
	    CarData[i][carExists] = true;
	    CarData[i][carID] = cache_get_field_int(i, "carID");
	    CarData[i][carModel] = cache_get_field_int(i, "carModel");
	    CarData[i][carOwner] = cache_get_field_int(i, "carOwner");
	    CarData[i][carPos][0] = cache_get_field_float(i, "carPosX");
	    CarData[i][carPos][1] = cache_get_field_float(i, "carPosY");
	    CarData[i][carPos][2] = cache_get_field_float(i, "carPosZ");
	    CarData[i][carPos][3] = cache_get_field_float(i, "carPosR");
	    CarData[i][carColor1] = cache_get_field_int(i, "carColor1");
	    CarData[i][carColor2] = cache_get_field_int(i, "carColor2");
	    CarData[i][carPaintjob] = cache_get_field_int(i, "carPaintjob");
	    CarData[i][carLocked] = cache_get_field_int(i, "carLocked");
	    CarData[i][carImpounded] = cache_get_field_int(i, "carImpounded");
	    CarData[i][carImpoundPrice] = cache_get_field_int(i, "carImpoundPrice");
        CarData[i][carFaction] = cache_get_field_int(i, "carFaction");
        CarData[i][carSiren] = cache_get_field_int(i, "carSiren");

		for (new j = 0; j < 14; j ++)
		{
		    if (j < 5)
		    {
		        format(str, sizeof(str), "carWeapon%d", j + 1);
		        CarData[i][carWeapons][j] = cache_get_field_int(i, str);

		        format(str, sizeof(str), "carAmmo%d", j + 1);
		        CarData[i][carAmmo][j] = cache_get_field_int(i, str);
	        }
	        format(str, sizeof(str), "carMod%d", j + 1);
	        CarData[i][carMods][j] = cache_get_field_int(i, str);
	    }
	    if(CarData[i][carFaction] > 0 || CarData[i][carOwner] == 0)
		{
			Car_Spawn(i);
		}
	}
	for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists]) {
		format(str, sizeof(str), "SELECT * FROM `carstorage` WHERE `ID` = '%d'", CarData[i][carID]);

		mysql_tquery(g_iHandle, str, "OnLoadCarStorage", "d", i);
	}
	return 1;
}

stock IsVehicleSeatUsed(vehicleid, seat)
{
	foreach (new i : Player) if (IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seat) {
	    return 1;
	}
	return 0;
}

stock RemoveFromVehicle(playerid)
{
	if (IsPlayerInAnyVehicle(playerid))
	{
		static
		    Float:fX,
	    	Float:fY,
	    	Float:fZ;

		GetPlayerPos(playerid, fX, fY, fZ);
		SetPlayerPos(playerid, fX, fY, fZ + 1.5);
	}
	return 1;
}

stock GetAvailableSeat(vehicleid, start = 1)
{
	new seats = GetVehicleMaxSeats(vehicleid);

	for (new i = start; i < seats; i ++) if (!IsVehicleSeatUsed(vehicleid, i)) {
	    return i;
	}
	return -1;
}
stock ResetVariable(playerid)
{
	//Pizza
	IsInJob[playerid]=0;TipTime[playerid]=0;
    KillTimer(InfoTimer[playerid]);
	PlayerTutorialTime[playerid]=0;
	PlayerCheckpoint[playerid]=CHECKPOINT_NONE;
	PlayerTips[playerid]=0;
	PlayerEarnings[playerid]=0;
	PlayerSkin[playerid]=0;
	RentCar[playerid] = -1;
	RentTime[playerid] = 0;
	RentMoneySpent[playerid] = 0;
	return 1;
}
stock GetVehicleFromBehind(vehicleid)
{
	static
	    Float:fCoords[7];

	GetVehiclePos(vehicleid, fCoords[0], fCoords[1], fCoords[2]);
	GetVehicleZAngle(vehicleid, fCoords[3]);

	for (new i = 1; i != MAX_VEHICLES; i ++) if (i != vehicleid && GetVehiclePos(i, fCoords[4], fCoords[5], fCoords[6]))
	{
		if (floatabs(fCoords[0] - fCoords[4]) < 6 && floatabs(fCoords[1] - fCoords[5]) < 6 && floatabs(fCoords[2] - fCoords[6]) < 6)
			return i;
	}
	return INVALID_VEHICLE_ID;
}

stock GetVehicleBoot(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y =0.0, z = 0.0), 0;

	static
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] - (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] - (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}

stock GetVehicleHood(vehicleid, &Float:x, &Float:y, &Float:z)
{
    if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	static
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] + (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] + (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}

forward HarvestPlant(playerid, plantid);
public HarvestPlant(playerid, plantid)
{
	PlayerData[playerid][pHarvesting] = 0;

	if (Plant_Nearest(playerid) != plantid || GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK || !PlantData[plantid][plantExists])
	    return 0;

	switch (PlantData[plantid][plantType])
	{
	    case 1:
	    {
	        new id = Inventory_Add(playerid, "Marijuana", 1578, PlantData[plantid][plantDrugs]);

	        if (id == -1)
	            return SendErrorMessage(playerid, "Kamu tidak punya ruang lagi di inventory.");

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah memanen %d gram marijuana.", ReturnName(playerid, 0), PlantData[plantid][plantDrugs]);
		}
		case 2:
	    {
	        new id = Inventory_Add(playerid, "Cocaine", 1575, PlantData[plantid][plantDrugs]);

	        if (id == -1)
	            return SendErrorMessage(playerid, "Kamu tidak punya ruang lagi di inventory.");

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah memanen %d gram cocaine.", ReturnName(playerid, 0), PlantData[plantid][plantDrugs]);
		}
        case 3:
	    {
	        new id = Inventory_Add(playerid, "Heroin", 1577, PlantData[plantid][plantDrugs]);

	        if (id == -1)
	            return SendErrorMessage(playerid, "Kamu tidak punya ruang lagi di inventory.");

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah memanen %d gram heroin.", ReturnName(playerid, 0), PlantData[plantid][plantDrugs]);
		}
	}
	Plant_Delete(plantid);
	return 1;
}

forward OpenCrate(playerid, crateid);
public OpenCrate(playerid, crateid)
{
	if (Crate_Nearest(playerid) != crateid || !CrateData[crateid][crateExists] || !IsPlayerSpawned(playerid) || !PlayerData[playerid][pOpeningCrate])
	    return 0;

    PlayerData[playerid][pOpeningCrate] = 0;

	ClearAnimations(playerid);
    TogglePlayerControllable(playerid, 1);

	if (Inventory_Items(playerid) >= MAX_INVENTORY - 4)
	    return SendErrorMessage(playerid, "Kamu tidak punyai slot lagi di inventory untuk 4 paket narkoba.");

	Inventory_Add(playerid, "Cocaine Seeds", 1575, 20);
	Inventory_Add(playerid, "Marijuana Seeds", 1578, 20);
	Inventory_Add(playerid, "Heroin Opium Seeds", 1577, 10);
	Inventory_Add(playerid, "Steroids", 1241, 5);

	Crate_Delete(crateid);
	SendServerMessage(playerid, "Kamu menemukan sebongkah steroids dan drug seeds (ditambahkan ke inventory kamu).");
	return 1;
}

forward CraftParts(playerid, crateid);
public CraftParts(playerid, crateid)
{
	if (PlayerData[playerid][pCarryCrate] != crateid || !CrateData[crateid][crateExists] || !IsPlayerSpawned(playerid) || !PlayerData[playerid][pCrafting])
	    return 0;

    PlayerData[playerid][pCrafting] = 0;
	PlayerData[playerid][pCarryCrate] = -1;

    TogglePlayerControllable(playerid, 1);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

    RemovePlayerAttachedObject(playerid, 4);
    Log_Write("logs/craft_log.txt", "[%s] %s telah membuat sebuah crate %s.", ReturnDate(), ReturnName(playerid, 0), Crate_GetType(CrateData[crateid][crateType]));

	switch (CrateData[crateid][crateType])
	{
	    case 1:
	    {
	        if (Inventory_Items(playerid) >= MAX_INVENTORY - 4)
	            return SendErrorMessage(playerid, "Kamu tidak punyai slot lagi di inventory untuk 4 melee parts.");

			Inventory_Add(playerid, "Golf Club", 333);
			Inventory_Add(playerid, "Knife", 335);
			Inventory_Add(playerid, "Shovel", 337);
			Inventory_Add(playerid, "Katana", 339);

			Crate_Delete(crateid);
			SendServerMessage(playerid, "Kamu berhasil merakit 4 senjata melee (ditambahkan ke inventorymu).");
		}
	    case 2:
	    {
	        if (Inventory_Items(playerid) >= MAX_INVENTORY - 2)
	            return SendErrorMessage(playerid, "Kamu tidak punyai slot lagi di inventory untuk 2 pistols.");

			Inventory_Add(playerid, "Colt 45", 346);
			Inventory_Add(playerid, "Desert Eagle", 348);

			Crate_Delete(crateid);
			SendServerMessage(playerid, "Kamu berhasil merakit 2 pistols dari pistol parts (ditambahkan ke inventorymu).");
		}
		case 3:
	    {
	        if (Inventory_Items(playerid) >= MAX_INVENTORY - 3)
	            return SendErrorMessage(playerid, "Kamu tidak punyai slot lagi di inventory untuk 3 SMG's.");

			Inventory_Add(playerid, "Micro SMG", 352);
			Inventory_Add(playerid, "Tec-9", 372);
			Inventory_Add(playerid, "MP5", 353);

			Crate_Delete(crateid);
			SendServerMessage(playerid, "Kamu berhasil merakit 3 SMG's dari SMG parts (ditambahkan ke inventorymu).");
		}
		case 4:
	    {
	        if (Inventory_Items(playerid) >= MAX_INVENTORY - 2)
	            return SendErrorMessage(playerid, "Kamu tidak punyai slot lagi di inventory untuk 2 shotguns.");

			Inventory_Add(playerid, "Shotgun", 349);

			Crate_Delete(crateid);
			SendServerMessage(playerid, "Kamu berhasil merakit a shotgun dari Shotgun parts (ditambahkan ke inventorymu).");
		}
		case 5:
	    {
	        if (Inventory_Items(playerid) >= MAX_INVENTORY - 3)
	            return SendErrorMessage(playerid, "Kamu tidak punyai slot lagi di inventory untuk 3 Rifles.");

			Inventory_Add(playerid, "AK-47", 355);
			Inventory_Add(playerid, "Rifle", 357);
			Inventory_Add(playerid, "Sniper", 358);

			Crate_Delete(crateid);
			SendServerMessage(playerid, "Kamu berhasil merakit 3 rifles dari Rifle parts (ditambahkan ke inventorymu).");
		}
	}
	return 1;
}

forward FirstAidUpdate(playerid);
public FirstAidUpdate(playerid)
{
	static
	    Float:health;

	GetPlayerHealth(playerid, health);

    if (!IsPlayerInAnyVehicle(playerid) && GetPlayerAnimationIndex(playerid) != 1508)
    	ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0);

	if (health >= 95.0)
	{
	    SetPlayerHealth(playerid, 100.0);
	    SendServerMessage(playerid, "First aid kit kamu berhasil digunakan.");

		if (!IsPlayerInAnyVehicle(playerid)) {
	        PlayerData[playerid][pLoopAnim] = true;
			ShowPlayerFooter(playerid, "Tekan ~y~SPASI~w~ untuk menghentikan animasi.");
		}
        PlayerData[playerid][pBleeding] = 0;
		PlayerData[playerid][pBleedTime] = 0;

		PlayerData[playerid][pFirstAid] = false;
		KillTimer(PlayerData[playerid][pAidTimer]);
	}
	else {
	    SetPlayerHealth(playerid, floatadd(health, 20.0)); // caranya gimana biar maks 50?
	}
	return 1;
}

forward RepairCar(playerid, vehicleid);
public RepairCar(playerid, vehicleid)
{
	if (PlayerData[playerid][pJob] != JOB_MECHANIC || !IsPlayerNearHood(playerid, vehicleid)) {
		return 0;
	}
	SetVehicleHealth(vehicleid, 1000.0);
	GameTextForPlayer(playerid, " ", 1, 3);

	PlayerData[playerid][pRepairTime] = gettime() + 60;
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah berhasil memperbaiki kendaraan.", ReturnName(playerid, 0));

	return 1;
}

forward Business_LoadCars(bizid);
public Business_LoadCars(bizid)
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) {
		DealershipCars[bizid][i][vehID] = cache_get_field_int(i, "vehID");
		DealershipCars[bizid][i][vehModel] = cache_get_field_int(i, "vehModel");
		DealershipCars[bizid][i][vehPrice] = cache_get_field_int(i, "vehPrice");
	}
	return 1;
}

forward OnLoadFurniture(houseid);
public OnLoadFurniture(houseid)
{
	static
	    rows,
	    fields,
		id = -1;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) if ((id = Furniture_GetFreeID()) != -1) {
	    FurnitureData[id][furnitureExists] = true;
	    FurnitureData[id][furnitureHouse] = houseid;

	    cache_get_field_content(i, "furnitureName", FurnitureData[id][furnitureName], g_iHandle, 32);

	    FurnitureData[id][furnitureID] = cache_get_field_int(i, "furnitureID");
	    FurnitureData[id][furnitureModel] = cache_get_field_int(i, "furnitureModel");
	    FurnitureData[id][furniturePos][0] = cache_get_field_float(i, "furnitureX");
	    FurnitureData[id][furniturePos][1] = cache_get_field_float(i, "furnitureY");
	    FurnitureData[id][furniturePos][2] = cache_get_field_float(i, "furnitureZ");
	    FurnitureData[id][furnitureRot][0] = cache_get_field_float(i, "furnitureRX");
	    FurnitureData[id][furnitureRot][1] = cache_get_field_float(i, "furnitureRY");
	    FurnitureData[id][furnitureRot][2] = cache_get_field_float(i, "furnitureRZ");

	    Furniture_Refresh(id);
	}
	return 1;
}

Furniture_GetCount(houseid)
{
	new count;

	for (new i = 0; i < MAX_FURNITURE; i ++) if (FurnitureData[i][furnitureExists] && FurnitureData[i][furnitureHouse] == houseid) {
	    count++;
	}
	return count;
}

Furniture_GetFreeID()
{
	for (new i = 0; i != MAX_FURNITURE; i ++) if (!FurnitureData[i][furnitureExists]) {
	    return i;
	}
	return -1;
}

Furniture_Refresh(furnitureid)
{
	if (furnitureid != -1 && FurnitureData[furnitureid][furnitureExists])
	{
	    if (IsValidDynamicObject(FurnitureData[furnitureid][furnitureObject]))
	        DestroyDynamicObject(FurnitureData[furnitureid][furnitureObject]);

	    FurnitureData[furnitureid][furnitureObject] = CreateDynamicObject(
			FurnitureData[furnitureid][furnitureModel],
			FurnitureData[furnitureid][furniturePos][0],
			FurnitureData[furnitureid][furniturePos][1],
			FurnitureData[furnitureid][furniturePos][2],
			FurnitureData[furnitureid][furnitureRot][0],
			FurnitureData[furnitureid][furnitureRot][1],
			FurnitureData[furnitureid][furnitureRot][2],
			HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID] + 5000,
			HouseData[FurnitureData[furnitureid][furnitureHouse]][houseInterior]
		);
	}
	return 1;
}

Furniture_Save(furnitureid)
{
	static
	    string[300];

	format(string, sizeof(string), "UPDATE `furniture` SET `furnitureModel` = '%d', `furnitureName` = '%s', `furnitureX` = '%.4f', `furnitureY` = '%.4f', `furnitureZ` = '%.4f', `furnitureRX` = '%.4f', `furnitureRY` = '%.4f', `furnitureRZ` = '%.4f' WHERE `ID` = '%d' AND `furnitureID` = '%d'",
	    FurnitureData[furnitureid][furnitureModel],
	    FurnitureData[furnitureid][furnitureName],
	    FurnitureData[furnitureid][furniturePos][0],
	    FurnitureData[furnitureid][furniturePos][1],
	    FurnitureData[furnitureid][furniturePos][2],
	    FurnitureData[furnitureid][furnitureRot][0],
	    FurnitureData[furnitureid][furnitureRot][1],
	    FurnitureData[furnitureid][furnitureRot][2],
	    HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID],
	    FurnitureData[furnitureid][furnitureID]
	);
	return mysql_tquery(g_iHandle, string);
}

Furniture_Add(houseid, name[], modelid, Float:x, Float:y, Float:z, Float:rx = 0.0, Float:ry = 0.0, Float:rz = 0.0)
{
	static
	    string[64],
		id = -1;

 	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	if ((id = Furniture_GetFreeID()) != -1)
	{
	    FurnitureData[id][furnitureExists] = true;
	    format(FurnitureData[id][furnitureName], 32, name);

        FurnitureData[id][furnitureHouse] = houseid;
	    FurnitureData[id][furnitureModel] = modelid;
	    FurnitureData[id][furniturePos][0] = x;
	    FurnitureData[id][furniturePos][1] = y;
	    FurnitureData[id][furniturePos][2] = z;
	    FurnitureData[id][furnitureRot][0] = rx;
	    FurnitureData[id][furnitureRot][1] = ry;
	    FurnitureData[id][furnitureRot][2] = rz;

	    Furniture_Refresh(id);

		format(string, sizeof(string), "INSERT INTO `furniture` (`ID`) VALUES(%d)", HouseData[houseid][houseID]);
		mysql_tquery(g_iHandle, string, "OnFurnitureCreated", "d", id);

		return id;
	}
	return -1;
}

Furniture_Delete(furnitureid)
{
	static
	    string[72];

	if (furnitureid != -1 && FurnitureData[furnitureid][furnitureExists])
	{
	    format(string, sizeof(string), "DELETE FROM `furniture` WHERE `ID` = '%d' AND `furnitureID` = '%d'", HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID], FurnitureData[furnitureid][furnitureID]);
		mysql_tquery(g_iHandle, string);

		FurnitureData[furnitureid][furnitureExists] = false;
		FurnitureData[furnitureid][furnitureModel] = 0;

		DestroyDynamicObject(FurnitureData[furnitureid][furnitureObject]);
	}
	return 1;
}

forward OnLoadCarStorage(carid);
public OnLoadCarStorage(carid)
{
	static
	    rows,
	    fields,
		str[32];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) {
		CarStorage[carid][i][cItemExists] = true;
		CarStorage[carid][i][cItemID] = cache_get_field_int(i, "itemID");
		CarStorage[carid][i][cItemModel] = cache_get_field_int(i, "itemModel");
		CarStorage[carid][i][cItemQuantity] = cache_get_field_int(i, "itemQuantity");

		cache_get_field_content(i, "itemName", str, g_iHandle, sizeof(str));
		strpack(CarStorage[carid][i][cItemName], str, 32 char);
	}
	return 1;
}

forward OnLoadStorage(houseid);
public OnLoadStorage(houseid)
{
	static
	    rows,
	    fields,
		str[32];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) {
		HouseStorage[houseid][i][hItemExists] = true;
		HouseStorage[houseid][i][hItemID] = cache_get_field_int(i, "itemID");
		HouseStorage[houseid][i][hItemModel] = cache_get_field_int(i, "itemModel");
		HouseStorage[houseid][i][hItemQuantity] = cache_get_field_int(i, "itemQuantity");

		cache_get_field_content(i, "itemName", str, g_iHandle, sizeof(str));
		strpack(HouseStorage[houseid][i][hItemName], str, 32 char);
	}
	return 1;
}

forward OnLoadBackpack(id);
public OnLoadBackpack(id)
{
	static
	    rows,
	    fields,
		itemid = -1;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) if ((itemid = Backpack_GetFreeItem()) != -1) {
		BackpackItems[itemid][bItemExists] = true;
		BackpackItems[itemid][bItemBackpack] = id;
		BackpackItems[itemid][bItemID] = cache_get_field_int(i, "itemID");
		BackpackItems[itemid][bItemModel] = cache_get_field_int(i, "itemModel");
		BackpackItems[itemid][bItemQuantity] = cache_get_field_int(i, "itemQuantity");

		cache_get_field_content(i, "itemName", BackpackItems[itemid][bItemName], g_iHandle, 32);
	}
	return 1;
}

House_Save(houseid)
{
	static
	    query[1536];

	format(query, sizeof(query), "UPDATE `houses` SET `houseOwner` = '%d', `housePrice` = '%d', `houseAddress` = '%s', `housePosX` = '%.4f', `housePosY` = '%.4f', `housePosZ` = '%.4f', `housePosA` = '%.4f', `houseIntX` = '%.4f', `houseIntY` = '%.4f', `houseIntZ` = '%.4f', `houseIntA` = '%.4f', `houseInterior` = '%d', `houseExterior` = '%d', `houseExteriorVW` = '%d'",
	    HouseData[houseid][houseOwner],
	    HouseData[houseid][housePrice],
	    SQL_ReturnEscaped(HouseData[houseid][houseAddress]),
	    HouseData[houseid][housePos][0],
	    HouseData[houseid][housePos][1],
	    HouseData[houseid][housePos][2],
	    HouseData[houseid][housePos][3],
	    HouseData[houseid][houseInt][0],
	    HouseData[houseid][houseInt][1],
	    HouseData[houseid][houseInt][2],
	    HouseData[houseid][houseInt][3],
        HouseData[houseid][houseInterior],
        HouseData[houseid][houseExterior],
        HouseData[houseid][houseExteriorVW]
	);
	for (new i = 0; i < 10; i ++) {
		format(query, sizeof(query), "%s, `houseWeapon%d` = '%d', `houseAmmo%d` = '%d'", query, i + 1, HouseData[houseid][houseWeapons][i], i + 1, HouseData[houseid][houseAmmo][i]);
	}
	format(query, sizeof(query), "%s, `houseLocked` = '%d', `houseMoney` = '%d' WHERE `houseID` = '%d'",
	    query,
	    HouseData[houseid][houseLocked],
	    HouseData[houseid][houseMoney],
        HouseData[houseid][houseID]
	);
	return mysql_tquery(g_iHandle, query);
}

/*House_GetCount(playerid)
{
	new count = 0;

    for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && House_IsOwner(playerid, i)) {
	    count++;
	}
	return count;
}*/

House_Inside(playerid)
{
	if (PlayerData[playerid][pHouse] != -1)
	{
	    for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && HouseData[i][houseID] == PlayerData[playerid][pHouse] && GetPlayerInterior(playerid) == HouseData[i][houseInterior] && GetPlayerVirtualWorld(playerid) > 0) {
	        return i;
		}
	}
	return -1;
}

Gate_Nearest(playerid)
{
    for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && IsPlayerInRangeOfPoint(playerid, GateData[i][gateRadius], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]))
	{
		if (GetPlayerInterior(playerid) == GateData[i][gateInterior] && GetPlayerVirtualWorld(playerid) == GateData[i][gateWorld])
			return i;
	}
	return -1;
}

Arrest_Nearest(playerid)
{
    for (new i = 0; i != MAX_ARREST_POINTS; i ++) if (ArrestData[i][arrestExists] && IsPlayerInRangeOfPoint(playerid, 4.0, ArrestData[i][arrestPos][0], ArrestData[i][arrestPos][1], ArrestData[i][arrestPos][2]))
	{
		if (GetPlayerInterior(playerid) == ArrestData[i][arrestInterior] && GetPlayerVirtualWorld(playerid) == ArrestData[i][arrestWorld])
			return i;
	}
	return -1;
}

Pump_Nearest(playerid)
{
    for (new i = 0; i != MAX_GAS_PUMPS; i ++) if (PumpData[i][pumpExists] && IsPlayerInRangeOfPoint(playerid, 4.0, PumpData[i][pumpPos][0], PumpData[i][pumpPos][1], PumpData[i][pumpPos][2]) && PumpData[i][pumpExists]) {
	    return i;
	}
	return -1;
}

Plant_Nearest(playerid)
{
    for (new i = 0; i != MAX_DRUG_PLANTS; i ++) if (PlantData[i][plantExists] && IsPlayerInRangeOfPoint(playerid, 4.0, PlantData[i][plantPos][0], PlantData[i][plantPos][1], PlantData[i][plantPos][2]))
	{
		if (GetPlayerInterior(playerid) == PlantData[i][plantInterior] && GetPlayerVirtualWorld(playerid) == PlantData[i][plantWorld])
			return i;
	}
	return -1;
}

Crate_Highest(crateid)
{
	new
		Float:height = -1.0,
		id = -1;

    for (new i = 0; i != MAX_CRATES; i ++) if (i != id && CrateData[i][crateExists] && CrateData[i][crateVehicle] == INVALID_VEHICLE_ID && CrateData[i][cratePos][0] == CrateData[crateid][cratePos][0] && CrateData[i][cratePos][1] == CrateData[crateid][cratePos][1] && CrateData[i][cratePos][2] > CrateData[crateid][cratePos][2] && !IsCrateInUse(crateid))
	{
	    if (CrateData[i][cratePos][2] > height)
	    {
	        height = CrateData[i][cratePos][2];
	        id = i;
		}
	}
	return id;
}

Crate_Nearest(playerid, Float:radius = 2.5)
{
	if (PlayerData[playerid][pCarryCrate] != -1 && CrateData[PlayerData[playerid][pCarryCrate]][crateExists])
	    return PlayerData[playerid][pCarryCrate];

    for (new i = 0; i != MAX_CRATES; i ++) if (CrateData[i][crateExists] && IsPlayerInRangeOfPoint(playerid, radius, CrateData[i][cratePos][0], CrateData[i][cratePos][1], CrateData[i][cratePos][2]))
	{
		if (GetPlayerInterior(playerid) == CrateData[i][crateInterior] && GetPlayerVirtualWorld(playerid) == CrateData[i][crateWorld])
			return i;
	}
	return -1;
}

House_Nearest(playerid)
{
    for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && IsPlayerInRangeOfPoint(playerid, 2.5, HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]))
	{
		if (GetPlayerInterior(playerid) == HouseData[i][houseExterior] && GetPlayerVirtualWorld(playerid) == HouseData[i][houseExteriorVW])
			return i;
	}
	return -1;
}

House_Refresh(houseid)
{
	if (houseid != -1 && HouseData[houseid][houseExists])
	{
		if (IsValidDynamic3DTextLabel(HouseData[houseid][houseText3D]))
		    DestroyDynamic3DTextLabel(HouseData[houseid][houseText3D]);

		if (IsValidDynamicPickup(HouseData[houseid][housePickup]))
		    DestroyDynamicPickup(HouseData[houseid][housePickup]);

		//if (IsValidDynamicMapIcon(HouseData[houseid][houseMapIcon]))
		    //DestroyDynamicMapIcon(HouseData[houseid][houseMapIcon]);

		static
		    string[128];

		if (!HouseData[houseid][houseOwner]) {
			format(string, sizeof(string), "[%s]\n%s", FormatNumber(HouseData[houseid][housePrice]), HouseData[houseid][houseAddress]);
            HouseData[houseid][houseText3D] = CreateDynamic3DTextLabel(string, 0x33AA33FF, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
		}
		else {

			format(string, sizeof(string), "%s", HouseData[houseid][houseAddress]);
			HouseData[houseid][houseText3D] = CreateDynamic3DTextLabel(string, COLOR_WHITE, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
		}
        HouseData[houseid][housePickup] = CreateDynamicPickup(1273, 23, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
		//HouseData[houseid][houseMapIcon] = CreateDynamicMapIcon(HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], (HouseData[houseid][houseOwner] != 0) ? (32) : (31), 0, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior], -1, 300.0);
	}
	return 1;
}

Car_GetCount(playerid)
{
	new
		count = 0;

	for (new i = 0; i != MAX_DYNAMIC_CARS; i ++)
	{
		if (CarData[i][carExists] && CarData[i][carOwner] == PlayerData[playerid][pID])
   		{
   		    count++;
		}
	}
	return count;
}

House_GetCount(playerid)
{
	new
		count = 0;

	for (new i = 0; i != MAX_HOUSES; i ++)
	{
		if (HouseData[i][houseExists] && House_IsOwner(playerid, i))
   		{
   		    count++;
		}
	}
	return count;
}

Business_GetCount(playerid)
{
	new
		count = 0;

	for (new i = 0; i != MAX_BUSINESSES; i ++)
	{
		if (BusinessData[i][bizExists] && Business_IsOwner(playerid, i))
   		{
   		    count++;
		}
	}
	return count;
}

Car_IsOwner(playerid, carid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	    return 0;

    if ((CarData[carid][carExists] && CarData[carid][carOwner] != 0) && CarData[carid][carOwner] == PlayerData[playerid][pID])
		return 1;

	return 0;
}

Car_WeaponStorage(playerid, carid)
{
    if (!CarData[carid][carExists] || CarData[carid][carLocked])
	    return 0;

    static
	    string[164];

	string[0] = 0;

	for (new i = 0; i < 5; i ++)
	{
	    if (22 <= CarData[carid][carWeapons][i] <= 38)
	        format(string, sizeof(string), "%s%s - Peluru: %d\n", string, ReturnWeaponName(CarData[carid][carWeapons][i]), CarData[carid][carAmmo][i]);

		else
		    format(string, sizeof(string), "%s%s\n", string, (CarData[carid][carWeapons][i]) ? (ReturnWeaponName(CarData[carid][carWeapons][i])) : ("Slot Kosong"));
	}
	Dialog_Show(playerid, Trunk, DIALOG_STYLE_LIST, "Bagasi Mobil", string, "Pilih", "Batal");
	return 1;
}

Car_ShowTrunk(playerid, carid)
{
	static
	    string[MAX_CAR_STORAGE * 32],
		name[32];

	string[0] = 0;

	for (new i = 0; i != MAX_CAR_STORAGE; i ++)
	{
	    if (!CarStorage[carid][i][cItemExists])
	        format(string, sizeof(string), "%sSlot Kosong\n", string);

		else {
			strunpack(name, CarStorage[carid][i][cItemName]);

			if (CarStorage[carid][i][cItemQuantity] == 1) {
                format(string, sizeof(string), "%s%s\n", string, name);
			}
			else format(string, sizeof(string), "%s%s (%d)\n", string, name, CarStorage[carid][i][cItemQuantity]);
		}
	}
	strcat(string, "Weapon Storage");

	PlayerData[playerid][pStorageSelect] = 0;
	Dialog_Show(playerid, CarStorage, DIALOG_STYLE_LIST, "Penyimpanan Mobil", string, "Pilih", "Batal");
	return 1;
}

stock IsNearFactionLocker(playerid)
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1)
	    return 0;

	if (IsPlayerInRangeOfPoint(playerid, 3.0, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2]) && GetPlayerInterior(playerid) == FactionData[factionid][factionLockerInt] && GetPlayerVirtualWorld(playerid) == FactionData[factionid][factionLockerWorld])
	    return 1;

	return 0;
}

stock GetFactionByID(sqlid)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionExists] && FactionData[i][factionID] == sqlid)
	    return i;

	return -1;
}

SetFaction(playerid, id)
{
	if (id != -1 && FactionData[id][factionExists])
	{
		PlayerData[playerid][pFaction] = id;
		PlayerData[playerid][pFactionID] = FactionData[id][factionID];
	}
	return 1;
}

SetFactionColor(playerid)
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid != -1)
		return SetPlayerColor(playerid, RemoveAlpha(FactionData[factionid][factionColor]));

	return 0;
}

Faction_Update(factionid)
{
	if (factionid != -1 || FactionData[factionid][factionExists])
	{
	    foreach (new i : Player) if (PlayerData[i][pFaction] == factionid)
		{
 			if (GetFactionType(i) == FACTION_GANG || (GetFactionType(i) != FACTION_GANG && PlayerData[i][pOnDuty]))
			 	SetFactionColor(i);
		}
	}
	return 1;
}

Faction_Refresh(factionid)
{
	if (factionid != -1 && FactionData[factionid][factionExists])
	{
	    if (FactionData[factionid][factionLockerPos][0] != 0.0 && FactionData[factionid][factionLockerPos][1] != 0.0 && FactionData[factionid][factionLockerPos][2] != 0.0)
	    {
		    static
		        string[128];

			if (IsValidDynamicPickup(FactionData[factionid][factionPickup]))
			    DestroyDynamicPickup(FactionData[factionid][factionPickup]);

			if (IsValidDynamic3DTextLabel(FactionData[factionid][factionText3D]))
			    DestroyDynamic3DTextLabel(FactionData[factionid][factionText3D]);

			FactionData[factionid][factionPickup] = CreateDynamicPickup(1239, 23, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2], FactionData[factionid][factionLockerWorld], FactionData[factionid][factionLockerInt]);

			format(string, sizeof(string), "[Loker %d]\n{FFFFFF}/locker untuk mengakses loker.", factionid);
	  		FactionData[factionid][factionText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2], 25.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, FactionData[factionid][factionLockerWorld], FactionData[factionid][factionLockerInt]);
		}
	}
	return 1;
}

Faction_Save(factionid)
{
	static
	    query[2048];

	format(query, sizeof(query), "UPDATE `factions` SET `factionName` = '%s', `factionColor` = '%d', `factionType` = '%d', `factionRanks` = '%d', `factionDivisions` = '%d', `factionLockerX` = '%.4f', `factionLockerY` = '%.4f', `factionLockerZ` = '%.4f', `factionLockerInt` = '%d', `factionLockerWorld` = '%d', `SpawnX` = '%f', `SpawnY` = '%f', `SpawnZ` = '%f', `SpawnInterior` = '%d', `SpawnVW` = '%d'",
		SQL_ReturnEscaped(FactionData[factionid][factionName]),
		FactionData[factionid][factionColor],
		FactionData[factionid][factionType],
		FactionData[factionid][factionRanks],
		FactionData[factionid][factionDivisions],
		FactionData[factionid][factionLockerPos][0],
		FactionData[factionid][factionLockerPos][1],
		FactionData[factionid][factionLockerPos][2],
		FactionData[factionid][factionLockerInt],
		FactionData[factionid][factionLockerWorld],

		FactionData[factionid][SpawnX],
		FactionData[factionid][SpawnY],
		FactionData[factionid][SpawnZ],
		FactionData[factionid][SpawnInterior],
		FactionData[factionid][SpawnVW]
	);
	for (new i = 0; i < 10; i ++)
	{
	    if (i < 8)
			format(query, sizeof(query), "%s, `factionSkin%d` = '%d', `factionWeapon%d` = '%d', `factionAmmo%d` = '%d'", query, i + 1, FactionData[factionid][factionSkins][i], i + 1, FactionData[factionid][factionWeapons][i], i + 1, FactionData[factionid][factionAmmo][i]);

		else
			format(query, sizeof(query), "%s, `factionWeapon%d` = '%d', `factionAmmo%d` = '%d'", query, i + 1, FactionData[factionid][factionWeapons][i], i + 1, FactionData[factionid][factionAmmo][i]);
	}
	format(query, sizeof(query), "%s WHERE `factionID` = '%d'",
		query,
		FactionData[factionid][factionID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Faction_SaveRanks(factionid)
{
	static
	    query[768];

	format(query, sizeof(query), "UPDATE `factions` SET `factionRank1` = '%s', `factionRank2` = '%s', `factionRank3` = '%s', `factionRank4` = '%s', `factionRank5` = '%s', `factionRank6` = '%s', `factionRank7` = '%s', `factionRank8` = '%s', `factionRank9` = '%s', `factionRank10` = '%s', `factionRank11` = '%s', `factionRank12` = '%s', `factionRank13` = '%s', `factionRank14` = '%s', `factionRank15` = '%s' WHERE `factionID` = '%d'",
	    FactionRanks[factionid][0],
	    FactionRanks[factionid][1],
	    FactionRanks[factionid][2],
	    FactionRanks[factionid][3],
	    FactionRanks[factionid][4],
	    FactionRanks[factionid][5],
	    FactionRanks[factionid][6],
	    FactionRanks[factionid][7],
	    FactionRanks[factionid][8],
	    FactionRanks[factionid][9],
	    FactionRanks[factionid][10],
	    FactionRanks[factionid][11],
	    FactionRanks[factionid][12],
	    FactionRanks[factionid][13],
	    FactionRanks[factionid][14],
	    FactionData[factionid][factionID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Faction_SaveDivisions(factionid)
{
	static
	    query[768];

	format(query, sizeof(query), "UPDATE `factions` SET `factionDivision1` = '%s', `factionDivision2` = '%s', `factionDivision3` = '%s', `factionDivision4` = '%s', `factionDivision5` = '%s' WHERE `factionID` = '%d'",
	    FactionDivisions[factionid][0],
	    FactionDivisions[factionid][1],
	    FactionDivisions[factionid][2],
	    FactionDivisions[factionid][3],
	    FactionDivisions[factionid][4],
	    FactionData[factionid][factionID]
	);
	return mysql_tquery(g_iHandle, query);
}

Faction_Delete(factionid)
{
	if (factionid != -1 && FactionData[factionid][factionExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `factions` WHERE `factionID` = '%d'", FactionData[factionid][factionID]);
		mysql_tquery(g_iHandle, string);

		format(string, sizeof(string), "UPDATE `characters` SET `Faction` = '-1' WHERE `Faction` = '%d'", FactionData[factionid][factionID]);
		mysql_tquery(g_iHandle, string);

		foreach (new i : Player)
		{
			if (PlayerData[i][pFaction] == factionid) {
		    	PlayerData[i][pFaction] = -1;
		    	PlayerData[i][pFactionID] = -1;
		    	PlayerData[i][pFactionRank] = -1;
		    	PlayerData[i][pFactionDivision] = -1;
			}
			if (PlayerData[i][pFactionEdit] == factionid) {
			    PlayerData[i][pFactionEdit] = -1;
			}
		}
		if (IsValidDynamicPickup(FactionData[factionid][factionPickup]))
  			DestroyDynamicPickup(FactionData[factionid][factionPickup]);

		if (IsValidDynamic3DTextLabel(FactionData[factionid][factionText3D]))
  			DestroyDynamic3DTextLabel(FactionData[factionid][factionText3D]);

	    FactionData[factionid][factionExists] = false;
	    FactionData[factionid][factionType] = 0;
	    FactionData[factionid][factionID] = 0;
	}
	return 1;
}

stock GetFactionType(playerid)
{
	if (PlayerData[playerid][pFaction] == -1)
	    return 0;

	return (FactionData[PlayerData[playerid][pFaction]][factionType]);
}

Faction_ShowRanks(playerid, factionid)
{
    if (factionid != -1 && FactionData[factionid][factionExists])
	{
		static
		    string[640];

		string[0] = 0;

		for (new i = 0; i < FactionData[factionid][factionRanks]; i ++)
		    format(string, sizeof(string), "%sRank %d: %s\n", string, i + 1, FactionRanks[factionid][i]);

		PlayerData[playerid][pFactionEdit] = factionid;
		Dialog_Show(playerid, EditRanks, DIALOG_STYLE_LIST, FactionData[factionid][factionName], string, "Ganti", "Batal");
	}
	return 1;
}

Faction_ShowDivisions(playerid, factionid)
{
    if (factionid != -1 && FactionData[factionid][factionExists])
	{
		static
		    string[640];

		string[0] = 0;

		for (new i = 0; i < FactionData[factionid][factionDivisions]; i ++)
		    format(string, sizeof(string), "%sDivision %d: %s\n", string, i + 1, FactionDivisions[factionid][i]);

		PlayerData[playerid][pFactionEdit] = factionid;
		Dialog_Show(playerid, EditDivisions, DIALOG_STYLE_LIST, FactionData[factionid][factionName], string, "Ganti", "Batal");
	}
	return 1;
}



Faction_Create(name[], type)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (!FactionData[i][factionExists])
	{
	    format(FactionData[i][factionName], 32, name);

        FactionData[i][factionExists] = true;
        FactionData[i][factionColor] = 0xFFFFFF00;
        FactionData[i][factionType] = type;
        FactionData[i][factionRanks] = 5;
        FactionData[i][factionDivisions] = 5;

        FactionData[i][factionLockerPos][0] = 0.0;
        FactionData[i][factionLockerPos][1] = 0.0;
        FactionData[i][factionLockerPos][2] = 0.0;
        FactionData[i][factionLockerInt] = 0;
        FactionData[i][factionLockerWorld] = 0;

        for (new j = 0; j < 8; j ++) {
            FactionData[i][factionSkins][j] = 0;
        }
        for (new j = 0; j < 10; j ++) {
            FactionData[i][factionWeapons][j] = 0;
            FactionData[i][factionAmmo][j] = 0;
	    }
	    for (new j = 0; j < 15; j ++) {
			format(FactionRanks[i][j], 32, "Rank %d", j + 1);
	    }
	    for (new j = 0; j < 5; j ++) {
			format(FactionDivisions[i][j], 32, "Division %d", j + 1);
	    }
	    mysql_tquery(g_iHandle, "INSERT INTO `factions` (`factionType`) VALUES(0)", "OnFactionCreated", "d", i);
	    return i;
	}
	return -1;
}

Plant_Delete(plantid)
{
	if (plantid != -1 && PlantData[plantid][plantExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `plants` WHERE `plantID` = '%d'", PlantData[plantid][plantID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(PlantData[plantid][plantText3D]))
		    DestroyDynamic3DTextLabel(PlantData[plantid][plantText3D]);

		if (IsValidDynamicObject(PlantData[plantid][plantObject]))
		    DestroyDynamicObject(PlantData[plantid][plantObject]);

	    PlantData[plantid][plantExists] = false;
		PlantData[plantid][plantID] = 0;
	    PlantData[plantid][plantDrugs] = 0;
	}
	return 1;
}

Plant_Create(playerid, type)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
	    for (new i = 0; i != MAX_DRUG_PLANTS; i ++) if (!PlantData[i][plantExists])
	    {
	        PlantData[i][plantExists] = true;
	        PlantData[i][plantType] = type;
	        PlantData[i][plantDrugs] = 0;

	        PlantData[i][plantPos][0] = x;
	        PlantData[i][plantPos][1] = y;
	        PlantData[i][plantPos][2] = z;
	        PlantData[i][plantPos][3] = angle;
	        PlantData[i][plantInterior] = GetPlayerInterior(playerid);
	        PlantData[i][plantWorld] = GetPlayerVirtualWorld(playerid);

	        mysql_tquery(g_iHandle, "INSERT INTO `plants` (`plantType`) VALUES(0)", "OnPlantCreated", "d", i);
	        Plant_Refresh(i);
	        return i;
		}
	}
	return -1;
}

Plant_MaxGrams(type)
{
	new grams;

	switch (type)
	{
	    case 1: grams = 40; // Marijuana plant
	    case 2: grams = 30; // Cocaine plant
		case 3: grams = 25; // Heroin plant
		default: grams = 0;
	}
	return grams;
}

Plant_Save(plantid)
{
	static
	    query[256];

	format(query, sizeof(query), "UPDATE `plants` SET `plantType` = '%d', `plantDrugs` = '%d', `plantX` = '%.4f', `plantY` = '%.4f', `plantZ` = '%.4f', `plantA` = '%.4f', `plantInterior` = '%d', `plantWorld` = '%d' WHERE `plantID` = '%d'",
        PlantData[plantid][plantType],
        PlantData[plantid][plantDrugs],
        PlantData[plantid][plantPos][0],
        PlantData[plantid][plantPos][1],
        PlantData[plantid][plantPos][2],
        PlantData[plantid][plantPos][3],
        PlantData[plantid][plantInterior],
        PlantData[plantid][plantWorld],
        PlantData[plantid][plantID]
	);
	return mysql_tquery(g_iHandle, query);
}

Plant_GetType(type)
{
	static
	    str[16];

    switch (type) {
    	case 1: str = "Marijuana";
    	case 2: str = "Cocaine";
	    case 3: str = "Heroin";
	}
	return str;
}

Plant_Refresh(plantid)
{
	if (plantid != -1 && PlantData[plantid][plantExists])
	{
	    static
	        string[128];

		if (IsValidDynamicObject(PlantData[plantid][plantObject]))
		    DestroyDynamicObject(PlantData[plantid][plantObject]);

		if (IsValidDynamic3DTextLabel(PlantData[plantid][plantText3D]))
		    DestroyDynamic3DTextLabel(PlantData[plantid][plantText3D]);

		PlantData[plantid][plantObject] = CreateDynamicObject(3409, PlantData[plantid][plantPos][0], PlantData[plantid][plantPos][1], PlantData[plantid][plantPos][2] - 1.80, 0.0, 0.0, PlantData[plantid][plantPos][3], PlantData[plantid][plantWorld], PlantData[plantid][plantInterior]);

		format(string, sizeof(string), "[Tanaman %d]\n{FFFFFF}%s - %d/%d Gram", plantid, Plant_GetType(PlantData[plantid][plantType]), PlantData[plantid][plantDrugs], Plant_MaxGrams(PlantData[plantid][plantType]));
  		PlantData[plantid][plantText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, PlantData[plantid][plantPos][0], PlantData[plantid][plantPos][1], PlantData[plantid][plantPos][2], 25.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, PlantData[plantid][plantWorld], PlantData[plantid][plantInterior]);
	}
	return 1;
}

Crate_Refresh(crateid)
{
	if (crateid != -1 && CrateData[crateid][crateExists])
	{
	    static
	        string[128];

		if (IsValidDynamicObject(CrateData[crateid][crateObject]))
		    DestroyDynamicObject(CrateData[crateid][crateObject]);

		if (IsValidDynamic3DTextLabel(CrateData[crateid][crateText3D]))
		    DestroyDynamic3DTextLabel(CrateData[crateid][crateText3D]);

		CrateData[crateid][crateObject] = CreateDynamicObject(964, CrateData[crateid][cratePos][0], CrateData[crateid][cratePos][1], CrateData[crateid][cratePos][2], 0.0, 0.0, CrateData[crateid][cratePos][3], CrateData[crateid][crateWorld], CrateData[crateid][crateInterior]);

		if (CrateData[crateid][crateType] != 6) {
			format(string, sizeof(string), "[Crate %d]\n{FFFFFF}%s parts (tekan 'F' untuk mengambil)", crateid, Crate_GetType(CrateData[crateid][crateType]));
		}
		else {
		    format(string, sizeof(string), "[Crate %d]\n{FFFFFF}Drug Seeds (tekan 'F' untuk mengambil)", crateid);
		}
  		CrateData[crateid][crateText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, CrateData[crateid][cratePos][0], CrateData[crateid][cratePos][1], CrateData[crateid][cratePos][2] + 0.5, 25.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, CrateData[crateid][crateWorld], CrateData[crateid][crateInterior]);
	}
	return 1;
}

Crate_Delete(crateid)
{
	if (crateid != -1 && CrateData[crateid][crateExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `crates` WHERE `crateID` = '%d'", CrateData[crateid][crateID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(CrateData[crateid][crateText3D]))
		    DestroyDynamic3DTextLabel(CrateData[crateid][crateText3D]);

		if (IsValidDynamicObject(CrateData[crateid][crateObject]))
		    DestroyDynamicObject(CrateData[crateid][crateObject]);

		foreach (new i : Player) if (PlayerData[i][pCarryCrate] == crateid) {
		    PlayerData[i][pCarryCrate] = -1;

		    RemovePlayerAttachedObject(i, 4);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
		}
	    CrateData[crateid][crateExists] = false;
	    CrateData[crateid][crateID] = 0;
	    CrateData[crateid][crateVehicle] = INVALID_VEHICLE_ID;
	}
	return 1;
}

Crate_Drop(playerid, Float:radius = 0.0)
{
    static
		Float:x,
		Float:y,
		Float:z,
		Float:angle,
		id = -1;

	if ((id = PlayerData[playerid][pCarryCrate]) != -1 && CrateData[id][crateExists])
	{
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		if (radius != 0.0) {
		    x += radius * floatsin(-angle, degrees);
		    y += radius * floatcos(-angle, degrees);
		}
		CrateData[id][cratePos][0] = x;
		CrateData[id][cratePos][1] = y;
		CrateData[id][cratePos][2] = z - 0.9;
		CrateData[id][cratePos][3] = angle;
		CrateData[id][crateInterior] = GetPlayerInterior(playerid);
		CrateData[id][crateWorld] = GetPlayerVirtualWorld(playerid);

		Crate_Refresh(id);
		Crate_Save(id);
	}
	PlayerData[playerid][pCarryCrate] = -1;
	RemovePlayerAttachedObject(playerid, 4);
	return 1;
}

Crate_Save(crateid)
{
	static
	    query[255];

	format(query, sizeof(query), "UPDATE `crates` SET `crateType` = '%d', `crateX` = '%.4f', `crateY` = '%.4f', `crateZ` = '%.4f', `crateA` = '%.4f', `crateInterior` = '%d', `crateWorld` = '%d' WHERE `crateID` = '%d'",
	    CrateData[crateid][crateType],
	    CrateData[crateid][cratePos][0],
	    CrateData[crateid][cratePos][1],
	    CrateData[crateid][cratePos][2],
	    CrateData[crateid][cratePos][3],
	    CrateData[crateid][crateInterior],
	    CrateData[crateid][crateWorld],
	    CrateData[crateid][crateID]
	);
	return mysql_tquery(g_iHandle, query);
}

Crate_GetType(type)
{
	static
	    str[24];

	switch (type) {
	    case 1: str = "Melee";
	    case 2: str = "Pistol";
	    case 3: str = "SMG";
	    case 4: str = "Shotgun";
	    case 5: str = "Rifle";
	    case 6: str = "Drug Seeds";
	    default: str = "None";
	}
	return str;
}

Crate_Create(playerid, type)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
	    for (new i = 0; i != MAX_CRATES; i ++) if (!CrateData[i][crateExists])
	    {
         	if (Crate_Nearest(playerid, 2.5) != -1) {
			 	z = floatsub(z, 0.1);
	        }
            CrateData[i][crateExists] = true;
            CrateData[i][crateVehicle] = INVALID_VEHICLE_ID;
            CrateData[i][crateType] = type;

			CrateData[i][cratePos][0] = x;
   			CrateData[i][cratePos][1] = y;
            CrateData[i][cratePos][2] = z - 0.9;
            CrateData[i][cratePos][3] = angle;

            CrateData[i][crateInterior] = GetPlayerInterior(playerid);
            CrateData[i][crateWorld] = GetPlayerVirtualWorld(playerid);

            mysql_tquery(g_iHandle, "INSERT INTO `crates` (`crateInterior`) VALUES(0)", "OnCrateCreated", "d", i);
            Crate_Refresh(i);
            return i;
		}
	}
	return -1;
}

Crate_Melee_Dealer(playerid)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
	    for (new i = 0; i != MAX_CRATES; i ++) if (!CrateData[i][crateExists])
	    {
         	if (Crate_Nearest(playerid, 2.5) != -1) {
			 	z = floatsub(z, 0.1);
	        }
            CrateData[i][crateExists] = true;
            CrateData[i][crateVehicle] = INVALID_VEHICLE_ID;
            CrateData[i][crateType] = 1;
			//1238.1721,235.7764,19.5547 - Crate spawning position.
			CrateData[i][cratePos][0] = x;
   			CrateData[i][cratePos][1] = y;
            CrateData[i][cratePos][2] = z - 1;
            CrateData[i][cratePos][3] = angle;

            CrateData[i][crateInterior] = GetPlayerInterior(playerid);
            CrateData[i][crateWorld] = GetPlayerVirtualWorld(playerid);

            mysql_tquery(g_iHandle, "INSERT INTO `crates` (`crateInterior`) VALUES(0)", "OnCrateCreated", "d", i);
            Crate_Refresh(i);
            return i;
		}
	}
	return -1;
}

Crate_Pistol_Dealer(playerid)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
	    for (new i = 0; i != MAX_CRATES; i ++) if (!CrateData[i][crateExists])
	    {
         	if (Crate_Nearest(playerid, 2.5) != -1) {
			 	z = floatsub(z, 0.1);
	        }
            CrateData[i][crateExists] = true;
            CrateData[i][crateVehicle] = INVALID_VEHICLE_ID;
            CrateData[i][crateType] = 2;
			//1238.1721,235.7764,19.5547 - Crate spawning position.
			CrateData[i][cratePos][0] = x;
   			CrateData[i][cratePos][1] = y;
            CrateData[i][cratePos][2] = z - 1;
            CrateData[i][cratePos][3] = angle;

            CrateData[i][crateInterior] = GetPlayerInterior(playerid);
            CrateData[i][crateWorld] = GetPlayerVirtualWorld(playerid);

            mysql_tquery(g_iHandle, "INSERT INTO `crates` (`crateInterior`) VALUES(0)", "OnCrateCreated", "d", i);
            Crate_Refresh(i);
            return i;
		}
	}
	return -1;
}

Crate_SMG_Dealer(playerid)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
	    for (new i = 0; i != MAX_CRATES; i ++) if (!CrateData[i][crateExists])
	    {
         	if (Crate_Nearest(playerid, 2.5) != -1) {
			 	z = floatsub(z, 0.1);
	        }
            CrateData[i][crateExists] = true;
            CrateData[i][crateVehicle] = INVALID_VEHICLE_ID;
            CrateData[i][crateType] = 3;
			//1238.1721,235.7764,19.5547 - Crate spawning position.
			CrateData[i][cratePos][0] = x;
   			CrateData[i][cratePos][1] = y;
            CrateData[i][cratePos][2] = z - 1;
            CrateData[i][cratePos][3] = angle;

            CrateData[i][crateInterior] = GetPlayerInterior(playerid);
            CrateData[i][crateWorld] = GetPlayerVirtualWorld(playerid);

            mysql_tquery(g_iHandle, "INSERT INTO `crates` (`crateInterior`) VALUES(0)", "OnCrateCreated", "d", i);
            Crate_Refresh(i);
            return i;
		}
	}
	return -1;
}

Crate_Shotgun_Dealer(playerid)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
	    for (new i = 0; i != MAX_CRATES; i ++) if (!CrateData[i][crateExists])
	    {
         	if (Crate_Nearest(playerid, 2.5) != -1) {
			 	z = floatsub(z, 0.1);
	        }
            CrateData[i][crateExists] = true;
            CrateData[i][crateVehicle] = INVALID_VEHICLE_ID;
            CrateData[i][crateType] = 4;
			//1238.1721,235.7764,19.5547 - Crate spawning position.
			CrateData[i][cratePos][0] = x;
   			CrateData[i][cratePos][1] = y;
            CrateData[i][cratePos][2] = z - 1;
            CrateData[i][cratePos][3] = angle;

            CrateData[i][crateInterior] = GetPlayerInterior(playerid);
            CrateData[i][crateWorld] = GetPlayerVirtualWorld(playerid);

            mysql_tquery(g_iHandle, "INSERT INTO `crates` (`crateInterior`) VALUES(0)", "OnCrateCreated", "d", i);
            Crate_Refresh(i);
            return i;
		}
	}
	return -1;
}

Crate_Rifle_Dealer(playerid)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
	    for (new i = 0; i != MAX_CRATES; i ++) if (!CrateData[i][crateExists])
	    {
         	if (Crate_Nearest(playerid, 2.5) != -1) {
			 	z = floatsub(z, 0.1);
	        }
            CrateData[i][crateExists] = true;
            CrateData[i][crateVehicle] = INVALID_VEHICLE_ID;
            CrateData[i][crateType] = 5;
			//1238.1721,235.7764,19.5547 - Crate spawning position.
			CrateData[i][cratePos][0] = x;
   			CrateData[i][cratePos][1] = y;
            CrateData[i][cratePos][2] = z - 1;
            CrateData[i][cratePos][3] = angle;

            CrateData[i][crateInterior] = GetPlayerInterior(playerid);
            CrateData[i][crateWorld] = GetPlayerVirtualWorld(playerid);

            mysql_tquery(g_iHandle, "INSERT INTO `crates` (`crateInterior`) VALUES(0)", "OnCrateCreated", "d", i);
            Crate_Refresh(i);
            return i;
		}
	}
	return -1;
}

Crate_Drug_Dealer(playerid)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
	    for (new i = 0; i != MAX_CRATES; i ++) if (!CrateData[i][crateExists])
	    {
         	if (Crate_Nearest(playerid, 2.5) != -1) {
			 	z = floatsub(z, 0.1);
	        }
            CrateData[i][crateExists] = true;
            CrateData[i][crateVehicle] = INVALID_VEHICLE_ID;
            CrateData[i][crateType] = 6;
			//1238.1721,235.7764,19.5547 - Crate spawning position.
			CrateData[i][cratePos][0] = x;
   			CrateData[i][cratePos][1] = y;
            CrateData[i][cratePos][2] = z - 1;
            CrateData[i][cratePos][3] = angle;

            CrateData[i][crateInterior] = GetPlayerInterior(playerid);
            CrateData[i][crateWorld] = GetPlayerVirtualWorld(playerid);

            mysql_tquery(g_iHandle, "INSERT INTO `crates` (`crateInterior`) VALUES(0)", "OnCrateCreated", "d", i);
            Crate_Refresh(i);
            return i;
		}
	}
	return -1;
}

Job_Save(jobid)
{
	static
	    query[512];

	format(query, sizeof(query), "UPDATE `jobs` SET `jobType` = '%d', `jobPosX` = '%.4f', `jobPosY` = '%.4f', `jobPosZ` = '%.4f', `jobInterior` = '%d', `jobWorld` = '%d', `jobPointX` = '%.4f', `jobPointY` = '%.4f', `jobPointZ` = '%.4f', `jobDeliverX` = '%.4f', `jobDeliverY` = '%.4f', `jobDeliverZ` = '%.4f', `jobPointInt` = '%d', `jobPointWorld` = '%d' WHERE `jobID` = '%d'",
	    JobData[jobid][jobType],
	    JobData[jobid][jobPos][0],
	    JobData[jobid][jobPos][1],
	    JobData[jobid][jobPos][2],
	    JobData[jobid][jobInterior],
	    JobData[jobid][jobWorld],
	    JobData[jobid][jobPoint][0],
	    JobData[jobid][jobPoint][1],
	    JobData[jobid][jobPoint][2],
	    JobData[jobid][jobDeliver][0],
	    JobData[jobid][jobDeliver][1],
	    JobData[jobid][jobDeliver][2],
	    JobData[jobid][jobPointInt],
	    JobData[jobid][jobPointWorld],
	    JobData[jobid][jobID]
	);
	return mysql_tquery(g_iHandle, query);
}

Job_GetName(type)
{
	static
	    str[24];

	switch (type)
	{
	    case 1: str = "Courier";
		case 2: str = "Mechanic";
		case 3: str = "Taxi Driver";
		case 4: str = "Cargo Unloader";
		case 5: str = "Miner";
		case 6: str = "Food Vendor";
		case 7: str = "Garbage Man";
		case 8: str = "Package Sorter";
		case 9: str = "Weapon Smuggler";
		case 10: str = "Lumberjack";
	    default: str = "None";
	}
	return str;
}

Billboard_Save(bbid)
{
	static query[2048];
	format(query, sizeof(query), "UPDATE `billboards` SET `bbName` = '%s', `bbMessage` = '%s', `bbOwner` = '%d', `bbPrice` = '%d', `bbRange` = '%d', `bbPosX` = '%.4f', `bbPosY` = '%.4f', `bbPosZ` = '%.4f' WHERE `bbID` = '%d'",
  	SQL_ReturnEscaped(BillBoardData[bbid][bbName]),
  	SQL_ReturnEscaped(BillBoardData[bbid][bbMessage]),
  	BillBoardData[bbid][bbOwner],
 	BillBoardData[bbid][bbPrice],
  	BillBoardData[bbid][bbRange],
  	BillBoardData[bbid][bbPos][0],
  	BillBoardData[bbid][bbPos][1],
  	BillBoardData[bbid][bbPos][2],
  	BillBoardData[bbid][bbID]
 	);
 	return mysql_tquery(g_iHandle, query);
}

Billboard_Refresh(bizid)
{
	if (bizid != -1 && BillBoardData[bizid][bbExists])
	{
		if (IsValidDynamic3DTextLabel(BillBoardData[bizid][bbText3D]))
		    DestroyDynamic3DTextLabel(BillBoardData[bizid][bbText3D]);

		static
		    string[128];

		if (!BillBoardData[bizid][bbOwner]) {
			format(string, sizeof(string), "[%i] - [%s]\n%s", bizid, FormatNumber(BillBoardData[bizid][bbPrice]), BillBoardData[bizid][bbName]);
            BillBoardData[bizid][bbText3D] = CreateDynamic3DTextLabel(string, 0x33AA33FF, BillBoardData[bizid][bbPos][0], BillBoardData[bizid][bbPos][1], BillBoardData[bizid][bbPos][2], BillBoardData[bizid][bbRange], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
		}
		else if (BillBoardData[bizid][bbOwner]) {
			format(string, sizeof(string), "[%i]\n%s\n%s", bizid, BillBoardData[bizid][bbName], BillBoardData[bizid][bbMessage]);
            BillBoardData[bizid][bbText3D] = CreateDynamic3DTextLabel(string, 0x33AA33FF, BillBoardData[bizid][bbPos][0], BillBoardData[bizid][bbPos][1], BillBoardData[bizid][bbPos][2], BillBoardData[bizid][bbRange], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
		}
	}
	return 1;
}

Billboard_Create(playerid, price)
{
	static
	    Float:x,
	    Float:y,
	    Float:z;

	if (GetPlayerPos(playerid, x, y, z))
	{
		for (new i = 0; i != MAX_BILLBOARDS; i ++)
		{
	    	if (!BillBoardData[i][bbExists])
		    {
    	        BillBoardData[i][bbExists] = true;
        	    BillBoardData[i][bbOwner] = 0;
            	BillBoardData[i][bbPrice] = price;
            	BillBoardData[i][bbRange] = 10;

				format(BillBoardData[i][bbName], 32, "Billboard kosong");

    	        BillBoardData[i][bbPos][0] = x;
    	        BillBoardData[i][bbPos][1] = y;
    	        BillBoardData[i][bbPos][2] = z;

				Billboard_Refresh(i);
				mysql_tquery(g_iHandle, "INSERT INTO `billboards` (`bbOwner`) VALUES(0)", "OnBillboardCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

Billboard_Delete(bizid)
{
	if (bizid != -1 && BillBoardData[bizid][bbExists])
	{
	    new
	        string[82];

		format(string, sizeof(string), "DELETE FROM `billboards` WHERE `bbID` = '%d'", BillBoardData[bizid][bbID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(BillBoardData[bizid][bbText3D]))
		    DestroyDynamic3DTextLabel(BillBoardData[bizid][bbText3D]);

	    BillBoardData[bizid][bbExists] = false;
	    BillBoardData[bizid][bbOwner] = 0;
	    BillBoardData[bizid][bbID] = 0;
	}
	return 1;
}

Job_Refresh(jobid)
{
	if (jobid != -1 && JobData[jobid][jobExists])
	{
	    for (new i = 0; i < 3; i ++) {
			if (IsValidDynamic3DTextLabel(JobData[jobid][jobText3D][i]))
		    	DestroyDynamic3DTextLabel(JobData[jobid][jobText3D][i]);

			if (IsValidDynamicPickup(JobData[jobid][jobPickups][i]))
		    	DestroyDynamicPickup(JobData[jobid][jobPickups][i]);
		}
		static
		    string[90];

		format(string, sizeof(string), "[%s]\n{FFFFFF}Ketik /takejob untuk mendapatkan pekerjaan ini!", Job_GetName(JobData[jobid][jobType]));

		if (JobData[jobid][jobType] == 1) {
		    JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Courier]\n{FFFFFF}Ketik /startdelivery untuk memulai delivery.", COLOR_DEPARTMENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
		}
		else if (JobData[jobid][jobType] == 5) {
		    JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Mining]\n{FFFFFF}Ketik /mine untuk memulai menambang.", COLOR_DEPARTMENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);

			JobData[jobid][jobText3D][2] = CreateDynamic3DTextLabel("[Mining]\n{FFFFFF}Kirimkan batu tambang kamu ke tempat ini.", COLOR_DEPARTMENT, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2], 25.0);
			JobData[jobid][jobPickups][2] = CreateDynamicPickup(1239, 23, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]);
		}
		else if (JobData[jobid][jobType] == 7) {
		    JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Garbage Dump]\n{FFFFFF}Ketik /dumpgarbage untuk membuang sampahmu.", COLOR_DEPARTMENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1264, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
		}
		else if (JobData[jobid][jobType] == 8) {
			JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Package Sorting]\n{FFFFFF}Ketik /sorting untuk mulai memilah paket.", COLOR_DEPARTMENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);

			JobData[jobid][jobText3D][2] = CreateDynamic3DTextLabel("[Package Sorting]\n{FFFFFF}Kirimkan paket kamu di sini untuk menyortir.", COLOR_DEPARTMENT, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2], 25.0);
			JobData[jobid][jobPickups][2] = CreateDynamicPickup(1239, 23, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]);
		}
        else if (JobData[jobid][jobType] == 9) {
		    JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Weapon Parts]\n{FFFFFF}Ketik /craftparts untuk membuat peti senjata.", COLOR_DEPARTMENT, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
		}
		JobData[jobid][jobText3D][0] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, JobData[jobid][jobPos][0], JobData[jobid][jobPos][1], JobData[jobid][jobPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobWorld], JobData[jobid][jobInterior]);
        JobData[jobid][jobPickups][0] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPos][0], JobData[jobid][jobPos][1], JobData[jobid][jobPos][2], JobData[jobid][jobWorld], JobData[jobid][jobInterior]);
	}
	return 1;
}

Job_Delete(jobid)
{
	if (jobid != -1 && JobData[jobid][jobExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `jobs` WHERE `jobID` = '%d'", JobData[jobid][jobID]);
		mysql_tquery(g_iHandle, string);

        for (new i = 0; i < 3; i ++) {
			if (IsValidDynamic3DTextLabel(JobData[jobid][jobText3D][i]))
		    	DestroyDynamic3DTextLabel(JobData[jobid][jobText3D][i]);

			if (IsValidDynamicPickup(JobData[jobid][jobPickups][i]))
		    	DestroyDynamicPickup(JobData[jobid][jobPickups][i]);
		}
		JobData[jobid][jobExists] = false;
	    JobData[jobid][jobType] = 0;
	    JobData[jobid][jobID] = 0;
	}
	return 1;
}

Job_Create(playerid, type)
{
	static
	    Float:x,
	    Float:y,
	    Float:z;

	if (GetPlayerPos(playerid, x, y, z))
	{
		for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++)
		{
	    	if (!JobData[i][jobExists])
	    	{
	        	JobData[i][jobExists] = true;
	        	JobData[i][jobType] = type;

				JobData[i][jobPos][0] = x;
	        	JobData[i][jobPos][1] = y;
	        	JobData[i][jobPos][2] = z;
	        	JobData[i][jobPoint][0] = 0.0;
	        	JobData[i][jobPoint][1] = 0.0;
	        	JobData[i][jobPoint][2] = 0.0;
	        	JobData[i][jobDeliver][0] = 0.0;
	        	JobData[i][jobDeliver][1] = 0.0;
	        	JobData[i][jobDeliver][2] = 0.0;

	        	JobData[i][jobInterior] = GetPlayerInterior(playerid);
	        	JobData[i][jobWorld] = GetPlayerVirtualWorld(playerid);

                JobData[i][jobPointInt] = 0;
                JobData[i][jobPointWorld] = 0;

	        	Job_Refresh(i);
	        	mysql_tquery(g_iHandle, "INSERT INTO `jobs` (`jobInterior`) VALUES(0)", "OnJobCreated", "d", i);

	        	return i;
	        }
	    }
	}
	return -1;
}

Car_Create(ownerid, modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, type = 0, addsiren = 0)
{
    for (new i = 0; i != MAX_DYNAMIC_CARS; i ++)
	{
		if (!CarData[i][carExists])
   		{
   		    if (color1 == -1)
   		        color1 = random(127);

			if (color2 == -1)
			    color2 = random(127);

   		    CarData[i][carExists] = true;
            CarData[i][carModel] = modelid;
            CarData[i][carOwner] = ownerid;

            CarData[i][carPos][0] = x;
            CarData[i][carPos][1] = y;
            CarData[i][carPos][2] = z;
            CarData[i][carPos][3] = angle;

            CarData[i][carColor1] = color1;
            CarData[i][carColor2] = color2;
            CarData[i][carPaintjob] = -1;
            CarData[i][carLocked] = false;
            CarData[i][carImpounded] = -1;
            CarData[i][carImpoundPrice] = 0;
            CarData[i][carFaction] = type;
            CarData[i][carSiren] = addsiren;

            for (new j = 0; j < 14; j ++)
			{
                if (j < 5)
				{
                    CarData[i][carWeapons][j] = 0;
                    CarData[i][carAmmo][j] = 0;
                }
                CarData[i][carMods][j] = 0;
            }
            CarData[i][carVehicle] = CreateVehicle(modelid, x, y, z, angle, color1, color2, -1, -1);

            if (CarData[i][carVehicle] != INVALID_VEHICLE_ID) {
                ResetVehicle(CarData[i][carVehicle]);
            }
            mysql_tquery(g_iHandle, "INSERT INTO `cars` (`carModel`) VALUES(0)", "OnCarCreated", "d", i);
            return i;
		}
	}
	return -1;
}

Car_Delete(carid)
{
    if (carid != -1 && CarData[carid][carExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `cars` WHERE `carID` = '%d'", CarData[carid][carID]);
		mysql_tquery(g_iHandle, string);

		if (IsValidVehicle(CarData[carid][carVehicle]))
			DestroyVehicle(CarData[carid][carVehicle]);

		for (new i = 0; i < MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackVehicle] == CarData[carid][carID]) {
		    Backpack_Delete(i);
		}
		Car_RemoveAllItems(carid);

        CarData[carid][carExists] = false;
	    CarData[carid][carID] = 0;
	    CarData[carid][carOwner] = 0;
	    CarData[carid][carVehicle] = 0;
		CarData[carid][carSiren] = -1;
	}
	return 1;
}

Car_Save(carid)
{
	static
	    query[900];

	if (CarData[carid][carVehicle] != INVALID_VEHICLE_ID)
	{
	    for (new i = 0; i < 14; i ++) {
			CarData[carid][carMods][i] = GetVehicleComponentInSlot(CarData[carid][carVehicle], i);
	    }
	}
	format(query, sizeof(query), "UPDATE `cars` SET `carModel` = '%d', `carOwner` = '%d', `carPosX` = '%.4f', `carPosY` = '%.4f', `carPosZ` = '%.4f', `carPosR` = '%.4f', `carColor1` = '%d', `carColor2` = '%d', `carPaintjob` = '%d', `carLocked` = '%d'",
        CarData[carid][carModel],
        CarData[carid][carOwner],
        CarData[carid][carPos][0],
        CarData[carid][carPos][1],
        CarData[carid][carPos][2],
        CarData[carid][carPos][3],
        CarData[carid][carColor1],
        CarData[carid][carColor2],
        CarData[carid][carPaintjob],
        CarData[carid][carLocked]
	);
	format(query, sizeof(query), "%s, `carMod1` = '%d', `carMod2` = '%d', `carMod3` = '%d', `carMod4` = '%d', `carMod5` = '%d', `carMod6` = '%d', `carMod7` = '%d', `carMod8` = '%d', `carMod9` = '%d', `carMod10` = '%d', `carMod11` = '%d', `carMod12` = '%d', `carMod13` = '%d', `carMod14` = '%d'",
		query,
		CarData[carid][carMods][0],
		CarData[carid][carMods][1],
		CarData[carid][carMods][2],
		CarData[carid][carMods][3],
		CarData[carid][carMods][4],
		CarData[carid][carMods][5],
		CarData[carid][carMods][6],
		CarData[carid][carMods][7],
		CarData[carid][carMods][8],
		CarData[carid][carMods][9],
		CarData[carid][carMods][10],
		CarData[carid][carMods][11],
		CarData[carid][carMods][12],
		CarData[carid][carMods][13]
	);
	format(query, sizeof(query), "%s, `carImpounded` = '%d', `carImpoundPrice` = '%d', `carFaction` = '%d' , `carSiren` = '%d', `carWeapon1` = '%d', `carWeapon2` = '%d', `carWeapon3` = '%d', `carWeapon4` = '%d', `carWeapon5` = '%d', `carAmmo1` = '%d', `carAmmo2` = '%d', `carAmmo3` = '%d', `carAmmo4` = '%d', `carAmmo5` = '%d' WHERE `carID` = '%d'",
		query,
		CarData[carid][carImpounded],
		CarData[carid][carImpoundPrice],
		CarData[carid][carFaction],
		CarData[carid][carSiren],
		CarData[carid][carWeapons][0],
		CarData[carid][carWeapons][1],
		CarData[carid][carWeapons][2],
		CarData[carid][carWeapons][3],
		CarData[carid][carWeapons][4],
		CarData[carid][carAmmo][0],
		CarData[carid][carAmmo][1],
		CarData[carid][carAmmo][2],
		CarData[carid][carAmmo][3],
		CarData[carid][carAmmo][4],
		CarData[carid][carID]
	);
	return mysql_tquery(g_iHandle, query);
}

Entrance_Delete(entranceid)
{
	if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `entrances` WHERE `entranceID` = '%d'", EntranceData[entranceid][entranceID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]))
		    DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]);

		if (IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
		    DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

		if (IsValidDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]))
		    DestroyDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]);

		if (EntranceData[entranceid][entranceType] == 3)
		    DestroyForklifts(entranceid);

	    EntranceData[entranceid][entranceExists] = false;
	    EntranceData[entranceid][entranceID] = 0;
	}
	return 1;
}

Entrance_Save(entranceid)
{
	static
	    query[1024];

	format(query, sizeof(query), "UPDATE `entrances` SET `entranceName` = '%s', `entrancePass` = '%s', `entranceIcon` = '%d', `entranceLocked` = '%d', `entrancePosX` = '%.4f', `entrancePosY` = '%.4f', `entrancePosZ` = '%.4f', `entrancePosA` = '%.4f', `entranceIntX` = '%.4f', `entranceIntY` = '%.4f', `entranceIntZ` = '%.4f', `entranceIntA` = '%.4f', `entranceInterior` = '%d', `entranceExterior` = '%d', `entranceExteriorVW` = '%d', `entranceType` = '%d'",
	    SQL_ReturnEscaped(EntranceData[entranceid][entranceName]),
	    SQL_ReturnEscaped(EntranceData[entranceid][entrancePass]),
	    EntranceData[entranceid][entranceIcon],
	    EntranceData[entranceid][entranceLocked],
	    EntranceData[entranceid][entrancePos][0],
	    EntranceData[entranceid][entrancePos][1],
	    EntranceData[entranceid][entrancePos][2],
	    EntranceData[entranceid][entrancePos][3],
	    EntranceData[entranceid][entranceInt][0],
	    EntranceData[entranceid][entranceInt][1],
	    EntranceData[entranceid][entranceInt][2],
	    EntranceData[entranceid][entranceInt][3],
	    EntranceData[entranceid][entranceInterior],
	    EntranceData[entranceid][entranceExterior],
	    EntranceData[entranceid][entranceExteriorVW],
	    EntranceData[entranceid][entranceType]
	);
	format(query, sizeof(query), "%s, `entranceCustom` = '%d', `entranceWorld` = '%d' WHERE `entranceID` = '%d'",
	    query,
	    EntranceData[entranceid][entranceCustom],
	    EntranceData[entranceid][entranceWorld],
	    EntranceData[entranceid][entranceID]
	);
	return mysql_tquery(g_iHandle, query);
}

IsPlayerNearMine(playerid)
{
	new
	    id = -1;

	if ((id = Job_NearestPoint(playerid, 10.0)) != -1 && JobData[id][jobType] == 5)
		return 1;

	return 0;
}

IsPlayerNearArrest(playerid)
{
	new
	    id = Arrest_Nearest(playerid);

	return (id != -1);
}

IsPlayerInCityHall(playerid)
{
	new
		id = -1;

	if ((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 4)
	    return 1;

	return 0;
}

IsPlayerInWarehouse(playerid)
{
	new
		id = -1;

	if ((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 3)
	    return 1;

	return 0;
}

IsPlayerInBank(playerid)
{
	new
		id = -1;

	if ((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 2)
	    return 1;

	return 0;
}

Entrance_Inside(playerid)
{
	if (PlayerData[playerid][pEntrance] != -1)
	{
	    for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceID] == PlayerData[playerid][pEntrance] && GetPlayerInterior(playerid) == EntranceData[i][entranceInterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceWorld])
	        return i;
	}
	return -1;
}

Entrance_GetLink(playerid)
{
	if (GetPlayerVirtualWorld(playerid) > 0)
	{
	    for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceID] == GetPlayerVirtualWorld(playerid) - 7000)
			return EntranceData[i][entranceID];
	}
	return -1;
}

Entrance_Nearest(playerid)
{
    for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]))
	{
		if (GetPlayerInterior(playerid) == EntranceData[i][entranceExterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceExteriorVW])
			return i;
	}
	return -1;
}

Job_NearestPoint(playerid, Float:radius = 4.0)
{
    for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && IsPlayerInRangeOfPoint(playerid, radius, JobData[i][jobPoint][0], JobData[i][jobPoint][1], JobData[i][jobPoint][2])) {
		return i;
	}
	return -1;
}

Job_Nearest(playerid)
{
    for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && IsPlayerInRangeOfPoint(playerid, 2.5, JobData[i][jobPos][0], JobData[i][jobPos][1], JobData[i][jobPos][2]))
	{
		if (GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
			return i;
	}
	return -1;
}

Entrance_Refresh(entranceid)
{
	if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
	    static pickup;
		if (IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]))
		    DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]);

		if (IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
		    DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

		if (IsValidDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]))
		    DestroyDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]);
		switch (EntranceData[entranceid][entranceType]) {
		    case 0: pickup = 19132;
		    case 1: pickup = 1277;
		    case 2: pickup = 1274;
		    case 3: pickup = 19135;
		    case 4: pickup = 1210;
		    case 5: pickup = 18631;
		}
		EntranceData[entranceid][entranceText3D] = CreateDynamic3DTextLabel(EntranceData[entranceid][entranceName], COLOR_DEPARTMENT, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);
        EntranceData[entranceid][entrancePickup] = CreateDynamicPickup(pickup, 23, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);

		if (EntranceData[entranceid][entranceIcon] != 0)
			EntranceData[entranceid][entranceMapIcon] = CreateDynamicMapIcon(EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], EntranceData[entranceid][entranceIcon], 0, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior], -1, 300.0);
	}
	return 1;
}

DestroyForklifts(entranceid)
{
	if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
		for (new i = 0; i < 7; i ++) if (IsValidVehicle(EntranceData[entranceid][entranceForklift][i])) {
			DestroyVehicle(EntranceData[entranceid][entranceForklift][i]);

        	EntranceData[entranceid][entranceForklift][i] = INVALID_VEHICLE_ID;
        }
        return 1;
	}
	return 0;
}

CreateForklifts(entranceid)
{
    if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
        EntranceData[entranceid][entranceForklift][0] = CreateVehicle(530,1300.6760,5.8440,1000.7919,180.2377,114,1,-1); // forklift 1
		EntranceData[entranceid][entranceForklift][1] = CreateVehicle(530,1303.4263,5.8919,1000.7883,181.4835,119,1,-1); // forklift 2
		EntranceData[entranceid][entranceForklift][2] = CreateVehicle(530,1305.7365,5.7953,1000.7904,179.7971,122,1,-1); // forklift 3
		EntranceData[entranceid][entranceForklift][3] = CreateVehicle(530,1308.2925,-8.6468,1000.7963,89.4510,4,1,-1); // forklift 4
		EntranceData[entranceid][entranceForklift][4] = CreateVehicle(530,1308.2974,-10.9627,1000.7974,91.8611,13,1,-1); // forklift 5
		EntranceData[entranceid][entranceForklift][5] = CreateVehicle(530,1308.3057,-13.6396,1000.7997,90.6285,110,1,-1); // forklift 6
		EntranceData[entranceid][entranceForklift][6] = CreateVehicle(530,1308.2751,-16.5108,1000.7980,90.2175,111,1,-1); // forklift 7

		for (new i = 0; i < 7; i ++) if (IsValidVehicle(EntranceData[entranceid][entranceForklift][i])) {
			SetVehicleVirtualWorld(EntranceData[entranceid][entranceForklift][i], EntranceData[entranceid][entranceWorld]);
			LinkVehicleToInterior(EntranceData[entranceid][entranceForklift][i], 18);

			CoreVehicles[EntranceData[entranceid][entranceForklift][i]][vehFuel] = 100;
			CoreVehicles[EntranceData[entranceid][entranceForklift][i]][vehLoadType] = 0;
		}
	}
	return 1;
}

Entrance_Create(playerid, name[])
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

    if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_HOUSES; i ++)
		{
	    	if (!EntranceData[i][entranceExists])
		    {
    	        EntranceData[i][entranceExists] = true;
        	    EntranceData[i][entranceIcon] = 0;
        	    EntranceData[i][entranceType] = 0;
        	    EntranceData[i][entranceCustom] = 0;
        	    EntranceData[i][entranceLocked] = 0;

				format(EntranceData[i][entranceName], 32, name);
				EntranceData[i][entrancePass][0] = 0;

    	        EntranceData[i][entrancePos][0] = x;
    	        EntranceData[i][entrancePos][1] = y;
    	        EntranceData[i][entrancePos][2] = z;
    	        EntranceData[i][entrancePos][3] = angle;

                EntranceData[i][entranceInt][0] = x;
                EntranceData[i][entranceInt][1] = y;
                EntranceData[i][entranceInt][2] = z + 10000;
                EntranceData[i][entranceInt][3] = 0.0000;

				EntranceData[i][entranceInterior] = 0;
				EntranceData[i][entranceExterior] = GetPlayerInterior(playerid);
				EntranceData[i][entranceExteriorVW] = GetPlayerVirtualWorld(playerid);

				Entrance_Refresh(i);
				mysql_tquery(g_iHandle, "INSERT INTO `entrances` (`entranceType`) VALUES(0)", "OnEntranceCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

Business_RemoveVehicle(bizid, modelid)
{
	static
	    query[128];

    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++) if (DealershipCars[bizid][i][vehModel] == modelid)
	{
	    DealershipCars[bizid][i][vehModel] = 0;
	    DealershipCars[bizid][i][vehPrice] = 0;

	    format(query, sizeof(query), "DELETE FROM `dealervehicles` WHERE `ID` = '%d' AND `vehID` = '%d'", BusinessData[bizid][bizID], DealershipCars[bizid][i][vehID]);
		mysql_tquery(g_iHandle, query);

		return 1;
	}
	return 0;
}

Business_AddVehicle(bizid, modelid, price)
{
	static
	    query[128];

	for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++) if (!DealershipCars[bizid][i][vehModel])
	{
	    DealershipCars[bizid][i][vehModel] = modelid;
	    DealershipCars[bizid][i][vehPrice] = price;

	    format(query, sizeof(query), "INSERT INTO `dealervehicles` (`ID`, `vehModel`, `vehPrice`) VALUES('%d', '%d', '%d')", BusinessData[bizid][bizID], modelid, price);
	    mysql_tquery(g_iHandle, query, "OnDealerCarCreated", "dd", bizid, i);

	    return 1;
	}
	return 0;
}

Business_CarMenu(playerid, bizid)
{
 	static
	    cars[MAX_DEALERSHIP_CARS];

    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
	{
		if (!DealershipCars[bizid][i][vehModel])
			cars[i] = 19300;

		else
		    cars[i] = DealershipCars[bizid][i][vehModel];
	}
	ShowModelSelectionMenu(playerid, "Beli Kendaraan", MODEL_SELECTION_BUY_CAR, cars, sizeof(cars), -16.0, 0.0, -55.0, 0.9, 1);
	return 1;
}

Business_EditCars(playerid, bizid)
{
	static
	    cars[MAX_DEALERSHIP_CARS];

    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
	{
		if (!DealershipCars[bizid][i][vehModel])
			cars[i] = 19300;

		else
		    cars[i] = DealershipCars[bizid][i][vehModel];
	}
	ShowModelSelectionMenu(playerid, "Dealer mobil", MODEL_SELECTION_DEALER, cars, sizeof(cars), -16.0, 0.0, -55.0, 0.9, 1);
	return 1;
}

forward Pump_Load(bizid);
public Pump_Load(bizid)
{
	static
	    rows,
	    fields,
		id = -1;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if ((id = Pump_GetFreeID()) != -1)
	{
	    PumpData[id][pumpExists] = true;
	    PumpData[id][pumpBusiness] = bizid;
	    PumpData[id][pumpID] = cache_get_field_int(i, "pumpID");
	    PumpData[id][pumpPos][0] = cache_get_field_float(i, "pumpPosX");
	    PumpData[id][pumpPos][1] = cache_get_field_float(i, "pumpPosY");
	    PumpData[id][pumpPos][2] = cache_get_field_float(i, "pumpPosZ");
	    PumpData[id][pumpPos][3] = cache_get_field_float(i, "pumpPosA");
	    PumpData[id][pumpFuel] = cache_get_field_int(i, "pumpFuel");

	    PumpData[id][pumpObject] = CreateDynamicObject(1676, PumpData[id][pumpPos][0], PumpData[id][pumpPos][1], PumpData[id][pumpPos][2], 0.0, 0.0, PumpData[id][pumpPos][3]);
	    Pump_Refresh(id);
	}
	return 1;
}

Pump_GetFreeID()
{
	for (new i = 0; i < MAX_GAS_PUMPS; i ++) if (!PumpData[i][pumpExists]) {
	    return i;
	}
	return -1;
}

Pump_Delete(pumpid)
{
	if (pumpid != -1 && PumpData[pumpid][pumpExists])
	{
	    new
	        string[90];

		format(string, sizeof(string), "DELETE FROM `pumps` WHERE `ID` = '%d' AND `pumpID` = '%d'", BusinessData[PumpData[pumpid][pumpBusiness]][bizID], PumpData[pumpid][pumpID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(PumpData[pumpid][pumpText3D]))
		    DestroyDynamic3DTextLabel(PumpData[pumpid][pumpText3D]);

		if (IsValidDynamicObject(PumpData[pumpid][pumpObject]))
		    DestroyDynamicObject(PumpData[pumpid][pumpObject]);

		foreach (new i : Player) if (PlayerData[i][pGasPump] == pumpid) {
		    StopRefilling(i);
		}
	    PumpData[pumpid][pumpExists] = false;
	    PumpData[pumpid][pumpFuel] = 0;
	}
	return 1;
}

Pump_Create(playerid, bizid)
{
    static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle,
		string[64],
		id = -1;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		if ((id = Pump_GetFreeID()) != -1)
  		{
	        x += 5.0 * floatsin(-angle, degrees);
	        y += 5.0 * floatcos(-angle, degrees);

			PumpData[id][pumpExists] = true;
			PumpData[id][pumpBusiness] = bizid;
			PumpData[id][pumpPos][0] = x;
			PumpData[id][pumpPos][1] = y;
			PumpData[id][pumpPos][2] = z;
			PumpData[id][pumpPos][3] = angle;
            PumpData[id][pumpFuel] = 2000;
			PumpData[id][pumpObject] = CreateDynamicObject(1676, x, y, z, 0.0, 0.0, angle);

			format(string, sizeof(string), "INSERT INTO `pumps` (`ID`) VALUES(%d)", BusinessData[bizid][bizID]);
			mysql_tquery(g_iHandle, string, "OnPumpCreated", "d", id);
			return id;
		}
	}
	return -1;
}

Pump_Refresh(pumpid)
{
	if (pumpid != -1 && PumpData[pumpid][pumpExists])
	{
	    static
	        string[128];

		format(string, sizeof(string), "[Gas Pump: %d]\n{FFFFFF}Bensin tersisa: %d liter", pumpid, PumpData[pumpid][pumpFuel]);

        if (IsValidDynamic3DTextLabel(PumpData[pumpid][pumpText3D]))
            DestroyDynamic3DTextLabel(PumpData[pumpid][pumpText3D]);

		if (IsValidDynamicObject(PumpData[pumpid][pumpObject]))
		    DestroyDynamicObject(PumpData[pumpid][pumpObject]);

		PumpData[pumpid][pumpText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, PumpData[pumpid][pumpPos][0], PumpData[pumpid][pumpPos][1], PumpData[pumpid][pumpPos][2], 25.0);
        PumpData[pumpid][pumpObject] = CreateDynamicObject(1676, PumpData[pumpid][pumpPos][0], PumpData[pumpid][pumpPos][1], PumpData[pumpid][pumpPos][2], 0.0, 0.0, PumpData[pumpid][pumpPos][3]);
	}
	return 1;
}

Pump_Save(pumpid)
{
	static
	    query[256];

	format(query, sizeof(query), "UPDATE `pumps` SET `pumpPosX` = '%.4f', `pumpPosY` = '%.4f', `pumpPosZ` = '%.4f', `pumpPosA` = '%.4f', `pumpFuel` = '%d' WHERE `ID` = '%d' AND `pumpID` = '%d'",
	    PumpData[pumpid][pumpPos][0],
	    PumpData[pumpid][pumpPos][1],
	    PumpData[pumpid][pumpPos][2],
		PumpData[pumpid][pumpPos][3],
	    PumpData[pumpid][pumpFuel],
	    BusinessData[PumpData[pumpid][pumpBusiness]][bizID],
	    PumpData[pumpid][pumpID]
	);
	return mysql_tquery(g_iHandle, query);
}

House_Create(playerid, address[], price)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_HOUSES; i ++)
		{
	    	if (!HouseData[i][houseExists])
		    {
    	        HouseData[i][houseExists] = true;
        	    HouseData[i][houseOwner] = 0;
            	HouseData[i][housePrice] = price;
            	HouseData[i][houseMoney] = 0;

				format(HouseData[i][houseAddress], 32, address);

    	        HouseData[i][housePos][0] = x;
    	        HouseData[i][housePos][1] = y;
    	        HouseData[i][housePos][2] = z;
    	        HouseData[i][housePos][3] = angle;

                HouseData[i][houseInt][0] = 2269.8772;
                HouseData[i][houseInt][1] = -1210.3240;
                HouseData[i][houseInt][2] = 1047.5625;
                HouseData[i][houseInt][3] = 90.0000;

				HouseData[i][houseInterior] = 10;
				HouseData[i][houseExterior] = GetPlayerInterior(playerid);
				HouseData[i][houseExteriorVW] = GetPlayerVirtualWorld(playerid);

				HouseData[i][houseLights] = false;
				HouseData[i][houseLocked] = false;

				House_Refresh(i);
				mysql_tquery(g_iHandle, "INSERT INTO `houses` (`houseOwner`) VALUES(0)", "OnHouseCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

House_RemoveFurniture(houseid)
{
	if (HouseData[houseid][houseExists])
	{
	    static
	        string[64];

	    for (new i = 0; i != MAX_FURNITURE; i ++) if (FurnitureData[i][furnitureExists] && FurnitureData[i][furnitureHouse] == houseid) {
	        FurnitureData[i][furnitureExists] = false;
	        FurnitureData[i][furnitureModel] = 0;
            FurnitureData[i][furnitureHouse] = -1;

	        DestroyDynamicObject(FurnitureData[i][furnitureObject]);
		}
		format(string, sizeof(string), "DELETE FROM `furniture` WHERE `ID` = '%d'", HouseData[houseid][houseID]);
		mysql_tquery(g_iHandle, string);
	}
	return 1;
}

House_Delete(houseid)
{
	if (houseid != -1 && HouseData[houseid][houseExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `houses` WHERE `houseID` = '%d'", HouseData[houseid][houseID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(HouseData[houseid][houseText3D]))
		    DestroyDynamic3DTextLabel(HouseData[houseid][houseText3D]);

		if (IsValidDynamicPickup(HouseData[houseid][housePickup]))
		    DestroyDynamicPickup(HouseData[houseid][housePickup]);

		if (IsValidDynamicMapIcon(HouseData[houseid][houseMapIcon]))
		    DestroyDynamicMapIcon(HouseData[houseid][houseMapIcon]);

        for (new i = 0; i < MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackHouse] == HouseData[houseid][houseID]) {
		    Backpack_Delete(i);
		}
		House_RemoveFurniture(houseid);
		House_RemoveAllItems(houseid);

	    HouseData[houseid][houseExists] = false;
	    HouseData[houseid][houseOwner] = 0;
	    HouseData[houseid][houseID] = 0;
	}
	return 1;
}

House_IsOwner(playerid, houseid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	    return 0;

    if ((HouseData[houseid][houseExists] && HouseData[houseid][houseOwner] != 0) && HouseData[houseid][houseOwner] == PlayerData[playerid][pID])
		return 1;

	return 0;
}

Business_ProductMenu(playerid, bizid)
{
	if (bizid == -1 || !BusinessData[bizid][bizExists])
	    return 0;

	static
	    string[512];

	switch (BusinessData[bizid][bizType])
	{
	    case 1, 6:
	    {
			format(string, sizeof(string), "Mobile Phone - %s\nGPS System - %s\nSpray Paint - %s\nBackpack - %s\nWater Bottle - %s\nSoda Bottle - %s\nLottery Ticket - %s\nPortable Radio - %s\nCan of Fuel - %s\nCrowbar - %s\nBoombox - %s\nMask - %s\nFirst Aid Kit - %s\nRepair Kit - %s\nNOS Canister - %s\nBaseball Bat - %s\nFrozen Pizza - %s\nFrozen Burger - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6]),
				FormatNumber(BusinessData[bizid][bizPrices][7]),
				FormatNumber(BusinessData[bizid][bizPrices][8]),
				FormatNumber(BusinessData[bizid][bizPrices][9]),
				FormatNumber(BusinessData[bizid][bizPrices][10]),
				FormatNumber(BusinessData[bizid][bizPrices][11]),
				FormatNumber(BusinessData[bizid][bizPrices][12]),
				FormatNumber(BusinessData[bizid][bizPrices][13]),
				FormatNumber(BusinessData[bizid][bizPrices][14]),
				FormatNumber(BusinessData[bizid][bizPrices][15]),
				FormatNumber(BusinessData[bizid][bizPrices][16]),
				FormatNumber(BusinessData[bizid][bizPrices][17])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Ubah Item", string, "Ubah", "Batal");
		}
		case 2:
	    {
			format(string, sizeof(string), "Magazine - %s\nAmmo Cartridge - %s\nArmored Vest - %s\nDesert Eagle - %s\nRemington 870 - %s\nM14 Rifle - %s\nColt 45 - %s\nMP5 - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6]),
				FormatNumber(BusinessData[bizid][bizPrices][7])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Ubah Item", string, "Ubah", "Batal");
		}
		case 3:
	    {
			format(string, sizeof(string), "Clothes - %s\nGlasses - %s\nHats - %s\nBandana - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Ubah Item", string, "Ubah", "Batal");
		}
		case 4:
	    {
			format(string, sizeof(string), "Water - %s\nSoda - %s\nFrench Fries - %s\nCheeseburger - %s\nChicken Burger - %s\nChicken Nuggets - %s\nSalad - %s",
    			FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Ubah Item", string, "Ubah", "Batal");
		}
		case 7:
	    {
	        string[0] = 0;

	        for (new i = 0; i < sizeof(g_aFurnitureTypes); i ++) {
	            format(string, sizeof(string), "%s%s - %s\n", string, g_aFurnitureTypes[i], FormatNumber(BusinessData[bizid][bizPrices][i]));
			}
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Business: Ubah Item", string, "Ubah", "Batal");
		}
		case 8:
	    {
			format(string, sizeof(string), "Screwdriver - %s\nParachute - %s\nBrass Knuckles - %s\nGolf Club - %s\nNightstick - %s\nKnife - %s\nShovel - %s\nPool Cue - %s\nCamera - %s\nSpray Can - %s\nBaseball Bat - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]), //Screwdriver
				FormatNumber(BusinessData[bizid][bizPrices][1]), //Parachute
				FormatNumber(BusinessData[bizid][bizPrices][2]), //Brass Knuckles
				FormatNumber(BusinessData[bizid][bizPrices][3]), //Golf Club
				FormatNumber(BusinessData[bizid][bizPrices][4]), //Nightstick
				FormatNumber(BusinessData[bizid][bizPrices][5]), //Knife
				FormatNumber(BusinessData[bizid][bizPrices][6]), //Shovel
				FormatNumber(BusinessData[bizid][bizPrices][7]), //Pool Cue
                FormatNumber(BusinessData[bizid][bizPrices][8]), //camera
                FormatNumber(BusinessData[bizid][bizPrices][9]), //Spray Can
                FormatNumber(BusinessData[bizid][bizPrices][10]) //Baseball Bat

			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Bisnis: Ubah harga", string, "Ubah", "Batal");
		}
		case 9:
	    {
			format(string, sizeof(string), "Sale Documents - %s\nPen - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Bisnis: Ubah harga", string, "Ubah", "Batal");
		}
	}
	return 1;
}

Business_PurchaseMenu(playerid, bizid)
{
	if (bizid == -1 || !BusinessData[bizid][bizExists])
	    return 0;

	static
	    string[512];

	switch (BusinessData[bizid][bizType])
	{
	    case 1, 6:
	    {
			format(string, sizeof(string), "Mobile Phone - %s\nGPS System - %s\nSpray Paint - %s\nBackpack - %s\nWater Bottle - %s\nSoda Bottle - %s\nLottery Ticket - %s\nPortable Radio - %s\nCan of Fuel - %s\nCrowbar - %s\nBoombox - %s\nMask - %s\nFirst Aid Kit - %s\nRepair Kit - %s\nNOS Canister - %s\nBaseball Bat - %s\nFrozen Pizza - %s\nFrozen Burger - %s\nLighter - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6]),
				FormatNumber(BusinessData[bizid][bizPrices][7]),
				FormatNumber(BusinessData[bizid][bizPrices][8]),
				FormatNumber(BusinessData[bizid][bizPrices][9]),
				FormatNumber(BusinessData[bizid][bizPrices][10]),
				FormatNumber(BusinessData[bizid][bizPrices][11]),
				FormatNumber(BusinessData[bizid][bizPrices][12]),
				FormatNumber(BusinessData[bizid][bizPrices][13]),
				FormatNumber(BusinessData[bizid][bizPrices][14]),
				FormatNumber(BusinessData[bizid][bizPrices][15]),
				FormatNumber(BusinessData[bizid][bizPrices][16]),
				FormatNumber(BusinessData[bizid][bizPrices][17]),
				FormatNumber(BusinessData[bizid][bizPrices][18]),
				FormatNumber(BusinessData[bizid][bizPrices][19])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Beli", "Batal");
		}
		case 2:
	    {
			format(string, sizeof(string), "Magazine - %s\nAmmo Cartridge - %s\nArmored Vest - %s\nDesert Eagle - %s\nRemington 870 - %s\nM14 Rifle - %s\nColt 45 - %s\nMP5 - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6]),
				FormatNumber(BusinessData[bizid][bizPrices][7])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Beli", "Batal");
		}
		case 3:
	    {
			format(string, sizeof(string), "Clothes - %s\nGlasses - %s\nHats - %s\nBandana - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Beli", "Batal");
		}
		case 4:
		{
            format(string, sizeof(string), "Water - %s\nSoda - %s\nFrench Fries - %s\nCheeseburger - %s\nChicken Burger - %s\nChicken Nuggets - %s\nSalad - %s",
    			FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Beli", "Batal");
		}
		case 7:
	    {
	        string[0] = 0;

	        for (new i = 0; i < sizeof(g_aFurnitureTypes); i ++) {
	            format(string, sizeof(string), "%s%s - %s\n", string, g_aFurnitureTypes[i], FormatNumber(BusinessData[bizid][bizPrices][i]));
			}
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Beli", "Batal");
		}
		case 8:
	    {
			format(string, sizeof(string), "Screwdriver - %s\nParachute - %s\nBrass Knuckles - %s\nGolf Club - %s\nNightstick - %s\nKnife - %s\nShovel - %s\nPool Cue - %s\nCamera - %s\nSpray Can - %s\nBaseball Bat - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]), //Screwdriver
				FormatNumber(BusinessData[bizid][bizPrices][1]), //Parachute
				FormatNumber(BusinessData[bizid][bizPrices][2]), //Brass Knuckles
				FormatNumber(BusinessData[bizid][bizPrices][3]), //Golf Club
				FormatNumber(BusinessData[bizid][bizPrices][4]), //Nightstick
				FormatNumber(BusinessData[bizid][bizPrices][5]), //Knife
				FormatNumber(BusinessData[bizid][bizPrices][6]), //Shovel
				FormatNumber(BusinessData[bizid][bizPrices][7]), //Pool Cue
                FormatNumber(BusinessData[bizid][bizPrices][8]), //camera
                FormatNumber(BusinessData[bizid][bizPrices][9]), //Spray Can
                FormatNumber(BusinessData[bizid][bizPrices][10]) //Bat
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Beli", "Batal");
		}
		case 9:
	    {
			format(string, sizeof(string), "Sale Documents - %s\nPen - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizName], string, "Beli", "Batal");
		}
	}
	return 1;
}

Business_Save(bizid)
{
	static
	    query[2048];

	format(query, sizeof(query), "UPDATE `businesses` SET `bizName` = '%s', `bizMessage` = '%s', `bizOwner` = '%d', `bizType` = '%d', `bizPrice` = '%d', `bizPosX` = '%.4f', `bizPosY` = '%.4f', `bizPosZ` = '%.4f', `bizPosA` = '%.4f', `bizIntX` = '%.4f', `bizIntY` = '%.4f', `bizIntZ` = '%.4f', `bizIntA` = '%.4f', `bizInterior` = '%d', `bizExterior` = '%d', `bizExteriorVW` = '%d', `bizLocked` = '%d', `bizVault` = '%d', `bizProducts` = '%d'",
		SQL_ReturnEscaped(BusinessData[bizid][bizName]),
		SQL_ReturnEscaped(BusinessData[bizid][bizMessage]),
		BusinessData[bizid][bizOwner],
		BusinessData[bizid][bizType],
		BusinessData[bizid][bizPrice],
		BusinessData[bizid][bizPos][0],
		BusinessData[bizid][bizPos][1],
		BusinessData[bizid][bizPos][2],
		BusinessData[bizid][bizPos][3],
		BusinessData[bizid][bizInt][0],
		BusinessData[bizid][bizInt][1],
		BusinessData[bizid][bizInt][2],
		BusinessData[bizid][bizInt][3],
		BusinessData[bizid][bizInterior],
		BusinessData[bizid][bizExterior],
		BusinessData[bizid][bizExteriorVW],
		BusinessData[bizid][bizLocked],
		BusinessData[bizid][bizVault],
		BusinessData[bizid][bizProducts]
	);
	for (new i = 0; i < 20; i ++) {
		format(query, sizeof(query), "%s, `bizPrice%d` = '%d'", query, i + 1, BusinessData[bizid][bizPrices][i]);
	}
	format(query, sizeof(query), "%s, `bizSpawnX` = '%.4f', `bizSpawnY` = '%.4f', `bizSpawnZ` = '%.4f', `bizSpawnA` = '%.4f', `bizDeliverX` = '%.4f', `bizDeliverY` = '%.4f', `bizDeliverZ` = '%.4f', `bizShipment` = '%d' WHERE `bizID` = '%d'",
		query,
		BusinessData[bizid][bizSpawn][0],
		BusinessData[bizid][bizSpawn][1],
		BusinessData[bizid][bizSpawn][2],
		BusinessData[bizid][bizSpawn][3],
		BusinessData[bizid][bizDeliver][0],
		BusinessData[bizid][bizDeliver][1],
		BusinessData[bizid][bizDeliver][2],
		BusinessData[bizid][bizShipment],
		BusinessData[bizid][bizID]
	);
	return mysql_tquery(g_iHandle, query);
}

Business_Inside(playerid)
{
	if (PlayerData[playerid][pBusiness] != -1)
	{
	    for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizID] == PlayerData[playerid][pBusiness] && GetPlayerInterior(playerid) == BusinessData[i][bizInterior] && GetPlayerVirtualWorld(playerid) > 0) {
	        return i;
		}
	}
	return -1;
}

Car_Inside(playerid)
{
	new carid;

	if (IsPlayerInAnyVehicle(playerid) && (carid = Car_GetID(GetPlayerVehicleID(playerid))) != -1)
	    return carid;

	return -1;
}

Car_Nearest(playerid)
{
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	for (new i = 0; i != MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists]) {
		GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

		if (IsPlayerInRangeOfPoint(playerid, 6.0, fX, fY, fZ)) {
		    return i;
		}
	}
	return -1;
}

Business_NearestDeliver(playerid)
{
    for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && IsPlayerInRangeOfPoint(playerid, 5.0, BusinessData[i][bizDeliver][0], BusinessData[i][bizDeliver][1], BusinessData[i][bizDeliver][2])) {
        return i;
	}
	return -1;
}

Business_Nearest(playerid, Float:radius = 2.5)
{
    for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && IsPlayerInRangeOfPoint(playerid, radius, BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]))
	{
		if (GetPlayerInterior(playerid) == BusinessData[i][bizExterior] && GetPlayerVirtualWorld(playerid) == BusinessData[i][bizExteriorVW])
			return i;
	}
	return -1;
}

Business_Refresh(bizid)
{
	if (bizid != -1 && BusinessData[bizid][bizExists])
	{
		if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizText3D]))
		    DestroyDynamic3DTextLabel(BusinessData[bizid][bizText3D]);

		if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]))
		    DestroyDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]);

		if (IsValidDynamicPickup(BusinessData[bizid][bizPickup]))
		    DestroyDynamicPickup(BusinessData[bizid][bizPickup]);

        if (IsValidDynamicPickup(BusinessData[bizid][bizDeliverPickup]))
		    DestroyDynamicPickup(BusinessData[bizid][bizDeliverPickup]);

		static
		    string[128],
			pickup;

		if (!BusinessData[bizid][bizOwner]) {
			format(string, sizeof(string), "[DIJUAL]{FFFFFF}\n[%s]\n%s", FormatNumber(BusinessData[bizid][bizPrice]), BusinessData[bizid][bizName]);
            BusinessData[bizid][bizText3D] = CreateDynamic3DTextLabel(string, COLOR_DEPARTMENT, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		else
		{
			if (BusinessData[bizid][bizLocked]) {
			    format(string, sizeof(string), "[DIKUNCI]\n{FFFFFF}%s", BusinessData[bizid][bizName]);
			}
			else {
			    format(string, sizeof(string), "%s", BusinessData[bizid][bizName]);
			}
			BusinessData[bizid][bizText3D] = CreateDynamic3DTextLabel(string, (BusinessData[bizid][bizLocked]) ? (COLOR_DEPARTMENT) : (COLOR_WHITE), BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		switch (BusinessData[bizid][bizType]) {
		    case 1: pickup = 19131;
		    case 2: pickup = 2035;
		    case 3: pickup = 1275;
		    case 4: pickup = 1582;
		    case 5: pickup = 1277;
		    case 6: pickup = 1252;
		    case 7: pickup = 1276;
		    case 8: pickup = 2045;
		    case 9: pickup = 2059;
		}
		if (BusinessData[bizid][bizType] == 1) {
			BusinessData[bizid][bizPickup] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2] + 0.3, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
        	BusinessData[bizid][bizIconA] = 34;
		}
		else if (BusinessData[bizid][bizType] == 2) {
        	BusinessData[bizid][bizIconA] = 6;
			BusinessData[bizid][bizPickup] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2] + 0.3, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		else if (BusinessData[bizid][bizType] == 3) {
        	BusinessData[bizid][bizIconA] = 45;
            BusinessData[bizid][bizPickup] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2] + 0.3, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		else if (BusinessData[bizid][bizType] == 4) {
        	BusinessData[bizid][bizIconA] = 29;
            BusinessData[bizid][bizPickup] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2] + 0.3, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		else if (BusinessData[bizid][bizType] == 5) {
        	BusinessData[bizid][bizIconA] = 55;
        	BusinessData[bizid][bizPickup] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2] + 0.3, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		else if (BusinessData[bizid][bizType] == 8) {
        	BusinessData[bizid][bizIconA] = 25;
			BusinessData[bizid][bizPickup] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2] + 0.3, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		else if (BusinessData[bizid][bizType] == 9) {
			BusinessData[bizid][bizPickup] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2] + 0.3, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
        	BusinessData[bizid][bizIconA] = 25;
		}
		else if (BusinessData[bizid][bizType] == 6) {
        	BusinessData[bizid][bizPickup] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2] + 0.3, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
        	BusinessData[bizid][bizIconA] = 55;
		}
		else if (BusinessData[bizid][bizType] == 7) {
		    BusinessData[bizid][bizPickup] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2] - 0.6, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
        	BusinessData[bizid][bizIconA] = 12;
		}
		else {
            BusinessData[bizid][bizPickup] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		if (BusinessData[bizid][bizDeliver][0] != 0.0 && BusinessData[bizid][bizDeliver][0] != 0.0 && BusinessData[bizid][bizDeliver][0] != 0.0)
		{
		    format(string, sizeof(string), "%s\n\nDelivery Point", BusinessData[bizid][bizName]);

		    BusinessData[bizid][bizPickup] = CreateDynamicPickup(1239, 23, BusinessData[bizid][bizDeliver][0], BusinessData[bizid][bizDeliver][1], BusinessData[bizid][bizDeliver][2]);
		    BusinessData[bizid][bizDeliverText3D] = CreateDynamic3DTextLabel(string, COLOR_CLIENT, BusinessData[bizid][bizDeliver][0], BusinessData[bizid][bizDeliver][1], BusinessData[bizid][bizDeliver][2], 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
		}
	}
	return 1;
}

Business_Create(playerid, type, price)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_HOUSES; i ++)
		{
	    	if (!BusinessData[i][bizExists])
		    {
    	        BusinessData[i][bizExists] = true;
        	    BusinessData[i][bizOwner] = 0;
            	BusinessData[i][bizPrice] = price;
            	BusinessData[i][bizType] = type;

				format(BusinessData[i][bizName], 32, "Business tak bernama");

    	        BusinessData[i][bizPos][0] = x;
    	        BusinessData[i][bizPos][1] = y;
    	        BusinessData[i][bizPos][2] = z;
    	        BusinessData[i][bizPos][3] = angle;

    	        BusinessData[i][bizSpawn][0] = x;
    	        BusinessData[i][bizSpawn][1] = y;
    	        BusinessData[i][bizSpawn][2] = z;
    	        BusinessData[i][bizSpawn][3] = angle;

    	        BusinessData[i][bizDeliver][0] = 0.0;
    	        BusinessData[i][bizDeliver][1] = 0.0;
    	        BusinessData[i][bizDeliver][2] = 0.0;

				if (type == 1) {
                	BusinessData[i][bizInt][0] = -27.3074;
                	BusinessData[i][bizInt][1] = -30.8741;
                	BusinessData[i][bizInt][2] = 1003.5573;
                	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 4;

					BusinessData[i][bizPrices][0] = 75;
		            BusinessData[i][bizPrices][1] = 125;
		            BusinessData[i][bizPrices][2] = 15;
		            BusinessData[i][bizPrices][3] = 100;
		            BusinessData[i][bizPrices][4] = 3;
		            BusinessData[i][bizPrices][5] = 2;
		            BusinessData[i][bizPrices][6] = 10;
		            BusinessData[i][bizPrices][7] = 100;
		            BusinessData[i][bizPrices][8] = 20;
		            BusinessData[i][bizPrices][9] = 10;
		            BusinessData[i][bizPrices][10] = 150;
		            BusinessData[i][bizPrices][11] = 200;
		            BusinessData[i][bizPrices][12] = 160;
                    BusinessData[i][bizPrices][13] = 60;
                    BusinessData[i][bizPrices][14] = 50;
		            BusinessData[i][bizPrices][15] = 5;
		            BusinessData[i][bizPrices][16] = 10;
		            BusinessData[i][bizPrices][17] = 5;
				}
				else if (type == 2) {
                	BusinessData[i][bizInt][0] = 316.3963;
                	BusinessData[i][bizInt][1] = -169.8375;
                	BusinessData[i][bizInt][2] = 999.6010;
                	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 6;

                    BusinessData[i][bizPrices][0] = 50;
					BusinessData[i][bizPrices][1] = 100;
		            BusinessData[i][bizPrices][2] = 200;
		            BusinessData[i][bizPrices][3] = 400;
		            BusinessData[i][bizPrices][4] = 600;
		            BusinessData[i][bizPrices][5] = 800;
				}
				else if (type == 3) {
                	BusinessData[i][bizInt][0] = 161.4801;
                	BusinessData[i][bizInt][1] = -96.5368;
                	BusinessData[i][bizInt][2] = 1001.8047;
                	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 18;

					BusinessData[i][bizPrices][0] = 25;
		            BusinessData[i][bizPrices][1] = 15;
		            BusinessData[i][bizPrices][2] = 10;
		            BusinessData[i][bizPrices][3] = 10;
				}
				else if (type == 4) {
                	BusinessData[i][bizInt][0] = 363.3402;
                	BusinessData[i][bizInt][1] = -74.6679;
                	BusinessData[i][bizInt][2] = 1001.5078;
                	BusinessData[i][bizInt][3] = 315.0000;
					BusinessData[i][bizInterior] = 10;

					BusinessData[i][bizPrices][0] = 2;
		            BusinessData[i][bizPrices][1] = 5;
		            BusinessData[i][bizPrices][2] = 5;
		            BusinessData[i][bizPrices][3] = 10;
		            BusinessData[i][bizPrices][4] = 10;
		            BusinessData[i][bizPrices][5] = 15;
		            BusinessData[i][bizPrices][6] = 10;
				}
				else if (type == 5) {
				    BusinessData[i][bizInt][0] = 1494.5612;
	            	BusinessData[i][bizInt][1] = 1304.2061;
	            	BusinessData[i][bizInt][2] = 1093.2891;
	            	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 3;
				}
				else if (type == 6) {
                	BusinessData[i][bizInt][0] = -27.3383;
                	BusinessData[i][bizInt][1] = -57.6909;
                	BusinessData[i][bizInt][2] = 1003.5469;
                	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 6;

					BusinessData[i][bizPrices][0] = 75;
		            BusinessData[i][bizPrices][1] = 115;
		            BusinessData[i][bizPrices][2] = 15;
		            BusinessData[i][bizPrices][3] = 90;
		            BusinessData[i][bizPrices][4] = 3;
		            BusinessData[i][bizPrices][5] = 2;
		            BusinessData[i][bizPrices][6] = 10;
		            BusinessData[i][bizPrices][7] = 90;
		            BusinessData[i][bizPrices][8] = 20;
		            BusinessData[i][bizPrices][9] = 10;
		            BusinessData[i][bizPrices][10] = 140;
		            BusinessData[i][bizPrices][11] = 150;
                    BusinessData[i][bizPrices][12] = 50;
                    BusinessData[i][bizPrices][13] = 40;
		            BusinessData[i][bizPrices][14] = 5;
		            BusinessData[i][bizPrices][15] = 10;
		            BusinessData[i][bizPrices][16] = 5;
				}
				else if (type == 7) {
					BusinessData[i][bizInt][0] = -2240.4954;
   					BusinessData[i][bizInt][1] = 128.3774;
			   		BusinessData[i][bizInt][2] = 1035.4210;
      				BusinessData[i][bizInt][3] = 270.0000;
					BusinessData[i][bizInterior] = 6;

					BusinessData[i][bizPrices][0] = 75;
		            BusinessData[i][bizPrices][1] = 115;
		            BusinessData[i][bizPrices][2] = 15;
		            BusinessData[i][bizPrices][3] = 95;
		            BusinessData[i][bizPrices][4] = 3;
		            BusinessData[i][bizPrices][5] = 2;
		            BusinessData[i][bizPrices][6] = 10;
		            BusinessData[i][bizPrices][7] = 100;
		            BusinessData[i][bizPrices][8] = 20;
		            BusinessData[i][bizPrices][9] = 10;
		            BusinessData[i][bizPrices][10] = 140;
		            BusinessData[i][bizPrices][11] = 190;
		            BusinessData[i][bizPrices][12] = 150;
                    BusinessData[i][bizPrices][13] = 60;
                    BusinessData[i][bizPrices][14] = 50;
		            BusinessData[i][bizPrices][15] = 5;
		            BusinessData[i][bizPrices][16] = 10;
		            BusinessData[i][bizPrices][17] = 5;
				}
				else if (type == 8) {
					BusinessData[i][bizInt][0] = -2240.468505;
   					BusinessData[i][bizInt][1] = 137.060440;
			   		BusinessData[i][bizInt][2] = 1035.414062;
      				BusinessData[i][bizInt][3] = 500.0000;
					BusinessData[i][bizInterior] = 6;

					/*BusinessData[i][bizPrices][0] = 75;
		            BusinessData[i][bizPrices][1] = 115;
		            BusinessData[i][bizPrices][2] = 15;
		            BusinessData[i][bizPrices][3] = 95;
		            BusinessData[i][bizPrices][4] = 3;
		            BusinessData[i][bizPrices][5] = 2;
		            BusinessData[i][bizPrices][6] = 10;
		            BusinessData[i][bizPrices][7] = 100;
		            BusinessData[i][bizPrices][8] = 20;
		            BusinessData[i][bizPrices][9] = 10;
		            BusinessData[i][bizPrices][10] = 140;
		            BusinessData[i][bizPrices][11] = 190;
		            BusinessData[i][bizPrices][12] = 150;
                    BusinessData[i][bizPrices][13] = 60;
                    BusinessData[i][bizPrices][14] = 50;
		            BusinessData[i][bizPrices][15] = 5;
		            BusinessData[i][bizPrices][16] = 10;
		            BusinessData[i][bizPrices][17] = 5;*/
				}
				else if (type == 9) {
					BusinessData[i][bizInt][0] = -107.2430;
					BusinessData[i][bizInt][1] = 2021.8199;
  					BusinessData[i][bizInt][2] = 901.0859;
  					BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 3;

					BusinessData[i][bizPrices][0] = 5;
		            BusinessData[i][bizPrices][1] = 1;
		            /*BusinessData[i][bizPrices][2] = 15;
		            BusinessData[i][bizPrices][3] = 95;
		            BusinessData[i][bizPrices][4] = 3;
		            BusinessData[i][bizPrices][5] = 2;
		            BusinessData[i][bizPrices][6] = 10;
		            BusinessData[i][bizPrices][7] = 100;
		            BusinessData[i][bizPrices][8] = 20;
		            BusinessData[i][bizPrices][9] = 10;
		            BusinessData[i][bizPrices][10] = 140;
		            BusinessData[i][bizPrices][11] = 190;
		            BusinessData[i][bizPrices][12] = 150;
                    BusinessData[i][bizPrices][13] = 60;
                    BusinessData[i][bizPrices][14] = 50;
		            BusinessData[i][bizPrices][15] = 5;
		            BusinessData[i][bizPrices][16] = 10;
		            BusinessData[i][bizPrices][17] = 5;*/
				}
				BusinessData[i][bizExterior] = GetPlayerInterior(playerid);
				BusinessData[i][bizExteriorVW] = GetPlayerVirtualWorld(playerid);

				BusinessData[i][bizLocked] = true;
				BusinessData[i][bizVault] = 0;
				BusinessData[i][bizProducts] = 100;
				BusinessData[i][bizShipment] = 0;

				Business_Refresh(i);
				mysql_tquery(g_iHandle, "INSERT INTO `businesses` (`bizOwner`) VALUES(0)", "OnBusinessCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

stock Business_RemoveCars(bizid)
{
	if (BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 5)
	{
	    static
	        string[32];

		for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
		{
  			DealershipCars[bizid][i][vehModel] = 0;
    		DealershipCars[bizid][i][vehPrice] = 0;
		}
		format(string, sizeof(string), "DELETE FROM `dealervehicles` WHERE `ID` = '%d'", BusinessData[bizid][bizID]);
		mysql_tquery(g_iHandle, string);
	}
	return 1;
}

stock Business_RemovePumps(bizid)
{
	if (BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 6)
	{
	    static
	        string[32];

	    foreach (new i : Player) if (PlayerData[i][pRefill] != INVALID_VEHICLE_ID && PlayerData[i][pGasStation] == bizid)
	    {
	        StopRefilling(i);
	    }
		for (new i = 0; i != MAX_GAS_PUMPS; i ++) if (PumpData[i][pumpExists] && PumpData[i][pumpBusiness] == bizid)
		{
  			DestroyDynamicObject(PumpData[i][pumpObject]);
			DestroyDynamic3DTextLabel(PumpData[i][pumpText3D]);

		    PumpData[i][pumpExists] = 0;
		    PumpData[i][pumpFuel] = 0;
		}
		format(string, sizeof(string), "DELETE FROM `pumps` WHERE `ID` = '%d'", BusinessData[bizid][bizID]);
		mysql_tquery(g_iHandle, string);
	}
	return 1;
}

Business_Delete(bizid)
{
	if (bizid != -1 && BusinessData[bizid][bizExists])
	{
	    new
	        string[82];

		format(string, sizeof(string), "DELETE FROM `businesses` WHERE `bizID` = '%d'", BusinessData[bizid][bizID]);
		mysql_tquery(g_iHandle, string);

		foreach (new i : Player) if (PlayerData[i][pShipment] == bizid) {
			PlayerData[i][pShipment] = -1;
			PlayerData[i][pDeliverShipment] = 0;

			DisablePlayerCheckpoint(i);
		}
        if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizText3D]))
		    DestroyDynamic3DTextLabel(BusinessData[bizid][bizText3D]);

		if (IsValidDynamicPickup(BusinessData[bizid][bizPickup]))
		    DestroyDynamicPickup(BusinessData[bizid][bizPickup]);

		Business_RemovePumps(bizid);
		Business_RemoveCars(bizid);

	    BusinessData[bizid][bizExists] = false;
	    BusinessData[bizid][bizOwner] = 0;
	    BusinessData[bizid][bizID] = 0;
	}
	return 1;
}

Business_IsOwner(playerid, bizid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	    return 0;

	if (BusinessData[bizid][bizExists] && BusinessData[bizid][bizOwner] == 99999999 && PlayerData[playerid][pAdmin] > 5)
		return 1;

    if ((BusinessData[bizid][bizExists] && BusinessData[bizid][bizOwner] != 0) && BusinessData[bizid][bizOwner] == PlayerData[playerid][pID])
		return 1;

	return 0;
}

forward OpenInventory(playerid);
public OpenInventory(playerid)
{
    if (!IsPlayerConnected(playerid) || !PlayerData[playerid][pCharacter])
	    return 0;

	static
	    items[MAX_INVENTORY],
		amounts[MAX_INVENTORY];

    for (new i = 0; i < PlayerData[playerid][pCapacity]; i ++)
	{
 		if (InventoryData[playerid][i][invExists]) {
   			items[i] = InventoryData[playerid][i][invModel];
   			amounts[i] = InventoryData[playerid][i][invQuantity];
		}
		else {
		    items[i] = -1;
		    amounts[i] = -1;
		}
	}
	PlayerData[playerid][pStorageSelect] = 0;
	return ShowModelSelectionMenu(playerid, "Inventory", MODEL_SELECTION_INVENTORY, items, sizeof(items), 0.0, 0.0, 0.0, 1.0, -1, true, amounts);
}

forward SelectTD(playerid);
public SelectTD(playerid)
{
	if (!IsPlayerConnected(playerid))
	    return 0;

	return SelectTextDraw(playerid, -1);
}

ReturnDate()
{
	static
	    date[36];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	format(date, sizeof(date), "%02d/%02d/%d, %02d:%02d", date[0], date[1], date[2], date[3], date[4]);
	return date;
}

ReturnVehicleHealth(vehicleid)
{
	if (!IsValidVehicle(vehicleid))
	    return 0;

	static
	    Float:amount;

	GetVehicleHealth(vehicleid, amount);
	return floatround(amount, floatround_round);
}

ReturnArmour(playerid)
{
	static
	    Float:amount;

	GetPlayerArmour(playerid, amount);
	return floatround(amount, floatround_round);
}

ReturnHealth(playerid)
{
	static
	    Float:amount;

	GetPlayerHealth(playerid, amount);
	return floatround(amount, floatround_round);
}

ReturnName(playerid, underscore=1)
{
	static
	    name[MAX_PLAYER_NAME + 1];

	GetPlayerName(playerid, name, sizeof(name));

	if (!underscore) {
	    for (new i = 0, len = strlen(name); i < len; i ++) {
	        if (name[i] == '_') name[i] = ' ';
		}
	}
	if (PlayerData[playerid][pMaskOn])
	    format(name, sizeof(name), "Mask_#%d", PlayerData[playerid][pMaskID]);

	return name;
}

ReturnIP(playerid)
{
	static
	    ip[16];

	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

ShowStatsForPlayer(playerid, targetid)
{
    new
	    account[24],
	    origin[32],
	    string[128],
		count;

	for (new i = 0; i < MAX_INVENTORY; i ++) if (InventoryData[playerid][i][invExists]) {
	    count++;
	}
	if (PlayerData[targetid][pAdmin] > 0) account = "Admin";
 	else if (PlayerData[targetid][pHelper] > 0) account = "Helper";
	else account = "Player";

	format(origin, 32, "%.16s", PlayerData[targetid][pOrigin]);

	if (strlen(PlayerData[targetid][pOrigin]) > 16)
		strcat(origin, "...");

	format(string, sizeof(string), "~g~Kelamin:~w~ %s~n~~g~Tanggal lahir:~w~ %s~n~~g~Asal:~w~ %s", (PlayerData[targetid][pGender] == 2) ? ("Wanita") : ("Pria"), PlayerData[targetid][pBirthdate], origin);
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][42], string);

	format(string, sizeof(string), "%s (ID: %d)", ReturnName(targetid), targetid);
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][43], string);

	//format(string, sizeof(string), "~g~Ping:~w~ %d~n~~g~Packetloss:~w~ %.1f%%~n~~g~Time Online:~w~ %02d:%02d:%02d", GetPlayerPing(targetid), NetStats_PacketLossPercent(targetid), hours, minutes, seconds);
	format(string, sizeof(string), "~g~Level:~w~ %d~n~~g~Pekerjaan:~w~ %s~n~~g~Inventory:~w~ %d/%d", PlayerData[targetid][pChannel4], Job_GetName(PlayerData[targetid][pJob]), count, MAX_INVENTORY);
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][46], string);

    format(string, sizeof(string), "~g~Uang:~w~ %s~n~~g~Bank:~w~ %s~n~~g~Tabungan:~w~ %s", FormatNumber(PlayerData[targetid][pMoney]), FormatNumber(PlayerData[targetid][pBankMoney]), FormatNumber(PlayerData[targetid][pSavings]));
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][44], string);

	format(string, sizeof(string), "~g~Account:~w~ %s~n~~g~Helper:~w~ %s~n~~g~Admin:~w~ %s", account, (PlayerData[targetid][pHelper]) ? ("Yes") : ("No"), (PlayerData[targetid][pAdmin]) ? ("Yes") : ("No"));
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][45], string);

	if (!PlayerData[playerid][pDisplayStats])
	{
	    if (targetid != playerid)
		{
		    for (new i = 40; i < 50; i ++) if (i != 47 && i != 48) {
				PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
		}
		else for (new i = 40; i < 50; i ++) {
			PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		SelectTextDraw(playerid, -1);
		PlayerData[playerid][pDisplayStats] = true;
	}
	else
	{
	    if (PlayerData[playerid][pDisplayStats] == 2) {
	        for (new i = 50; i < 58; i ++) PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
	    }
	    else for (new i = 40; i < 50; i ++) {
			PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		CancelSelectTextDraw(playerid);
		PlayerData[playerid][pDisplayStats] = false;
	}
	return 1;
}

Blacklist_Add(ip[], username[], banner[], reason[])
{
	static
	    string[256];

	format(string, sizeof(string), "INSERT INTO `blacklist` (`IP`, `Username`, `BannedBy`, `Reason`, `Date`) VALUES('%s', '%s', '%s', '%s', '%s')",
		SQL_ReturnEscaped(ip),
		SQL_ReturnEscaped(username),
		SQL_ReturnEscaped(banner),
		SQL_ReturnEscaped(reason),
		ReturnDate()
	);
	mysql_tquery(g_iHandle, string);
}

Blacklist_Remove(username[])
{
	static
	    string[128];

	format(string, sizeof(string), "DELETE FROM `blacklist` WHERE `Username` = '%s'", SQL_ReturnEscaped(username));
    mysql_tquery(g_iHandle, string);
}

Blacklist_RemoveIP(ip[])
{
	static
	    string[128];

    format(string, sizeof(string), "DELETE FROM `blacklist` WHERE `IP` = '%s'", SQL_ReturnEscaped(ip));
    mysql_tquery(g_iHandle, string);
}

stock Inventory_Clear(playerid)
{
	static
	    string[64];

	for (new i = 0; i < MAX_INVENTORY; i ++)
	{
	    if (InventoryData[playerid][i][invExists])
	    {
	        InventoryData[playerid][i][invExists] = 0;
	        InventoryData[playerid][i][invModel] = 0;
	        InventoryData[playerid][i][invQuantity] = 0;
		}
	}
	format(string, sizeof(string), "DELETE FROM `inventory` WHERE `ID` = '%d'", PlayerData[playerid][pID]);
	return mysql_tquery(g_iHandle, string);
}

stock Inventory_Set(playerid, item[], model, amount)
{
	new itemid = Inventory_GetItemID(playerid, item);

	if (itemid == -1 && amount > 0)
		Inventory_Add(playerid, item, model, amount);

	else if (amount > 0 && itemid != -1)
	    Inventory_SetQuantity(playerid, item, amount);

	else if (amount < 1 && itemid != -1)
	    Inventory_Remove(playerid, item, -1);

	return 1;
}

stock Inventory_GetItemID(playerid, item[])
{
	for (new i = 0; i < MAX_INVENTORY; i ++)
	{
	    if (!InventoryData[playerid][i][invExists])
	        continue;

		if (!strcmp(InventoryData[playerid][i][invItem], item)) return i;
	}
	return -1;
}

stock Inventory_GetFreeID(playerid)
{
	if (Inventory_Items(playerid) >= PlayerData[playerid][pCapacity])
		return -1;

	for (new i = 0; i < MAX_INVENTORY; i ++)
	{
	    if (!InventoryData[playerid][i][invExists])
	        return i;
	}
	return -1;
}

stock Inventory_Items(playerid)
{
    new count;

    for (new i = 0; i != MAX_INVENTORY; i ++) if (InventoryData[playerid][i][invExists]) {
        count++;
	}
	return count;
}

stock Inventory_Count(playerid, item[])
{
	new itemid = Inventory_GetItemID(playerid, item);

	if (itemid != -1)
	    return InventoryData[playerid][itemid][invQuantity];

	return 0;
}

stock Inventory_HasItem(playerid, item[])
{
	return (Inventory_GetItemID(playerid, item) != -1);
}

stock Inventory_SetQuantity(playerid, item[], quantity)
{
	new
	    itemid = Inventory_GetItemID(playerid, item),
	    string[128];

	if (itemid != -1)
	{
	    format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
	    mysql_tquery(g_iHandle, string);

	    InventoryData[playerid][itemid][invQuantity] = quantity;
	}
	return 1;
}

stock Inventory_Add(playerid, item[], model, quantity = 1)
{
	new
		itemid = Inventory_GetItemID(playerid, item),
		string[128];

	if (itemid == -1)
	{
	    itemid = Inventory_GetFreeID(playerid);

	    if (itemid != -1)
	    {
	        InventoryData[playerid][itemid][invExists] = true;
	        InventoryData[playerid][itemid][invModel] = model;
	        InventoryData[playerid][itemid][invQuantity] = quantity;

	        strpack(InventoryData[playerid][itemid][invItem], item, 32 char);

			if (strcmp(item, "Demo Soda") != 0)
			{
				format(string, sizeof(string), "INSERT INTO `inventory` (`ID`, `invItem`, `invModel`, `invQuantity`) VALUES('%d', '%s', '%d', '%d')", PlayerData[playerid][pID], item, model, quantity);
				mysql_tquery(g_iHandle, string, "OnInventoryAdd", "dd", playerid, itemid);
			}
	        return itemid;
		}
		return -1;
	}
	else
	{
	    format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = `invQuantity` + %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
	    mysql_tquery(g_iHandle, string);

	    InventoryData[playerid][itemid][invQuantity] += quantity;
	}
	return itemid;
}

stock Inventory_Remove(playerid, item[], quantity = 1)
{
	new
		itemid = Inventory_GetItemID(playerid, item),
		string[128];

	if (itemid != -1)
	{
	    if (InventoryData[playerid][itemid][invQuantity] > 0)
	    {
	        InventoryData[playerid][itemid][invQuantity] -= quantity;
		}
		if (quantity == -1 || InventoryData[playerid][itemid][invQuantity] < 1)
		{
		    InventoryData[playerid][itemid][invExists] = false;
		    InventoryData[playerid][itemid][invModel] = 0;
		    InventoryData[playerid][itemid][invQuantity] = 0;

		    format(string, sizeof(string), "DELETE FROM `inventory` WHERE `ID` = '%d' AND `invID` = '%d'", PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
	        mysql_tquery(g_iHandle, string);
		}
		else if (quantity != -1 && InventoryData[playerid][itemid][invQuantity] > 0)
		{
			format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = `invQuantity` - %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
            mysql_tquery(g_iHandle, string);
		}
		return 1;
	}
	return 0;
}

stock RemoveAlpha(color) {
    return (color & ~0xFF);
}

stock CancelDrivingTest(playerid)
{
	if (PlayerData[playerid][pDrivingTest])
	{
 		SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
 		SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

  		SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
  		SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);

		DisablePlayerCheckpoint(playerid);
  		SetCameraBehindPlayer(playerid);

		DestroyVehicle(PlayerData[playerid][pTestCar]);
  		PlayerData[playerid][pDrivingTest] = false;
	}
	return 1;
}

stock House_WeaponStorage(playerid, houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	static
	    string[320];

	string[0] = 0;

	for (new i = 0; i < 10; i ++)
	{
	    if (!HouseData[houseid][houseWeapons][i])
	        format(string, sizeof(string), "%sSlot kosong\n", string);

		else
			format(string, sizeof(string), "%s%s (Peluru: %d)\n", string, ReturnWeaponName(HouseData[houseid][houseWeapons][i]), HouseData[houseid][houseAmmo][i]);
	}
	Dialog_Show(playerid, HouseWeapons, DIALOG_STYLE_LIST, "Penyimpanan Senjata", string, "Pilih", "Batal");
	return 1;
}

stock House_ShowItems(playerid, houseid)
{
    if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	static
	    string[MAX_HOUSE_STORAGE * 32],
		name[32];

	string[0] = 0;

	for (new i = 0; i != MAX_HOUSE_STORAGE; i ++)
	{
	    if (!HouseStorage[houseid][i][hItemExists])
	        format(string, sizeof(string), "%sSlot kosong\n", string);

		else {
			strunpack(name, HouseStorage[houseid][i][hItemName]);

			if (HouseStorage[houseid][i][hItemQuantity] == 1) {
			    format(string, sizeof(string), "%s%s\n", string, name);
			}
			else format(string, sizeof(string), "%s%s (%d)\n", string, name, HouseStorage[houseid][i][hItemQuantity]);
		}
	}
	Dialog_Show(playerid, HouseItems, DIALOG_STYLE_LIST, "Penyimpanan Item", string, "Pilih", "Batal");
	return 1;
}

stock House_OpenStorage(playerid, houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	new
		items[2],
		string[MAX_HOUSE_STORAGE * 32];

	for (new i = 0; i < MAX_HOUSE_STORAGE; i ++) if (HouseStorage[houseid][i][hItemExists]) {
	    items[0]++;
	}
	for (new i = 0; i < 10; i ++) if (HouseData[houseid][houseWeapons][i]) {
	    items[1]++;
	}
	if (!House_IsOwner(playerid, houseid))
	    format(string, sizeof(string), "Penyimpanan Item (%d/%d)\nPenyimpanan Senjata (%d/10)", items[0], MAX_HOUSE_STORAGE, items[1]);

	else
		format(string, sizeof(string), "Penyimpanan Item (%d/%d)\nPenyimpanan Senjata (%d/10)\nUang Tersimpan (%s)", items[0], MAX_HOUSE_STORAGE, items[1], FormatNumber(HouseData[houseid][houseMoney]));

	Dialog_Show(playerid, HouseStorage, DIALOG_STYLE_LIST, "Penyimpanan Rumah", string, "Pilih", "Batal");
	return 1;
}

stock House_GetItemID(houseid, item[])
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	for (new i = 0; i < MAX_HOUSE_STORAGE; i ++)
	{
	    if (!HouseStorage[houseid][i][hItemExists])
	        continue;

		if (!strcmp(HouseStorage[houseid][i][hItemName], item)) return i;
	}
	return -1;
}

stock House_GetFreeID(houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	for (new i = 0; i < MAX_HOUSE_STORAGE; i ++)
	{
	    if (!HouseStorage[houseid][i][hItemExists])
	        return i;
	}
	return -1;
}

stock House_AddItem(houseid, item[], model, quantity = 1, slotid = -1)
{
    if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	new
		itemid = House_GetItemID(houseid, item),
		string[128];

	if (itemid == -1)
	{
	    itemid = House_GetFreeID(houseid);

	    if (itemid != -1)
	    {
	        if (slotid != -1)
	            itemid = slotid;

	        HouseStorage[houseid][itemid][hItemExists] = true;
	        HouseStorage[houseid][itemid][hItemModel] = model;
	        HouseStorage[houseid][itemid][hItemQuantity] = quantity;

	        strpack(HouseStorage[houseid][itemid][hItemName], item, 32 char);

			format(string, sizeof(string), "INSERT INTO `housestorage` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", HouseData[houseid][houseID], item, model, quantity);
			mysql_tquery(g_iHandle, string, "OnStorageAdd", "dd", houseid, itemid);

	        return itemid;
		}
		return -1;
	}
	else
	{
	    format(string, sizeof(string), "UPDATE `housestorage` SET `itemQuantity` = `itemQuantity` + %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
	    mysql_tquery(g_iHandle, string);

	    HouseStorage[houseid][itemid][hItemQuantity] += quantity;
	}
	return itemid;
}

stock House_RemoveItem(houseid, item[], quantity = 1)
{
    if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	new
		itemid = House_GetItemID(houseid, item),
		string[128];

	if (itemid != -1)
	{
	    if (HouseStorage[houseid][itemid][hItemQuantity] > 0)
	    {
	        HouseStorage[houseid][itemid][hItemQuantity] -= quantity;
		}
		if (quantity == -1 || HouseStorage[houseid][itemid][hItemQuantity] < 1)
		{
		    HouseStorage[houseid][itemid][hItemExists] = false;
		    HouseStorage[houseid][itemid][hItemModel] = 0;
		    HouseStorage[houseid][itemid][hItemQuantity] = 0;

		    format(string, sizeof(string), "DELETE FROM `housestorage` WHERE `ID` = '%d' AND `itemID` = '%d'", HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
	        mysql_tquery(g_iHandle, string);
		}
		else if (quantity != -1 && HouseStorage[houseid][itemid][hItemQuantity] > 0)
		{
			format(string, sizeof(string), "UPDATE `housestorage` SET `itemQuantity` = `itemQuantity` - %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
            mysql_tquery(g_iHandle, string);
		}
		return 1;
	}
	return 0;
}

House_RemoveAllItems(houseid)
{
	static
	    query[64];

	for (new i = 0; i != MAX_HOUSE_STORAGE; i ++) {
        HouseStorage[houseid][i][hItemExists] = false;
        HouseStorage[houseid][i][hItemModel] = 0;
        HouseStorage[houseid][i][hItemQuantity] = 0;
	}
	format(query, 64, "DELETE FROM `housestorage` WHERE `ID` = '%d'", HouseData[houseid][houseID]);
	mysql_tquery(g_iHandle, query);

	for (new i = 0; i < 10; i ++) {
	    HouseData[houseid][houseWeapons][i] = 0;
	    HouseData[houseid][houseAmmo][i] = 0;
	}
	return 1;
}

stock Car_GetItemID(carid, item[])
{
	if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	for (new i = 0; i < MAX_CAR_STORAGE; i ++)
	{
	    if (!CarStorage[carid][i][cItemExists])
	        continue;

		if (!strcmp(CarStorage[carid][i][cItemName], item)) return i;
	}
	return -1;
}

stock Car_GetFreeID(carid)
{
	if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	for (new i = 0; i < MAX_CAR_STORAGE; i ++)
	{
	    if (!CarStorage[carid][i][cItemExists])
	        return i;
	}
	return -1;
}

stock Car_AddItem(carid, item[], model, quantity = 1, slotid = -1)
{
    if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	new
		itemid = Car_GetItemID(carid, item),
		string[128];

	if (itemid == -1)
	{
	    itemid = Car_GetFreeID(carid);

	    if (itemid != -1)
	    {
	        if (slotid != -1)
	            itemid = slotid;

	        CarStorage[carid][itemid][cItemExists] = true;
	        CarStorage[carid][itemid][cItemModel] = model;
	        CarStorage[carid][itemid][cItemQuantity] = quantity;

	        strpack(CarStorage[carid][itemid][cItemName], item, 32 char);

			format(string, sizeof(string), "INSERT INTO `carstorage` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", CarData[carid][carID], item, model, quantity);
			mysql_tquery(g_iHandle, string, "OnCarStorageAdd", "dd", carid, itemid);

	        return itemid;
		}
		return -1;
	}
	else
	{
	    format(string, sizeof(string), "UPDATE `carstorage` SET `itemQuantity` = `itemQuantity` + %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, CarData[carid][carID], CarStorage[carid][itemid][cItemID]);
	    mysql_tquery(g_iHandle, string);

	    CarStorage[carid][itemid][cItemQuantity] += quantity;
	}
	return itemid;
}

stock Car_RemoveItem(carid, item[], quantity = 1)
{
    if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	new
		itemid = Car_GetItemID(carid, item),
		string[128];

	if (itemid != -1)
	{
	    if (CarStorage[carid][itemid][cItemQuantity] > 0)
	    {
	        CarStorage[carid][itemid][cItemQuantity] -= quantity;
		}
		if (quantity == -1 || CarStorage[carid][itemid][cItemQuantity] < 1)
		{
		    CarStorage[carid][itemid][cItemExists] = false;
		    CarStorage[carid][itemid][cItemModel] = 0;
		    CarStorage[carid][itemid][cItemQuantity] = 0;

		    format(string, sizeof(string), "DELETE FROM `carstorage` WHERE `ID` = '%d' AND `itemID` = '%d'", CarData[carid][carID], CarStorage[carid][itemid][cItemID]);
	        mysql_tquery(g_iHandle, string);
		}
		else if (quantity != -1 && CarStorage[carid][itemid][cItemQuantity] > 0)
		{
			format(string, sizeof(string), "UPDATE `carstorage` SET `itemQuantity` = `itemQuantity` - %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, CarData[carid][carID], CarStorage[carid][itemid][cItemID]);
            mysql_tquery(g_iHandle, string);
		}
		return 1;
	}
	return 0;
}

Car_RemoveAllItems(carid)
{
	static
	    query[64];

	for (new i = 0; i != MAX_CAR_STORAGE; i ++) {
        CarStorage[carid][i][cItemExists] = false;
        CarStorage[carid][i][cItemModel] = 0;
        CarStorage[carid][i][cItemQuantity] = 0;
	}
	format(query, 64, "DELETE FROM `carstorage` WHERE `ID` = '%d'", CarData[carid][carID]);
	mysql_tquery(g_iHandle, query);

	for (new i = 0; i < 5; i ++) {
	    CarData[carid][carWeapons][i] = 0;
	    CarData[carid][carAmmo][i] = 0;
	}
	return 1;
}

FormatNumber(number, prefix[] = "$")
{
	static
		value[32],
		length;

	format(value, sizeof(value), "%d", (number < 0) ? (-number) : (number));

	if ((length = strlen(value)) > 3)
	{
		for (new i = length, l = 0; --i >= 0; l ++) {
		    if ((l > 0) && (l % 3 == 0)) strins(value, ",", i + 1);
		}
	}
	if (prefix[0] != 0)
	    strins(value, prefix, 0);

	if (number < 0)
		strins(value, "-", 0);

	return value;
}

ResetFaction(playerid)
{
    PlayerData[playerid][pFaction] = -1;
    PlayerData[playerid][pFactionID] = -1;
    PlayerData[playerid][pFactionRank] = 0;
    PlayerData[playerid][pSwatMember] = 0;
    PlayerData[playerid][pFactionDivision] = 0;
}

forward DragUpdate(playerid, targetid);
public DragUpdate(playerid, targetid)
{
	if (PlayerData[targetid][pDragged] && PlayerData[targetid][pDraggedBy] == playerid)
	{
	    static
	        Float:fX,
	        Float:fY,
	        Float:fZ,
			Float:fAngle;

		GetPlayerPos(playerid, fX, fY, fZ);
		GetPlayerFacingAngle(playerid, fAngle);

		fX -= 3.0 * floatsin(-fAngle, degrees);
		fY -= 3.0 * floatcos(-fAngle, degrees);

		SetPlayerPos(targetid, fX, fY, fZ);
		SetPlayerInterior(targetid, GetPlayerInterior(playerid));
		SetPlayerVirtualWorld(targetid, GetPlayerVirtualWorld(playerid));
	}
	return 1;
}

StopDragging(playerid)
{
	if (PlayerData[playerid][pDragged])
	{
	    PlayerData[playerid][pDragged] = 0;
		PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
		KillTimer(PlayerData[playerid][pDragTimer]);
	}
	return 1;
}

ResetEditing(playerid)
{
    if (PlayerData[playerid][pEditFurniture] != -1)
		Furniture_Refresh(PlayerData[playerid][pEditFurniture]);

	if (PlayerData[playerid][pEditPump] != -1)
	{
		Pump_Refresh(PlayerData[playerid][pEditPump]);
		PlayerData[playerid][pGasStation] = -1;
	}
	PlayerData[playerid][pEditType] = 0;
 	PlayerData[playerid][pEditGate] = -1;
 	PlayerData[playerid][pEditRack] = -1;
	PlayerData[playerid][pEditPump] = -1;
	PlayerData[playerid][pEditFurniture] = -1;
	return 1;
}

ResetPlayer(playerid)
{
	if (PlayerData[playerid][pDrinking])
	    DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);

    if (PlayerData[playerid][pFirstAid])
	    KillTimer(PlayerData[playerid][pAidTimer]);

	if (PlayerData[playerid][pDrivingTest])
	    DestroyVehicle(PlayerData[playerid][pTestCar]);

	if (PlayerData[playerid][pWaypoint])
	{
        PlayerData[playerid][pWaypoint] = 0;
        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][69]);
	}
	foreach (new i : Player) if (PlayerData[i][pDraggedBy] == playerid) {
	    StopDragging(i);
	}
	if (PlayerData[playerid][pDragged]) {
	    StopDragging(playerid);
	}
    PlayerData[playerid][pHospital] = -1;
	PlayerData[playerid][pCooking] = 0;
	PlayerData[playerid][pCookingTime] = 0;
	PlayerData[playerid][pCookingHouse] = -1;
	PlayerData[playerid][pGasPump] = -1;
	PlayerData[playerid][pCarryTrash] = 0;
	PlayerData[playerid][pGasStation] = -1;
	PlayerData[playerid][pCrafting] = 0;
	PlayerData[playerid][pOpeningCrate] = 0;
	PlayerData[playerid][pHarvesting] = 0;
	PlayerData[playerid][pDrivingTest] = 0;
	PlayerData[playerid][pFuelCan] = 0;
	PlayerData[playerid][pFingerTime] = 0;
	PlayerData[playerid][pFingerItem] = -1;
	PlayerData[playerid][pFirstAid] = 0;
	PlayerData[playerid][pDrinking] = 0;
	PlayerData[playerid][pDrinkTime] = 0;
	PlayerData[playerid][pEmergency] = 0;
	PlayerData[playerid][pDealerCall] = 0;
	PlayerData[playerid][pDealerCallMP] = 0;
	PlayerData[playerid][pDealerCallPP] = 0;
	PlayerData[playerid][pDealerCallSMGP] = 0;
	PlayerData[playerid][pDealerCallSP] = 0;
	PlayerData[playerid][pDealerCallRP] = 0;
	PlayerData[playerid][pDealerCallDP] = 0;
	PlayerData[playerid][pPlaceAd] = 0;
	PlayerData[playerid][pAdTime] = 0;
	PlayerData[playerid][pLoanAsk] = 0;
	PlayerData[playerid][pTaxiCalled] = 0;
	PlayerData[playerid][pMechanicCalled] = 0;
	PlayerData[playerid][pMining] = 0;
	PlayerData[playerid][pMinedRock] = 0;
	PlayerData[playerid][pMineTime] = 0;
	PlayerData[playerid][pBleeding] = 0;
	PlayerData[playerid][pBleedTime] = 0;
	PlayerData[playerid][pLoadType] = 0;
	PlayerData[playerid][pLoadCrate] = 0;
	PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pUnloading] = -1;
	PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pUsedMagazine] = 0;
	PlayerData[playerid][pSorting] = -1;
	PlayerData[playerid][pSortCrate] = 0;
	PlayerData[playerid][pCP] = 0;
	PlayerData[playerid][pMaskOn] = 0;
	PlayerData[playerid][pHideTags] = 0;
	PlayerData[playerid][pCuffed] = 0;
	PlayerData[playerid][pGraffiti] = -1;
	PlayerData[playerid][pGraffitiTime] = 0;
	PlayerData[playerid][pPicking] = 0;
	PlayerData[playerid][pPickCar] = -1;
	PlayerData[playerid][pPickTime] = 0;

	if (Inventory_HasItem(playerid, "Mask")) {
	    Inventory_Remove(playerid, "Mask");
	}
	ResetNameTag(playerid);

	RemovePlayerAttachedObject(playerid, 4);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	DisablePlayerCheckpoint(playerid);
	GameTextForPlayer(playerid, " ", 1, 3);

	HidePlayerFooter(playerid);
	HoldWeapon(playerid, 0);
}

ResetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) {
		PlayerData[playerid][pGuns][i] = 0;
		PlayerData[playerid][pAmmo][i] = 0;
	}
	return 1;
}

ResetWeapon(playerid, weaponid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) {
	    if (PlayerData[playerid][pGuns][i] != weaponid) {
	        GivePlayerWeapon(playerid, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);
		}
		else {
            PlayerData[playerid][pGuns][i] = 0;
            PlayerData[playerid][pAmmo][i] = 0;
	    }
	}
	return 1;
}

GiveWeaponToPlayer(playerid, weaponid, ammo)
{
	if (weaponid < 0 || weaponid > 46)
	    return 0;

	PlayerData[playerid][pGuns][g_aWeaponSlots[weaponid]] = weaponid;
	PlayerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] += ammo;

	return GivePlayerWeapon(playerid, weaponid, ammo);
}

GiveMoney(playerid, amount)
{
	PlayerData[playerid][pMoney] += amount;
	GivePlayerMoney(playerid, amount);
	return 1;
}
SetPlayerMoney(playerid, cash)
{
  ResetPlayerMoney(playerid);
  return GivePlayerMoney(playerid, cash);
}
GetPlayerSQLID(playerid)
{
	return (PlayerData[playerid][pID]);
}

GetMoney(playerid)
{
	return (PlayerData[playerid][pMoney]);
}

IsValidPlayerName(const str[])
{
	if (!str[0] || str[0] == '\1')
		return 0;

	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if ((str[i] >= '0' && str[i] <= '9') || (str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z'))
	        continue;

		if (str[i] == '_' || str[i] == '$' || str[i] == '@' || str[i] == '[' || str[i] == ']')
		    continue;

		else
		    return 0;
	}
	return 1;
}

//Lumberjack
enum    E_TREE
{
	// loaded from db
	Float: treeX,
	Float: treeY,
	Float: treeZ,
	Float: treeRX,
	Float: treeRY,
	Float: treeRZ,
	// temp
	treeLogs,
	treeSeconds,
	bool: treeGettingCut,
	treeObjID,
	Text3D: treeLabel,
	treeTimer
}

enum    E_LOG
{
	// temp
	logDroppedBy[MAX_PLAYER_NAME],
	logSeconds,
	logObjID,
	logTimer,
	Text3D: logLabel
}

enum    E_BUYER
{
	// loaded from db
	buyerSkin,
	Float: buyerX,
	Float: buyerY,
	Float: buyerZ,
	Float: buyerA,
	// temp
	buyerActorID,
	Text3D: buyerLabel
}

new
	TreeData[MAX_TREES][E_TREE],
	LogData[MAX_LOGS][E_LOG],
	BuyerData[MAX_BUYERS][E_BUYER];

new
	Iterator: Trees<MAX_TREES>,
	Iterator: Logs<MAX_LOGS>,
	Iterator: Buyers<MAX_BUYERS>;

new
	LogObjects[MAX_VEHICLES][LOG_LIMIT];

new
	CuttingTreeID[MAX_PLAYERS] = {-1, ...},
	CuttingTimer[MAX_PLAYERS] = {-1, ...},
	PlayerBar: CuttingBar[MAX_PLAYERS] = {INVALID_PLAYER_BAR_ID, ...},
	bool: CarryingLog[MAX_PLAYERS],
	EditingTreeID[MAX_PLAYERS] = {-1, ...};

new
	Float: LogAttachOffsets[LOG_LIMIT][4] = {
	    {-0.223, -1.089, -0.230, -90.399},
		{-0.056, -1.091, -0.230, 90.399},
		{0.116, -1.092, -0.230, -90.399},
		{0.293, -1.088, -0.230, 90.399},
		{-0.123, -1.089, -0.099, -90.399},
		{0.043, -1.090, -0.099, 90.399},
		{0.216, -1.092, -0.099, -90.399},
		{-0.033, -1.090, 0.029, -90.399},
		{0.153, -1.089, 0.029, 90.399},
		{0.066, -1.091, 0.150, -90.399}
	};

new
	DB: ScriptDBHandle;

new
	DBStatement: LoadTrees,
	DBStatement: AddTree,
	DBStatement: UpdateTree,
	DBStatement: RemoveTree;

new
	DBStatement: LoadBuyers,
	DBStatement: AddBuyer,
	DBStatement: UpdateBuyer,
	DBStatement: RemoveBuyer;

SetPlayerLookAt(playerid, Float:x, Float:y)
{
	// somewhere on samp forums, couldn't find the source
	new Float:Px, Float:Py, Float: Pa;
	GetPlayerPos(playerid, Px, Py, Pa);
	Pa = floatabs(atan((y-Py)/(x-Px)));
	if (x <= Px && y >= Py) Pa = floatsub(180, Pa);
	else if (x < Px && y < Py) Pa = floatadd(Pa, 180);
	else if (x >= Px && y <= Py) Pa = floatsub(360.0, Pa);
	Pa = floatsub(Pa, 90.0);
	if (Pa >= 360.0) Pa = floatsub(Pa, 360.0);
	SetPlayerFacingAngle(playerid, Pa);
}

ConvertToMinutes(time)
{
    // http://forum.sa-mp.com/showpost.php?p=3223897&postcount=11
    new string[15];//-2000000000:00 could happen, so make the string 15 chars to avoid any errors
    format(string, sizeof(string), "%02d:%02d", time / 60, time % 60);
    return string;
}

GetClosestTree(playerid, Float: range = 2.0)
{
	new id = -1, Float: dist = range, Float: tempdist;
	foreach(new i : Trees)
	{
	    tempdist = GetPlayerDistanceFromPoint(playerid, TreeData[i][treeX], TreeData[i][treeY], TreeData[i][treeZ]);

	    if(tempdist > range) continue;
		if(tempdist <= dist)
		{
			dist = tempdist;
			id = i;
		}
	}

	return id;
}

GetClosestLog(playerid, Float: range = 2.0)
{
	new id = -1, Float: dist = range, Float: tempdist, Float: pos[3];
	foreach(new i : Logs)
	{
		GetDynamicObjectPos(LogData[i][logObjID], pos[0], pos[1], pos[2]);
	    tempdist = GetPlayerDistanceFromPoint(playerid, pos[0], pos[1], pos[2]);

	    if(tempdist > range) continue;
		if(tempdist <= dist)
		{
			dist = tempdist;
			id = i;
		}
	}

	return id;
}

IsPlayerNearALogBuyer(playerid)
{
	foreach(new i : Buyers)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, BuyerData[i][buyerX], BuyerData[i][buyerY], BuyerData[i][buyerZ])) return 1;
	}

	return 0;
}

Player_Init(playerid)
{
    CuttingTreeID[playerid] = -1;
    CuttingTimer[playerid] = -1;
	CarryingLog[playerid] = false;
    EditingTreeID[playerid] = -1;

    CuttingBar[playerid] = CreatePlayerProgressBar(playerid, 498.0, 104.0, 113.0, 6.2, 0x61381BFF, CUTTING_TIME, 0);
    ApplyAnimation(playerid, "CHAINSAW", "null", 0.0, 0, 0, 0, 0, 0, 0);
    ApplyAnimation(playerid, "CARRY", "null", 0.0, 0, 0, 0, 0, 0, 0);
	return 1;
}

Player_ResetCutting(playerid)
{
	if(!IsPlayerConnected(playerid) || CuttingTreeID[playerid] == -1) return 0;
	new id = CuttingTreeID[playerid];
	TreeData[id][treeGettingCut] = false;
	if(TreeData[id][treeSeconds] < 1) Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TreeData[id][treeLabel], E_STREAMER_COLOR, 0x2ECC71FF);

	ClearAnimations(playerid);
    TogglePlayerControllable(playerid, 1);
    CuttingTreeID[playerid] = -1;

    if(CuttingTimer[playerid] != -1)
	{
	    KillTimer(CuttingTimer[playerid]);
		CuttingTimer[playerid] = -1;
	}

	SetPlayerProgressBarValue(playerid, CuttingBar[playerid], 0.0);
	HidePlayerProgressBar(playerid, CuttingBar[playerid]);
	return 1;
}

Player_GiveLog(playerid)
{
    if(!IsPlayerConnected(playerid)) return 0;
	CarryingLog[playerid] = true;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	SetPlayerAttachedObject(playerid, ATTACH_INDEX, 19793, 6, 0.077999, 0.043999, -0.170999, -13.799953, 79.70, 0.0);

	SendClientMessage(playerid, 0x3498DBFF, "LUMBERJACK: {FFFFFF}Kamu bisa memencet tombol {F1C40F}~k~~CONVERSATION_NO~ {FFFFFF}untuk menjatuhkan kayu.");
	return 1;
}

Player_DropLog(playerid, death_drop = 0)
{
    if(!IsPlayerConnected(playerid) || !CarryingLog[playerid]) return 0;
    new id = Iter_Free(Logs);
    if(id != -1)
    {
        new Float: x, Float: y, Float: z, Float: a, label[128];
        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, a);
        GetPlayerName(playerid, LogData[id][logDroppedBy], MAX_PLAYER_NAME);

		if(!death_drop)
		{
		    x += (1.0 * floatsin(-a, degrees));
			y += (1.0 * floatcos(-a, degrees));

			ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 1, 1, 0, 0, 1);
		}

		LogData[id][logSeconds] = LOG_LIFETIME;
		LogData[id][logObjID] = CreateDynamicObject(19793, x, y, z - 0.9, 0.0, 0.0, a);

		format(label, sizeof(label), "Kayu (%d)\n\n{FFFFFF}Dijatuhkan oleh {F1C40F}%s\n{FFFFFF}%s\nGunakan {F1C40F}/log take {FFFFFF}untuk mengambilnya.", id, LogData[id][logDroppedBy], ConvertToMinutes(LOG_LIFETIME));
		LogData[id][logLabel] = CreateDynamic3DTextLabel(label, 0xF1C40FFF, x, y, z - 0.7, 5.0, .testlos = 1);

		LogData[id][logTimer] = SetTimerEx("RemoveLog", 1000, true, "i", id);
		Iter_Add(Logs, id);
    }

    Player_RemoveLog(playerid);
	return 1;
}

Player_RemoveLog(playerid)
{
	if(!IsPlayerConnected(playerid) || !CarryingLog[playerid]) return 0;
	RemovePlayerAttachedObject(playerid, ATTACH_INDEX);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	CarryingLog[playerid] = false;
	return 1;
}

Vehicle_LogCount(vehicleid)
{
	if(GetVehicleModel(vehicleid) == 0) return 0;
	new count;
	for(new i; i < LOG_LIMIT; i++) if(IsValidDynamicObject(LogObjects[vehicleid][i])) count++;
	return count;
}

Vehicle_RemoveLogs(vehicleid)
{
    if(GetVehicleModel(vehicleid) == 0) return 0;
    for(new i; i < LOG_LIMIT; i++)
	{
	    if(IsValidDynamicObject(LogObjects[vehicleid][i]))
	    {
	        DestroyDynamicObject(LogObjects[vehicleid][i]);
	        LogObjects[vehicleid][i] = -1;
	    }
	}

	return 1;
}

Tree_BeingEdited(id)
{
	if(!Iter_Contains(Trees, id)) return 0;
	foreach(new i : Player) if(EditingTreeID[i] == id) return 1;
	return 0;
}

Tree_UpdateLogLabel(id)
{
    if(!Iter_Contains(Trees, id)) return 0;
    new label[96];

    if(TreeData[id][treeLogs] > 0) {
	    format(label, sizeof(label), "Pohon (%d)\n\n{FFFFFF}Kayu: {F1C40F}%d\n{FFFFFF}Gunakan {F1C40F}/log takefromtree {FFFFFF}untuk mengambil kayu.", id, TreeData[id][treeLogs]);
		UpdateDynamic3DTextLabelText(TreeData[id][treeLabel], 0xE74C3CFF, label);
	}else{
	    TreeData[id][treeTimer] = SetTimerEx("RespawnTree", 1000, true, "i", id);

	    format(label, sizeof(label), "Pohon (%d)\n\n{FFFFFF}%s", id, ConvertToMinutes(TreeData[id][treeSeconds]));
		UpdateDynamic3DTextLabelText(TreeData[id][treeLabel], 0xE74C3CFF, label);
	}

	return 1;
}
//End Lumberjack


//jobkoran
IsAnspeda(carid) // speda koran
{
	for(new v = 0; v < sizeof(speda); v++)
	{
	    if(carid == speda[v]) return 1;
	}
	return 0;
}
//koran end

//penyapu
IsAnmobilpenyapu(carid) //mobil penyapu
{
	for(new s = 0; s < sizeof(mobilpenyapu); s++)
	{
	    if(carid == mobilpenyapu[s]) return 1;
	}
	return 0;
}
//END

//truckerjob
IsAntruckers(carid) //mobil penyapu
{
	for(new j = 0; j < sizeof(truckers); j++)
	{
	    if(carid == truckers[j]) return 1;
	}
	return 0;
}
//END

IsAnIP(str[])
{
	if (!str[0] || str[0] == '\1')
		return 0;

	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if ((str[i] < '0' || str[i] > '9') && str[i] != '.')
	        return 0;

	    if (0 < ((i == 0) ? (strval(str)) : (strval(str[i + 1]))) > 255)
	        return 0;
	}
	return 1;
}

Report_GetCount(playerid)
{
	new count;

    for (new i = 0; i != MAX_REPORTS; i ++)
	{
	    if (ReportData[i][rExists] && ReportData[i][rPlayer] == playerid)
	    {
	        count++;
		}
	}
	return count;
}

Report_Clear(playerid)
{
    for (new i = 0; i != MAX_REPORTS; i ++)
	{
	    if (ReportData[i][rExists] && ReportData[i][rPlayer] == playerid)
	    {
	        Report_Remove(i);
		}
	}
	return 1;
}

Report_Add(playerid, const text[], type = 1)
{
	for (new i = 0; i != MAX_REPORTS; i ++)
	{
	    if (!ReportData[i][rExists])
	    {
	        ReportData[i][rExists] = true;
	        ReportData[i][rType] = type;
	        ReportData[i][rPlayer] = playerid;

	        strpack(ReportData[i][rText], text, 128 char);
			return i;
		}
	}
	return -1;
}

Report_Remove(reportid)
{
	if (reportid != -1 && ReportData[reportid][rExists])
	{
	    ReportData[reportid][rExists] = false;
	    ReportData[reportid][rPlayer] = INVALID_PLAYER_ID;
	}
	return 1;
}

KickEx(playerid)
{
	if (PlayerData[playerid][pKicked])
	    return 0;

	PlayerData[playerid][pKicked] = 1;
	SetTimerEx("KickTimer", 200, false, "d", playerid);

	return 1;
}

forward KickTimer(playerid);
public KickTimer(playerid)
{
	if (PlayerData[playerid][pKicked])
	{
		return Kick(playerid);
	}
	return 0;
}

stock SetDefaultSpawn(playerid)
{
    SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);


	if(PlayerData[playerid][pSpawnPoint] == 0) // Airport
	{
	    SetPlayerPos(playerid, 1642.1957, -2334.4849, 13.5469);
	    SetPlayerFacingAngle(playerid, 0.0);
	}
	if(PlayerData[playerid][pSpawnPoint] == 1) // Faction
	{
	    new faction = PlayerData[playerid][pFactionID];
	    if(PlayerData[playerid][pFactionID] == -1)
	    {
	        SendErrorMessage(playerid, "Kamu menetapkan untuk spawn di civilian spawn.");
	        SetPlayerPos(playerid, 1642.1957, -2334.4849, 13.5469);
	    	SetPlayerFacingAngle(playerid, 0.0);
		}
		SetPlayerPos(playerid,FactionData[faction][SpawnX],FactionData[faction][SpawnY],FactionData[faction][SpawnZ]);
		SetPlayerInterior(playerid,FactionData[faction][SpawnInterior]);
		SetPlayerVirtualWorld(playerid, FactionData[faction][SpawnVW]);
	}
	if(PlayerData[playerid][pSpawnPoint] == 2)
	{
	    SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
	    SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
	    SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
	    SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
	}

	/*#if SERVER_CITY == 1
	    SetPlayerPos(playerid, 1642.1957, -2334.4849, 13.5469);
	    SetPlayerFacingAngle(playerid, 0.0);
	#elseif SERVER_CITY == 2
		SetPlayerPos(playerid, -2425.5615, 337.5465, 37.0018);
		SetPlayerFacingAngle(playerid, 238.0);
	#elseif SERVER_CITY == 3
	    SetPlayerPos(playerid, 1675.7245, 1447.8938, 10.7866);
	    SetPlayerFacingAngle(playerid, 270.0);
	#endif*/

	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, 1);
	return 1;
}

stock RespawnPlayer(playerid)
{
	if (IsPlayerInAnyVehicle(playerid))
	{
        new
		    Float:x,
		    Float:y,
	    	Float:z;

	    GetPlayerPos(playerid, x, y, z);
	    SetPlayerPos(playerid, x, y, z + 1);
	}
	SpawnPlayer(playerid);
	SetDefaultSpawn(playerid);
	return 1;
}

stock IsPlayerIdle(playerid) {
	new
	    index = GetPlayerAnimationIndex(playerid);

	return ((index == 1275) || (1181 <= index <= 1192));
}

stock IsPlayerNearDynamicObject(playerid, objectid, Float:range = 5.0) {

	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	GetDynamicObjectPos(objectid, fX, fY, fZ);

	return (IsPlayerInRangeOfPoint(playerid, range, fX, fY, fZ));
}

stock IsPlayerSpawned(playerid)
{
	if (playerid < 0 || playerid >= MAX_PLAYERS)
	    return 0;

	return (!PlayerData[playerid][pKilled]) && (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && GetPlayerState(playerid) != PLAYER_STATE_NONE && GetPlayerState(playerid) != PLAYER_STATE_WASTED);
}

stock GetVehicleMaxSeats(vehicleid)
{
    static const g_arrMaxSeats[] = {
		4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
		1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4, 4,
		2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2, 2,
		4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2, 1,
		1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4, 2, 2,
		4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2, 4,
		4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0, 4,
		0, 0
	};
	new
	    model = GetVehicleModel(vehicleid);

	if (400 <= model <= 611)
	    return g_arrMaxSeats[model - 400];

	return 0;
}

stock GetNearestVehicle(playerid)
{
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && GetVehiclePos(i, fX, fY, fZ))
	{
	    if (IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ)) return i;
	}
	return INVALID_VEHICLE_ID;
}

stock IsPlayerNearPlayer(playerid, targetid, Float:radius)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetPlayerPos(targetid, fX, fY, fZ);

	return (GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid)) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}

stock IsPlayerNearBoot(playerid, vehicleid)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleBoot(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ);
}

stock IsPlayerNearHood(playerid, vehicleid)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleHood(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.0, fX, fY, fZ);
}

stock SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}
ResetDamages(playerid)
{
	for(new i = 0; i < MAX_BODY_PARTS; i++)
	{
		for(new z = 0; z < MAX_WEAPONS; z++) Damage[playerid][i][z] = 0;
	}
	return 1;
}
CountDamages(playerid)
{
	new count = 0;
	for(new i = 0; i < MAX_BODY_PARTS; i++)
	{
		for(new z = 0; z < MAX_WEAPONS; z++)
		{
			if(Damage[playerid][i][z]) count += Damage[playerid][i][z];
		}
	}
	return count;
}
GetBodyPartName(bodypart)
{
	new part[28];
	switch(bodypart)
	{
		case BODY_PART_TORSO: part = "perut";
		case BODY_PART_GROIN: part = "paha";
		case BODY_PART_LEFT_ARM: part = "tangan kiri";
		case BODY_PART_RIGHT_ARM: part = "tangan kanan";
		case BODY_PART_LEFT_LEG: part = "kaki kiri";
		case BODY_PART_RIGHT_LEG: part = "kaki kanan";
		case BODY_PART_HEAD: part = "kepala";
		default: part = "yang tidak diketahui";
	}
	return part;
}
stock GetWeaponNameEx(weaponid)
{
	new weapon[22];
	switch(weaponid)
	{
		case 0: weapon = "Fist";
		case 18: weapon = "Molotov Cocktail";
		case 44: weapon = "Night Vision Goggles";
		case 45: weapon = "Thermal Goggles";
		case 54: weapon = "Fall Damage";
		default: GetWeaponName(weaponid, weapon, sizeof(weapon));
	}
	return weapon;
}
DisplayDamages(toplayer, playerid)
{
		new playername[MAX_PLAYER_NAME], title[45];
		GetPlayerName(playerid, playername, sizeof(playername));
		format(title, sizeof(title), "Luka %s", playername);
		if(!CountDamages(playerid)) return ShowPlayerDialog(toplayer, D_DAMAGES, DIALOG_STYLE_LIST, title, "Tidak ada luka...", "Tutup", "");
		new gText[1000], fstr[45];
		for(new i = 0; i < MAX_BODY_PARTS; i++)
		{
				for(new z = 0; z < MAX_WEAPONS; z++)
				{
					if(!Damage[playerid][i][z]) continue;
					switch(i)
					{
						case 0 .. 15: format(fstr, sizeof(fstr), "Terkena %s di bagian %s\n", GetWeaponNameEx(z), GetBodyPartName(i + 3));
						case 54: format(fstr, sizeof(fstr), "Terjatuh melukai %s\n", Damage[playerid][i][z], GetBodyPartName(i));
						default: format(fstr, sizeof(fstr), "%d peluru dari %s di bagian %s\n", Damage[playerid][i][z], GetWeaponNameEx(z), GetBodyPartName(i + 3));
					}
					strcat(gText, fstr);
				}
		}
		ShowPlayerDialog(toplayer, D_DAMAGES, DIALOG_STYLE_LIST, title, gText, "Tutup", "");
		return 1;
}
stock SendAdminAlert(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerData[i][pAdmin] >= 1) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (PlayerData[i][pAdmin] >= 1) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendDonatorAlert(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerData[i][pDonator] >= 1) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (PlayerData[i][pDonator] >= 1) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendFactionAlert(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerData[i][pAdmin] >= 1 || PlayerData[i][pFactionMod] > 0) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (PlayerData[i][pAdmin] >= 1 || PlayerData[i][pFactionMod] > 0) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendHelperMessage(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if ((!PlayerData[i][pDisableHelper]) && (PlayerData[i][pHelper] >= 1 || PlayerData[i][pAdmin] > 0)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if ((!PlayerData[i][pDisableHelper]) && (PlayerData[i][pHelper] >= 1 || PlayerData[i][pAdmin] > 0)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendFactionMessageEx(type, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !PlayerData[i][pDisableFaction]) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !PlayerData[i][pDisableFaction]) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendFactionMessage(factionid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pFaction] == factionid && !PlayerData[i][pDisableFaction]) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pFaction] == factionid && !PlayerData[i][pDisableFaction]) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendPagerMessage(factionid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pFaction] == factionid)
		{
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pFaction] == factionid)
	{
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendJobMessage(jobid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pJob] == jobid) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pJob] == jobid) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendVehicleMessage(vehicleid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (GetPlayerVehicleID(i) == vehicleid) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (GetPlayerVehicleID(i) == vehicleid) {
 		SendClientMessage(i, color, string);
	}
	return 1;
}

stock SendRadioMessage(frequency, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (Inventory_HasItem(i, "Portable Radio") && PlayerData[i][pChannel] == frequency) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (Inventory_HasItem(i, "Portable Radio") && PlayerData[i][pChannel] == frequency) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendRadioMessage2(frequency, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (Inventory_HasItem(i, "Portable Radio") && PlayerData[i][pChannel2] == frequency) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (Inventory_HasItem(i, "Portable Radio") && PlayerData[i][pChannel2] == frequency) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendRadioMessage3(frequency, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (Inventory_HasItem(i, "Portable Radio") && PlayerData[i][pChannel3] == frequency) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (Inventory_HasItem(i, "Portable Radio") && PlayerData[i][pChannel3] == frequency) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendRadioMessage4(frequency, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (Inventory_HasItem(i, "Portable Radio") && PlayerData[i][pChannel4] == frequency) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (Inventory_HasItem(i, "Portable Radio") && PlayerData[i][pChannel4] == frequency) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendClientMessageEx(playerid, color, const text[], {Float, _}:...)
{
	static
	    args,
	    str[144];

	/*
     *  Custom function that uses #emit to format variables into a string.
     *  This code is very fragile; touching any code here will cause crashing!
	*/
	if ((args = numargs()) == 3)
	{
	    SendClientMessage(playerid, color, text);
	}
	else
	{
		while (--args >= 3)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit PUSH.S 8
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendClientMessage(playerid, color, str);

		#emit RETN
	}
	return 1;
}

stock SendClientMessageToAllEx(color, const text[], {Float, _}:...) // pake ex?
{
	static
	    args,
	    str[144];

	/*
     *  Custom function that uses #emit to format variables into a string.
     *  This code is very fragile; touching any code here will cause crashing!
	*/
	if ((args = numargs()) == 3)
	{
	    SendClientMessageToAll(color, text);
	}
	else
	{
		while (--args >= 2)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendClientMessageToAll(color, str);

		#emit RETN
	}
	return 1;
}

stock Log_Write(const path[], const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    File:file,
	    string[1024]
	;
	if ((start = strfind(path, "/")) != -1) {
	    strmid(string, path, 0, start + 1);

	    if (!fexist(string))
	        return printf("** Peringatan: Direktori\"%s\" tidak terdapat.", string);
	}
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	file = fopen(path, io_append);

	if (!file)
	    return 0;

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 1024
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		fwrite(file, string);
		fwrite(file, "\r\n");
		fclose(file);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	fwrite(file, str);
	fwrite(file, "\r\n");
	fclose(file);

	return 1;
}

IsValidRoleplayName(const name[]) {
	if (!name[0] || strfind(name, "_") == -1)
	    return 0;

	else for (new i = 0, len = strlen(name); i != len; i ++) {
	    if ((i == 0) && (name[i] < 'A' || name[i] > 'Z'))
	        return 0;

		else if ((i != 0 && i < len  && name[i] == '_') && (name[i + 1] < 'A' || name[i + 1] > 'Z'))
		    return 0;

		else if ((name[i] < 'A' || name[i] > 'Z') && (name[i] < 'a' || name[i] > 'z') && name[i] != '_' && name[i] != '.')
		    return 0;
	}
	return 1;
}

CreateTextDraws(playerid) {
    /*PlayerData[playerid][pTextdraws][0] = CreatePlayerTextDraw(playerid, 240.000000, 161.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][0], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][0], 0.409999, 9.699998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][0], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][0], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][0], 0x00000088);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][0], 411.000000, 40.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][0], 0);

	PlayerData[playerid][pTextdraws][1] = CreatePlayerTextDraw(playerid, 259.000000, 161.000000, "Characters");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][1], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][1], 2);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][1], 0.480000, 1.400000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][1], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][1], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][1], 0);

	PlayerData[playerid][pTextdraws][2] = CreatePlayerTextDraw(playerid, 260.000000, 186.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][2], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][2], 0.400000, 1.500000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][2], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][2], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][2], 390.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][2], 1);

	PlayerData[playerid][pTextdraws][3] = CreatePlayerTextDraw(playerid, 260.000000, 203.500000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][3], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][3], 0.400000, 1.500000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][3], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][3], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][3], 390.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][3], 1);

	PlayerData[playerid][pTextdraws][4] = CreatePlayerTextDraw(playerid, 260.000000, 221.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][4], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][4], 0.400000, 1.500000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][4], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][4], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][4], 390.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][4], 1);

	PlayerData[playerid][pTextdraws][5] = CreatePlayerTextDraw(playerid, 323.000000, 188.000000, "Empty Slot");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][5], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][5], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][5], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][5], 0.310000, 0.899999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][5], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][5], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][5], 0);

	PlayerData[playerid][pTextdraws][6] = CreatePlayerTextDraw(playerid, 323.000000, 206.000000, "Empty Slot");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][6], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][6], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][6], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][6], 0.310000, 0.899999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][6], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][6], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][6], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][6], 0);

	PlayerData[playerid][pTextdraws][7] = CreatePlayerTextDraw(playerid, 323.000000, 223.000000, "Empty Slot");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][7], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][7], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][7], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][7], 0.310000, 0.899999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][7], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][7], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][7], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][7], 0);*/

	Textdrawhud1[playerid] = CreatePlayerTextDraw(playerid, 414.515655, 191.666687, "usebox");
	PlayerTextDrawLetterSize(playerid, Textdrawhud1[playerid], 0.000000, 6.043920);
	PlayerTextDrawTextSize(playerid, Textdrawhud1[playerid], 222.421661, 0.000000);
	PlayerTextDrawAlignment(playerid, Textdrawhud1[playerid], 1);
	PlayerTextDrawColor(playerid, Textdrawhud1[playerid], 255);
	PlayerTextDrawUseBox(playerid, Textdrawhud1[playerid], true);
	PlayerTextDrawBoxColor(playerid, Textdrawhud1[playerid], 102);
	PlayerTextDrawSetShadow(playerid, Textdrawhud1[playerid], 193);
	PlayerTextDrawSetOutline(playerid, Textdrawhud1[playerid], 0);
	PlayerTextDrawFont(playerid, Textdrawhud1[playerid], 0);

	Textdrawhud[playerid] = CreatePlayerTextDraw(playerid, 245.973571, 208.249938, "Loading data..");
	PlayerTextDrawLetterSize(playerid, Textdrawhud[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, Textdrawhud[playerid], 1);
	PlayerTextDrawColor(playerid, Textdrawhud[playerid], -1);
	PlayerTextDrawSetShadow(playerid, Textdrawhud[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Textdrawhud[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, Textdrawhud[playerid], 51);
	PlayerTextDrawFont(playerid, Textdrawhud[playerid], 2);
	PlayerTextDrawSetProportional(playerid, Textdrawhud[playerid], 1);

	Textdraw32[playerid] = CreatePlayerTextDraw(playerid, 86.676513, 343.583435, "_");
	PlayerTextDrawLetterSize(playerid, Textdraw32[playerid], 0.000000, 12.134697);
	PlayerTextDrawTextSize(playerid, Textdraw32[playerid], -131.654464, 119.583312);
	PlayerTextDrawAlignment(playerid, Textdraw32[playerid], 1);
    PlayerTextDrawBackgroundColor(playerid, Textdraw32[playerid], 0xFFFFFF00);
    PlayerTextDrawSetOutline(playerid, Textdraw32[playerid], 1);
	PlayerTextDrawFont(playerid, Textdraw32[playerid], 5);
	PlayerTextDrawSetPreviewModel(playerid, Textdraw32[playerid], 4);
	PlayerTextDrawSetPreviewRot(playerid, Textdraw32[playerid], 0.000000, 0.000000, 0.000000, 1.000000);

	PlayerData[playerid][pTextdraws][0] = CreatePlayerTextDraw(playerid, 239.000000, 156.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][0], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][0], 0.519999, 11.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][0], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][0], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][0], 102);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][0], 416.000000, 40.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][0], 0);

	PlayerData[playerid][pTextdraws][1] = CreatePlayerTextDraw(playerid, 326.000000, 158.000000, "Karakter");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][1], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][1], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][1], 2);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][1], 0.330000, 1.199998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][1], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][1], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][1], 0);

	PlayerData[playerid][pTextdraws][2] = CreatePlayerTextDraw(playerid, 263.000000, 181.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][2], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][2], 0.489998, 1.299998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][2], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][2], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][2], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][2], 393.000000, 12.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][2], 1);

	PlayerData[playerid][pTextdraws][3] = CreatePlayerTextDraw(playerid, 263.000000, 204.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][3], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][3], 0.490000, 1.299998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][3], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][3], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][3], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][3], 393.000000, 12.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][3], 1);

	PlayerData[playerid][pTextdraws][4] = CreatePlayerTextDraw(playerid, 263.000000, 227.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][4], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][4], 0.490000, 1.299996);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][4], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][4], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][4], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][4], 393.000000, 12.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][4], 1);

	PlayerData[playerid][pTextdraws][5] = CreatePlayerTextDraw(playerid, 324.000000, 182.000000, "Slot Kosong");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][5], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][5], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][5], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][5], 0.309998, 0.999998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][5], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][5], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][5], 0);

	PlayerData[playerid][pTextdraws][6] = CreatePlayerTextDraw(playerid, 324.000000, 205.000000, "Slot Kosong");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][6], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][6], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][6], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][6], 0.309998, 0.999998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][6], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][6], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][6], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][6], 0);

	PlayerData[playerid][pTextdraws][7] = CreatePlayerTextDraw(playerid, 324.000000, 228.000000, "Slot Kosong");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][7], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][7], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][7], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][7], 0.309998, 0.999998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][7], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][7], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][7], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][7], 0);

	PlayerData[playerid][pTextdraws][8] = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][8], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][8], 0.000000, 480.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][8], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][8], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][8], 1482184789);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][8], 640.000000, 42.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][8], 0);

	/*PlayerData[playerid][pTextdraws][8] = CreatePlayerTextDraw(playerid, 320.000000, 164.000000, "Load Character");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][8], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][8], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][8], 0.350000, 0.999999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][8], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][8], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][8], 0);

	PlayerData[playerid][pTextdraws][9] = CreatePlayerTextDraw(playerid, 320.000000, 194.000000, "Delete Character");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][9], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][9], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][9], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][9], 0.350000, 0.999999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][9], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][9], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][9], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][9], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][9], 0);

	PlayerData[playerid][pTextdraws][10] = CreatePlayerTextDraw(playerid, 320.000000, 225.000000, "Go Back");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][10], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][10], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][10], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][10], 0.350000, 0.999999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][10], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][10], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][10], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][10], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][10], 0);*/

	PlayerData[playerid][pTextdraws][11] = CreatePlayerTextDraw(playerid, 432.000000, 140.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][11], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][11], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][11], 0.800000, 8.299997);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][11], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][11], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][11], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][11], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][11], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][11], 136);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][11], 199.000000, 64.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][11], 0);

	PlayerData[playerid][pTextdraws][12] = CreatePlayerTextDraw(playerid, 235.000000, 140.000000, "Data karakter");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][12], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][12], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][12], 0.409999, 1.499999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][12], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][12], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][12], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][12], 0);

	PlayerData[playerid][pTextdraws][13] = CreatePlayerTextDraw(playerid, 209.000000, 159.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][13], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][13], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][13], 0.240000, -0.299999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][13], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][13], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][13], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][13], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][13], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][13], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][13], 52.000000, 51.000000);
	PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][13], 98);

	PlayerData[playerid][pTextdraws][14] = CreatePlayerTextDraw(playerid, 271.000000, 159.000000, "~r~Nama:~w~ Nama karakter");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][14], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][14], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][14], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][14], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][14], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][14], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][14], 0);

	PlayerData[playerid][pTextdraws][15] = CreatePlayerTextDraw(playerid, 271.000000, 179.000000, "~r~Tanggal Lahir:~w~ Tolong isi...");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][15], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][15], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][15], 0.240000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][15], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][15], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][15], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][15], 0);

	PlayerData[playerid][pTextdraws][16] = CreatePlayerTextDraw(playerid, 271.000000, 169.000000, "~r~Kelamin:~w~ Pria");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][16], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][16], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][16], 0.240000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][16], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][16], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][16], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][16], 0);

	PlayerData[playerid][pTextdraws][17] = CreatePlayerTextDraw(playerid, 271.000000, 189.000000, "~r~Asal:~w~ Tolong isi...");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][17], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][17], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][17], 0.240000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][17], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][17], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][17], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][17], 0);

	PlayerData[playerid][pTextdraws][18] = CreatePlayerTextDraw(playerid, 368.000000, 202.000000, "Lanjut");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][18], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][18], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][18], 0.380000, 1.200000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][18], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][18], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][18], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][18], 0);

	PlayerData[playerid][pTextdraws][19] = CreatePlayerTextDraw(playerid, 272.000000, 171.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][19], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][19], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][19], 0.290000, 0.599999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][19], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][19], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][19], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][19], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][19], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][19], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][19], 369.000000, 28.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][19], 1);

	PlayerData[playerid][pTextdraws][20] = CreatePlayerTextDraw(playerid, 272.000000, 182.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][20], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][20], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][20], 0.290000, 0.599999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][20], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][20], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][20], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][20], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][20], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][20], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][20], 369.000000, 28.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][20], 1);

	PlayerData[playerid][pTextdraws][21] = CreatePlayerTextDraw(playerid, 272.000000, 192.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][21], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][21], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][21], 0.290000, 0.599999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][21], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][21], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][21], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][21], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][21], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][21], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][21], 369.000000, 28.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][21], 1);

	PlayerData[playerid][pTextdraws][22] = CreatePlayerTextDraw(playerid, 367.000000, 205.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][22], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][22], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][22], 0.289999, 0.699999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][22], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][22], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][22], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][22], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][22], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][22], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][22], 424.000000, 15.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][22], 1);

	PlayerData[playerid][pTextdraws][23] = CreatePlayerTextDraw(playerid, 433.000000, 150.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][23], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][23], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][23], 0.800000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][23], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][23], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][23], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][23], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][23], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][23], 136);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][23], 211.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][23], 0);

	PlayerData[playerid][pTextdraws][24] = CreatePlayerTextDraw(playerid, 246.000000, 149.000000, "Kustomisasi karakter");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][24], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][24], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][24], 0.370000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][24], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][24], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][24], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][24], 0);

	PlayerData[playerid][pTextdraws][25] = CreatePlayerTextDraw(playerid, 433.000000, 162.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][25], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][25], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][25], 0.800000, 10.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][25], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][25], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][25], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][25], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][25], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][25], 119);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][25], 211.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][25], 0);

	PlayerData[playerid][pTextdraws][26] = CreatePlayerTextDraw(playerid, 291.000000, 172.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][26], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][26], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][26], 0.840000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][26], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][26], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][26], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][26], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][26], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][26], 136);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][26], 351.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][26], 1);

	PlayerData[playerid][pTextdraws][27] = CreatePlayerTextDraw(playerid, 303.000000, 171.500000, "Kacamata");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][27], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][27], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][27], 0.290000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][27], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][27], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][27], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][27], 0);

	PlayerData[playerid][pTextdraws][28] = CreatePlayerTextDraw(playerid, 291.000000, 196.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][28], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][28], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][28], 0.840000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][28], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][28], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][28], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][28], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][28], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][28], 136);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][28], 351.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][28], 1);

	PlayerData[playerid][pTextdraws][29] = CreatePlayerTextDraw(playerid, 310.000000, 195.500000, "Topi");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][29], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][29], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][29], 0.290000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][29], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][29], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][29], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][29], 0);

	PlayerData[playerid][pTextdraws][30] = CreatePlayerTextDraw(playerid, 291.000000, 220.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][30], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][30], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][30], 0.840000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][30], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][30], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][30], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][30], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][30], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][30], 136);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][30], 351.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][30], 1);

	PlayerData[playerid][pTextdraws][31] = CreatePlayerTextDraw(playerid, 301.000000, 219.500000, "Bandana");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][31], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][31], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][31], 0.290000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][31], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][31], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][31], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][31], 0);

	PlayerData[playerid][pTextdraws][32] = CreatePlayerTextDraw(playerid, 357.000000, 237.000000, "Lanjut");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][32], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][32], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][32], 0.439999, 1.400000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][32], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][32], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][32], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][32], 0);

	PlayerData[playerid][pTextdraws][33] = CreatePlayerTextDraw(playerid, 356.000000, 240.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][33], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][33], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][33], 0.840000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][33], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][33], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][33], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][33], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][33], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][33], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][33], 424.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][33], 1);

	PlayerData[playerid][pTextdraws][34] = CreatePlayerTextDraw(playerid, 623.000000, 396.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][34], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][34], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][34], 0.760000, 4.299999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][34], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][34], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][34], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][34], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][34], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][34], 85);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][34], 512.000000, 28.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][34], 0);

	PlayerData[playerid][pTextdraws][35] = CreatePlayerTextDraw(playerid, 518.000000, 397.000000, "~r~Bensin:~w~ 0%");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][35], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][35], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][35], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][35], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][35], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][35], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][35], 0);

	PlayerData[playerid][pTextdraws][36] = CreatePlayerTextDraw(playerid, 518.000000, 406.200012, "~r~Kecepatan:~w~ 0 mph");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][36], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][36], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][36], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][36], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][36], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][36], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][36], 0);

	PlayerData[playerid][pTextdraws][37] = CreatePlayerTextDraw(playerid, 518.000000, 415.500000, "~r~Damage:~w~ 0/100%");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][37], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][37], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][37], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][37], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][37], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][37], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][37], 0);

	PlayerData[playerid][pTextdraws][38] = CreatePlayerTextDraw(playerid, 518.000000, 425.000000, "~r~Jendela:~w~ Terbuka");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][38], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][38], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][38], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][38], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][38], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][38], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][38], 0);

	PlayerData[playerid][pTextdraws][39] = CreatePlayerTextDraw(playerid, 208.023330, 425.250061, "Teks footer");
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][39], 0.264465, 1.127498);
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][39], 1);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][39], -1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][39], 0);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][39], 1);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][39], 51);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][39], 2);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][39], 1);

	PlayerData[playerid][pTextdraws][40] = CreatePlayerTextDraw(playerid, 470.000000, 160.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][40], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][40], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][40], 0.570000, 12.200000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][40], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][40], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][40], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][40], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][40], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][40], 102);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][40], 190.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][40], 0);

	PlayerData[playerid][pTextdraws][41] = CreatePlayerTextDraw(playerid, 470.000000, 160.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][41], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][41], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][41], 0.910000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][41], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][41], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][41], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][41], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][41], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][41], -188);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][41], 190.000000, -9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][41], 0);

	PlayerData[playerid][pTextdraws][42] = CreatePlayerTextDraw(playerid, 199.000000, 174.000000, "~g~Kelamin:~w~ Pria~n~~g~Tanggal lahir:~w~ 17/02/1993~n~~g~Asal:~w~ Indonesia");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][42], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][42], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][42], 0.310000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][42], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][42], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][42], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][42], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][42], 0);

	PlayerData[playerid][pTextdraws][43] = CreatePlayerTextDraw(playerid, 195.000000, 159.500000, "Emmet Jones (ID: 4)");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][43], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][43], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][43], 0.310000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][43], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][43], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][43], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][43], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][43], 0);

	PlayerData[playerid][pTextdraws][44] = CreatePlayerTextDraw(playerid, 199.000000, 212.000000, "~g~Uang:~w~ $0~n~~g~Bank:~w~ $0~n~~g~Tabungan:~w~ $0");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][44], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][44], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][44], 0.310000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][44], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][44], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][44], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][44], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][44], 0);

	PlayerData[playerid][pTextdraws][45] = CreatePlayerTextDraw(playerid, 339.000000, 174.000000, "~g~Account:~w~ Player~n~~g~Helper:~w~ No~n~~g~Admin:~w~ No");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][45], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][45], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][45], 0.310000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][45], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][45], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][45], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][45], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][45], 0);

	PlayerData[playerid][pTextdraws][46] = CreatePlayerTextDraw(playerid, 340.000000, 212.000000, "~g~Ping:~w~ 0~n~~g~Packetloss:~w~ 0.0%~n~~g~Waktu aktif:~w~ 00:00:00");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][46], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][46], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][46], 0.310000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][46], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][46], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][46], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][46], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][46], 0);

	PlayerData[playerid][pTextdraws][47] = CreatePlayerTextDraw(playerid, 200.000000, 254.000000, "Karakter");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][47], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][47], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][47], 0.329999, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][47], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][47], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][47], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][47], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][47], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][47], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][47], 278.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][47], 1);

	PlayerData[playerid][pTextdraws][48] = CreatePlayerTextDraw(playerid, 296.000000, 254.000000, "Inventory");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][48], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][48], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][48], 0.329999, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][48], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][48], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][48], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][48], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][48], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][48], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][48], 372.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][48], 1);

	PlayerData[playerid][pTextdraws][49] = CreatePlayerTextDraw(playerid, 389.000000, 254.000000, "Tutup Menu");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][49], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][49], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][49], 0.329999, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][49], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][49], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][49], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][49], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][49], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][49], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][49], 453.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][49], 1);

	PlayerData[playerid][pTextdraws][50] = CreatePlayerTextDraw(playerid, 470.000000, 160.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][50], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][50], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][50], 0.569998, 8.999999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][50], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][50], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][50], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][50], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][50], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][50], 102);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][50], 190.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][50], 0);

	PlayerData[playerid][pTextdraws][51] = CreatePlayerTextDraw(playerid, 470.000000, 160.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][51], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][51], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][51], 0.910000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][51], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][51], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][51], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][51], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][51], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][51], -188);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][51], 190.000000, -9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][51], 0);

	PlayerData[playerid][pTextdraws][52] = CreatePlayerTextDraw(playerid, 198.000000, 177.000000, "~g~Nama:~w~ Emmet Jackson~n~~g~Account:~w~ Player~n~~g~Dibuat:~w~ 23 hari yang lalu~n~~g~Login terakhir:~w~ 22 hari yang lalu");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][52], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][52], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][52], 0.310000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][52], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][52], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][52], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][52], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][52], 0);

	PlayerData[playerid][pTextdraws][53] = CreatePlayerTextDraw(playerid, 195.000000, 159.500000, "#1: Emmet Jones");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][53], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][53], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][53], 0.310000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][53], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][53], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][53], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][53], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][53], 0);

	PlayerData[playerid][pTextdraws][54] = CreatePlayerTextDraw(playerid, 397.000000, 174.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][54], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][54], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][54], 0.579999, 4.699997);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][54], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][54], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][54], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][54], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][54], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][54], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][54], 53.000000, 48.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][54], 1);

	PlayerData[playerid][pTextdraws][55] = CreatePlayerTextDraw(playerid, 389.000000, 227.000000, "Tutup Menu");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][55], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][55], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][55], 0.329997, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][55], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][55], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][55], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][55], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][55], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][55], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][55], 453.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][55], 1);

	PlayerData[playerid][pTextdraws][56] = CreatePlayerTextDraw(playerid, 200.000000, 227.000000, "<<");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][56], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][56], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][56], 0.329998, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][56], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][56], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][56], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][56], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][56], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][56], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][56], 278.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][56], 1);

	PlayerData[playerid][pTextdraws][57] = CreatePlayerTextDraw(playerid, 290.000000, 227.000000, "Hapus Karakter");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][57], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][57], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][57], 0.309998, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][57], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][57], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][57], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][57], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][57], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][57], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][57], 375.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][57], 1);

	PlayerData[playerid][pTextdraws][58] = CreatePlayerTextDraw(playerid, 424.000000, 151.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][58], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][58], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][58], 0.600000, 8.699998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][58], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][58], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][58], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][58], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][58], 119);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][58], 202.000000, 11.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][58], 0);

	PlayerData[playerid][pTextdraws][59] = CreatePlayerTextDraw(playerid, 206.000000, 151.000000, "Tutorial: Spawn Point");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][59], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][59], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][59], 0.319999, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][59], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][59], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][59], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][59], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][59], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][59], 420.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][59], 0);

	PlayerData[playerid][pTextdraws][60] = CreatePlayerTextDraw(playerid, 208.000000, 164.000000, "Di sinilah Kamu akan spawn setelah tutorial~n~berakhir. Disarankan agar meminta bantuan~n~setelah spawn.");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][60], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][60], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][60], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][60], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][60], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][60], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][60], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][60], 0);

	PlayerData[playerid][pTextdraws][61] = CreatePlayerTextDraw(playerid, 208.000000, 197.000000, "Untuk meminta, tulis ~g~~h~/ac~w~. Helper~n~akan memenuhi permintaan kamu jika sedang~n~dalam masa kerja.");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][61], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][61], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][61], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][61], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][61], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][61], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][61], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][61], 0);

	PlayerData[playerid][pTextdraws][62] = CreatePlayerTextDraw(playerid, 644.000000, 1.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][62], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][62], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][62], 0.530000, 51.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][62], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][62], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][62], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][62], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][62], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][62], 119);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][62], -6.000000, 30.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][62], 0);

	PlayerData[playerid][pTextdraws][63] = CreatePlayerTextDraw(playerid, 579.000000, 122.000000, "100%");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][63], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][63], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][63], 0.290000, 0.899999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][63], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][63], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][63], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][63], 0);

	PlayerData[playerid][pTextdraws][64] = CreatePlayerTextDraw(playerid, 579.000000, 155.000000, "100%");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][64], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][64], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][64], 0.290000, 0.899999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][64], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][64], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][64], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][64], 0);

	PlayerData[playerid][pTextdraws][65] = CreatePlayerTextDraw(playerid, 536.000000, 108.000000, "hunger");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][65], 0);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][65], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][65], 0.539999, 1.400000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][65], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][65], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][65], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][65], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][65], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][65], 51.000000, 37.000000);
	PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][65], 2702);
	PlayerTextDrawSetPreviewRot(playerid, PlayerData[playerid][pTextdraws][65], 0.0000, 90.0000, 90.0000);

	PlayerData[playerid][pTextdraws][66] = CreatePlayerTextDraw(playerid, 537.000000, 140.000000, "thirst");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][66], 0);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][66], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][66], 0.539999, 1.400000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][66], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][66], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][66], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][66], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][66], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][66], 51.000000, 37.000000);
	PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][66], 1543);
	PlayerTextDrawSetPreviewRot(playerid, PlayerData[playerid][pTextdraws][66], 0.0000, 0.0000, 0.0000);

    PlayerData[playerid][pTextdraws][67] = CreatePlayerTextDraw(playerid, 535.000000, 172.000000, "armor");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][67], 0);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][67], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][67], 0.539999, 1.399999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][67], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][67], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][67], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][67], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][67], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][67], 52.000000, 39.000000);
	PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][67], 19142);
	PlayerTextDrawSetPreviewRot(playerid, PlayerData[playerid][pTextdraws][67], -20.0, -90.0, 0.0);

	PlayerData[playerid][pTextdraws][68] = CreatePlayerTextDraw(playerid, 577.000000, 186.000000, "100%");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][68], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][68], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][68], 0.289999, 0.899999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][68], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][68], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][68], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][68], 0);

	PlayerData[playerid][pTextdraws][69] = CreatePlayerTextDraw(playerid, 241.756958, 9.333335, "~b~Waypoint:~w~ Menghitung...");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][69], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][69], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][69], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][69], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][69], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][69], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][69], 0);

	PlayerData[playerid][pTextdraws][70] = CreatePlayerTextDraw(playerid, 499.000000, 101.000000, "~g~Waktu dipenjara:~w~ 00:00:00");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][70], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][70], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][70], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][70], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][70], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][70], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][70], 0);

	PlayerData[playerid][pTextdraws][71] = CreatePlayerTextDraw(playerid, 240.000000, 161.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][71], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][71], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][71], 0.519999, 9.099995);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][71], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][71], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][71], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][71], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][71], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][71], 102);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][71], 421.000000, 40.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][71], 0);

	PlayerData[playerid][pTextdraws][72] = CreatePlayerTextDraw(playerid, 326.000000, 161.000000, "Richard Jackson");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][72], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][72], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][72], 2);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][72], 0.330000, 1.199999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][72], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][72], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][72], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][72], 0);

	PlayerData[playerid][pTextdraws][73] = CreatePlayerTextDraw(playerid, 233.000000, 173.000000, "skin");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][73], 0);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][73], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][73], 0.619999, 1.400000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][73], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][73], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][73], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][73], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][73], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][73], 59.000000, 59.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][73], 0);

	PlayerData[playerid][pTextdraws][74] = CreatePlayerTextDraw(playerid, 280.000000, 179.000000, "~b~Tanggal Lahir:~w~ 17/02/1998");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][74], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][74], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][74], 0.300000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][74], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][74], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][74], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][74], 0);

	PlayerData[playerid][pTextdraws][75] = CreatePlayerTextDraw(playerid, 280.000000, 189.500000, "~b~Asal:~w~ Texas, USA");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][75], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][75], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][75], 0.300000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][75], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][75], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][75], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][75], 0);

	PlayerData[playerid][pTextdraws][76] = CreatePlayerTextDraw(playerid, 280.000000, 200.000000, "~b~Tanggal Buat:~w~ 2 bulan lalu");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][76], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][76], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][76], 0.300000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][76], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][76], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][76], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][76], 0);

	PlayerData[playerid][pTextdraws][77] = CreatePlayerTextDraw(playerid, 281.000000, 210.000000, "~b~Bermain:~w~ 3 bulan lalu");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][77], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][77], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][77], 0.300000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][77], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][77], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][77], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][77], 0);

	PlayerData[playerid][pTextdraws][78] = CreatePlayerTextDraw(playerid, 301.000000, 231.000000, "Spawn");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][78], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][78], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][78], 0.360000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][78], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][78], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][78], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][78], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][78], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][78], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][78], 340.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][78], 1);

	PlayerData[playerid][pTextdraws][79] = CreatePlayerTextDraw(playerid, 345.000000, 231.000000, "Hapus");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][79], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][79], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][79], 0.360000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][79], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][79], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][79], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][79], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][79], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][79], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][79], 382.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][79], 1);

	PlayerData[playerid][pTextdraws][80] = CreatePlayerTextDraw(playerid, 387.000000, 231.000000, "<<");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][80], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][80], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][80], 0.360000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][80], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][80], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][80], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][80], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][80], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][80], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][80], 415.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][80], 1);

	PlayerData[playerid][pTextdraws][81] = CreatePlayerTextDraw(playerid, 553.000000, 99.000000, "~b~~h~Target:~w~ 0/10");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][81], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][81], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][81], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][81], 0.390000, 1.200000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][81], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][81], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][81], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][81], 0);

	PlayerData[playerid][pTextdraws][82] = CreatePlayerTextDraw(playerid, 37.000000, 315.000000, "~b~Memuat:~w~ Retail Supplies~n~~b~Memuat Crates:~w~ 6/6");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][82], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][82], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][82], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][82], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][82], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][82], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][82], 0);
	
	// atmklik textdraw
	atmklik[playerid][0] = CreatePlayerTextDraw(playerid, 122.000007, 169.093399, "box");
	PlayerTextDrawLetterSize(playerid, atmklik[playerid][0], 0.000000, 24.079992);
	PlayerTextDrawTextSize(playerid, atmklik[playerid][0], 479.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, atmklik[playerid][0], 1);
	PlayerTextDrawColor(playerid, atmklik[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, atmklik[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, atmklik[playerid][0], 255);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, atmklik[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, atmklik[playerid][0], 255);
	PlayerTextDrawFont(playerid, atmklik[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, atmklik[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][0], 0);

	atmklik[playerid][1] = CreatePlayerTextDraw(playerid, 157.625106, 181.586700, "box");
	PlayerTextDrawLetterSize(playerid, atmklik[playerid][1], 0.000000, 20.079996);
	PlayerTextDrawTextSize(playerid, atmklik[playerid][1], 441.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, atmklik[playerid][1], 1);
	PlayerTextDrawColor(playerid, atmklik[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, atmklik[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, atmklik[playerid][1], 54271);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, atmklik[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, atmklik[playerid][1], 255);
	PlayerTextDrawFont(playerid, atmklik[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, atmklik[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][1], 0);

	atmklik[playerid][2] = CreatePlayerTextDraw(playerid, 350.799926, 179.383270, "PT. Bank VR-RP");
	PlayerTextDrawLetterSize(playerid, atmklik[playerid][2], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, atmklik[playerid][2], 3);
	PlayerTextDrawColor(playerid, atmklik[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, atmklik[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, atmklik[playerid][2], 255);
	PlayerTextDrawFont(playerid, atmklik[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, atmklik[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][2], 0);

	atmklik[playerid][3] = CreatePlayerTextDraw(playerid, 361.100128, 189.999984, "Pilih Transaksi");
	PlayerTextDrawLetterSize(playerid, atmklik[playerid][3], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, atmklik[playerid][3], 3);
	PlayerTextDrawColor(playerid, atmklik[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, atmklik[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, atmklik[playerid][3], 255);
	PlayerTextDrawFont(playerid, atmklik[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, atmklik[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][3], 0);

	atmklik[playerid][4] = CreatePlayerTextDraw(playerid, 173.199874, 201.456604, "===========================");
	PlayerTextDrawLetterSize(playerid, atmklik[playerid][4], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, atmklik[playerid][4], 1);
	PlayerTextDrawColor(playerid, atmklik[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, atmklik[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, atmklik[playerid][4], 255);
	PlayerTextDrawFont(playerid, atmklik[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, atmklik[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][4], 0);

	atmklik[playerid][5] = CreatePlayerTextDraw(playerid, 258.399780, 221.620223, "<-Cek Saldo");
	PlayerTextDrawLetterSize(playerid, atmklik[playerid][5], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, atmklik[playerid][5], 3);
	PlayerTextDrawColor(playerid, atmklik[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, atmklik[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, atmklik[playerid][5], 255);
	PlayerTextDrawFont(playerid, atmklik[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, atmklik[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][5], 0);

	atmklik[playerid][6] = CreatePlayerTextDraw(playerid, 262.800231, 247.386550, "<----- $ 500");
	PlayerTextDrawLetterSize(playerid, atmklik[playerid][6], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, atmklik[playerid][6], 3);
	PlayerTextDrawColor(playerid, atmklik[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, atmklik[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, atmklik[playerid][6], 255);
	PlayerTextDrawFont(playerid, atmklik[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, atmklik[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][6], 0);

	atmklik[playerid][7] = CreatePlayerTextDraw(playerid, 269.301208, 275.726928, "<----- $ 1000");
	PlayerTextDrawLetterSize(playerid, atmklik[playerid][7], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, atmklik[playerid][7], 3);
	PlayerTextDrawColor(playerid, atmklik[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, atmklik[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, atmklik[playerid][7], 255);
	PlayerTextDrawFont(playerid, atmklik[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, atmklik[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][7], 0);

	atmklik[playerid][8] = CreatePlayerTextDraw(playerid, 274.126495, 305.180084, "<----- $ 2000");
	PlayerTextDrawLetterSize(playerid, atmklik[playerid][8], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, atmklik[playerid][8], 3);
	PlayerTextDrawColor(playerid, atmklik[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, atmklik[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, atmklik[playerid][8], 255);
	PlayerTextDrawFont(playerid, atmklik[playerid][8], 2);
	PlayerTextDrawSetProportional(playerid, atmklik[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][8], 0);

	atmklik[playerid][9] = CreatePlayerTextDraw(playerid, 441.200073, 222.547103, "Jumlah lain ----->");
	PlayerTextDrawLetterSize(playerid, atmklik[playerid][9], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, atmklik[playerid][9], 3);
	PlayerTextDrawColor(playerid, atmklik[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, atmklik[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, atmklik[playerid][9], 255);
	PlayerTextDrawFont(playerid, atmklik[playerid][9], 2);
	PlayerTextDrawSetProportional(playerid, atmklik[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][9], 0);

	atmklik[playerid][10] = CreatePlayerTextDraw(playerid, 440.999816, 247.146667, "transfer ----->");
	PlayerTextDrawLetterSize(playerid, atmklik[playerid][10], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, atmklik[playerid][10], 3);
	PlayerTextDrawColor(playerid, atmklik[playerid][10], -1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][10], 0);
	PlayerTextDrawSetOutline(playerid, atmklik[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, atmklik[playerid][10], 255);
	PlayerTextDrawFont(playerid, atmklik[playerid][10], 2);
	PlayerTextDrawSetProportional(playerid, atmklik[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][10], 0);

	atmklik[playerid][11] = CreatePlayerTextDraw(playerid, 438.899688, 305.566497, "keluar ----->");
	PlayerTextDrawLetterSize(playerid, atmklik[playerid][11], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, atmklik[playerid][11], 3);
	PlayerTextDrawColor(playerid, atmklik[playerid][11], -1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][11], 0);
	PlayerTextDrawSetOutline(playerid, atmklik[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, atmklik[playerid][11], 255);
	PlayerTextDrawFont(playerid, atmklik[playerid][11], 2);
	PlayerTextDrawSetProportional(playerid, atmklik[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][11], 0);

	atmklik[playerid][12] = CreatePlayerTextDraw(playerid, 122.000030, 220.626953, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, atmklik[playerid][12], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, atmklik[playerid][12], 30.000000, 17.000000);
	PlayerTextDrawAlignment(playerid, atmklik[playerid][12], 1);
	PlayerTextDrawColor(playerid, atmklik[playerid][12], -3457537);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][12], 0);
	PlayerTextDrawSetOutline(playerid, atmklik[playerid][12], 0);
	PlayerTextDrawBackgroundColor(playerid, atmklik[playerid][12], 255);
	PlayerTextDrawFont(playerid, atmklik[playerid][12], 4);
	PlayerTextDrawSetProportional(playerid, atmklik[playerid][12], 0);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][12], 0);
	PlayerTextDrawSetSelectable(playerid, atmklik[playerid][12], true);

	atmklik[playerid][13] = CreatePlayerTextDraw(playerid, 121.700004, 245.486541, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, atmklik[playerid][13], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, atmklik[playerid][13], 30.099975, 16.819995);
	PlayerTextDrawAlignment(playerid, atmklik[playerid][13], 1);
	PlayerTextDrawColor(playerid, atmklik[playerid][13], -3457537);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][13], 0);
	PlayerTextDrawSetOutline(playerid, atmklik[playerid][13], 0);
	PlayerTextDrawBackgroundColor(playerid, atmklik[playerid][13], 255);
	PlayerTextDrawFont(playerid, atmklik[playerid][13], 4);
	PlayerTextDrawSetProportional(playerid, atmklik[playerid][13], 0);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][13], 0);
	PlayerTextDrawSetSelectable(playerid, atmklik[playerid][13], true);

	atmklik[playerid][14] = CreatePlayerTextDraw(playerid, 122.000038, 271.286865, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, atmklik[playerid][14], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, atmklik[playerid][14], 29.770000, 18.000000);
	PlayerTextDrawAlignment(playerid, atmklik[playerid][14], 1);
	PlayerTextDrawColor(playerid, atmklik[playerid][14], -3457537);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][14], 0);
	PlayerTextDrawSetOutline(playerid, atmklik[playerid][14], 0);
	PlayerTextDrawBackgroundColor(playerid, atmklik[playerid][14], 255);
	PlayerTextDrawFont(playerid, atmklik[playerid][14], 4);
	PlayerTextDrawSetProportional(playerid, atmklik[playerid][14], 0);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][14], 0);
	PlayerTextDrawSetSelectable(playerid, atmklik[playerid][14], true);

	atmklik[playerid][15] = CreatePlayerTextDraw(playerid, 121.699966, 301.099945, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, atmklik[playerid][15], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, atmklik[playerid][15], 30.160003, 18.620002);
	PlayerTextDrawAlignment(playerid, atmklik[playerid][15], 1);
	PlayerTextDrawColor(playerid, atmklik[playerid][15], -3457537);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][15], 0);
	PlayerTextDrawSetOutline(playerid, atmklik[playerid][15], 0);
	PlayerTextDrawBackgroundColor(playerid, atmklik[playerid][15], 255);
	PlayerTextDrawFont(playerid, atmklik[playerid][15], 4);
	PlayerTextDrawSetProportional(playerid, atmklik[playerid][15], 0);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][15], 0);
	PlayerTextDrawSetSelectable(playerid, atmklik[playerid][15], true);

	atmklik[playerid][16] = CreatePlayerTextDraw(playerid, 447.999359, 221.140747, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, atmklik[playerid][16], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, atmklik[playerid][16], 30.540000, 18.000000);
	PlayerTextDrawAlignment(playerid, atmklik[playerid][16], 1);
	PlayerTextDrawColor(playerid, atmklik[playerid][16], -3457537);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][16], 0);
	PlayerTextDrawSetOutline(playerid, atmklik[playerid][16], 0);
	PlayerTextDrawBackgroundColor(playerid, atmklik[playerid][16], 255);
	PlayerTextDrawFont(playerid, atmklik[playerid][16], 4);
	PlayerTextDrawSetProportional(playerid, atmklik[playerid][16], 0);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][16], 0);
	PlayerTextDrawSetSelectable(playerid, atmklik[playerid][16], true);

	atmklik[playerid][17] = CreatePlayerTextDraw(playerid, 447.799591, 244.353347, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, atmklik[playerid][17], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, atmklik[playerid][17], 31.000000, 18.000000);
	PlayerTextDrawAlignment(playerid, atmklik[playerid][17], 1);
	PlayerTextDrawColor(playerid, atmklik[playerid][17], -3457537);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][17], 0);
	PlayerTextDrawSetOutline(playerid, atmklik[playerid][17], 0);
	PlayerTextDrawBackgroundColor(playerid, atmklik[playerid][17], 255);
	PlayerTextDrawFont(playerid, atmklik[playerid][17], 4);
	PlayerTextDrawSetProportional(playerid, atmklik[playerid][17], 0);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][17], 0);
	PlayerTextDrawSetSelectable(playerid, atmklik[playerid][17], true);

	atmklik[playerid][18] = CreatePlayerTextDraw(playerid, 447.999786, 302.400054, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, atmklik[playerid][18], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, atmklik[playerid][18], 31.000000, 18.000000);
	PlayerTextDrawAlignment(playerid, atmklik[playerid][18], 1);
	PlayerTextDrawColor(playerid, atmklik[playerid][18], -3457537);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][18], 0);
	PlayerTextDrawSetOutline(playerid, atmklik[playerid][18], 0);
	PlayerTextDrawBackgroundColor(playerid, atmklik[playerid][18], 255);
	PlayerTextDrawFont(playerid, atmklik[playerid][18], 4);
	PlayerTextDrawSetProportional(playerid, atmklik[playerid][18], 0);
	PlayerTextDrawSetShadow(playerid, atmklik[playerid][18], 0);
	PlayerTextDrawSetSelectable(playerid, atmklik[playerid][18], true);

}

stock ShowPlayerFooter(playerid, string[], time = 5000) {
	if (PlayerData[playerid][pShowFooter]) {
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][39]);
	    KillTimer(PlayerData[playerid][pFooterTimer]);
	}
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][39], string);
	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][39]);
	PlayerData[playerid][pShowFooter] = true;
	PlayerData[playerid][pFooterTimer] = SetTimerEx("HidePlayerFooter", time, false, "d", playerid);
}

forward HidePlayerFooter(playerid);
public HidePlayerFooter(playerid) {

	if (!PlayerData[playerid][pShowFooter])
	    return 0;
	PlayerData[playerid][pShowFooter] = false;
	return PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][39]);
}

ResetStatistics(playerid)
{
	for (new i = 0; i < 3; i ++) {
	    PlayerCharacters[playerid][i][0] = 0;

	    for (new j = 0; j < 9; j ++) {
	    	AccessoryData[playerid][i][j] = 0.0;
	    }
	}
	for (new i = 0; i != MAX_INVENTORY; i ++) {
	    InventoryData[playerid][i][invExists] = false;
	    InventoryData[playerid][i][invModel] = 0;
	    InventoryData[playerid][i][invQuantity] = 0;
	}
	for (new i = 0; i < 12; i ++) {
	    PlayerData[playerid][pGuns][i] = 0;
	    PlayerData[playerid][pAmmo][i] = 0;
	}
	for (new i = 0; i != MAX_HOUSE_FURNITURE; i ++) {
	    ListedFurniture[playerid][i] = -1;
	}
	for (new i = 0; i < MAX_LISTED_ITEMS; i ++) {
	    NearestItems[playerid][i] = -1;
	}
	for (new i = 0; i != MAX_CONTACTS; i ++) {
	    ContactData[playerid][i][contactExists] = false;
	    ContactData[playerid][i][contactID] = 0;
	    ContactData[playerid][i][contactNumber] = 0;
	    ListedContacts[playerid][i] = -1;
	}
	for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) {
	    LocationData[playerid][i][locationExists] = false;
	    LocationData[playerid][i][locationID] = 0;
	}
	for (new i = 0; i != MAX_PLAYER_TICKETS; i ++) {
	    TicketData[playerid][i][ticketID] = 0;
		TicketData[playerid][i][ticketExists] = false;
		TicketData[playerid][i][ticketFee] = 0;
	}
	BoomboxData[playerid][boomboxPlaced] = 0;
	BoomboxData[playerid][boomboxPos][0] = 0.0;
	BoomboxData[playerid][boomboxPos][1] = 0.0;
	BoomboxData[playerid][boomboxPos][2] = 0.0;

	PlayerData[playerid][pID] = -1;
	PlayerData[playerid][pAccount] = 0;
	PlayerData[playerid][pLogged] = 0;
	PlayerData[playerid][pLoginAttempts] = 0;
	PlayerData[playerid][pCreated] = 0;
	PlayerData[playerid][pGender] = 1;
	PlayerData[playerid][pBirthdate][0] = 0;
	PlayerData[playerid][pOrigin][0] = 0;
	PlayerData[playerid][pSkin] = 98;
    PlayerData[playerid][pEditType] = 0;
    PlayerData[playerid][pGlasses] = 0;
    PlayerData[playerid][pHat] = 0;
    PlayerData[playerid][pBandana] = 0;
    PlayerData[playerid][pPos] = 0.0;
    PlayerData[playerid][pInterior] = 0;
    PlayerData[playerid][pWorld] = 0;
    PlayerData[playerid][pCharacter] = 0;
    PlayerData[playerid][pKilled] = 0;
    PlayerData[playerid][pHospital] = -1;
    PlayerData[playerid][pHospitalInt] = 0;
    PlayerData[playerid][pHospitalTime] = 0;
    PlayerData[playerid][pRepairTime] = 0;
    PlayerData[playerid][pMoney] = 250;
    PlayerData[playerid][pBankMoney] = 250;
    PlayerData[playerid][pSpawnPoint] = 0;
    PlayerData[playerid][pSavings] = 0;
    PlayerData[playerid][pAdmin] = 0;
	PlayerData[playerid][pShowFooter] = 0;
	PlayerData[playerid][pReportTime] = 0;
	PlayerData[playerid][pHelpTime] = 0;
	PlayerData[playerid][pSpectator] = INVALID_PLAYER_ID;
	PlayerData[playerid][pJailTime] = 0;
	PlayerData[playerid][pKicked] = 0;
	PlayerData[playerid][pMuted] = 0;
	PlayerData[playerid][pSpamCount] = 0;
	PlayerData[playerid][pCommandCount] = 0;
	PlayerData[playerid][pDisplayStats] = 0;
	PlayerData[playerid][pToggleGlasses] = 0;
	PlayerData[playerid][pToggleHat] = 0;
	PlayerData[playerid][pToggleBandana] = 0;
	PlayerData[playerid][pToggleArmor] = 0;
    PlayerData[playerid][pLastShot] = INVALID_PLAYER_ID;
    PlayerData[playerid][pShotTime] = 0;
	PlayerData[playerid][pInventoryItem] = 0;
	PlayerData[playerid][pStorageItem] = 0;
	PlayerData[playerid][pStorageSelect] = 0;
	PlayerData[playerid][pProductModify] = 0;
	PlayerData[playerid][pHelper] = 0;
	PlayerData[playerid][pDonator] = 0;
	PlayerData[playerid][pFightStyle] = 4;
	PlayerData[playerid][pTutorial] = 0;
	PlayerData[playerid][pTutorialTime] = 0;
	PlayerData[playerid][pTutorialStage] = 0;
	PlayerData[playerid][pHouse] = -1;
	PlayerData[playerid][pBusiness] = -1;
	PlayerData[playerid][pEntrance] = -1;
	PlayerData[playerid][pGasPump] = -1;
	PlayerData[playerid][pGasStation] = -1;
    PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pEditPump] = -1;
	PlayerData[playerid][pEditFurniture] = -1;
	PlayerData[playerid][pEditGate] = -1;
	PlayerData[playerid][pEditRack] = -1;
	PlayerData[playerid][pSelectFurniture] = 0;
	PlayerData[playerid][pRefill] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pRefillPrice] = 0;
	PlayerData[playerid][pHouseSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pHouseOffered] = -1;
	PlayerData[playerid][pHouseValue] = 0;
	PlayerData[playerid][pBusinessSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pBusinessOffered] = -1;
	PlayerData[playerid][pBusinessValue] = 0;
	PlayerData[playerid][pCarSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pCarOffered] = -1;
	PlayerData[playerid][pCarValue] = 0;
	PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pShakeType] = 0;
	PlayerData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFoodSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFoodType] = 0;
	PlayerData[playerid][pFoodPrice] = 0;
	PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFactionOffered] = -1;
	PlayerData[playerid][pLoanOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pLoanOffered] = -1;
	PlayerData[playerid][pPhone] = 0;
	PlayerData[playerid][pPhoneOff] = 0;
	PlayerData[playerid][pLottery] = 0;
	PlayerData[playerid][pLotteryB] = 0;
	PlayerData[playerid][pHunger] = 100;
	PlayerData[playerid][pThirst] = 100;
	PlayerData[playerid][pHungerTime] = 0;
	PlayerData[playerid][pThirstTime] = 0;
	PlayerData[playerid][pCooking] = 0;
	PlayerData[playerid][pCookingTime] = 0;
	PlayerData[playerid][pPlayingHours] = 0;
	PlayerData[playerid][pMinutes] = 0;
	PlayerData[playerid][pArmorStatus] = 0;
	PlayerData[playerid][pArmorShown] = 0;
	PlayerData[playerid][pClothesType] = 0;
	PlayerData[playerid][pDrivingTest] = 0;
	PlayerData[playerid][pTestStage] = 0;
	PlayerData[playerid][pTestWarns] = 0;
	PlayerData[playerid][pFurnitureType] = 0;
	PlayerData[playerid][pJob] = 0;
	PlayerData[playerid][pTaxiFee] = 0;
	PlayerData[playerid][pTaxiTime] = 0;
	PlayerData[playerid][pTaxiPlayer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pTaxiDuty] = 0;
	PlayerData[playerid][pFirstAid] = 0;
	PlayerData[playerid][pIncomingCall] = 0;
	PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
	PlayerData[playerid][pMining] = 0;
	PlayerData[playerid][pMineTime] = 0;
	PlayerData[playerid][pMineCount] = 0;
	PlayerData[playerid][pMinedRock] = 0;
	PlayerData[playerid][pCarryTrash] = 0;
	PlayerData[playerid][pCarryCrate] = -1;
	PlayerData[playerid][pCrafting] = 0;
	PlayerData[playerid][pOpeningCrate] = 0;
	PlayerData[playerid][pHarvesting] = 0;
	PlayerData[playerid][pFaction] = -1;
	PlayerData[playerid][pFactionID] = -1;
	PlayerData[playerid][pFactionRank] = 0;
	PlayerData[playerid][pFactionDivision] = 0;
	PlayerData[playerid][pFactionEdit] = -1;
	PlayerData[playerid][pSelectedSlot] = -1;
	PlayerData[playerid][pOnDuty] = 0;
	PlayerData[playerid][pTazer] = 0;
	PlayerData[playerid][pBeanBag] = 0;
	PlayerData[playerid][pStunned] = 0;
	PlayerData[playerid][pCuffed] = 0;
    PlayerData[playerid][pDragged] = 0;
    PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	PlayerData[playerid][pPrisoned] = 0;
	PlayerData[playerid][pInjured] = 0;
	PlayerData[playerid][pWarrants] = 0;
    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pTrackTime] = 0;
	PlayerData[playerid][pCP] = 0;
	PlayerData[playerid][pBroadcast] = 0;
	PlayerData[playerid][pNewsGuest] = INVALID_PLAYER_ID;
	PlayerData[playerid][pMuteTime] = 0;
	PlayerData[playerid][pTransfer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pWaypoint] = 0;
	PlayerData[playerid][pWaypointPos][0] = 0.0;
	PlayerData[playerid][pWaypointPos][1] = 0.0;
	PlayerData[playerid][pWaypointPos][2] = 0.0;
	PlayerData[playerid][pFuelCan] = 0;
	PlayerData[playerid][pDisableOOC] = 0;
	PlayerData[playerid][pDisablePM] = 0;
	PlayerData[playerid][pDisableFaction] = 0;
	PlayerData[playerid][pDisableHelper] = 0;
	PlayerData[playerid][pDisableBC] = 0;
	PlayerData[playerid][pNameChange][0] = 0;
	PlayerData[playerid][pDrugTime] = 0;
	PlayerData[playerid][pDrugUsed] = 0;
	PlayerData[playerid][pFingerTime] = 0;
	PlayerData[playerid][pFingerItem] = 0;
	PlayerData[playerid][pWeapon] = 0;
	PlayerData[playerid][pBackpackLoot] = -1;
    PlayerData[playerid][pChannel] = 0;
    PlayerData[playerid][pChannel2] = 0;
    PlayerData[playerid][pChannel3] = 0;
    PlayerData[playerid][pChannel4] = 1;
	PlayerData[playerid][pEmergency] = 0;
	PlayerData[playerid][pDealerCall] = 0;
	PlayerData[playerid][pDealerCallMP] = 0;
	PlayerData[playerid][pDealerCallPP] = 0;
	PlayerData[playerid][pDealerCallSMGP] = 0;
	PlayerData[playerid][pDealerCallSP] = 0;
	PlayerData[playerid][pDealerCallRP] = 0;
	PlayerData[playerid][pDealerCallDP] = 0;
	PlayerData[playerid][pPlaceAd] = 0;
	PlayerData[playerid][pLoanAsk] = 0;
	PlayerData[playerid][pRangeBooth] = -1;
	PlayerData[playerid][pTargets] = 0;
	PlayerData[playerid][pTargetLevel] = 0;
	PlayerData[playerid][pVendorTime] = 0;
	PlayerData[playerid][pLoopAnim] = 0;
	PlayerData[playerid][pExecute] = 0;
	PlayerData[playerid][pBoombox] = INVALID_PLAYER_ID;
	PlayerData[playerid][pTakeItems] = INVALID_PLAYER_ID;
	PlayerData[playerid][pDrinkBar] = INVALID_PLAYER_BAR_ID;
	PlayerData[playerid][pDrinking] = 0;
	PlayerData[playerid][pDrinkTime] = 0;
	PlayerData[playerid][pTaxiCalled] = 0;
	PlayerData[playerid][pMechanicCalled] = 0;
	PlayerData[playerid][pSpeedTime] = 0;
	PlayerData[playerid][pMarker] = 0;
	PlayerData[playerid][pBleeding] = 0;
	PlayerData[playerid][pBleedTime] = 0;
	PlayerData[playerid][pLoadType] = 0;
	PlayerData[playerid][pLoadCrate] = 0;
	PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pUnloading] = -1;
	PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pShipment] = -1;
	PlayerData[playerid][pDeliverShipment] = 0;
	PlayerData[playerid][pHoldWeapon] = 0;
	PlayerData[playerid][pUsedMagazine] = 0;
	PlayerData[playerid][pAdvertise][0] = 0;
	PlayerData[playerid][pFreeze] = 0;
	PlayerData[playerid][pTask] = 0;
    PlayerData[playerid][pBankTask] = 0;
    PlayerData[playerid][pStoreTask] = 0;
    PlayerData[playerid][pTestTask] = 0;
    PlayerData[playerid][pSorting] = -1;
    PlayerData[playerid][pSortCrate] = 0;
    PlayerData[playerid][pHUD] = 1;
    PlayerData[playerid][pHelperDuty] = 0;
    PlayerData[playerid][pEventDuty] = 0;
    PlayerData[playerid][pAdminDuty] = 0;
    PlayerData[playerid][pDonatorDuty] = 0;
    PlayerData[playerid][pSeekHelp] = 0;
    PlayerData[playerid][pMaskID] = random(90000) + 10000;
    PlayerData[playerid][pMaskOn] = 0;
    PlayerData[playerid][pFactionMod] = 0;
    PlayerData[playerid][pSwatMember] = 0;
    PlayerData[playerid][pClothes1] = 1;
    PlayerData[playerid][pClothes2] = 1;
    PlayerData[playerid][pClothes3] = 1;
    PlayerData[playerid][pCapacity] = 35;
    PlayerData[playerid][pPlayRadio] = 0;
    PlayerData[playerid][pGraffiti] = -1;
    PlayerData[playerid][pGraffitiTime] = 0;
    PlayerData[playerid][pGraffitiColor] = 0;
    PlayerData[playerid][pEditGraffiti] = -1;
    PlayerData[playerid][pAdminHide] = 0;
    PlayerData[playerid][pRep] = 0;
	PlayerData[playerid][pDonatorTime] = 0;
    PlayerData[playerid][pDetectorTime] = 0;
    PlayerData[playerid][pPicking] = 0;
    PlayerData[playerid][pPickCar] = -1;
	PlayerData[playerid][pPickTime] = 0;
    PlayerData[playerid][pNameTag] = Text3D:INVALID_3DTEXT_ID;
    ResetWarnings(playerid);
}

ResetNameTag(playerid)
{
    foreach (new i : Player) {
		ShowPlayerNameTagForPlayer(i, playerid, 1);
	}
	if (IsValidDynamic3DTextLabel(PlayerData[playerid][pNameTag]))
	    DestroyDynamic3DTextLabel(PlayerData[playerid][pNameTag]);

    PlayerData[playerid][pNameTag] = Text3D:INVALID_3DTEXT_ID;
    return 1;
}

ResetWarnings(playerid)
{
    PlayerData[playerid][pWarnings] = 0;
   	PlayerData[playerid][pWarn1][0] = 0;
    PlayerData[playerid][pWarn2][0] = 0;
}

GetNumberOwner(number)
{
	foreach (new i : Player) if (PlayerData[i][pPhone] == number && Inventory_HasItem(i, "Cellphone")) {
		return i;
	}
	return INVALID_PLAYER_ID;
}

IsPlayerInsideTaxi(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (GetVehicleModel(vehicleid) == 420 || GetVehicleModel(vehicleid) == 438)
	{
	    foreach (new i : Player)
		{
			if ((i != playerid) && (PlayerData[i][pJob] == JOB_TAXI && PlayerData[i][pTaxiDuty] && GetPlayerState(i) == PLAYER_STATE_DRIVER) && GetPlayerVehicleID(i) == vehicleid)
				return 1;
		}
	}
	return 0;
}

SelectCharacter(playerid, id)
{
	PlayerData[playerid][pCharacter] = id;

	if (!PlayerCharacters[playerid][id - 1][0])
	    return Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Buat Karakter", "Masukan nama karaktermu dibawah ini:\n\nWarning: Nama karaktermu harus berformat Namadepan_Namabelakang dan tidak lebih dari 24 karakter.", "Buat", "Batal");

	static
	    query[200];

	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][72], PlayerCharacters[playerid][id - 1]);

	format(query, sizeof(query), "SELECT `Skin`, `Birthdate`, `Origin`, `CreateDate`, `LastLogin` FROM `characters` WHERE `Character` = '%s'", PlayerCharacters[playerid][id - 1]);
	mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_SHOW_CHARACTER);

	return 1;
}

IsNumeric(const str[])
{
	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if (i == 0 && str[0] == '-')
			continue;

	    else if (str[i] < '0' || str[i] > '9')
			return 0;
	}
	return 1;
}

ReturnWeaponName(weaponid)
{
	static
		name[32];

	GetWeaponName(weaponid, name, sizeof(name));

	if (!weaponid)
	    name = "None";

	else if (weaponid == 18)
	    name = "Molotov Cocktail";

	else if (weaponid == 44)
	    name = "Nightvision";

	else if (weaponid == 45)
	    name = "Infrared";

	return name;
}

ReturnVehicleModelName(model)
{
	new
	    name[32] = "None";

    if (model < 400 || model > 611)
	    return name;

	format(name, sizeof(name), g_arrVehicleNames[model - 400]);
	return name;
}

stock ReturnVehicleName(vehicleid)
{
	new
		model = GetVehicleModel(vehicleid),
		name[32] = "None";

    if (model < 400 || model > 611)
	    return name;

	format(name, sizeof(name), g_arrVehicleNames[model - 400]);
	return name;
}

GetVehicleModelByName(const name[])
{
	if (IsNumeric(name) && (strval(name) >= 400 && strval(name) <= 611))
	    return strval(name);

	for (new i = 0; i < sizeof(g_arrVehicleNames); i ++)
	{
	    if (strfind(g_arrVehicleNames[i], name, true) != -1)
	    {
	        return i + 400;
		}
	}
	return 0;
}

GetVehicleDriver(vehicleid) {
	foreach (new i : Player) {
		if (GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicleid) return i;
	}
	return INVALID_PLAYER_ID;
}

stock IsWindowedVehicle(vehicleid)
{
	static const g_aWindowStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1,
	    1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1,
		1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
	new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aWindowStatus[modelid - 400]);
}

stock IsNewsVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 488, 582: return 1;
	}
	return 0;
}

stock IsACruiser(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 523, 488, 548, 563, 427, 490, 528, 596..599, 426, 579, 416, 407, 601, 560, 405, 411, 428, 433, 470, 482, 497, 525, 541, 566: return 1;
	}
	return 0;
}

stock IsADetectiveVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 560, 426, 507, 490: return 1;
	}
	return 0;
}

stock IsDoorVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 400..424, 426..429, 431..440, 442..445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475:
		    return 1;

		case 477..480, 482, 483, 486, 489, 490..492, 494..496, 498..500, 502..508, 514..518, 524..529, 533..536:
		    return 1;

		case 540..547, 549..552, 554..562, 565..568, 573, 575, 576, 578..580, 582, 585, 587..589, 596..605, 609:
			return 1;
	}
	return 0;
}

stock IsAMotorbike(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 448, 461, 462, 463, 468, 471, 521, 522, 523, 581, 586: return 1;
	}
	return 0;
}

stock IsSpeedoVehicle(vehicleid)
{
	if (GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || GetVehicleModel(vehicleid) == 481 || !IsEngineVehicle(vehicleid)) {
	    return 0;
	}
	return 1;
}

stock IsLoadableVehicle(vehicleid)
{
	new modelid = GetVehicleModel(vehicleid);

	if (GetVehicleTrailer(vehicleid))
	    modelid = GetVehicleModel(GetVehicleTrailer(vehicleid));

	switch (modelid) {
	    case 400..609: return 1;
	}
	return 0;
}

stock GetMaxCrates(vehicleid)
{
	new crates;

	switch (GetVehicleModel(vehicleid)) {
	    case 400..609: crates = 10;
	    //case 414: crates = 8;
	    //case 456, 499: crates = 6;
	    //case 435, 591: crates = 15;
	}
	return crates;
}

stock IsCrateInUse(crateid)
{
	if (CrateData[crateid][crateVehicle] != INVALID_VEHICLE_ID && IsValidVehicle(CrateData[crateid][crateVehicle])) {
	    return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pCarryCrate] == crateid && GetPlayerSpecialAction(i) == SPECIAL_ACTION_CARRY) {
	    return 1;
	}
	return 0;
}

stock GetVehicleCrates(vehicleid)
{
	if (!IsValidVehicle(vehicleid) || !IsLoadableVehicle(vehicleid))
		return 0;

	new crates;

	for (new i = 0; i != MAX_CRATES; i ++) if (CrateData[i][crateExists] && CrateData[i][crateVehicle] == vehicleid) {
	    crates++;
	}
 	return crates;
}

stock IsABoat(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595: return 1;
	}
	return 0;
}
stock IsABike(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 448, 461..463, 468, 521..523, 581, 586, 481, 509, 510: return 1;
	}
	return 0;
}

stock IsAPlane(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 460, 464, 476, 511, 512, 513, 519, 520, 553, 577, 592, 593: return 1;
	}
	return 0;
}

stock IsAHelicopter(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563: return 1;
	}
	return 0;
}

stock IsEngineVehicle(vehicleid)
{
	static const g_aEngineStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
    new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aEngineStatus[modelid - 400]);
}

stock Float:GetPlayerSpeed(playerid)
{
	static Float:velocity[3];

	if (IsPlayerInAnyVehicle(playerid))
	    GetVehicleVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);
	else
	    GetPlayerVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);

	return floatsqroot((velocity[0] * velocity[0]) + (velocity[1] * velocity[1]) + (velocity[2] * velocity[2])) * 100.0;
}

stock ResetBombInfo(vehicleid)
{
	g_Bomb_Vehicles[vehicleid][bv_i_ArmedType] = 0;
	g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer] = 0;
	g_Bomb_Vehicles[vehicleid][bv_i_BombOwner] = 0;
	g_Bomb_Vehicles[vehicleid][bv_b_BombActivated] = false;
	g_Bomb_Vehicles[vehicleid][bv_b_BombDisarmed] = false;
}


stock CarBomb_OnVehicleStart(vehicleid)
{
	if(g_Bomb_Vehicles[vehicleid][bv_i_ArmedType] != VEHICLE_BOMB_TYPE_UNARMED && g_Bomb_Vehicles[vehicleid][bv_b_BombActivated] == false)
	{
		switch(g_Bomb_Vehicles[vehicleid][bv_i_ArmedType])
		{
			case VEHICLE_BOMB_TYPE_IGNITION:
			{
				BombActivated(vehicleid);
				return 1;
			}

			case VEHICLE_BOMB_TYPE_SPEED:
			{
				SetTimerEx("ArmSpeedBomb", g_Bomb_Vehicles[vehicleid][bv_i_ExplosionTimer] * 1000, false, "d", vehicleid);
				return 1;
			}
		}
	}

	return 1;
}

stock GetGateByID(sqlid)
{
	for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateID] == sqlid)
	    return i;

	return -1;
}

stock GetHouseByID(sqlid)
{
	for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && HouseData[i][houseID] == sqlid)
	    return i;

	return -1;
}

stock GetBusinessByID(sqlid)
{
	for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizID] == sqlid)
	    return i;

	return -1;
}

stock GetEntranceByID(sqlid)
{
	for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceID] == sqlid)
	    return i;

	return -1;
}

stock GetElapsedTime(time, &hours, &minutes, &seconds)
{
	hours = 0;
	minutes = 0;
	seconds = 0;

	if (time >= 3600)
	{
		hours = (time / 3600);
		time -= (hours * 3600);
	}
	while (time >= 60)
	{
	    minutes++;
	    time -= 60;
	}
	return (seconds = time);
}

stock GetDuration(time)
{
	new
	    str[32];

	if (time < 0 || time == gettime()) {
	    format(str, sizeof(str), "Tidak Pernah");
	    return str;
	}
	else if (time < 60)
		format(str, sizeof(str), "%d detik", time);

	else if (time >= 0 && time < 60)
		format(str, sizeof(str), "%d detik", time);

	else if (time >= 60 && time < 3600)
		format(str, sizeof(str), (time >= 120) ? ("%d menit") : ("%d menit"), time / 60);

	else if (time >= 3600 && time < 86400)
		format(str, sizeof(str), (time >= 7200) ? ("%d jam") : ("%d jam"), time / 3600);

	else if (time >= 86400 && time < 2592000)
 		format(str, sizeof(str), (time >= 172800) ? ("%d hari") : ("%d hari"), time / 86400);

	else if (time >= 2592000 && time < 31536000)
 		format(str, sizeof(str), (time >= 5184000) ? ("%d bulan") : ("%d bulan"), time / 2592000);

	else if (time >= 31536000)
		format(str, sizeof(str), (time >= 63072000) ? ("%d tahun") : ("%d tahun"), time / 31536000);

	strcat(str, " yang lalu");

	return str;
}
stock CreateSnow(playerid)
{
		if(snowOn[playerid] == 1) return 0;
		new Float:apPos[3];
		GetPlayerPos(playerid, apPos[0], apPos[1], apPos[2]);
		for(new i = 0; i < MAX_SNOW_OBJECTS; i++)
		{
			snowObject[playerid][i] = CreateDynamicObject(18864, apPos[0] + random(25), apPos[1] + random (25), apPos[2] - 5, random(100), random(100), random(100), -1, -1, playerid);
		}
		snowOn[playerid] = 1;
		updateTimer[playerid] = SetTimerEx("UpdateSnow", UPDATE_INTERVAL, true, "i", playerid);
		return 1;
}
stock DeleteSnow(playerid)
{
	if(snowOn[playerid] == 0) return 0;
	for(new i = 0; i < MAX_SNOW_OBJECTS; i++) DestroyDynamicObject(snowObject[playerid][i]);
	KillTimer(updateTimer[playerid]);
	snowOn[playerid] = 0;
	return 1;
}
stock GetEngineStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (engine != 1)
		return 0;

	return 1;
}

stock GetHoodStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (bonnet != 1)
		return 0;

	return 1;
}

stock GetTrunkStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (boot != 1)
		return 0;

	return 1;
}

stock GetLightStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (lights != 1)
		return 0;

	return 1;
}

stock SetEngineStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, status, lights, alarm, doors, bonnet, boot, objective);
}

stock SetLightStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, status, alarm, doors, bonnet, boot, objective);
}

stock SetTrunkStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, status, objective);
}

stock SetHoodStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, status, boot, objective);
}

public OnObjectMoved(objectid)
{
	for (new i = 0; i < MAX_BOOTHS; i ++) if (g_BoothUsed[i] && g_BoothObject[i] == objectid) {
	    DestroyDynamicObject(g_BoothObject[i]);

	    return SetTimerEx("UpdateBooth", 3000, false, "dd", Booth_GetPlayer(i), i);
	}
	return 1;
}
/*
    new i = Baller;
    if(ShootingBall == 2)
    {
		BallDown2(i);
		return 1;
    }
    else if(ShootingBall == 3)
    {
		BallDown3(i);
		return 1;
    }
    else if(ShootingBall == 4)
    {
		BallDown4(i);
		return 1;
    }
    else if(ShootingBall == 5)
    {
		BallDown5(i);
		return 1;
    }
    else if(ShootingBall == 6)
    {
        ApplyAnimation(i,"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1);
		HavingBall[i] = 1;
		Anim[i] = 0;
    }
    if(BallBounce == 1)
    {
        new Float:x, Float:y, Float:z;
		GetObjectPos(Ball, x, y, z);
		MoveObject(Ball, x, y, z+1.2, 4);
		BallBounce = 2;
    }
    else if(BallBounce == 2)
    {
        new Float:x, Float:y, Float:z;
		GetObjectPos(Ball, x, y, z);
		MoveObject(Ball, x, y, z-1.2, 4);
		BallBounce = 3;
    }
    else if(BallBounce == 3)
    {
        new Float:x, Float:y, Float:z;
		GetObjectPos(Ball, x, y, z);
		MoveObject(Ball, x, y, z+0.8, 3);
		BallBounce = 4;
    }
        else if(BallBounce == 4)
    {
        new Float:x, Float:y, Float:z;
		GetObjectPos(Ball, x, y, z);
		MoveObject(Ball, x, y, z-0.8, 3);
		BallBounce = 5;
    }
    else if(BallBounce == 5)
    {
        new Float:x, Float:y, Float:z;
		GetObjectPos(Ball, x, y, z);
		MoveObject(Ball, x, y, z+0.5, 2);
		BallBounce = 6;
    }
    else if(BallBounce == 6)
    {
        new Float:x, Float:y, Float:z;
		GetObjectPos(Ball, x, y, z);
		MoveObject(Ball, x, y, z-0.5, 2);
		BallBounce = 7;
	}
	else if(BallBounce == 7)
    {
        new Float:x, Float:y, Float:z;
		GetObjectPos(Ball, x, y, z);
		MoveObject(Ball, x, y, z+0.2, 1);
		BallBounce = 8;
    }
    else if(BallBounce == 8)
    {
		new Float:x, Float:y, Float:z;
		GetObjectPos(Ball, x, y, z);
		MoveObject(Ball, x, y, z-0.2, 1);
		BallBounce = 0;
	}
    if(!HavingBall[i]) return 1;
	
	new Keys, ud, lr;
	GetPlayerKeys(i, Keys, ud, lr);
    if(Anim[i])
    {
        switch(BallStatus)
		{
			case 0:
			{
				BallStatus = 1;
				new Float:x, Float:y, Float:z;
				GetPlayerPos(i, x, y, z);
				StopObject(Ball);
				new Float:x2, Float:y2;
				GetXYInFrontOfPlayer(i, x2, y2, 0.4);
				MoveObject(Ball, x2, y2, z+0.1, 5.5);
			}
			case 1:
			{
				BallStatus = 0;
				new Float:x, Float:y, Float:z;
				GetPlayerPos(i, x, y, z);
				StopObject(Ball);
				new Float:x2, Float:y2;
				GetXYInFrontOfPlayer(i, x2, y2, 0.4);
				MoveObject(Ball, x2, y2, z-0.8, 5.5);
			}
		}
		return 1;
    }
    if(Keys & KEY_SPRINT)
	{
		ApplyAnimation(i,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
		switch(BallStatus)
		{
			case 0:
			{
				BallStatus = 1;
				new Float:x, Float:y, Float:z;
				GetPlayerPos(i, x, y, z);
				StopObject(Ball);
				new Float:x2, Float:y2;
				GetXYInFrontOfPlayer(i, x2, y2, 1.5);
				MoveObject(Ball, x2, y2, z+0.1, 8);
			}
			case 1:
			{
				BallStatus = 0;
				new Float:x, Float:y, Float:z;
				GetPlayerPos(i, x, y, z);
				StopObject(Ball);
				new Float:x2, Float:y2;
				GetXYInFrontOfPlayer(i, x2, y2, 1.5);
				MoveObject(Ball, x2, y2, z-0.8, 8);
			}
		}
		return 1;
    }
    else
    {
        ApplyAnimation(i,"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1);
    }
		switch(BallStatus)
		{
			case 0:
			{
				BallStatus = 1;
				new Float:x, Float:y, Float:z;
				GetPlayerPos(i, x, y, z);
				StopObject(Ball);
				new Float:x2, Float:y2;
				GetXYInFrontOfPlayer(i, x2, y2, 1.2);
				MoveObject(Ball, x2, y2, z+0.1, 5);
			}
			case 1:
			{
				BallStatus = 0;
				new Float:x, Float:y, Float:z;
				GetPlayerPos(i, x, y, z);
				StopObject(Ball);
				new Float:x2, Float:y2;
				GetXYInFrontOfPlayer(i, x2, y2, 1.2);
				MoveObject(Ball, x2, y2, z-0.8, 5);
			}
		}
		return 1;
}*/

forward OnQueryExecute(playerid, query[]);
public OnQueryExecute(playerid, query[])
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (strfind(query, "SELECT", true) != -1)
		Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Jalankan Query", "Sukses: MySQL menghasilkan %d rows dari query mu.\n\nHarap tentukan query MySQL untuk dijalankan di bawah ini:", "Jalankan", "Kembali", rows);

	else
		Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Jalankan Query", "Sukses: Query berhasil dijalankan (affected rows: %d).\n\nHarap tentukan query MySQL untuk dijalankan di bawah ini:", "Jalankan", "Kembali", cache_affected_rows());

	PlayerData[playerid][pExecute] = 0;
	return 1;
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
	foreach (new i : Player)
	{
		if (PlayerData[i][pAdmin] >= 6 && PlayerData[i][pExecute])
		{
	    	PlayerData[i][pExecute] = 0;
	    	Dialog_Show(i, ExecuteQuery, DIALOG_STYLE_INPUT, "Jalankan Querry", "Error: \"%s\"\n\nHarap tentukan query MySQL untuk dijalankan di bawah ini:", "Jalankan", "Kembali", error);
		}
	}
 	printf("** [MySQL]: %s", error);
	Log_Write("logs/mysql_log.txt", "[%s] %s: %s", ReturnDate(), (callback[0]) ? (callback) : ("n/a"), error);
	return 1;
}

forward OnQueryFinished(extraid, threadid);
public OnQueryFinished(extraid, threadid)
{
	if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    fields
	;
	switch (threadid)
	{
	    case THREAD_CREATE_CHAR:
	    {
	        PlayerData[extraid][pID] = cache_insert_id(g_iHandle);
	        PlayerData[extraid][pLogged] = 1;

			SQL_SaveCharacter(extraid);

			PlayerData[extraid][pID] = -1;
			PlayerData[extraid][pLogged] = 0;
	    }
		case THREAD_CHECK_ACCOUNT:
		{
		    cache_get_data(rows, fields, g_iHandle);

		    if (rows)
			{
			    static
			        loginDate[36];

			    cache_get_row(0, 0, loginDate, g_iHandle);

				format(PlayerData[extraid][pLoginDate], 36, loginDate);
		        Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "Masuk", "Selamat datang kembali di Vandora Ravens Roleplay!\n\nAkunmu terakhir login pada: %s.\n\nSilahkan masukkan katasandi kamu di bawah ini untuk login ke akun kamu:", "Masuk", "Batal", PlayerData[extraid][pLoginDate]);
			}
			else
			{
			    Dialog_Show(extraid, RegisterScreen, DIALOG_STYLE_PASSWORD, "Daftar", "Selamat datang di Vandora Ravens Roleplay, %s.\n\nPerhatikan: Akun kamu belum terdaftar. Silahkan masukkan kata sandi yang kamu inginkan:", "Daftar", "Batal", ReturnName(extraid));
			}
    	}
    	case THREAD_LOGIN:
   		{
    	    cache_get_data(rows, fields, g_iHandle);

    	    if (!rows)
    	    {
    	        PlayerData[extraid][pLoginAttempts]++;

    	        if (PlayerData[extraid][pLoginAttempts] >= 3)
    	        {
    	            SendClientMessage(extraid, COLOR_LIGHTRED, "Perhatikan: kamu telah dikick karena telah melakukan upaya login yang gagal.");
    	            KickEx(extraid);
				}
				else
				{
    	        	Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "Login", "Selamat datang kembali di Vandora Ravens Roleplay!\n\nAkunmu terakhir login pada: %s.\n\nSilahkan masukkan katasandi kamu di bawah ini untuk login ke akun kamu:", "Masuk", "Batal", PlayerData[extraid][pLoginDate]);
    	        	SendClientMessageEx(extraid, COLOR_LIGHTRED, "Notice: Password salah (%d/3 percobaan).", PlayerData[extraid][pLoginAttempts]);
				}
			}
			else
			{
				static
					query[128];

				// Update the last login date.
                format(query, sizeof(query), "UPDATE `accounts` SET `IP` = '%s', `LoginDate` = '%s' WHERE `Username` = '%s'", PlayerData[extraid][pIP], ReturnDate(), PlayerData[extraid][pUsername]);
				mysql_tquery(g_iHandle, query);

    			// Load the character data.
				format(query, sizeof(query), "SELECT * FROM `characters` WHERE `Username` = '%s' LIMIT 3", PlayerData[extraid][pUsername]);
				mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_CHARACTERS);
			}
		}
		case THREAD_CHARACTERS:
		{
			cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows; i ++) {
			    cache_get_field_content(i, "Character", PlayerCharacters[extraid][i], g_iHandle, MAX_PLAYER_NAME);
		    }
		    SendServerMessage(extraid, "Kamu telah mengotentikasi akunmu dengan sukses.");
            ShowCharacterMenu(extraid);
		}
		case THREAD_LOAD_CHARACTER:
		{
		    static
		        string[128];

		    cache_get_data(rows, fields, g_iHandle);

			foreach (new i : Player)
			{
			    if (PlayerData[i][pCharacter] == PlayerData[extraid][pCharacter] && !strcmp(ReturnName(i), PlayerCharacters[extraid][PlayerData[extraid][pCharacter] - 1]) && i != extraid)
       			{
       			    ShowCharacterMenu(extraid);
				   	SendErrorMessage(extraid, "Karakter ini sudah login.");
				}
			}
			switch (SetPlayerName(extraid, PlayerCharacters[extraid][PlayerData[extraid][pCharacter] - 1]))
			{
			    case -1: {
					SendClientMessageEx(extraid, COLOR_LIGHTRED, "Notice: Nama karakter sepertinya sudah digunakan.");
				}
				default:
				{
				    if (!rows) {
				        return 0;
					}
					static
					    query[128]
					;
			        PlayerData[extraid][pID] = cache_get_field_int(0, "ID");
			        PlayerData[extraid][pCreated] = cache_get_field_int(0, "Created");
			        PlayerData[extraid][pGender] = cache_get_field_int(0, "Gender");

					cache_get_field_content(0, "Birthdate", PlayerData[extraid][pBirthdate], g_iHandle, 24);
			        cache_get_field_content(0, "Origin", PlayerData[extraid][pOrigin], g_iHandle, 32);

			        PlayerData[extraid][pSkin] = cache_get_field_int(0, "Skin");
			        PlayerData[extraid][pPos][0] = cache_get_field_float(0, "PosX");
			        PlayerData[extraid][pPos][1] = cache_get_field_float(0, "PosY");
			        PlayerData[extraid][pPos][2] = cache_get_field_float(0, "PosZ");
			        PlayerData[extraid][pPos][3] = cache_get_field_float(0, "PosA");
			        PlayerData[extraid][pHealth] = cache_get_field_float(0, "Health");
			        PlayerData[extraid][pInterior] = cache_get_field_int(0, "Interior");
			        PlayerData[extraid][pWorld] = cache_get_field_int(0, "World");
			        PlayerData[extraid][pHospital] = cache_get_field_int(0, "Hospital");
                    PlayerData[extraid][pHospitalInt] = cache_get_field_int(0, "HospitalInt");
			        PlayerData[extraid][pMoney] = cache_get_field_int(0, "Money");
			        PlayerData[extraid][pBankMoney] = cache_get_field_int(0, "BankMoney");
			        PlayerData[extraid][pOwnsBillboard] = cache_get_field_int(0, "OwnsBillboard");
					PlayerData[extraid][pSavings] = cache_get_field_int(0, "Savings");
			        PlayerData[extraid][pAdmin] = cache_get_field_int(0, "Admin");
			        PlayerData[extraid][pJailTime] = cache_get_field_int(0, "JailTime");
			        PlayerData[extraid][pMuted] = cache_get_field_int(0, "Muted");
			        PlayerData[extraid][pHelper] = cache_get_field_int(0, "Helper");
			        PlayerData[extraid][pHouse] = cache_get_field_int(0, "House");
			        PlayerData[extraid][pBusiness] = cache_get_field_int(0, "Business");
			        PlayerData[extraid][pEntrance] = cache_get_field_int(0, "Entrance");
			        PlayerData[extraid][pPhone] = cache_get_field_int(0, "Phone");
			        PlayerData[extraid][pLottery] = cache_get_field_int(0, "Lottery");
			        PlayerData[extraid][pLottery] = cache_get_field_int(0, "LotteryB");
			        PlayerData[extraid][pHunger] = cache_get_field_int(0, "Hunger");
			        PlayerData[extraid][pThirst] = cache_get_field_int(0, "Thirst");
			        PlayerData[extraid][pPlayingHours] = cache_get_field_int(0, "PlayingHours");
			        PlayerData[extraid][pMinutes] = cache_get_field_int(0, "Minutes");
			        PlayerData[extraid][pArmorStatus] = cache_get_field_float(0, "ArmorStatus");
			        PlayerData[extraid][pJob] = cache_get_field_int(0, "Job");
			        PlayerData[extraid][pFactionID] = cache_get_field_int(0, "Faction");
			        PlayerData[extraid][pFactionRank] = cache_get_field_int(0, "FactionRank");
			        PlayerData[extraid][pFactionDivision] = cache_get_field_int(0, "FactionDivision");
			        PlayerData[extraid][pPrisoned] = cache_get_field_int(0, "Prisoned");
			        PlayerData[extraid][pInjured] = cache_get_field_int(0, "Injured");
			        PlayerData[extraid][pWarrants] = cache_get_field_int(0, "Warrants");
			        PlayerData[extraid][pChannel] = cache_get_field_int(0, "Channel");
			        PlayerData[extraid][pBleeding] = cache_get_field_int(0, "Bleeding");
			        PlayerData[extraid][pRep] = cache_get_field_int(0, "pRep");
			        PlayerData[extraid][pWarnings] = cache_get_field_int(0, "Warnings");
			        PlayerData[extraid][pDonator] = cache_get_field_int(0, "Donator");
			        PlayerData[extraid][pFightStyle] = cache_get_field_int(0, "FightStyle");
			        PlayerData[extraid][pMaskID] = cache_get_field_int(0, "MaskID");
			        PlayerData[extraid][pFactionMod] = cache_get_field_int(0, "FactionMod");
			        PlayerData[extraid][pSwatMember] = cache_get_field_int(0, "SwatMember");
			        PlayerData[extraid][pClothes1] = cache_get_field_int(0, "Clothes1");
			        PlayerData[extraid][pClothes2] = cache_get_field_int(0, "Clothes2");
			        PlayerData[extraid][pClothes3] = cache_get_field_int(0, "Clothes3");
			        PlayerData[extraid][pCapacity] = cache_get_field_int(0, "Capacity");
			        PlayerData[extraid][pChannel2] = cache_get_field_int(0, "Channel2");
			        PlayerData[extraid][pChannel3] = cache_get_field_int(0, "Channel3");
			        PlayerData[extraid][pChannel4] = cache_get_field_int(0, "Channel4");
			        PlayerData[extraid][pSpawnPoint] = cache_get_field_int(0, "SpawnPoint");

					cache_get_field_content(0, "Warn1", PlayerData[extraid][pWarn1], g_iHandle, 32);
					cache_get_field_content(0, "Warn2", PlayerData[extraid][pWarn2], g_iHandle, 32);
					cache_get_field_content(0, "ForumName", PlayerData[extraid][pForumName], g_iHandle, 32);


			        for (new i = 0; i < 13; i ++) {
			            format(query, sizeof(query), "Gun%d", i + 1);
			            PlayerData[extraid][pGuns][i] = cache_get_field_int(0, query);

			            format(query, sizeof(query), "Ammo%d", i + 1);
			            PlayerData[extraid][pAmmo][i] = cache_get_field_int(0, query);
			        }
			        PlayerData[extraid][pGlasses] = cache_get_field_int(0, "Glasses");
					PlayerData[extraid][pHat] = cache_get_field_int(0, "Hat");
					PlayerData[extraid][pBandana] = cache_get_field_int(0, "Bandana");

					cache_get_field_content(0, "GlassesPos", string, g_iHandle);
					sscanf(string, "p<|>fffffffff", AccessoryData[extraid][0][0], AccessoryData[extraid][0][1], AccessoryData[extraid][0][2], AccessoryData[extraid][0][3], AccessoryData[extraid][0][4], AccessoryData[extraid][0][5], AccessoryData[extraid][0][6], AccessoryData[extraid][0][7], AccessoryData[extraid][0][8]);

					cache_get_field_content(0, "HatPos", string, g_iHandle);
					sscanf(string, "p<|>fffffffff", AccessoryData[extraid][1][0], AccessoryData[extraid][1][1], AccessoryData[extraid][1][2], AccessoryData[extraid][1][3], AccessoryData[extraid][1][4], AccessoryData[extraid][1][5], AccessoryData[extraid][1][6], AccessoryData[extraid][1][7], AccessoryData[extraid][1][8]);

					cache_get_field_content(0, "BandanaPos", string, g_iHandle);
					sscanf(string, "p<|>fffffffff", AccessoryData[extraid][2][0], AccessoryData[extraid][2][1], AccessoryData[extraid][2][2], AccessoryData[extraid][2][3], AccessoryData[extraid][2][4], AccessoryData[extraid][2][5], AccessoryData[extraid][2][6], AccessoryData[extraid][2][7], AccessoryData[extraid][2][8]);

					if (!PlayerData[extraid][pMaskID])
					    PlayerData[extraid][pMaskID] = random(90000) + 10000;

					if (!PlayerData[extraid][pCapacity])
					    PlayerData[extraid][pCapacity] = 35;

				    for (new i = 0; i < 81; i ++) {
				        if (i < 8 || (i >= 71 && i <= 80)) PlayerTextDrawHide(extraid, PlayerData[extraid][pTextdraws][i]);
					}
					if (PlayerData[extraid][pID])
					{
		    			foreach (new i : Player)
		 				{
							if (PlayerData[extraid][pDonator] >= 1)
							{
								SendClientMessageEx(i, COLOR_DONATOR, "[DONATOR INFO]: Donator %s telah masuk ke server.", ReturnName(extraid, 0));
							}
						    else
						    {
						        SendClientMessageEx(i, COLOR_YELLOW, "[INFO]: %s telah masuk ke server.", ReturnName(extraid, 0));
							}
						}
						    
					}
				    PlayerData[extraid][pLogged] = 1;

                    format(query, sizeof(query), "SELECT * FROM `inventory` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_INVENTORY);

                    format(query, sizeof(query), "SELECT * FROM `contacts` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_CONTACTS);

                    format(query, sizeof(query), "SELECT * FROM `tickets` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_TICKETS);

                    format(query, sizeof(query), "SELECT * FROM `gps` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_LOCATIONS);

                    if(PlayerData[extraid][pOwnsBillboard] == 0)
                    {
                        PlayerData[extraid][pOwnsBillboard] = -1;
					}
					if (PlayerData[extraid][pFactionID] != -1) {
					    PlayerData[extraid][pFaction] = GetFactionByID(PlayerData[extraid][pFactionID]);

					    if (PlayerData[extraid][pFaction] == -1) {
					        ResetFaction(extraid);
						}
					}
				    if (!PlayerData[extraid][pCreated])
				    {
				        new
				            str[48];

						format(str, sizeof(str), "~r~Nama:~w~ %s", ReturnName(extraid));
				        PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][14], str);

				        for (new i = 11; i < 23; i ++) {
				            PlayerTextDrawShow(extraid, PlayerData[extraid][pTextdraws][i]);
						}
						PlayerData[extraid][pSkin] = 98;

						PlayerData[extraid][pOrigin][0] = '\0';
						PlayerData[extraid][pBirthdate][0] = '\0';

						SendServerMessage(extraid, "Kamu sekarang diharuskan mengisi KTP kamu.");
						SetPlayerInterior(extraid, 3);

						SetPlayerPos(extraid, 364.958312, 173.570709, 990.610534);
						SetPlayerCameraPos(extraid, 364.958312, 173.570709, 1010.610534);
						SetPlayerCameraLookAt(extraid, 364.458343, 173.576049, 1010.389343);
				    }
				    else
				    {
        				SetSpawnInfo(extraid, 0, PlayerData[extraid][pSkin], PlayerData[extraid][pPos][0], PlayerData[extraid][pPos][1], PlayerData[extraid][pPos][2], 0.0, 0, 0, 0, 0, 0, 0);

				        TogglePlayerSpectating(extraid, 0);
				        TogglePlayerControllable(extraid, 0);
				        SetPlayerFightingStyle(extraid, PlayerData[extraid][pFightStyle]);

				        CancelSelectTextDraw(extraid);
				        SetTimerEx("SpawnTimer", 1000, false, "d", extraid);
					}
				}
			}
		}
		case THREAD_VERIFY_PASS:
		{
		    cache_get_data(rows, fields, g_iHandle);

		    if (rows)
				Dialog_Show(extraid, NewPass, DIALOG_STYLE_PASSWORD, "Masukan Password Baru", "Masukkan katasandi baru kamu di bawah ini.\n\nNote: Harap gunakan kata sandi yang kuat dan aman untuk keamanan tambahan.", "Ganti", "Batal");

			else
				SendErrorMessage(extraid, "Kamu telah memasukkan kata sandi yang salah.");
		}
		case THREAD_FIND_USERNAME:
		{
		    static
		        query[128];

			cache_get_data(rows, fields, g_iHandle);

			if (rows)
			{
				new
				    name[MAX_PLAYER_NAME + 1];

				cache_get_row(0, 0, name, g_iHandle);

				if (strcmp(name, PlayerData[extraid][pUsername], false) != 0)
				{
					format(PlayerData[extraid][pUsername], sizeof(name), name);
					SetPlayerName(extraid, name);
				}
		    }
		    format(query, sizeof(query), "SELECT `LoginDate` FROM `accounts` WHERE `Username` = '%s'", PlayerData[extraid][pUsername]);
			mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_CHECK_ACCOUNT);
		}
		case THREAD_LOAD_INVENTORY:
		{
		    static
		        name[32];

		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_INVENTORY; i ++) {
			    InventoryData[extraid][i][invExists] = true;
			    InventoryData[extraid][i][invID] = cache_get_field_int(i, "invID");
			    InventoryData[extraid][i][invModel] = cache_get_field_int(i, "invModel");
                InventoryData[extraid][i][invQuantity] = cache_get_field_int(i, "invQuantity");

				cache_get_field_content(i, "invItem", name, g_iHandle, sizeof(name));
				strpack(InventoryData[extraid][i][invItem], name, 32 char);
			}
		}
		case THREAD_LOAD_CONTACTS:
		{
		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_CONTACTS; i ++) {
				cache_get_field_content(i, "contactName", ContactData[extraid][i][contactName], g_iHandle, 32);

				ContactData[extraid][i][contactExists] = true;
			    ContactData[extraid][i][contactID] = cache_get_field_int(i, "contactID");
			    ContactData[extraid][i][contactNumber] = cache_get_field_int(i, "contactNumber");
			}
		}
		case THREAD_LOAD_LOCATIONS:
		{
		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_GPS_LOCATIONS; i ++) {
				cache_get_field_content(i, "locationName", LocationData[extraid][i][locationName], g_iHandle, 32);

				LocationData[extraid][i][locationExists] = true;
			    LocationData[extraid][i][locationID] = cache_get_field_int(i, "locationID");
			    LocationData[extraid][i][locationPos][0] = cache_get_field_float(i, "locationX");
			    LocationData[extraid][i][locationPos][1] = cache_get_field_float(i, "locationY");
			    LocationData[extraid][i][locationPos][2] = cache_get_field_float(i, "locationZ");
			}
		}
		case THREAD_LOAD_TICKETS:
		{
		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_PLAYER_TICKETS; i ++) {
				cache_get_field_content(i, "ticketReason", TicketData[extraid][i][ticketReason], g_iHandle, 64);
				cache_get_field_content(i, "ticketDate", TicketData[extraid][i][ticketDate], g_iHandle, 36);

				TicketData[extraid][i][ticketExists] = true;
			    TicketData[extraid][i][ticketID] = cache_get_field_int(i, "ticketID");
			    TicketData[extraid][i][ticketFee] = cache_get_field_int(i, "ticketFee");
			}
		}
		case THREAD_BAN_LOOKUP:
		{
		    new
		        reason[128],
				date[36],
				username[24];

		    cache_get_data(rows, fields, g_iHandle);

		    if (rows) {
		        cache_get_field_content(0, "Username", username, g_iHandle);
		        cache_get_field_content(0, "Date", date, g_iHandle);
				cache_get_field_content(0, "Reason", reason, g_iHandle);

				if (!strcmp(username, "null", true) || !username[0])
				{
				    Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Terbanned", "IP kamu dilarang dari server ini.\n\nIP: %s\nTanggal: %s\nAlasan: %s\n\nUntuk meminta banding, silakan kunjungi situs web kami dan kirimkan banding.", "Tutup", "", PlayerData[extraid][pIP], date, reason);
					KickEx(extraid);
				}
				else
				{
				    Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Terbanned", "Kamu dilarang dari server ini.\n\nUsername: %s\nTanggal: %s\nAlasan: %s\n\nUntuk meminta banding, silakan kunjungi situs web kami dan kirimkan banding.", "Tutup", "", PlayerData[extraid][pUsername], date, reason);
					KickEx(extraid);
				}
		    }
		}
		case THREAD_SHOW_CHARACTER:
		{
			cache_get_data(rows, fields, g_iHandle);

			if (rows)
			{
			    static
			        skin,
			        birthdate[16],
			        origin[32],
					string[128];

			    skin = cache_get_field_int(0, "Skin");

				cache_get_field_content(0, "Birthdate", birthdate, g_iHandle);
				cache_get_field_content(0, "Origin", origin, g_iHandle);

				PlayerTextDrawSetPreviewModel(extraid, PlayerData[extraid][pTextdraws][73], skin);

				if (!strlen(birthdate)) {
				    birthdate = "Kosong";
				}
				if (!strlen(origin)) {
				    origin = "Tidak ditentukan";
				}
				format(string, sizeof(string), "~b~Tanggal lahir:~w~ %s", birthdate);
				PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][74], string);

				format(string, sizeof(string), "~b~Asal:~w~ %s", origin);
				PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][75], string);

				format(string, sizeof(string), "~b~Dibuat:~w~ %s", GetDuration(gettime() - cache_get_field_int(0, "CreateDate")));
				PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][76], string);

				format(string, sizeof(string), "~b~Login:~w~ %s", GetDuration(gettime() - cache_get_field_int(0, "LastLogin")));
				PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][77], string);

				for (new i = 0; i < 8; i ++) {
				    PlayerTextDrawHide(extraid, PlayerData[extraid][pTextdraws][i]);
				}
			    for (new i = 71; i < 81; i ++) {
			        PlayerTextDrawShow(extraid, PlayerData[extraid][pTextdraws][i]);
				}
			}
		}
	}
	return 1;
}

forward OnViewCharges(extraid, name[]);
public OnViewCharges(extraid, name[])
{
	if (GetFactionType(extraid) != FACTION_POLICE)
	    return 0;

	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(extraid, "No results found for charges on \"%s\".", name);

	static
	    string[1024],
		desc[128],
		date[36];

	string[0] = 0;

	for (new i = 0; i < rows; i ++) {
	    cache_get_field_content(i, "Description", desc, g_iHandle);
	    cache_get_field_content(i, "Date", date, g_iHandle);

	    format(string, sizeof(string), "%s%s (%s)\n", string, desc, date);
	}
	format(desc, sizeof(desc), "Charges: %s", name);
	Dialog_Show(extraid, ChargeList, DIALOG_STYLE_LIST, desc, string, "Tutup", "");
	return 1;
}

stock SetCameraData(playerid)
{
    #if SERVER_CITY == 1
	    SetPlayerPos(playerid, 2096.8398,-1879.4764,15.000);
		SetPlayerCameraPos(playerid, 2096.8398,-1879.4764,30);
		SetPlayerCameraLookAt(playerid, 2080.5161,-1759.1907,13.5656);
	#elseif SERVER_CITY == 2
	    SetPlayerPos(playerid, -1553.776367, 844.732299, 32.268722);
		SetPlayerCameraPos(playerid, -1553.776367, 844.732299, 52.268722);
		SetPlayerCameraLookAt(playerid, -1554.276245, 844.740234, 52.250732);
    #elseif SERVER_CITY == 3
	    SetPlayerPos(playerid, 2069.442138, 977.235412, 6.572320);
		SetPlayerCameraPos(playerid, 2069.442138, 977.235412, 26.572320);
		SetPlayerCameraLookAt(playerid, 2069.452148, 977.702697, 26.557329);
	#endif

	return 1;
}

forward AccountCheck(playerid);
public AccountCheck(playerid)
{
    InterpolateCameraPos(playerid, 244.116943, -1844.963256, 41.799915, 821.013366, -1641.763793, 29.977857, 15000);
	InterpolateCameraLookAt(playerid, 247.605590, -1841.989990, 39.802570, 817.645996, -1645.395751, 29.292520, 15000);

	SQL_CheckAccount(playerid);
	return 1;
}

forward OnResolveUsername(extraid, character[]);
public OnResolveUsername(extraid, character[])
{
    new
		rows,
		fields,
		name[24];

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
 		return SendErrorMessage(extraid, "Tidak ada akun yang terhubung dengan nama yang ditentukan.");

	cache_get_row(0, 0, name, g_iHandle);
	SendServerMessage(extraid, "%s memiliki username akun: %s.", character, name);

	return 1;
}

forward OnLoginDate(extraid, username[]);
public OnLoginDate(extraid, username[])
{
    if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    fields,
	    date[36];

	cache_get_data(rows, fields, g_iHandle);

	if (rows) {
	    cache_get_row(0, 0, date, g_iHandle);

	    SendServerMessage(extraid, "%s melakukan login terakhir pada: %s.", username, date);
	}
	else {
	    SendErrorMessage(extraid, "Username tidak valid.");
	}
	return 1;
}

forward OnCarStorageAdd(carid, itemid);
public OnCarStorageAdd(carid, itemid)
{
	CarStorage[carid][itemid][cItemID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnStorageAdd(houseid, itemid);
public OnStorageAdd(houseid, itemid)
{
	HouseStorage[houseid][itemid][hItemID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnDealerCarCreated(bizid, slotid);
public OnDealerCarCreated(bizid, slotid)
{
	DealershipCars[bizid][slotid][vehID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnFurnitureCreated(furnitureid);
public OnFurnitureCreated(furnitureid)
{
	FurnitureData[furnitureid][furnitureID] = cache_insert_id(g_iHandle);
	Furniture_Save(furnitureid);
	return 1;
}

forward OnContactAdd(playerid, id);
public OnContactAdd(playerid, id)
{
	ContactData[playerid][id][contactID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnInventoryAdd(playerid, itemid);
public OnInventoryAdd(playerid, itemid)
{
	InventoryData[playerid][itemid][invID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnBanLookup(playerid, username[]);
public OnBanLookup(playerid, username[])
{
	if (!IsPlayerConnected(playerid))
	    return 0;

	static
	    rows,
	    fields,
	    reason[128],
	    date[36];

	cache_get_data(rows, fields, g_iHandle);

	if (rows) {
	    cache_get_field_content(0, "Reason", reason, g_iHandle);
	    cache_get_field_content(0, "Date", date, g_iHandle);

		SendServerMessage(playerid, "%s telah dibanned dari server pada %s, Alasan: %s", username, date, reason);
	}
	else {
	    SendErrorMessage(playerid, "%s tidak sedang dibanned.", username);
	}
	return 1;
}

forward OnVerifyNameChange(playerid, newname[]);
public OnVerifyNameChange(playerid, newname[])
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (rows)
	    return SendErrorMessage(playerid, "Nama yang ditentukan \"%s\" sudah digunakan.", newname);

	foreach (new i : Player) if (!strcmp(ReturnName(i), newname, true)) {
	    return SendErrorMessage(playerid, "Nama yang ditentukan \"%s\" sudah digunakan.", newname);
	}
	format(PlayerData[playerid][pNameChange], 24, newname);

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s meminta perubahan nama ke %s (gunakan \"/acceptname\" atau \"/declinename\").", ReturnName(playerid, 0), newname);
	SendServerMessage(playerid, "Permintaan ganti nama kamu telah dikirim ke admin.");

	return 1;
}

forward OnDeleteCharacter(playerid, name[]);
public OnDeleteCharacter(playerid, name[])
{
	static
	    rows,
	    fields,
		query[128],
		id = -1;

    cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(playerid, "Karakter \"%s\" tidak terkait dalam akun manapun.", name);

	if (cache_get_field_int(0, "Admin") > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Kamu tidak berwenang untuk menghapus karakter admin yang lebih tinggi.");

	id = cache_get_field_int(0, "ID");

	if (id) {
	    format(query, sizeof(query), "DELETE FROM `contacts` WHERE `ID` = '%d'", id);
     	mysql_tquery(g_iHandle, query);

		format(query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d'", id);
  		mysql_tquery(g_iHandle, query);

		format(query, sizeof(query), "DELETE FROM `inventory` WHERE `ID` = '%d'", id);
		mysql_tquery(g_iHandle, query);

		format(query, sizeof(query), "DELETE FROM `tickets` WHERE `ID` = '%d'", id);
  		mysql_tquery(g_iHandle, query);

	    format(query, sizeof(query), "DELETE FROM `characters` WHERE `ID` = '%d'", id);
  		mysql_tquery(g_iHandle, query);

  		SendServerMessage(playerid, "Kamu berhasil menghapus karakter \"%s\" dengan lancar.", name);
	}
	return 1;
}

forward OnDeleteAccount(playerid, name[]);
public OnDeleteAccount(playerid, name[])
{
	static
	    rows,
	    fields,
		id = -1;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(playerid, "Username \"%s\" tidak ditemukan.", name);

	static
	    query[128];

	for (new i = 0; i < rows; i ++)
	{
	    if ((id = cache_get_field_int(i, "ID")))
		{
	        format(query, sizeof(query), "DELETE FROM `contacts` WHERE `ID` = '%d'", id);
	        mysql_tquery(g_iHandle, query);

	        format(query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d'", id);
	        mysql_tquery(g_iHandle, query);

	        format(query, sizeof(query), "DELETE FROM `inventory` WHERE `ID` = '%d'", id);
	        mysql_tquery(g_iHandle, query);

            format(query, sizeof(query), "DELETE FROM `tickets` WHERE `ID` = '%d'", id);
	        mysql_tquery(g_iHandle, query);
		}
	}
	format(query, sizeof(query), "DELETE FROM `accounts` WHERE `Username` = '%s'", name);
    mysql_tquery(g_iHandle, query);

    format(query, sizeof(query), "DELETE FROM `characters` WHERE `Username` = '%s'", name);
    mysql_tquery(g_iHandle, query);

    SendServerMessage(playerid, "Kamu menghapus \"%s\" dari database.", name);
    return 1;
}

forward OnNameChange(playerid, userid, newname[]);
public OnNameChange(playerid, userid, newname[])
{
	if (!IsPlayerConnected(playerid) || !IsPlayerConnected(userid))
	    return 0;

	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (rows)
	    return SendErrorMessage(playerid, "Nama yang ditentukan \"%s\" telah digunakan.", newname);

    new
		oldname[MAX_PLAYER_NAME];

	GetPlayerName(userid, oldname, sizeof(oldname));
	ChangeName(userid, newname);

    for (new i = 0, l = strlen(oldname); i != l; i ++) {
	    if (oldname[i] == '_') oldname[i] = ' ';
	}
	for (new i = 0, l = strlen(newname); i != l; i ++) {
	    if (newname[i] == '_') newname[i] = ' ';
	}
	SendServerMessage(playerid, "Kamu mengubah nama %s menjadi %s.", oldname, newname);
	SendServerMessage(userid, "%s telah mengubah namamu menjadi %s.", ReturnName(playerid, 0), newname);

	Log_Write("logs/name_log.txt", "[%s] %s telah mengubah nama %s menjadi %s.", ReturnDate(), ReturnName(playerid), oldname, newname);
	return 1;
}

forward OnTicketCreated(playerid, ticketid);
public OnTicketCreated(playerid, ticketid)
{
	TicketData[playerid][ticketid][ticketID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnRackCreated(rackid);
public OnRackCreated(rackid)
{
	if (rackid == -1 || !RackData[rackid][rackExists])
	    return 0;

	RackData[rackid][rackID] = cache_insert_id(g_iHandle);
	Rack_Save(rackid);

	return 1;
}

forward SafeSetPlayerPos(playerid, Float:x, Float:y, Float:z);
public SafeSetPlayerPos(playerid, Float:x, Float:y, Float:z)
{
	SetPlayerPos(playerid, x,y,z);
	return 1;
}

forward OnGateCreated(gateid);
public OnGateCreated(gateid)
{
	if (gateid == -1 || !GateData[gateid][gateExists])
	    return 0;

	GateData[gateid][gateID] = cache_insert_id(g_iHandle);
	Gate_Save(gateid);

	return 1;
}

forward OnBusinessCreated(bizid);
public OnBusinessCreated(bizid)
{
	if (bizid == -1 || !BusinessData[bizid][bizExists])
	    return 0;

	BusinessData[bizid][bizID] = cache_insert_id(g_iHandle);
	Business_Save(bizid);

	return 1;
}

forward OnEntranceCreated(entranceid);
public OnEntranceCreated(entranceid)
{
	if (entranceid == -1 || !EntranceData[entranceid][entranceExists])
	    return 0;

	EntranceData[entranceid][entranceID] = cache_insert_id(g_iHandle);
	EntranceData[entranceid][entranceWorld] = EntranceData[entranceid][entranceID] + 7000;

	Entrance_Save(entranceid);

	return 1;
}

forward OnCarCreated(carid);
public OnCarCreated(carid)
{
	if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	CarData[carid][carID] = cache_insert_id(g_iHandle);
	Car_Save(carid);

	return 1;
}

forward OnPumpCreated(pumpid);
public OnPumpCreated(pumpid)
{
    PumpData[pumpid][pumpID] = cache_insert_id(g_iHandle);
	Pump_Save(pumpid);

	return 1;
}

forward OnArrestCreated(arrestid);
public OnArrestCreated(arrestid)
{
	if (arrestid == -1 || !ArrestData[arrestid][arrestExists])
	    return 0;

	ArrestData[arrestid][arrestID] = cache_insert_id(g_iHandle);
	Arrest_Save(arrestid);

	return 1;
}

forward OnPlantCreated(plantid);
public OnPlantCreated(plantid)
{
	if (plantid == -1 || !PlantData[plantid][plantExists])
	    return 0;

	PlantData[plantid][plantID] = cache_insert_id(g_iHandle);
	Plant_Save(plantid);

	return 1;
}

forward OnCrateCreated(crateid);
public OnCrateCreated(crateid)
{
	if (crateid == -1 || !CrateData[crateid][crateExists])
	    return 0;

	CrateData[crateid][crateID] = cache_insert_id(g_iHandle);
	Crate_Save(crateid);

	return 1;
}

forward OnFactionCreated(factionid);
public OnFactionCreated(factionid)
{
	if (factionid == -1 || !FactionData[factionid][factionExists])
	    return 0;

	FactionData[factionid][factionID] = cache_insert_id(g_iHandle);

	Faction_Save(factionid);
	Faction_SaveRanks(factionid);
	Faction_SaveDivisions(factionid);

	return 1;
}

forward OnBackpackCreated(id);
public OnBackpackCreated(id)
{
	if (id == -1 || !BackpackData[id][backpackExists])
	    return 0;

	BackpackData[id][backpackID] = cache_insert_id(g_iHandle);
	Backpack_Save(id);

	return 1;
}

forward OnATMCreated(atmid);
public OnATMCreated(atmid)
{
    if (atmid == -1 || !ATMData[atmid][atmExists])
		return 0;

	ATMData[atmid][atmID] = cache_insert_id(g_iHandle);
 	ATM_Save(atmid);

	return 1;
}

forward OnImpoundCreated(impoundid);
public OnImpoundCreated(impoundid)
{
	if (impoundid == -1 || !ImpoundData[impoundid][impoundExists])
	    return 0;

	ImpoundData[impoundid][impoundID] = cache_insert_id(g_iHandle);
	Impound_Save(impoundid);

	return 1;
}

forward OnGraffitiCreated(id);
public OnGraffitiCreated(id)
{
	GraffitiData[id][graffitiID] = cache_insert_id(g_iHandle);
	Graffiti_Save(id);

	return 1;
}

forward OnDetectorCreated(id);
public OnDetectorCreated(id)
{
	MetalDetectors[id][detectorID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnGarbageCreated(garbageid);
public OnGarbageCreated(garbageid)
{
	if (garbageid == -1 || !GarbageData[garbageid][garbageExists])
	    return 0;

	GarbageData[garbageid][garbageID] = cache_insert_id(g_iHandle);
	Garbage_Save(garbageid);

	return 1;
}

forward OnVendorCreated(vendorid);
public OnVendorCreated(vendorid)
{
	if (vendorid == -1 || !VendorData[vendorid][vendorExists])
	    return 0;

	VendorData[vendorid][vendorID] = cache_insert_id(g_iHandle);
	Vendor_Save(vendorid);

	return 1;
}

forward OnSpeedCreated(speedid);
public OnSpeedCreated(speedid)
{
	if (speedid == -1 || !SpeedData[speedid][speedExists])
	    return 0;

	SpeedData[speedid][speedID] = cache_insert_id(g_iHandle);
	Speed_Save(speedid);

	return 1;
}

forward OnHouseCreated(houseid);
public OnHouseCreated(houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	HouseData[houseid][houseID] = cache_insert_id(g_iHandle);
	House_Save(houseid);

	return 1;
}

forward OnDroppedItem(itemid);
public OnDroppedItem(itemid)
{
	if (itemid == -1 || !DroppedItems[itemid][droppedModel])
	    return 0;

	DroppedItems[itemid][droppedID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnJobCreated(jobid);
public OnJobCreated(jobid)
{
	if (jobid == -1 || !JobData[jobid][jobExists])
	    return 0;

	JobData[jobid][jobID] = cache_insert_id(g_iHandle);
	Job_Save(jobid);

	return 1;
}

forward OnCharacterLookup(extraid, id, character[]);
public OnCharacterLookup(extraid, id, character[])
{
	if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    fields,
	    string[128];

	cache_get_data(rows, fields, g_iHandle);

	if (rows)
	{
	    static
	        admin,
	        skin,
	        createDate,
	        lastLogin;

		admin = cache_get_field_int(0, "Admin");
		skin = cache_get_field_int(0, "Skin");

		createDate = cache_get_field_int(0, "CreateDate");
		lastLogin = cache_get_field_int(0, "LastLogin");

		format(string, sizeof(string), "~g~Nama:~w~ %s~n~~g~Account:~w~ %s~n~~g~Dibuat pada:~w~ %s~n~~g~Terakhir login:~w~ %s", character, (admin > 0) ? ("Admin") : ("Player"), GetDuration(gettime() - createDate), GetDuration(gettime() - lastLogin));
		PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][52], string);

		format(string, sizeof(string), "#%d: %s", id, character);
		PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][53], string);

		PlayerTextDrawSetPreviewModel(extraid, PlayerData[extraid][pTextdraws][54], skin);

		for (new i = 40; i < 58; i ++)
  		{
    		if (i >= 50)
      			PlayerTextDrawShow(extraid, PlayerData[extraid][pTextdraws][i]);

			else if (i < 50)
   				PlayerTextDrawHide(extraid, PlayerData[extraid][pTextdraws][i]);
   		}
		SelectTextDraw(extraid, -1);

		PlayerData[extraid][pDisplayStats] = 2;
		PlayerData[extraid][pCharacterMenu] = id;
	}
	return 1;
}

forward OnCharacterCheck(extraid, character[]);
public OnCharacterCheck(extraid, character[])
{
	if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    fields,
		query[150];

	cache_get_data(rows, fields, g_iHandle);

	if (rows)
	{
	    Dialog_Show(extraid, CreateChar, DIALOG_STYLE_INPUT, "Buat Karakter", "Error: Nama yang ditentukan \"%s\" telah digunakan!\n\nMasukkan nama karakter baru kamu di bawah ini:\n\nWarning: format nama harus Namadepan_Namabelakang dan tidak lebih dari 24 karakter.", "Buat", "Batal", character);
	}
	else
	{
		format(query, sizeof(query), "INSERT INTO `characters` (`Username`, `Character`, `CreateDate`) VALUES('%s', '%s', '%d')", PlayerData[extraid][pUsername], character, gettime());
		mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_CREATE_CHAR);

		format(PlayerCharacters[extraid][PlayerData[extraid][pCharacter] - 1], MAX_PLAYER_NAME + 1, character);
		SendServerMessage(extraid, "Kamu berhasil membuat karakter \"%s\".", character);

		ShowCharacterMenu(extraid);
		PlayerData[extraid][pLogged] = 0;
	}
	return 1;
}

stock FlashTextDraw(playerid, PlayerText:textid, delay = 500)
{
	PlayerTextDrawHide(playerid, textid);

	SetTimerEx("FlashShowTextDraw", delay, false, "dd", playerid, _:textid);

	return 1;
}

stock FlashTextDrawEx(playerid, PlayerText:textid, amount = 1)
{
	PlayerTextDrawHide(playerid, textid);

	SetTimerEx("FlashShowTextDrawEx", 500, false, "ddd", playerid, _:textid, amount);

	return 1;
}

forward FlashShowTextDrawEx(playerid, PlayerText:textid, amount);
public FlashShowTextDrawEx(playerid, PlayerText:textid, amount)
{
    if ((IsPlayerConnected(playerid) && PlayerData[playerid][pLogged] && PlayerData[playerid][pCharacter] != 0 && PlayerData[playerid][pHospital] == -1) && IsPlayerSpawned(playerid)) {
	    PlayerTextDrawShow(playerid, textid);

	    if (amount > 0) return SetTimerEx("HideTextDrawEx", 500, false, "ddd", playerid, _:textid, amount);
	}
	return 1;
}

forward HideTextDrawEx(playerid, PlayerText:textid, amount);
public HideTextDrawEx(playerid, PlayerText:textid, amount)
{
    if ((IsPlayerConnected(playerid) && PlayerData[playerid][pLogged] && PlayerData[playerid][pCharacter] != 0 && PlayerData[playerid][pHospital] == -1) && IsPlayerSpawned(playerid)) {
	    PlayerTextDrawHide(playerid, textid);

	    if (amount > 0) return SetTimerEx("FlashShowTextDrawEx", 500, false, "ddd", playerid, _:textid, --amount);
	}
	return 1;
}

forward FlashShowTextDraw(playerid, PlayerText:textid);
public FlashShowTextDraw(playerid, PlayerText:textid)
{
	if ((IsPlayerConnected(playerid) && PlayerData[playerid][pLogged] && PlayerData[playerid][pCharacter] != 0 && PlayerData[playerid][pHospital] == -1) && IsPlayerSpawned(playerid)) {
	    PlayerTextDrawShow(playerid, textid);
	}
	return 1;
}

stock RestartCheck()
{
	static
	    time[3],
		string[32];

	if (g_ServerRestart == 1 && !g_RestartTime)
	{
		foreach (new i : Player) {
		    SQL_SaveCharacter(i);
		    SetPlayerName(i, PlayerData[i][pUsername]);
		}
		SendRconCommand("gmx");
	}
	else if (g_ServerRestart == 1) {
		GetElapsedTime(g_RestartTime--, time[0], time[1], time[2]);

		format(string, 32, "~r~Server Restart:~w~ %02d:%02d", time[1], time[2]);
	    TextDrawSetString(gServerTextdraws[3], string);
	}
	return 1;
}

stock TotalledCheck()
{
	static
	    Float:fHealth;

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && GetVehicleHealth(i, fHealth) && fHealth < 300.0) {
	    SetVehicleHealth(i, 300.0);
	    SetEngineStatus(i, false);
	}
	return 1;
}

forward MinuteCheck();
public MinuteCheck()
{
	static
	    Float:hp;

    foreach (new i : Player)
	{
	    if (!PlayerData[i][pLogged] && !PlayerData[i][pCharacter])
	        continue;

        PlayerData[i][pMinutes]++;

        if (PlayerData[i][pMinutes] >= 60)
       	{
       	    new paycheck = random(100) + 100;
			if(PlayerData[i][pJob] == 3 || PlayerData[i][pJob] == 2 || PlayerData[i][pJob] == 1)
			{
				paycheck = paycheck + 125;
			}
        	PlayerData[i][pMinutes] = 0;
        	PlayerData[i][pRep]++;
			PlayerData[i][pPlayingHours] = PlayerData[i][pPlayingHours]+2;
			PlayerData[i][pBankMoney] += paycheck;
    		new nxtlevel = PlayerData[i][pChannel4]+1;
			new expamount = nxtlevel*levelexp;
			if (PlayerData[i][pPlayingHours] < expamount)
			{
				new string[92];
				format(string, sizeof(string), "Anda Perlu %d Point Untuk level selanjutnya.", expamount - PlayerData[i][pPlayingHours]);
				SendClientMessageEx(i, COLOR_LIGHTGREEN, string);
				return 1;
			}
			else
			{
			    new string[92];
				format(string, sizeof(string), "~g~LEVEL UP~n~~w~Sekarang kamu level %d", nxtlevel);
				PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
				PlayerData[i][pChannel4]++;
				PlayerData[i][pPlayingHours] = PlayerData[i][pPlayingHours]-expamount;
				SetPlayerScore(i, PlayerData[i][pChannel4]);
				GameTextForPlayer(i, string, 5000, 1);
			}
			if(PlayerData[i][pOwnsBillboard] >= 0)
			{
			    if(PlayerData[i][pBankMoney] >= BillBoardData[PlayerData[i][pOwnsBillboard]][bbPrice])
			    {
				    SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
	         		SendClientMessageEx(i, COLOR_WHITE, "{33CC33}%s{FFFFFF} cek telah ditambahkan ke rekening bank kamu.", FormatNumber(paycheck));
	         		SendClientMessageEx(i, COLOR_WHITE, "{33CC33}%s{FFFFFF} telah dikurangkan dari rekening bank kamu untuk biaya billboard", FormatNumber(BillBoardData[PlayerData[i][pOwnsBillboard]][bbPrice]));
					SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
					PlayerData[i][pBankMoney] -= BillBoardData[PlayerData[i][pOwnsBillboard]][bbPrice];
					Tax_AddMoney(BillBoardData[PlayerData[i][pOwnsBillboard]][bbPrice]);
					return 1;
				}
                if(PlayerData[i][pBankMoney] < BillBoardData[PlayerData[i][pOwnsBillboard]][bbPrice])
			    {
			        SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
	         		SendClientMessageEx(i, COLOR_WHITE, "{33CC33}%s{FFFFFF} cek telah ditambahkan ke rekening bank kamu.", FormatNumber(paycheck));
	         		SendClientMessageEx(i, COLOR_LIGHTRED, "Kamu tidak bisa membayar Billboard kamu lagi, oleh karena itu ini akan disewakan");
					SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
					BillBoardData[PlayerData[i][pOwnsBillboard]][bbOwner] = 0;
					Billboard_Save(PlayerData[i][pOwnsBillboard]);
					Billboard_Refresh(PlayerData[i][pOwnsBillboard]);
					PlayerData[i][pOwnsBillboard] = -1;
				}
				return 1;
			}

         	SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
         	SendClientMessageEx(i, COLOR_WHITE, "{33CC33}%s{FFFFFF} cek telah ditambahkan ke rekening bank kamu.", FormatNumber(paycheck));
			SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
		}

		if (PlayerData[i][pInjured])
		{
		    GetPlayerHealth(i, hp);
		    SetPlayerHealth(i, hp - 10.0);
		}
	}
	for (new i = 0; i != MAX_DRUG_PLANTS; i ++) if (PlantData[i][plantExists] && PlantData[i][plantDrugs] < Plant_MaxGrams(PlantData[i][plantType])) {
	    PlantData[i][plantDrugs]++;

	    Plant_Refresh(i);
	    Plant_Save(i);
	}
	return 1;
}

forward PlayerCheck();
public PlayerCheck()
{
	static
		str[128],
		Float:health,
		id = -1;

	TotalledCheck();
	RestartCheck();

	foreach (new i : Player)
	{
	    if (!PlayerData[i][pLogged] && !PlayerData[i][pCharacter])
	        continue;

		if (PlayerData[i][pTutorial] > 0)
		{
		    PlayerData[i][pTutorialTime]--;

		    if (PlayerData[i][pTutorialTime] < 1)
		    {
		        switch (PlayerData[i][pTutorial])
		        {
		            case 1:
		            {
		                PlayerData[i][pTutorial] = 2;
		                PlayerData[i][pTutorialTime] = 10;

		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][59], "Tutorial: Driving School");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][60], "Ini adalah ~g~~h~Driving School~w~. Kamu bisa mengambil~n~tes mengemudi disini. Untuk lulus, kamu harus~n~menghindari rintangan.");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][61], "SIM dibutuhkan untuk berkendara legal di~n~kota ini. Mengemudi sembarangan tanpa sebuah~n~lisensi akan diincar oleh polisi!");

						#if SERVER_CITY == 1
                            SetPlayerPos(i, 1967.677978, -1991.190795, -3.260505);
							InterpolateCameraPos(i, 1642.303344, -2327.007568, 15.672925, 1967.677978, -1991.190795, 16.739494, 2000);
							InterpolateCameraLookAt(i, 1642.292968, -2327.523193, 15.546875, 1968.177246, -1991.205078, 16.651542, 2000);
                        #elseif SERVER_CITY == 2
			                SetPlayerPos(i, -2026.765991, -84.237663, 21.766628);
							InterpolateCameraPos(i, -2399.519287, 321.964355, 37.035743, -2026.765991, -84.237663, 41.766628, 2000);
							InterpolateCameraLookAt(i, -2399.951416, 322.215942, 37.015625, -2026.787597, -84.917533, 41.520622, 2000);
						#elseif SERVER_CITY == 3
			                SetPlayerPos(i, 1168.088500, 1381.582641, -3.185750);
							InterpolateCameraPos(i, 1711.642089, 1448.227294, 13.340233, 1168.088500, 1381.582641, 16.814249, 2000);
							InterpolateCameraLookAt(i, 1711.144897, 1448.224365, 13.289665, 1168.084472, 1381.082641, 16.674325, 2000);
						#endif
			        }
                    case 2:
		            {
		                PlayerData[i][pTutorial] = 3;
		                PlayerData[i][pTutorialTime] = 10;

		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][59], "Tutorial: Dealer");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][60], "Ini adalah ~g~~h~Dealer~w~. Kamu bisa membeli sebuah~n~kendaraaan pribadi untuk dirimu, untuk sebuah~n~harga tertentu.");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][61], "Tolong ingat untuk ~b~~h~/park~w~ kendaraanmu!~n~Kendaraanmu akan disita jika tidak diparkir~n~dengan benar.");

						#if SERVER_CITY == 1
						    SetPlayerPos(i, 546.784729, -1256.438354, 15.406070);
							InterpolateCameraPos(i, 1967.677978, -1991.190795, 16.739494, 546.784729, -1256.438354, 35.406070, 2000);
							InterpolateCameraLookAt(i, 1968.177246, -1991.205078, 16.651542, 546.749816, -1256.937133, 35.216030, 2000);
						#elseif SERVER_CITY == 2
			                SetPlayerPos(i, -2006.275146, 287.903869, 28.095851);
							InterpolateCameraPos(i, -2026.765991, -84.237663, 41.766628, -2006.275146, 287.903869, 48.095851, 2000);
							InterpolateCameraLookAt(i, -2026.787597, -84.917533, 41.520622, -2005.739257, 287.892669, 47.936939, 2000);
						#elseif SERVER_CITY == 3
                   			SetPlayerPos(i, 1635.780761, 1828.321289, 5.649860);
							InterpolateCameraPos(i, 1168.088500, 1381.582641, 16.814249, 1635.780761, 1828.321289, 25.649860, 2000);
							InterpolateCameraLookAt(i, 1168.084472, 1381.082641, 16.674325, 1636.280517, 1828.325683, 25.5048842, 2000);
						#endif
				    }
		            case 3:
		            {
		                PlayerData[i][pTutorial] = 4;
		                PlayerData[i][pTutorialTime] = 10;

		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][59], "Tutorial: Pekerjaan");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][60], "Ada berbagai macam pekerjaan di sekitar~n~kota untuk dipilih, salah satunya yaitu ~n~~r~~h~Courier~w~ job.");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][61], "Masih banyak lagi pekerjaan lain~n~Gunakan ~g~~h~/joblist~w~ untuk menemukan pilihan~n~pekerjaan!");

						#if SERVER_CITY == 1
						    SetPlayerPos(i, 2420.203857, -2089.423095, -1.058326);
							InterpolateCameraPos(i, 556.450866, -1260.044677, 20.433259, 2420.203857, -2089.423095, 18.941673, 2000);
							InterpolateCameraLookAt(i, 556.276916, -1260.619628, 20.427263, 2420.703613, -2089.426269, 18.879707, 2000);
						#elseif SERVER_CITY == 2
			                SetPlayerPos(i, -1683.220336, -7.236631, -4.830643);
							InterpolateCameraPos(i, -2006.275146, 287.903869, 48.095851, -1683.220336, -7.236631, 15.169356, 2000);
							InterpolateCameraLookAt(i, -2005.739257, 287.892669, 47.936939, -1682.866577, -6.893327, 15.087323, 2000);
						#elseif SERVER_CITY == 3
			                SetPlayerPos(i, 1012.894348, 2137.586425, -4.546604);
							InterpolateCameraPos(i, 1635.780761, 1828.321289, 25.649860, 1012.894348, 2137.586425, 15.453395, 2000);
							InterpolateCameraLookAt(i, 1636.280517, 1828.325683, 25.504884, 1013.393859, 2137.540283, 15.364944, 2000);
						#endif
			        }
		            case 4:
		            {
		                PlayerData[i][pTutorial] = 5;
		                PlayerData[i][pTutorialTime] = 10;

		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][59], "Tutorial: Perumahan");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][60], "Terdapat banyak perumahan-perumahan di~n~San Andreas. Membeli rumah, ketik ~g~~h~/buy~n~~w~didekat icon house.");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][61], "Kamu juga bisa membeli furnitur dan menyimpan~n~sesuatu didalam rumahmu. Ketik ~g~~h~/help~w~ untuk~n~list command rumah.");

						#if SERVER_CITY == 1
						    SetPlayerPos(i, 1149.126586, -744.422912, 84.984420);
							InterpolateCameraPos(i, 2420.203857, -2089.423095, 18.941673, 1149.126586, -744.422912, 104.984420, 2000);
							InterpolateCameraLookAt(i, 2420.703613, -2089.426269, 18.879707, 1148.626708, -744.411132, 104.823509, 2000);
						#elseif SERVER_CITY == 2
			                SetPlayerPos(i, -2507.954101, 1125.971801, 44.563232);
							InterpolateCameraPos(i, 1683.220336, -7.236631, 15.169356, -2507.954101, 1125.971801, 64.563232, 2000);
							InterpolateCameraLookAt(i, -1682.866577, -6.893327, 15.087323, -2507.928710, 1126.796386, 64.145462, 2000);
						#elseif SERVER_CITY == 3
			                SetPlayerPos(i, 1380.143676, 2532.807373, -2.440540);
							InterpolateCameraPos(i, 1012.894348, 2137.586425, 15.453395, 1380.143676, 2532.807373, 17.559459, 2000);
							InterpolateCameraLookAt(i, 1013.393859, 2137.540283, 15.364944, 1380.643676, 2532.810302, 17.450519, 2000);
						#endif
			        }
		            case 5:
		            {
		                PlayerData[i][pTutorial] = 6;
		                PlayerData[i][pTutorialTime] = 10;

		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][59], "Tutorial: Bisnis");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][60], "Bisnis juga salah satu cara untuk mendatangkan~n~penghasilan. Kamu dapat menyesuaikan aset ~n~bisnis kamu, termasuk harga dan pesan kustom.");//and even~n~hire employees to work for you!");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][61], "Bisnis ini adalah ~p~~h~Retailstore~w~. Kamu bisa membeli~n~items menggunakan ~g~~h~perintah ~w~/buy. Ketik ~g~~h~/help~n~~w~untuk lebih banyak command.");

						#if SERVER_CITY == 1
                            SetPlayerPos(i, 1315.212036, -916.465942, 24.322559);
							InterpolateCameraPos(i, 1149.126586, -744.422912, 104.984420, 1315.212036, -916.465942, 44.322559, 2000);
							InterpolateCameraLookAt(i, 1148.626708, -744.411132, 104.82350, 1315.211059, -915.965942, 44.212619, 2000);
						#elseif SERVER_CITY == 2
			                SetPlayerPos(i, -2442.177734, 726.758605, 21.054706);
							InterpolateCameraPos(i, -2507.954101, 1125.971801, 64.563232, -2442.177734, 726.758605, 41.054706, 2000);
							InterpolateCameraLookAt(i, -2507.928710, 1126.796386, 64.145462, -2442.179931, 727.221496, 40.933773, 2000);
						#elseif SERVER_CITY == 3
                   			SetPlayerPos(i, 2160.811035, 1992.461425, -1.797470);
							InterpolateCameraPos(i, 1380.143676, 2532.807373, 17.559459, 2160.811035, 1992.461425, 18.202529, 2000);
							InterpolateCameraLookAt(i, 1380.643676, 2532.810302, 17.450519, 2161.310546, 1992.449707, 18.108432, 2000);
						#endif
			        }
			        case 6:
		            {
		                PlayerData[i][pTutorial] = 7;
		                PlayerData[i][pTutorialTime] = 10;

		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][59], "Tutorial: Lapar dan Haus");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][60], "Kelaparan dan haus kamu ditunjukkan pada~n~sini kanan layar kamu. Setelah beberapa saat~n~karaktermu akan lapar.");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][61], "Ini adalah ~y~bisnis~w~ Fast food. Kamu bisa membeli~n~makanan disini. Juga, kamu bisa membeli~n~makanan dan minum di ~y~Retail Store.");

						SetPlayerInterior(i, 10);
						SetPlayerPos(i, 365.013977, -73.615165, 983.073730);
						SetPlayerCameraPos(i, 365.013977, -73.615165, 1003.073730);
						SetPlayerCameraLookAt(i, 365.426818, -73.318977, 1003.007812);
			        }
		            case 7:
		            {
		                PlayerData[i][pTutorial] = 8;
		                PlayerData[i][pTutorialTime] = 10;

						SetPlayerInterior(i, 0);
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][59], "Tutorial: Kesimpulan");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][60], "Tutorial ini sudah selesai. Ingat, jika kamu~n~butuh bantuan, gunakan ~g~~h~/ask~n~~w~dan tunggu sebentar.");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][61], "Terimakasih sudah bermain diserver kami ~n~Kamu akan di respawn dalam sesaat.");

						#if SERVER_CITY == 1
                            SetPlayerPos(i, 1226.481567, -1144.220336, 31.174240);
							InterpolateCameraPos(i, 1202.077392, -929.400634, 47.784023, 1226.481567, -1144.220336, 51.174240, 2000);
							InterpolateCameraLookAt(i, 1202.008300, -928.905456, 47.673583, 1225.981567, -1144.216186, 51.160247, 2000);
						#elseif SERVER_CITY == 2
			                SetPlayerPos(i, -2016.094970, -306.215942, 55.449806);
							InterpolateCameraPos(i, -2336.783935, -187.118865, 44.045051, -2016.094970, -306.215942, 75.449806, 2000);
							InterpolateCameraLookAt(i, -2336.785400, -186.618865, 43.885139, -2016.088867, -305.735107, 75.390838, 2000);
						#elseif SERVER_CITY == 3
			                SetPlayerPos(i, 2115.572753, 2113.175292, 6.203048);
							InterpolateCameraPos(i, 1871.407104, 2052.714599, 20.308364, 2115.572753, 2113.175292, 26.203048, 2000);
							InterpolateCameraLookAt(i, 1871.404663, 2053.214599, 20.169441, 2115.072753, 2113.184326, 26.153575, 2000);
						#endif
			        }
		            case 8:
		            {
		                for (new j = 58; j < 62; j ++) {
		                    PlayerTextDrawHide(i, PlayerData[i][pTextdraws][j]);
						}
						SetDefaultSpawn(i);
		                ShowHungerTextdraw(i, 1);

		                PlayerData[i][pCreated] = 1;
		                PlayerData[i][pTask] = 1;

		                PlayerData[i][pTutorial] = 0;
		                PlayerData[i][pTutorialTime] = 0;

		                SendServerMessage(i, "Ketik /tasks untuk melihat tugasmu saat ini untuk menyelesaikannya.");
		                SendServerMessage(i, "Pergilah ke retail store dan beli beberapa peralatan penting.");
		                SendServerMessage(i, "Jangan buang item sembarang , sidik jarimu bisa terlacak oleh polisi.");
		                SendServerMessage(i, "Pekerjaan terbaik untuk memulai hidupmu adalah sebagai Miner.");
		            }
		        }
		    }
		}
		if (GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && !PlayerData[i][pJetpack])
		{
	    	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah melakukan sebuah jetpack menggunakan hacks.", ReturnName(i, 0));
	    	Log_Write("logs/cheat_log.txt", "[%s] %s telah melakukan sebuah jetpack menggunakan hacks.", ReturnDate(), ReturnName(i, 0));
		}
		if (GetPlayerSpeed(i) > 210 && PlayerData[i][pAdmin] < 1)
		{
		    if (!IsAPlane(GetPlayerVehicleID(i)) && GetPlayerState(i) != PLAYER_STATE_PASSENGER)
		    {
		        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s Mungkin sudah menggunakan speed hacks (%.0f mph).", ReturnName(i, 0), GetPlayerSpeed(i));
		        Log_Write("logs/cheat_log.txt", "[%s] %s Mungkin sudah menggunakan speed hacks (%.0f mph).", ReturnDate(), ReturnName(i, 0), GetPlayerSpeed(i));
			}
		}
		if(PlayerData[i][pChannel] == 911 && GetFactionType(i) != FACTION_POLICE)
		{
		    PlayerData[i][pChannel] = 0;
		}
		if (PlayerData[i][pPicking])
		{
			if ((id = PlayerData[i][pPickCar]) != -1)
			{
			    if (Car_Nearest(i) != id)
			    {
			        PlayerData[i][pPicking] = 0;
			        PlayerData[i][pPickCar] = -1;
			        PlayerData[i][pPickTime] = 0;
				}
				else
				{
				    PlayerData[i][pPickTime]++;

				    format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Mengambil... %d", 60 - PlayerData[i][pPickTime]);
					GameTextForPlayer(i, str, 1000, 3);

					if (PlayerData[i][pPickTime] >= 60)
					{
                        static
					        engine, lights, alarm, doors, bonnet, boot, objective;

	    				GetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
					    SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 0, bonnet, boot, objective);

                        PlayerData[i][pPicking] = 0;
                        PlayerData[i][pPickCar] = -1;
                        PlayerData[i][pPickTime] = 0;

                        CarData[id][carLocked] = 0;
						Car_Save(id);

					    SendNearbyMessage(i, 30.0, COLOR_PURPLE, "** %s telah mengambil kunci kendaraan.", ReturnName(i, 0));
					    ShowPlayerFooter(i, "Kamu berhasil ~g~membuka~w~ kunci mobil!");
					    SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "DISPATCHER: Sebuah kendaraan telah dicuri. Semua unit diberi tahu.");

					}
				}
		    }
		}
		if (!PlayerData[i][pKilled] && PlayerData[i][pHospital] != -1)
		{
			PlayerData[i][pHospitalTime]++;

			format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Memulihkan... %d", 15 - PlayerData[i][pHospitalTime]);
			GameTextForPlayer(i, str, 1000, 3);

			ApplyAnimation(i, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);

			if (PlayerData[i][pHospitalTime] >= 15)
			{
       			SetPlayerPos(i, 1172.2261,-1300.2375,18.8628);
			    SetPlayerFacingAngle(i, 0.0000);

			    TogglePlayerControllable(i, 1);
			    SetCameraBehindPlayer(i);

			    SetPlayerVirtualWorld(i, 0);
			    SendServerMessage(i, "Kamu sudah disembuhkan di rumah sakit terdekat.");

			    GameTextForPlayer(i, " ", 1, 3);
			    ShowHungerTextdraw(i, 1);

			    PlayerData[i][pHospitalInt] = PlayerData[i][pHospital];
			    PlayerData[i][pHospital] = -1;
			    PlayerData[i][pHospitalTime] = 0;
			}
		}
		else if (PlayerData[i][pMuted] && PlayerData[i][pMuteTime] > 0)
		{
		    PlayerData[i][pMuteTime]--;

		    if (!PlayerData[i][pMuteTime])
		    {
				PlayerData[i][pMuted] = 0;
				PlayerData[i][pMuteTime] = 0;
		    }
		}
		else if (PlayerData[i][pGraffiti] != -1 && PlayerData[i][pGraffitiTime] > 0)
		{
			if (Graffiti_Nearest(i) != PlayerData[i][pGraffiti])
			{
			    PlayerData[i][pGraffiti] = -1;
                PlayerData[i][pGraffitiTime] = 0;
			}
			else
			{
	            PlayerData[i][pGraffitiTime]--;

	            if (PlayerData[i][pGraffitiTime] < 1)
				{
				    strunpack(str, PlayerData[i][pGraffitiText]);
	                format(GraffitiData[PlayerData[i][pGraffiti]][graffitiText], 64, str);

				    GraffitiData[PlayerData[i][pGraffiti]][graffitiColor] = PlayerData[i][pGraffitiColor];

					Graffiti_Refresh(PlayerData[i][pGraffiti]);
				    Graffiti_Save(PlayerData[i][pGraffiti]);

				    ClearAnimations(i, 1);
					SendNearbyMessage(i, 30.0, COLOR_PURPLE, "** %s meninggalkan coretan disekitar.", ReturnName(i, 0));

	                PlayerData[i][pGraffiti] = -1;
	                PlayerData[i][pGraffitiTime] = 0;
				}
			}
		}
		else if (PlayerData[i][pSpamCount] > 0)
		{
		    PlayerData[i][pSpamCount]--;
		}
		else if (PlayerData[i][pCommandCount] > 0)
		{
		    PlayerData[i][pCommandCount]--;
		}
		else if (PlayerData[i][pVendorTime] > 0)
		{
		    PlayerData[i][pVendorTime]--;
		}
		else if (PlayerData[i][pDrinkTime] > 0)
		{
		    PlayerData[i][pDrinkTime]--;
		}
		else if (PlayerData[i][pAdTime] > 0)
		{
		    PlayerData[i][pAdTime]--;
		}
		else if (PlayerData[i][pSpeedTime] > 0)
		{
		    PlayerData[i][pSpeedTime]--;
		}
		else if (PlayerData[i][pBleeding] && PlayerData[i][pBleedTime] > 0)
		{
		    if (--PlayerData[i][pBleedTime] == 0)
		    {
		        SetPlayerHealth(i, ReturnHealth(i) - 3.0);
			    PlayerData[i][pBleedTime] = 10;

			    CreateBlood(i);
			    SetTimerEx("HidePlayerBox", 500, false, "dd", i, _:ShowPlayerBox(i, 0xFF000066));
			}
		}
		else if (PlayerData[i][pFingerTime] > 0)
		{
		    PlayerData[i][pFingerTime]--;

		    if (!PlayerData[i][pFingerTime] && DroppedItems[PlayerData[i][pFingerItem]][droppedModel] && IsPlayerInRangeOfPoint(i, 1.5, DroppedItems[PlayerData[i][pFingerItem]][droppedPos][0], DroppedItems[PlayerData[i][pFingerItem]][droppedPos][1], DroppedItems[PlayerData[i][pFingerItem]][droppedPos][2]))
		    {
		        SendServerMessage(i, "Pemindai sidik jari mendeteksi kecocokan: %s.", DroppedItems[PlayerData[i][pFingerItem]][droppedPlayer]);
                PlayerData[i][pFingerItem] = -1;
			}
		}
		else if (PlayerData[i][pDrugUsed] != 0 && PlayerData[i][pDrugTime] > 0)
		{
		    if (--PlayerData[i][pDrugTime] && 1 <= PlayerData[i][pDrugUsed] <= 3 && GetPlayerDrunkLevel(i) < 5000) {
		        SetPlayerDrunkLevel(i, 10000);

				PlayerTextDrawShow(i, PlayerData[i][pTextdraws][8]);

				if (PlayerData[i][pDrugUsed] == 3) {
				    SetPlayerWeather(i, -67);
				    SetPlayerTime(i, 12, 12); // Set the time (the drug weather is buggy at night)
				}
			}
		    if (1 <= PlayerData[i][pDrugUsed] <= 3 && ReturnHealth(i) <= 95) {
		    	SetPlayerHealth(i, ReturnHealth(i) + 5);
			}
		    if (!PlayerData[i][pDrugTime])
		    {
		        new
	        		time[3];

        		gettime(time[0], time[1], time[2]);
				SetPlayerTime(i, time[0], time[1]);

		        SetPlayerDrunkLevel(i, 500);
				PlayerTextDrawHide(i, PlayerData[i][pTextdraws][8]);

				PlayerData[i][pDrugUsed] = 0;
		        SendServerMessage(i, "Efek dari obat sudah mereda.");
		    }
		}
		else if (PlayerData[i][pStunned] > 0)
		{
            PlayerData[i][pStunned]--;

			if (GetPlayerAnimationIndex(i) != 388)
            	ApplyAnimation(i, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);

            if (!PlayerData[i][pStunned])
            {
                TogglePlayerControllable(i, 1);
                ShowPlayerFooter(i, "Kamu tidak lagi ~r~distunt.");
			}
		}
		else if (PlayerData[i][pJailTime] > 0)
		{
		    static
		        hours,
		        minutes,
		        seconds;

		    PlayerData[i][pJailTime]--;

			GetElapsedTime(PlayerData[i][pJailTime], hours, minutes, seconds);

			format(str, sizeof(str), "~g~Waktu dipenjara:~w~ %02d:%02d:%02d", hours, minutes, seconds);
			PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][70], str);

		    if (!PlayerData[i][pJailTime])
		    {
		        PlayerData[i][pPrisoned] = 0;

		        SetDefaultSpawn(i);
		        ShowHungerTextdraw(i, 1);
		        SetPlayerColor(i, COLOR_WHITE);

				SendServerMessage(i, "Kamu berhasil bebas dari penjara.");
		        PlayerTextDrawHide(i, PlayerData[i][pTextdraws][70]);
			}
		}
		else if (PlayerData[i][pTrackTime] > 0 && IsPlayerConnected(PlayerData[i][pMDCPlayer]) && GetFactionType(i) == FACTION_POLICE)
		{
		    PlayerData[i][pTrackTime]--;

		    if (!PlayerData[i][pTrackTime])
		    {
		        if ((id = House_Inside(PlayerData[i][pMDCPlayer])) != -1)
				{
				    PlayerData[i][pCP] = 1;

				    SetPlayerCheckpoint(i, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2], 3.0);
		            SendServerMessage(i, "Lokasi %s terakhir dilaporkan berada di \"%s\" (ditandai di radar).", ReturnName(PlayerData[i][pMDCPlayer], 0), HouseData[id][houseAddress]);
		        }
		        else if ((id = Business_Inside(PlayerData[i][pMDCPlayer])) != -1)
		        {
		            PlayerData[i][pCP] = 1;

		            SetPlayerCheckpoint(i, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2], 3.0);
		            SendServerMessage(i, "Lokasi %s terakhir dilaporkan berada di \"%s\" (ditandai di radar).", ReturnName(PlayerData[i][pMDCPlayer], 0), BusinessData[id][bizName]);
		        }
		        else if (GetPlayerInterior(PlayerData[i][pMDCPlayer]) == 0)
		        {
		            static
		                Float:fX,
		                Float:fY,
		                Float:fZ;

		            GetPlayerPos(PlayerData[i][pMDCPlayer], fX, fY, fZ);
		            PlayerData[i][pCP] = 1;

                    SetPlayerCheckpoint(i, fX, fY, fZ, 3.0);
		            SendServerMessage(i, "Lokasi %s terakhir dilaporkan berada di \"%s\" (ditandai di radar).", ReturnName(PlayerData[i][pMDCPlayer], 0), GetLocation(fX, fY, fZ));
		        }
		        else
		        {
		            SendServerMessage(i, "Tidak dapat menemukan %s; targetnya di luar jangkauan(didalam sebuah interior).", ReturnName(PlayerData[i][pMDCPlayer], 0));
				}
			}
		}
		else if (PlayerData[i][pCooking] && IsPlayerSpawned(i))
		{
		    PlayerData[i][pCookingTime]--;

		    if (House_Inside(i) == PlayerData[i][pCookingHouse])
		    {
			    format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~~h~Memasak...~w~ %d detik", PlayerData[i][pCookingTime]);
			    GameTextForPlayer(i, str, 1200, 3);
			}
		    if (PlayerData[i][pCookingTime] < 1)
		    {
		        if (House_Inside(i) != PlayerData[i][pCookingHouse])
		        {
		            SendServerMessage(i, "Kamu telah meninggalkan makanan kamu tanpa dijaga dan membakarnya.");
		        }
		        else
				{
					switch (PlayerData[i][pCooking])
		        	{
                    	case 1:
		            	{
		               	    id = Inventory_Add(i, "Cooked Burger", 2703, 1);

		               	    if (id == -1)
		               	        return SendErrorMessage(i, "Kamu tidak memiliki sisa slot yang tersisa.");

		                	SendNearbyMessage(i, 30.0, COLOR_PURPLE, "** Microwave berbunyi, kamu bisa mencium harum sebuah burger! (( %s ))", ReturnName(i, 0));
		                	SendServerMessage(i, "The cooked burger telah ditambahkan ke inventory kamu.");
		            	}
			            case 2:
			            {
			                id = Inventory_Add(i, "Cooked Pizza", 2702, 6);

			                if (id == -1)
		               	        return SendErrorMessage(i, "Kamu tidak memiliki sisa slot yang tersisa.");

		    	            SendNearbyMessage(i, 30.0, COLOR_PURPLE, "** Microwave berbunyi, kamu bisa mencium harum sebuah pizza! (( %s ))", ReturnName(i, 0));
		    	            SendServerMessage(i, "The cooked pizza telah ditambahkan ke inventory kamu.");
		        	    }
					}
				}
                PlayerData[i][pCooking] = 0;
                PlayerData[i][pCookingTime] = 0;
                PlayerData[i][pCookingHouse] = -1;
		    }
		}
		else if (PlayerData[i][pDrivingTest] && IsPlayerInVehicle(i, PlayerData[i][pTestCar]))
		{
		    if (!IsPlayerInRangeOfPoint(i, 100.0, g_arrDrivingCheckpoints[PlayerData[i][pTestStage]][0], g_arrDrivingCheckpoints[PlayerData[i][pTestStage]][1], g_arrDrivingCheckpoints[PlayerData[i][pTestStage]][2]))
			{
		        CancelDrivingTest(i);
				SendClientMessage(i, COLOR_LIGHTRED, "[WARNING]:{FFFFFF} Kamu telah gagal dalam ujian karena meninggalkan area uji.");
    		}
			else if (GetPlayerSpeed(i) >= 55.0)
   			{
				if (++PlayerData[i][pTestWarns] < 3)
				{
    				SendClientMessageEx(i, COLOR_LIGHTRED, "[WARNING]:{FFFFFF} Kamu terlalu cepat, melambatlah! (%d/3)", PlayerData[i][pTestWarns]);
        		}
	       		else
				{
    				CancelDrivingTest(i);
        			SendClientMessage(i, COLOR_LIGHTRED, "[WARNING]:{FFFFFF} Kamu telah gagal dalam tes karena terlalu cepat ngebut!");
			    }
			}
		}
		else if (IsPlayerInsideTaxi(i))
		{
		    PlayerData[i][pTaxiTime]++;

		    if (PlayerData[i][pTaxiTime] == 15)
		    {
		        PlayerData[i][pTaxiTime] = 0;
		        PlayerData[i][pTaxiFee] += 10;
		    }
		    format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~$%d...~w~ %d detik", PlayerData[i][pTaxiFee], PlayerData[i][pTaxiTime]);

			GameTextForPlayer(i, str, 1100, 3);
			GameTextForPlayer(GetVehicleDriver(GetPlayerVehicleID(i)), str, 1100, 3);
		}
		if (PlayerData[i][pCreated] && !PlayerData[i][pTutorial] && !PlayerData[i][pJailTime] && !PlayerData[i][pInjured] && PlayerData[i][pHospital] == -1 && PlayerData[i][pCreated] && IsPlayerSpawned(i))
		{
		    GetPlayerHealth(i, health);

		    if (++ PlayerData[i][pHungerTime] >= 300)
			{
				if (PlayerData[i][pHunger] > 0)
				{
    	        	PlayerData[i][pHunger]--;
    		    }
        		else if (PlayerData[i][pHunger] <= 0)
				{
    	        	SetPlayerHealth(i, health - 10);
        	    	FlashTextDraw(i, PlayerData[i][pTextdraws][65]);
        		}
        		PlayerData[i][pHungerTime] = 0;
        	}
	        if (++ PlayerData[i][pThirstTime] >= 280)
			{
				if (PlayerData[i][pThirst] > 0)
				{
    	        	PlayerData[i][pThirst]--;
				}
				else if (PlayerData[i][pThirst] <= 0)
				{
					SetPlayerHealth(i, health - 5);
        	    	FlashTextDraw(i, PlayerData[i][pTextdraws][66]);
        		}
        		PlayerData[i][pThirstTime] = 0;
			}
		}
		if ((id = Boombox_Nearest(i)) != INVALID_PLAYER_ID && PlayerData[i][pBoombox] != id && strlen(BoomboxData[id][boomboxURL]) && !IsPlayerInAnyVehicle(i))
		{
		    strunpack(str, BoomboxData[id][boomboxURL]);
		    PlayerData[i][pBoombox] = id;

		    StopAudioStreamForPlayer(i);
		    PlayAudioStreamForPlayer(i, str, BoomboxData[id][boomboxPos][0], BoomboxData[id][boomboxPos][1], BoomboxData[id][boomboxPos][2], 30.0, 1);
		}
		else if (PlayerData[i][pBoombox] != INVALID_PLAYER_ID && !IsPlayerInRangeOfPoint(i, 30.0, BoomboxData[PlayerData[i][pBoombox]][boomboxPos][0], BoomboxData[PlayerData[i][pBoombox]][boomboxPos][1], BoomboxData[PlayerData[i][pBoombox]][boomboxPos][2]))
		{
		    PlayerData[i][pBoombox] = INVALID_PLAYER_ID;
		    StopAudioStreamForPlayer(i);
		}
		if (PlayerData[i][pInjured] == 1 && GetPlayerAnimationIndex(i) != 388)
		{
			ApplyAnimation(i, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
		}
        if (PlayerData[i][pHealthTime] > 0)
        {
            PlayerData[i][pHealthTime]--;
		}
		if (PlayerData[i][pRangeBooth] != -1 && !IsPlayerInRangeOfPoint(i, 3.0, arrBoothPositions[PlayerData[i][pRangeBooth]][0], arrBoothPositions[PlayerData[i][pRangeBooth]][1], arrBoothPositions[PlayerData[i][pRangeBooth]][2]))
		{
			Booth_Leave(i);
		}
		format(str, sizeof(str), "%d%c", PlayerData[i][pHunger], '%');
		PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][63], str);

		format(str, sizeof(str), "%d%c", PlayerData[i][pThirst], '%');
		PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][64], str);
	}
	return 1;
}

forward UpdateTime();
public UpdateTime()
{
	static
	    time[3],
	    string[32];

	gettime(time[0], time[1], time[2]);

	if (time[0] >= 12)
		format(string, 32, "%02d:%02d PM", (time[0] == 12) ? (12) : (time[0] - 12), time[1]);

	else if (time[0] < 12)
		format(string, 32, "%02d:%02d AM", (time[0] == 0) ? (12) : (time[0]), time[1]);

	TextDrawSetString(gServerTextdraws[0], string);

	foreach (new i : Player) if (PlayerData[i][pDrugUsed] != 3) {
		SetPlayerTime(i, time[0], time[1]);
	}
	SetTimer("UpdateTime", 30000, false);
}

forward RefuelCheck();
public RefuelCheck()
{
	new
	    string[128];

	foreach (new i : Player)
	{
	    if (!PlayerData[i][pLogged] || PlayerData[i][pRefill] == INVALID_VEHICLE_ID)
	        continue;

        if (PlayerData[i][pRefill] != INVALID_VEHICLE_ID && PlayerData[i][pGasPump] != -1)
		{
		    PlayerData[i][pRefillPrice]++;

		    CoreVehicles[PlayerData[i][pRefill]][vehFuel] ++;
		    PumpData[PlayerData[i][pGasPump]][pumpFuel] --;

		    if (PumpData[PlayerData[i][pGasPump]][pumpExists])
			{
			    format(string, sizeof(string), "[Gas Pump: %d]\n{FFFFFF}Bensin tersisa: %d liter", PlayerData[i][pGasPump], PumpData[PlayerData[i][pGasPump]][pumpFuel]);
			    UpdateDynamic3DTextLabelText(PumpData[PlayerData[i][pGasPump]][pumpText3D], COLOR_DEPARTMENT, string);
			}
			if (CoreVehicles[PlayerData[i][pRefill]][vehFuel] >= 100 || GetEngineStatus(PlayerData[i][pRefill]) || !PumpData[PlayerData[i][pGasPump]][pumpExists] || PumpData[PlayerData[i][pGasPump]][pumpFuel] < 0)
			{
			    CoreVehicles[PlayerData[i][pRefill]][vehFuel] = 100;

			    GiveMoney(i, -PlayerData[i][pRefillPrice]);
			    SendServerMessage(i, "Kamu telah mengisi ulang kendaraan kamu untuk $%d.", PlayerData[i][pRefillPrice]);

			    if (PumpData[PlayerData[i][pGasPump]][pumpExists])
				{
					if (PumpData[PlayerData[i][pGasPump]][pumpFuel] < 0)
						PumpData[PlayerData[i][pGasPump]][pumpFuel] = 0;

					BusinessData[PlayerData[i][pGasStation]][bizVault] += PlayerData[i][pRefillPrice];
					Business_Save(PlayerData[i][pGasStation]);

					Pump_Save(PlayerData[i][pGasPump]);
				}
				StopRefilling(i);
			}
		}
	}
	return 1;
}

forward FuelUpdate();
public FuelUpdate()
{
	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsEngineVehicle(i) && GetEngineStatus(i))
	{
	    if (CoreVehicles[i][vehFuel] > 0)
	    {
	        CoreVehicles[i][vehFuel]--;

			if (CoreVehicles[i][vehFuel] >= 1 && CoreVehicles[i][vehFuel] <= 5)
			{
			    SendClientMessage(GetVehicleDriver(i), COLOR_LIGHTRED, "[WARNING]:{FFFFFF} Kendaraan ini rendah bahan bakar. Kamu harus mengunjungi stasiun pengisian bahan bakar!");
			}
		}
		if (CoreVehicles[i][vehFuel] <= 0)
		{
		    CoreVehicles[i][vehFuel] = 0;
		    SetEngineStatus(i, false);
		}
	}
}

public OnVehicleDeath(vehicleid)
{
//	Vehicle_RemoveLogs(vehicleid);
	if (CoreVehicles[vehicleid][vehTemporary])
	{
	    CoreVehicles[vehicleid][vehTemporary] = false;
	    DestroyVehicle(vehicleid);
	}
	for (new i = 0; i != MAX_CRATES; i ++) if (CrateData[i][crateExists] && CrateData[i][crateVehicle] == vehicleid) {
	    Crate_Delete(i);
	}
	if(GetVehicleModel(vehicleid) == 519 || GetVehicleModel(vehicleid) == 553)
    {
    	for(new i=0; i<MAX_PLAYERS; i++)
		{
			if(IsInShml[i] != 0 || IsInNev[i] !=0)
        	{
				SetPlayerHealth(i, 0);
				SendClientMessage(i, COLOR_RED, "Pesawat telah jatuh. Seiring dengan orang lain di atas pesawat, kamu telah meninggal.");
			}
		}
	}
	if(CarData[vehicleid][IndicatorXYZ][2]) DestroyObject(CarData[vehicleid][IndicatorXYZ][2]), DestroyObject(CarData[vehicleid][IndicatorXYZ][3]),DestroyObject(CarData[vehicleid][IndicatorXYZ][5]),CarData[vehicleid][IndicatorXYZ][2]=0;
	if(CarData[vehicleid][IndicatorXYZ][0]) DestroyObject(CarData[vehicleid][IndicatorXYZ][0]), DestroyObject(CarData[vehicleid][IndicatorXYZ][1]),DestroyObject(CarData[vehicleid][IndicatorXYZ][4]),CarData[vehicleid][IndicatorXYZ][0]=0;
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	SetVehicleColor(vehicleid, color1, color2);
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	SetVehiclePaintjob(vehicleid, paintjobid);
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	new
		id = Car_GetID(vehicleid),
		slot = GetVehicleComponentType(componentid);

	if (id != -1)
	{
	    CarData[id][carMods][slot] = componentid;
	    Car_Save(id);
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
//	Vehicle_RemoveLogs(vehicleid);
	vehiclecallsign[vehicleid] = 0;
    if (CoreVehicles[vehicleid][vehTemporary])
	{
	    CoreVehicles[vehicleid][vehTemporary] = false;
	    DestroyVehicle(vehicleid);
	}
    for (new i = 0; i != MAX_CRATES; i ++) if (CrateData[i][crateExists] && CrateData[i][crateVehicle] == vehicleid) {
	    Crate_Delete(i);
	}
	if (IsValidDynamicObject(CoreVehicles[vehicleid][vehCrate]) && GetVehicleModel(vehicleid) == 530)
	    DestroyDynamicObject(CoreVehicles[vehicleid][vehCrate]);
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	if (!success)
	{
	    foreach (new i : Player) if (!strcmp(PlayerData[i][pIP], ip, true) && PlayerData[i][pAdmin] < 8) {
	        Kick(i);
	    }
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: RCON login attempt failed from \"%s\".", ip);
	    Log_Write("logs/rcon_log.txt", "[%s] RCON login attempt failed from \"%s\".", ReturnDate(), ip);
	}
	else
	{
	    foreach (new i : Player) if (!strcmp(PlayerData[i][pIP], ip, true) && PlayerData[i][pAdmin] < 8) {
	        Blacklist_Add(ip, PlayerData[i][pUsername], "Server", "Unauthorized RCON");

	        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s was banned for logging into RCON without authorization.", ReturnName(i, 0));
	    	Log_Write("logs/rcon_log.txt", "[%s] %s (%s) was banned for an unauthorized RCON login.", ReturnDate(), ReturnName(i, 0), ip);

			break;
		}
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
    if (PlayerData[playerid][pMaskOn])
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
	else
	    ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);

	return 1;
}

//respawncars
forward racxx();
public racxx(){
	for (new i = 1; i != MAX_VEHICLES; i ++)
	{
	    if (IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID)
	    {
	        RespawnVehicle(i);
		}
	}
}

forward OnPlayerUseItem(playerid, itemid, name[]);
public OnPlayerUseItem(playerid, itemid, name[])
{
    if (IsFurnitureItem(name))
	{
        new id = House_Inside(playerid);

        if (id == -1)
            return SendErrorMessage(playerid, "Kamu harus berada di dalam rumah untuk menempatkan furnitur.");

		if (!House_IsOwner(playerid, id))
		    return SendErrorMessage(playerid, "Kamu hanya bisa menempatkan furnitur di rumah kamu sendiri.");

		static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:angle;

        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, angle);

        x += 5.0 * floatsin(-angle, degrees);
        y += 5.0 * floatcos(-angle, degrees);

		if (Furniture_GetCount(id) > MAX_HOUSE_FURNITURE)
		    return SendErrorMessage(playerid, "Kamu hanya bisa memiliki %d furnitur di rumahmu.", MAX_HOUSE_FURNITURE);

		new furniture = Furniture_Add(id, name, InventoryData[playerid][itemid][invModel], x, y, z, 0.0, 0.0, angle);

		if (furniture == -1)
		    return SendErrorMessage(playerid, "Server telah mencapai batas furnitur.");

		Inventory_Remove(playerid, name);
		PlayerData[playerid][pEditFurniture] = furniture;

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah meletakan \"%s\".", ReturnName(playerid, 0), name);
		EditDynamicObject(playerid, FurnitureData[furniture][furnitureObject]);
	}
	else if (!strcmp(name, "Magazine", true)) {
	    cmd_usemag(playerid, "\1");
	}
	else if (!strcmp(name, "Boombox", true)) {
	    cmd_boombox(playerid, "place");
	}
	else if (!strcmp(name, "Backpack", true)) {
	    cmd_backpack(playerid, "\1");
	}
	else if (!strcmp(name, "First Aid", true)) {
        cmd_usekit(playerid, "\1");
    }
    else if (!strcmp(name, "Cellphone", true)) {
        cmd_phone(playerid, "\1");
    }
    else if (!strcmp(name, "Portable Radio", true)) {
        SendSyntaxMessage(playerid, "Ketik \"/pr [teks]\" untuk chat melalui radio.");
    }
    else if (!strcmp(name, "Fuel Can", true)) {
        cmd_fill(playerid, "\1");
    }
    else if (!strcmp(name, "Repair Kit", true)) {
        cmd_repair(playerid, "\1");
    }
    else if (!strcmp(name, "NOS Canister", true)) {
        cmd_nitrous(playerid, "\1");
    }
    else if (!strcmp(name, "Spray Can", true)) {
        cmd_paint(playerid, "\1");
    }
    else if (!strcmp(name, "GPS System", true)) {
        cmd_gps(playerid, "\1");
    }
    else if (!strcmp(name, "Marijuana", true)) {
        cmd_usedrug(playerid, "marijuana");
    }
    else if (!strcmp(name, "Cocaine", true)) {
        cmd_usedrug(playerid, "cocaine");
    }
    else if (!strcmp(name, "Heroin", true)) {
        cmd_usedrug(playerid, "heroin");
    }
    else if (!strcmp(name, "Steroids", true)) {
        cmd_usedrug(playerid, "steroids");
    }
    else if (!strcmp(name, "Soda", true)) {
        cmd_drink(playerid, "soda");
    }
    else if (!strcmp(name, "Water Bottle", true)) {
        cmd_drink(playerid, "water");
    }
    else if (!strcmp(name, "Frozen Pizza", true)) {
        cmd_cook(playerid, "pizza");
    }
    else if (!strcmp(name, "Frozen Burger", true)) {
        cmd_cook(playerid, "burger");
    }
    else if (!strcmp(name, "Armored Vest", true)) {
        cmd_vest(playerid, "\1");
    }
    else if (!strcmp(name, "Ammo Cartridge", true)) {
        cmd_ammo(playerid, "\1");
    }
    else if (!strcmp(name, "Colt 45", true)) {
        EquipWeapon(playerid, "Colt 45");
    }
    else if (!strcmp(name, "Desert Eagle", true)) {
        EquipWeapon(playerid, "Desert Eagle");
    }
    else if (!strcmp(name, "Shotgun", true)) {
        EquipWeapon(playerid, "Shotgun");
    }
    else if (!strcmp(name, "Micro SMG", true)) {
        EquipWeapon(playerid, "Micro SMG");
    }
    else if (!strcmp(name, "Tec-9", true)) {
        EquipWeapon(playerid, "Tec-9");
    }
    else if (!strcmp(name, "MP5", true)) {
        EquipWeapon(playerid, "MP5");
    }
    else if (!strcmp(name, "AK-47", true)) {
        EquipWeapon(playerid, "AK-47");
    }
    else if (!strcmp(name, "M4", true)) {
        EquipWeapon(playerid, "M4");
    }
    else if (!strcmp(name, "Rifle", true)) {
        EquipWeapon(playerid, "Rifle");
    }
    else if (!strcmp(name, "Sniper", true)) {
        EquipWeapon(playerid, "Sniper");
    }
    else if (!strcmp(name, "Golf Club", true)) {
        EquipWeapon(playerid, "Golf Club");
    }
    else if (!strcmp(name, "Knife", true)) {
        EquipWeapon(playerid, "Knife");
    }
    else if (!strcmp(name, "Shovel", true)) {
        EquipWeapon(playerid, "Shovel");
    }
    else if (!strcmp(name, "Katana", true)) {
        EquipWeapon(playerid, "Katana");
    }
    else if (!strcmp(name, "Marijuana Seeds", true)) {
        cmd_plant(playerid, "Weed");
    }
    else if (!strcmp(name, "Cocaine Seeds", true)) {
        cmd_plant(playerid, "Cocaine");
    }
    else if (!strcmp(name, "Heroin Opium Seeds", true)) {
        cmd_plant(playerid, "Heroin");
    }
    else if (!strcmp(name, "Crowbar", true)) {
        cmd_crowbar(playerid, "Crowbar");
    }
    else if (!strcmp(name, "Screwdriver", true)) {
        cmd_screwdriver(playerid, "Screwdriver");
    }
    else if (!strcmp(name, "Cooked Pizza", true))
	{
        if (PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "Kamu tidak lapar sekarang.");

        if (!IsPlayerAttachedObjectSlotUsed(playerid, 4))
		{
		    SetPlayerAttachedObject(playerid, 4, 2702, 6, 0.173041, 0.049197, 0.056789, 0.000000, 274.166107, 299.057983, 1.000000, 1.000000, 1.000000);
			SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, 4);
		}
        PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 15 > 100) ? (100) : (PlayerData[playerid][pHunger] + 15);
		Inventory_Remove(playerid, "Cooked Pizza");

		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengambil sepotong pizza dan memakannya.", ReturnName(playerid, 0));
    }
    else if (!strcmp(name, "Cooked Burger", true))
	{
	    if (PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "Kamu tidak lapar sekarang.");

		if (!IsPlayerAttachedObjectSlotUsed(playerid, 4))
		{
		    SetPlayerAttachedObject(playerid, 4, 2703, 6, 0.078287, 0.019677, -0.001004, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
			SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, 4);
		}
        PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 20 > 100) ? (100) : (PlayerData[playerid][pHunger] + 20);
		Inventory_Remove(playerid, "Cooked Burger");

		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengambil burger yang dimasak dan memakannya.", ReturnName(playerid, 0));
    }
    else if (!strcmp(name, "Chicken", true))
	{
	    if (PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "Kamu tidak lapar sekarang.");

        PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 25 > 100) ? (100) : (PlayerData[playerid][pHunger] + 25);
		Inventory_Remove(playerid, "Chicken");

		ApplyAnimation(playerid, "VENDING", "VEND_Eat_P", 4.1, 0, 0, 0, 0, 0, 1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengambil sepotong ayam dan memakannya.", ReturnName(playerid, 0));
    }
    return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if ((weaponid >= 22 && weaponid <= 38) && hittype == BULLET_HIT_TYPE_OBJECT && PlayerData[playerid][pRangeBooth] != -1 && hitid == g_BoothObject[PlayerData[playerid][pRangeBooth]])
 	{
 	    static
	        string[128];

		PlayerPlaySound(playerid, 6401, 0.0, 0.0, 0.0);

		PlayerData[playerid][pTargets]++;
		DestroyDynamicObject(g_BoothObject[PlayerData[playerid][pRangeBooth]]);

		format(string, sizeof(string), "~b~Target:~w~ %d/10", PlayerData[playerid][pTargets]);
		PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][81], string);

		SetTimerEx("UpdateBooth", 3000, false, "dd", playerid, PlayerData[playerid][pRangeBooth]);
	}
	if (weaponid == 23 && PlayerData[playerid][pTazer] && GetFactionType(playerid) == FACTION_POLICE) {
	    PlayerPlaySoundEx(playerid, 6003);
	}
	if ((weaponid >= 22 && weaponid <= 38) && hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
	    if (PlayerData[hitid][pRangeBooth] != -1 || PlayerData[hitid][pHospital] != -1)
	        return 0;

		if (PlayerData[hitid][pDrugUsed] == 2)
		{
		    new
				Float:damage = floatdiv(g_arrWeaponDamage[weaponid], 2),
				Float:health;

		    GetPlayerHealth(hitid, health);
		    SetPlayerHealth(hitid, floatsub(health, damage));

		    return 0;
		}
	}
	if ((22 <= weaponid <= 38) && (GetPlayerWeaponState(playerid) == WEAPONSTATE_LAST_BULLET && GetPlayerAmmo(playerid) == 1) && !IsPlayerAttachedObjectSlotUsed(playerid, 4))
 	{
  		switch (weaponid) {
 	        case 22: Inventory_Add(playerid, "Colt 45", 346);
 	        case 24: Inventory_Add(playerid, "Desert Eagle", 348);
 	        case 25: Inventory_Add(playerid, "Shotgun", 349);
 	        case 28: Inventory_Add(playerid, "Micro SMG", 352);
 	        case 29: Inventory_Add(playerid, "MP5", 353);
 	        case 30: Inventory_Add(playerid, "AK-47", 355);
 	        case 31: Inventory_Add(playerid, "M4", 356);
 	        case 32: Inventory_Add(playerid, "Tec-9", 372);
 	        case 33: Inventory_Add(playerid, "Rifle", 357);
 	        case 34: Inventory_Add(playerid, "Sniper", 358);
		}
 	    ResetWeapon(playerid, weaponid);

 	    HoldWeapon(playerid, weaponid);
 	    SendServerMessage(playerid, "Kamu harus memasang magazine untuk senjata ini (tekan 'N' untuk menyimpan).");
	}
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	if((0 <= weaponid <= 46) || weaponid == 54)
	{
		if(BODY_PART_TORSO <= bodypart <= BODY_PART_HEAD) Damage[playerid][(bodypart - 3)][weaponid]++;
	}
	if (PlayerData[playerid][pFirstAid])
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[WARNING]:{FFFFFF} First aid kit tidak lagi berlaku saat kamu memberikan damage.");

        PlayerData[playerid][pFirstAid] = 0;
		KillTimer(PlayerData[playerid][pAidTimer]);
	}
	return 1;
}
public OnGameModeExit()
{
	//Pizza
	Delete3DTextLabel(pizza_jobtext);
	Delete3DTextLabel(pizza_restocktext);
	DestroyPickup(pizza_jobpickup);
	DestroyPickup(pizza_restockpickup);
	DestroyVehicle(pizzabikes[0]);
	DestroyVehicle(pizzabikes[1]);
	DestroyVehicle(pizzabikes[2]);
	DestroyVehicle(pizzabikes[3]);
	DestroyVehicle(pizzabikes[4]);
	KillTimer(TutorialTimer);
	//End
	//jobkoran
	Delete3DTextLabel(koran_jobtext);
	Delete3DTextLabel(koran_antarkoran);
	DestroyPickup(koran_jobpickup);
	DestroyPickup(koran_antarpickup);
	DestroyVehicle(speda[0]);
	DestroyVehicle(speda[1]);
	DestroyVehicle(speda[2]);
	DestroyVehicle(speda[3]);
	DestroyVehicle(speda[4]);
	DestroyVehicle(speda[5]);
	DestroyVehicle(speda[6]);
	DestroyVehicle(speda[7]);
	
	//end

	//penyapu
 	Delete3DTextLabel(penyapu_text);
	DestroyPickup(penyapu_pickup);
	DestroyVehicle(mobilpenyapu[0]);
	DestroyVehicle(mobilpenyapu[1]);
	DestroyVehicle(mobilpenyapu[2]);
	//END
	
	//truckerjob
	DestroyPickup(truckerjob_pickup);
	DestroyPickup(truckerpos_pickup);
	DestroyVehicle(truckers[0]);
	DestroyVehicle(truckers[1]);
	DestroyVehicle(truckers[2]);
	DestroyVehicle(truckers[3]);
	DestroyVehicle(truckers[4]);
	DestroyVehicle(truckers[5]);
	DestroyVehicle(truckers[6]);
	DestroyVehicle(truckers[7]);
	DestroyVehicle(truckers[8]);
	DestroyVehicle(truckers[9]);
	DestroyVehicle(truckers[10]);
	DestroyVehicle(truckers[11]);
	DestroyVehicle(truckers[12]);
	DestroyVehicle(truckers[13]);
	//END
	
    for(new i=0; i<MAX_PLAYERS; i++){
    	TextDrawHideForPlayer(i, Zones[i]);
	}
	foreach(new i : Player)
	{
	    Player_ResetCutting(i);
		Player_RemoveLog(i);

		DestroyPlayerProgressBar(i, CuttingBar[i]);
	}

	foreach(new i : Buyers) DestroyActor(BuyerData[i][buyerActorID]);

	db_close(ScriptDBHandle);
	print("  [Lumberjack] Unloaded.");
	
	//ELM System!
	new panels, doors, lights, tires;
	for(new i=0; i<GetVehiclePoolSize(); i++)
	{
	    KillTimer(FlashTime[i]);
	    
	    GetVehicleDamageStatus(i, panels, doors, lights, tires);
	    UpdateVehicleDamageStatus(i, panels, doors, 0, tires);
	}
	
	for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists]) {
		Backpack_Refresh(i);
		Backpack_Save(i);
	}
	for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists]) {
		Backpack_Refresh(i);
		Backpack_Save(i);
	}
    for (new i; i < MAX_GARBAGE_BINS; i++) if(GarbageData[i][garbageExists]) {
        Garbage_Save(i);
    }
    for (new i; i < MAX_BUSINESSES; i++) if(BusinessData[i][bizExists]) {
        Business_Save(i);
    }
    for (new i; i < MAX_HOUSES; i++) if(HouseData[i][houseExists]) {
        House_Save(i);
    }
    for (new i; i < MAX_ENTRANCES; i++) if(EntranceData[i][entranceExists]) {
        Entrance_Save(i);
    }
    for (new i; i < MAX_GATES; i++) if(GateData[i][gateExists]) {
        Gate_Save(i);
    }
    return 1;
}
public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid)
{
	if (damagedid != INVALID_PLAYER_ID)
	{
		PlayerData[damagedid][pLastShot] = playerid;
		PlayerData[damagedid][pShotTime] = gettime();

		if (IsBleedableWeapon(weaponid) && !PlayerData[damagedid][pBleeding] && ReturnArmour(damagedid) < 1 && PlayerData[playerid][pRangeBooth] == -1 && PlayerData[damagedid][pHospital] == -1)
		{
		    if (!PlayerHasTazer(playerid) && !PlayerHasBeanBag(playerid))
		    {
			    PlayerData[damagedid][pBleeding] = 1;
			    PlayerData[damagedid][pBleedTime] = 10;

				CreateBlood(damagedid);
			    SetTimerEx("HidePlayerBox", 500, false, "dd", damagedid, _:ShowPlayerBox(damagedid, 0xFF000066));
			}
		}
		if (PlayerData[playerid][pDrugUsed] == 4 && (weaponid >= 0 && weaponid <= 15))
		{
		    SetPlayerHealth(damagedid, ReturnHealth(damagedid) - 6);
		}
        if (GetFactionType(playerid) == FACTION_POLICE && PlayerData[playerid][pTazer] && PlayerData[damagedid][pStunned] < 1 && weaponid == 23)
        {
			if (GetPlayerState(damagedid) != PLAYER_STATE_ONFOOT)
			    return SendErrorMessage(playerid, "Kamu harus berjalan kaki untuk menyetrum player.");

            if (GetPlayerDistanceFromPlayer(playerid, damagedid) > 10.0)
                return SendErrorMessage(playerid, "Kamu harus lebih dekat untuk menyetrum player.");

            new
                string[64];

			format(string, sizeof(string), "Kamu telah ~r~tersetrum~w~ oleh %s.", ReturnName(playerid, 0));

            PlayerData[damagedid][pStunned] = 10;
            TogglePlayerControllable(damagedid, 0);

            ApplyAnimation(damagedid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
            ShowPlayerFooter(damagedid, string);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyetrum %s dengan tazernya.", ReturnName(playerid, 0), ReturnName(damagedid, 0));
        }
        if (GetFactionType(playerid) == FACTION_POLICE && PlayerData[playerid][pBeanBag] && PlayerData[damagedid][pStunned] < 1 && weaponid == 25)
        {
			if (GetPlayerState(damagedid) != PLAYER_STATE_ONFOOT)
			    return SendErrorMessage(playerid, "Player harus jalan kaki agar bisa disetrum.");

            if (GetPlayerDistanceFromPlayer(playerid, damagedid) > 10.0)
                return SendErrorMessage(playerid, "Kamu harus lebih dekat untuk menembak player.");

            new
                string[64];

			format(string, sizeof(string), "Kamu telah ~r~disetrum~w~ oleh %s.", ReturnName(playerid, 0));

            PlayerData[damagedid][pStunned] = 10;
            TogglePlayerControllable(damagedid, 0);

            ApplyAnimation(damagedid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
            ShowPlayerFooter(damagedid, string);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah distun oleh %s dengan shotgun beanbag.", ReturnName(playerid, 0), ReturnName(damagedid, 0));
        }
	}
	return 1;
}
public Zones_Update()
{
	new zone[MAX_ZONE_NAME], string[30];
	for(new i=0; i<MAX_PLAYERS; i++){
	GetPlayer2DZone(i, zone, MAX_ZONE_NAME);
	if(Inventory_HasItem(i, "GPS System"))
	{
		format(string,sizeof(string),"%s", zone);
		TextDrawSetString(Zones[i], string);
	}
	else
	{
	    TextDrawSetString(Zones[i], "NO GPS");
	}
	TextDrawShowForPlayer(i, Zones[i]);
	if(RentTime[i] >= 1)
	{
		if(IsARentCar(GetPlayerVehicleID(i)))
		{
					RentTime[i] = RentTime[i] + 5;
					if(GetMoney(i) < 2)
					{
						RemovePlayerFromVehicle(i);
						RentTime[i] = 0;
					}
					if(RentTime[i] >= 11)
					{
						RentTime[i] = 1;
						GiveMoney(i, -2);
						RentMoneySpent[i] += 2;
						format(string,sizeof(string),"rentcar cost: ~g~$%d", RentMoneySpent[i]);
						PlayerTextDrawSetString(i, RentCarText[i], string);
						PlayerTextDrawShow(i, RentCarText[i]);
						RentCar_Tax(2);
					}
		}
		else
		{
					PlayerTextDrawHide(i, RentCarText[i]);
					RentTime[i] = 0;
					RentMoneySpent[i] = 0;
		}
	}
	}
	return 1;
}
stock GetPlayer2DZone(playerid, zone[], len) //Credits to Cueball, Betamaster, Mabako, and Simon (for finetuning).
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
 	for(new i = 0; i != sizeof(gSAZones); i++ )
 	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
		{
		    return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
		}
	}
	return 0;
}

stock GetPlayer3DZone(playerid, zone[], len) //Credits to Cueball, Betamaster, Mabako, and Simon (for finetuning).
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
 	for(new i = 0; i != sizeof(gSAZones); i++ )
 	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4] && z >= gSAZones[i][SAZONE_AREA][2] && z <= gSAZones[i][SAZONE_AREA][5])
		{
		    return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
		}
	}
	return 0;
}
public OnPlayerDeath(playerid, killerid, reason)
{
	Player_ResetCutting(playerid);
	Player_DropLog(playerid, 1);
	if (killerid != INVALID_PLAYER_ID)
	{
		// Event system by Lilx9
		if(PlayerData[playerid][pEventDuty] != 0)
		{
			if(EventData[EventMode] == 2)
			{
				if (1 <= reason <= 46)
				{
					SendClientMessageToAllEx(COLOR_LIGHTRED, "[{FFA500}EVENT{FFFFFF}]: %s telah membunuh %s dengan senjata %s.", ReturnName(killerid, 0), ReturnName(playerid, 0), ReturnWeaponName(reason));
					EventTeam[playerid][Kills]++;
				}
			}
			else if(EventData[EventMode] == 1)
			{
				if (EventTeam[killerid][red] == EventTeam[playerid][red])
				{
					SendAdminAlert(COLOR_RED, "%s mencoba membunuh teman satu timnya menggunakan program illegal (Menggunakan senjata: %s)!", ReturnName(killerid, 0), ReturnWeaponName(reason));
					SendEventMessage(playerid, "Kamu secara otomatis dikeluarkan dari event karena melanggar rules!.");
					KickEx(playerid);
				}
				else if (1 <= reason <= 46)
				{
					SendClientMessageToAllEx(COLOR_LIGHTRED, "[{FFA500}EVENT{FFFFFF}]: %s telah membunuh %s dengan senjata %s.", ReturnName(killerid, 0), ReturnName(playerid, 0), ReturnWeaponName(reason));
				}
			}
			else if(EventData[EventMode] == 4)
			{
				if (1 <= reason <= 46)
				{
					SendClientMessageToAllEx(COLOR_LIGHTRED, "[{FFA500}EVENT{FFFFFF}]: %s telah membunuh %s dengan senjata %s.", ReturnName(killerid, 0), ReturnName(playerid, 0), ReturnWeaponName(reason));
					EventData[EventLMS]--;
				}
			}
		}
	    if (1 <= reason <= 46)
		{
			Log_Write("logs/kill_log.txt", "[%s] %s telah membunuh %s (%s).", ReturnDate(), ReturnName(killerid), ReturnName(playerid), ReturnWeaponName(reason));
			SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah membunuh %s dengan senjata %s.", ReturnName(killerid, 0), ReturnName(playerid, 0), ReturnWeaponName(reason));
		}
		else
			Log_Write("logs/kill_log.txt", "[%s] %s telah membunuh %s (alasan %d).", ReturnDate(), ReturnName(killerid), ReturnName(playerid), reason);

		if (reason == 50 && killerid != INVALID_PLAYER_ID)
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah membunuh %s akibat heli-blading.", ReturnName(killerid, 0), ReturnName(playerid, 0));

        if (reason == 29 && killerid != INVALID_PLAYER_ID && GetPlayerState(killerid) == PLAYER_STATE_DRIVER)
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah membunuh %s akibat driver shooting.", ReturnName(killerid, 0), ReturnName(playerid, 0));
	}
	if(IsInJob[playerid] == 1)
	{
	    IsInJob[playerid]=0;TipTime[playerid]=0;
	    KillTimer(InfoTimer[playerid]);
		PlayerTutorialTime[playerid]=0;
		PlayerCheckpoint[playerid]=CHECKPOINT_NONE;
		PlayerTips[playerid]=0;
		PlayerEarnings[playerid]=0;
	    if(IsValidActor(PlayerCustomer[playerid])) { DestroyActor(PlayerCustomer[playerid]); }
	    PlayerSkin[playerid]=0;
		HidePlayerIntroTexts(playerid);
		HidePlayerInfoTexts(playerid);
		HidePlayerPizzaBikeTexts(playerid);
		HideTipTimeText(playerid);
		SendClientMessage(playerid,-1,"Kamu sakit dan part-time jobmu dibatalkan!");
	}
	if(IsInBus[playerid] == 1)
	{
		IsInBus[playerid] = 0;
  		KillTimer(Timer1[playerid]);
		KillTimer(Timer2[playerid]);
	}
	if(IsInShml[playerid] == 1)
	{
	    IsInShml[playerid] = 0;
	}
	if(IsInBa[playerid] == 1)
	{
 		IsInBa[playerid] = 0;
	}
	if(IsInNev[playerid] == 1)
	{
	    IsInNev[playerid] = 0;
	}
	if(Intropic[playerid] == 1)
	{
	    Intropic[playerid] = 0;
	}
	if(InAmbulance[playerid] == 1)
	{
	    InAmbulance[playerid] = 0;
	}
	if(InEnforcer[playerid] == 1)
	{
	    InEnforcer[playerid] = 0;
	}
	if(InJourney[playerid] == 1)
	{
	    InJourney[playerid] = 0;
	}
	if(InRaindance[playerid] == 1)
	{
	    InRaindance[playerid] = 0;
	}
	waittimer();
    //HavingBall[playerid] = 0;
    //if(HavingBall[playerid]) Baller = 999;
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if (PlayerData[playerid][pTutorial] || PlayerData[playerid][pHospital] != -1 || !IsPlayerSpawned(playerid) || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured])
	    return 0;

    if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED && newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP))
		ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff", 4.0, 0, 1, 1, 0, 0, 1);

	if (newkeys & KEY_CROUCH && IsPlayerInAnyVehicle(playerid))
	{
		cmd_open(playerid, "\1");
	}
	if (newkeys & KEY_CROUCH && IsPlayerInRangeOfPoint(playerid, 1.5, -226.4219, 1408.4594, 26.7734) && PlayerData[playerid][pTutorialStage] == 1)
	{
	    DisablePlayerCheckpoint(playerid);

		PlayerData[playerid][pTutorialStage] = 2;
	    SendClientMessage(playerid, COLOR_SERVER, "Tekan 'N' untuk mengambil item selagi jongkok.");
	}
	if (newkeys & KEY_YES && IsPlayerSpawned(playerid))
	{
	    if (PlayerData[playerid][pJailTime] > 0)
			return SendErrorMessage(playerid, "Kamu tidak dapat membuka inventorymu saat dipenjara.");

		if (PlayerData[playerid][pCuffed] > 0 || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
		    return SendErrorMessage(playerid, "Kamu tidak dapat membuka inventorymu saat ini.");

		OpenInventory(playerid);
	}
	
	if (newkeys & KEY_SPRINT && IsPlayerSpawned(playerid) && PlayerData[playerid][pLoopAnim])
	{
	    ClearAnimations(playerid);
		HidePlayerFooter(playerid);

	    PlayerData[playerid][pLoopAnim] = false;
	}
	if (newkeys & KEY_FIRE && PlayerData[playerid][pDrinking])
	{
	    if (GetPlayerAnimationIndex(playerid) != 15 && GetPlayerAnimationIndex(playerid) != 16 && !PlayerData[playerid][pDrinkTime])
     	{
		    if (GetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar]) <= 0.0)
		    {
	    	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);

				PlayerData[playerid][pDrinking] = 0;
				SendServerMessage(playerid, "Kamu sudah selesai minum dari botol.");
		    }
	    	else
	    	{
	    	    PlayerData[playerid][pDrinkTime] = 2;

	    	    switch (PlayerData[playerid][pDrinking])
	    	    {
					case 1: PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 5 >= 100) ? (100) : (PlayerData[playerid][pThirst] + 5);
                    case 2: PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 5 >= 100) ? (100) : (PlayerData[playerid][pThirst] + 5);
				}
			    SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], GetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar]) - 10.0);
			}
		}
	}
    if(newkeys & KEY_FIRE && IsInJob[playerid] == 1)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid,PIZZA_INDEX))
		{
		    SetPlayerArmedWeapon(playerid,0);
		 	ApplyAnimation(playerid,"CARRY","crry_prtial",4.1,1,1,1,1,1,1);
		}
	}
	if (newkeys & KEY_FIRE && PlayerData[playerid][pMining] && IsPlayerNearMine(playerid))
	{
	    if (PlayerData[playerid][pMineTime] > 0 || PlayerData[playerid][pMinedRock])
	        return 1;

		new id = Job_NearestPoint(playerid);

		if (id != -1)
		{
		    PlayerData[playerid][pMineTime] = 1;
		    SetTimerEx("MineTime", 400, false, "d", playerid);

		    if (PlayerData[playerid][pMineCount] < 5)
	    	{
	    	    PlayerData[playerid][pMineCount]++;

	        	ApplyAnimation(playerid, "BASEBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
            	ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.0, 0, 1, 1, 0, 0, 1);
			}
			else
			{
			    PlayerData[playerid][pMinedRock] = 1;
			    PlayerData[playerid][pMineCount] = 0;

			    RemovePlayerAttachedObject(playerid, 4);

			    ApplyAnimation(playerid, "BSKTBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
            	ApplyAnimation(playerid, "BSKTBALL", "BBALL_pickup", 4.0, 0, 1, 1, 0, 0, 1);

			    SetPlayerAttachedObject(playerid, 4, 2936, 5, 0.044377, 0.029049, 0.161334, 265.922912, 9.904896, 21.765972, 0.500000, 0.500000, 0.500000);
				SendServerMessage(playerid, "Kamu telah menggali sebuah batu. Angkat ini ke checkpoint merah.");

				SetPlayerCheckpoint(playerid, JobData[id][jobDeliver][0], JobData[id][jobDeliver][1], JobData[id][jobDeliver][2], 2.5);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			}
	    }
	}
	else if (newkeys & KEY_CTRL_BACK)
	{
	    if (PlayerData[playerid][pUsedMagazine])
	    {
	        new weaponid = PlayerData[playerid][pHoldWeapon];

	        switch (weaponid)
	        {
			    case 22:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Colt 45");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 17);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menggenggam sebuah senjata.", ReturnName(playerid, 0));
				}
				case 24:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Desert Eagle");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 7);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menggenggam sebuah senjata.", ReturnName(playerid, 0));
				}
				case 25:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Shotgun");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 8);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menggenggam sebuah senjata.", ReturnName(playerid, 0));
				}
				case 28:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Micro SMG");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 50);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menggenggam sebuah senjata.", ReturnName(playerid, 0));
				}
				case 29:
       			{
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "MP5");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 30);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menggenggam sebuah senjata.", ReturnName(playerid, 0));
				}
				case 32:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Tec-9");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 50);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menggenggam sebuah senjata.", ReturnName(playerid, 0));
				}
				case 30:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "AK-47");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 30);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menggenggam sebuah senjata.", ReturnName(playerid, 0));
				}
				case 31:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "M4");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 31);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menggenggam sebuah senjata.", ReturnName(playerid, 0));
				}
				case 33:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Rifle");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 5);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menggenggam sebuah senjata.", ReturnName(playerid, 0));
				}
		        case 34:
			    {
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Sniper");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 5);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menggenggam sebuah senjata.", ReturnName(playerid, 0));
				}
			}
			return 1;
	    }
	}
    else if (newkeys & KEY_NO && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if (!IsEngineVehicle(vehicleid))
			return SendErrorMessage(playerid, "Kamu tidak berada dalam kendaraan apapun.");

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    	return SendErrorMessage(playerid, "Kamu tidak bisa melakukan ini karena Kamu bukan pengemudi.");

		if (CoreVehicles[vehicleid][vehFuel] < 1)
	    	return SendErrorMessage(playerid, "Bensin habis.");

		if (ReturnVehicleHealth(vehicleid) <= 300)
	    	return SendErrorMessage(playerid, "Kendaraan ini rusak parah dan tidak bisa dikemudi.");

		switch (GetEngineStatus(vehicleid))
		{
	    	case false:
	    	{
	        	SetEngineStatus(vehicleid, true);
	        	ShowPlayerFooter(playerid, "Kamu telah ~g~menghidupkan~w~ mesin!");
	        	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memasukkan kunci ke dalam kunci kontak dan menyalakan mesin.", ReturnName(playerid, 0));
			}
			case true:
			{
		    	SetEngineStatus(vehicleid, false);
		    	ShowPlayerFooter(playerid, "Kamu telah ~r~mematikan~w~ mesin!");
		    	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memasukkan kunci ke dalam kunci kontak dan menghentikan mesin.", ReturnName(playerid, 0));
			if(planech[playerid] == 1)
			{
			   if(PlayerData[playerid][pFactionID] == 50)
	   			 {
						if(IsAPlane(GetPlayerVehicleID(playerid)))
						{
							PlayerData[playerid][pChannel] = 0;
						    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mematikan radio komunikasi Air Traffic Controller", ReturnName(playerid, 0));
                            PlayerPlaySound(playerid, 0, 0.0, 0.0, 0.0);
							planech[playerid] = 0;
                            StopAudioStreamForPlayer(playerid);
						}
					}
				}
			}
		}
	}
	else if (newkeys & KEY_NO && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
	    static
	        string[320];

		if (PlayerData[playerid][pTutorialStage] == 2 && IsPlayerInRangeOfPoint(playerid, 1.5, -226.4219, 1408.4594, 26.7734) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
		{
		    Inventory_Add(playerid, "Demo Soda", 1543);
		    DestroyPlayerObject(playerid, PlayerData[playerid][pTutorialObject]);

            PlayerData[playerid][pTutorialStage] = 3;
 		    SendClientMessage(playerid, COLOR_SERVER, "Tekan 'Y' untuk membuka inventorymu dan pilihlah botol soda.");
		    return 1;
		}
		if (PlayerData[playerid][pHoldWeapon] > 0)
		{
		    if (PlayerData[playerid][pUsedMagazine])
      			Inventory_Add(playerid, "Magazine", 2039);

		    HoldWeapon(playerid, 0);
		    return SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s meletakan senjata kosongnya.", ReturnName(playerid, 0));
		}
		if (PlayerData[playerid][pLoadCrate])
		{
		    for (new i = 1; i != MAX_VEHICLES; i ++) if (IsPlayerNearBoot(playerid, i))
			{
			    if (!IsLoadableVehicle(i))
			        return SendErrorMessage(playerid, "Kamu tidak bisa meletakan crates di kendaraan ini.");

			    if (CoreVehicles[i][vehLoadType] != 0 && CoreVehicles[i][vehLoadType] != PlayerData[playerid][pLoadType])
			        return SendErrorMessage(playerid, "Kendaraan ini sudah diletakan sesuatu.");

			    if (CoreVehicles[i][vehLoads] >= 6)
			        return SendErrorMessage(playerid, "Kendaraan ini hanya mampu menyimpan 6 crates.");

				CoreVehicles[i][vehLoads]++;
				CoreVehicles[i][vehLoadType] = PlayerData[playerid][pLoadType];

                ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);
                SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s meletakan sebuah crate ke bagian belakang %s.", ReturnName(playerid, 0), ReturnVehicleName(i));

                if (CoreVehicles[i][vehLoads] == 6)
                {
                    DisablePlayerCheckpoint(playerid);

					if (PlayerData[playerid][pShipment] != -1)
					{
					    PlayerData[playerid][pDeliverShipment] = 1;

					    SendServerMessage(playerid, "Kamu telah memuat semua peti. Ketik /unload di mark merah.");
					    SetPlayerCheckpoint(playerid, BusinessData[PlayerData[playerid][pShipment]][bizDeliver][0], BusinessData[PlayerData[playerid][pShipment]][bizDeliver][1], BusinessData[PlayerData[playerid][pShipment]][bizDeliver][2], 3.0);
					}
					else switch (PlayerData[playerid][pLoadType])
                    {
                    	case 1: SendServerMessage(playerid, "Kamu telah memuat semua crates. Ketik /unload di semua retail store.");
                        case 2: SendServerMessage(playerid, "Kamu telah memuat semua crates. Ketik /unload di semua weapon store.");
                        case 3: SendServerMessage(playerid, "Kamu telah memuat semua crates. Ketik /unload di semua clothing store.");
                        case 4: SendServerMessage(playerid, "Kamu telah memuat semua crates. Ketik /unload di semua fast food store.");
                        case 5: SendServerMessage(playerid, "Kamu telah memuat semua crates. Ketik /unload di semua gas station.");
                        case 6: SendServerMessage(playerid, "Kamu telah memuat semua crates. Ketik /unload di semua furniture store.");
					}
					PlayerData[playerid][pLoading] = 0;
					PlayerData[playerid][pLoadType] = 0;
                }
                PlayerData[playerid][pLoadCrate] = 0;

				RemovePlayerAttachedObject(playerid, 4);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				return 1;
			}
		}
		for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && IsPlayerInRangeOfPoint(playerid, 2.0, BackpackData[i][backpackPos][0], BackpackData[i][backpackPos][1], BackpackData[i][backpackPos][2])) {
		    return Backpack_Items(playerid, i);
		}
        if (PlayerData[playerid][pCarryTrash])
		{
			for (new i = 1; i != MAX_VEHICLES; i ++) if (GetVehicleModel(i) == 408 && IsPlayerNearBoot(playerid, i))
			{
			    if (CoreVehicles[i][vehTrash] >= 10)
			        return SendErrorMessage(playerid, "Kendaraan ini tidak bisa memuat lebih banyak sampah (limit: 10).");

				CoreVehicles[i][vehTrash]++;

				RemovePlayerAttachedObject(playerid, 4);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah memasukkan kantong sampah ke dalam Trashmaster.", ReturnName(playerid, 0));

				PlayerData[playerid][pCarryTrash] = 0;
				break;
			}
		}
	    if(CarryingLog[playerid]) return Player_DropLog(playerid);
	    if(GetPlayerWeapon(playerid) == WEAPON_CHAINSAW && CuttingTreeID[playerid] == -1 && !CarryingLog[playerid])
	    {
    		if (PlayerData[playerid][pJob] != JOB_LUMBER)
	    		return SendErrorMessage(playerid, "Kamu tidak memiliki pekerjaan sebagai lumberjack.");
		    new id = GetClosestTree(playerid);

		    if(id != -1)
		    {
		        if(!Tree_BeingEdited(id) && !TreeData[id][treeGettingCut] && TreeData[id][treeSeconds] < 1)
				{
		            SetPlayerLookAt(playerid, TreeData[id][treeX], TreeData[id][treeY]);

		            Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TreeData[id][treeLabel], E_STREAMER_COLOR, 0xE74C3CFF);
		            CuttingTimer[playerid] = SetTimerEx("CutTree", 1000, true, "i", playerid);
					CuttingTreeID[playerid] = id;
					SetPlayerProgressBarValue(playerid, CuttingBar[playerid], 0.0);
					ShowPlayerProgressBar(playerid, CuttingBar[playerid]);
					TogglePlayerControllable(playerid, 0);
					SetPlayerArmedWeapon(playerid, WEAPON_CHAINSAW);
					ApplyAnimation(playerid, "CHAINSAW", "WEAPON_csaw", 4.1, 1, 0, 0, 1, 0, 1);

					TreeData[id][treeGettingCut] = true;
		        }
		    }
	    }
		if (PlayerData[playerid][pCarryCrate] != -1)
		{
			for (new i = 1; i != MAX_VEHICLES; i ++) if (IsLoadableVehicle(i) && IsPlayerNearBoot(playerid, i))
			{
			    if (GetVehicleCrates(i) >= GetMaxCrates(i))
			        return SendErrorMessage(playerid, "Kendaraan ini tidak bisa memuat lebih banyak crates (limit: %d).", GetMaxCrates(i));

				CrateData[PlayerData[playerid][pCarryCrate]][crateVehicle] = i;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				RemovePlayerAttachedObject(playerid, 4);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah memuat crates ke dalam %s.", ReturnName(playerid, 0), ReturnVehicleName(i));

				PlayerData[playerid][pCarryCrate] = -1;
				ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);
				break;
			}
		}
		else if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
		{
		    new
				count = 0,
				id = Item_Nearest(playerid);

		    if (id != -1)
		    {
		        string = "";

		        for (new i = 0; i < MAX_DROPPED_ITEMS; i ++) if (count < MAX_LISTED_ITEMS && DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2]) && GetPlayerInterior(playerid) == DroppedItems[i][droppedInt] && GetPlayerVirtualWorld(playerid) == DroppedItems[i][droppedWorld]) {
		            NearestItems[playerid][count++] = i;

		            strcat(string, DroppedItems[i][droppedItem]);
		            strcat(string, "\n");
		        }
		        if (count == 1)
		        {
				    if (DroppedItems[id][droppedWeapon] != 0)
					{
						if (PlayerData[playerid][pChannel4] < 2)
	    					return SendErrorMessage(playerid, "Kamu harus bermain minimal hingga level 2.");

    	   				GiveWeaponToPlayer(playerid, DroppedItems[id][droppedWeapon], DroppedItems[id][droppedAmmo]);

    	                Item_Delete(id);
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mengambil sebuah %s.", ReturnName(playerid, 0), ReturnWeaponName(DroppedItems[id][droppedWeapon]));
                        Log_Write("logs/droppick.txt", "[%s] %s telah mengambil sebuah %s.", ReturnDate(), ReturnName(playerid, 0), ReturnWeaponName(DroppedItems[id][droppedWeapon]));

					}
					else if (PickupItem(playerid, id))
					{
			    		format(string, sizeof(string), "~g~%s~w~ ditambahkan ke inventory!", DroppedItems[id][droppedItem]);
			    		ShowPlayerFooter(playerid, string);
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mengambil sebuah \"%s\".", ReturnName(playerid, 0), DroppedItems[id][droppedItem]);
						Log_Write("logs/droppick.txt", "[%s] %s telah mengambil sebuah \"%s\".", ReturnDate(), ReturnName(playerid, 0), DroppedItems[id][droppedItem]);
					}
					else
						SendErrorMessage(playerid, "Kamu tidak memiliki slot dalam inventorymu.");
				}
				else Dialog_Show(playerid, PickupItems, DIALOG_STYLE_LIST, "Ambil Items", string, "Ambil", "Batal");
			}
		}
	}
	else if (newkeys & KEY_SECONDARY_ATTACK)
	{
		static
		    id = -1;

		if ((id = Vendor_Nearest(playerid)) != -1)
		{
		    switch (VendorData[id][vendorType])
		    {
		        case 1:
		        {
					if (GetMoney(playerid) < 3)
					    return SendErrorMessage(playerid, "Kamu harus memiliki minimal 3 dolar.");

					if (PlayerData[playerid][pVendorTime] > 0)
					    return SendErrorMessage(playerid, "Harap tunggu sebelum membeli dari vendor lagi.");

					if (Inventory_Count(playerid, "Cooked Burger") >= 5)
					    return SendErrorMessage(playerid, "Kamu sudah memiliki terlalu banyak burger di inventorymu.");

					id = Inventory_Add(playerid, "Cooked Burger", 2703);

					if (id != -1)
					{
					    PlayerData[playerid][pVendorTime] = 3;

					    GiveMoney(playerid, -3);
					    ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

					    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membeli burger dari penjual seharga $3.", ReturnName(playerid, 0));
						ShowPlayerFooter(playerid, "~p~burger~w~ telah ditambahkan ke inventory.");
					}
				}
				case 2:
		        {
					if (GetMoney(playerid) < 2)
					    return SendErrorMessage(playerid, "Kamu harus memiliki minimal 2 dolar.");

					if (PlayerData[playerid][pVendorTime] > 0)
					    return SendErrorMessage(playerid, "Harap tunggu sebelum membeli dari vendor lagi.");

					if (Inventory_Count(playerid, "Soda") >= 10)
					    return SendErrorMessage(playerid, "Kamu sudah terlalu banyak membeli botol soda di inventorymu.");

					id = Inventory_Add(playerid, "Soda", 1543);

					if (id != -1)
					{
                        PlayerData[playerid][pVendorTime] = 3;

					    GiveMoney(playerid, -2);
					    ApplyAnimation(playerid, "VENDING", "VEND_USE", 4.0, 0, 0, 0, 0, 0);

					    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membeli soda dari penjual seharga $2.", ReturnName(playerid, 0));
						ShowPlayerFooter(playerid, "~p~soda~w~ telah ditambahkan ke inventorymu.");
					}
				}
			}
		}
		if (PlayerData[playerid][pRangeBooth] != -1)
		{
		    Booth_Leave(playerid);
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah meninggalkan bilik menembak.", ReturnName(playerid, 0));
		}
		else for (new i = 0; i < MAX_BOOTHS; i ++) if (!g_BoothUsed[i] && IsPlayerInRangeOfPoint(playerid, 1.5, arrBoothPositions[i][0], arrBoothPositions[i][1], arrBoothPositions[i][2]))
		{
		    g_BoothUsed[i] = true;
		    PlayerData[playerid][pRangeBooth] = i;

		    UpdateWeapons(playerid);
		    ResetPlayerWeapons(playerid);

		    GivePlayerWeapon(playerid, 24, 15000);

			Booth_Refresh(playerid);
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][81], "~b~Target:~w~ 0/10");

			PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][81]);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s sudah masuk stan menembak.", ReturnName(playerid, 0));
			return 1;
		}
		if (PlayerData[playerid][pTutorialStage] == 5 && IsPlayerInRangeOfPoint(playerid, 1.5, -228.8403, 1401.1831, 27.7656))
		{
		    for (new i = 0; i < 30; i ++) {
		        SendClientMessage(playerid, -1, "");
			}
		    SetDefaultSpawn(playerid);
		    Dialog_Show(playerid, TutorialConfirm, DIALOG_STYLE_MSGBOX, "Tutorial", "Apakah kamu ingin melihat tutorial server?", "Ya", "Tidak");
		}
		if (IsPlayerInRangeOfPoint(playerid, 2.5, 1162.0607,-1309.2877,14.4256) && PlayerData[playerid][pHospitalInt] == 0) // keluar
		{
			SetPlayerPos(playerid, arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][0], arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][1], arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][2]);
			SetPlayerFacingAngle(playerid, arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][3]);

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHospitalInt] = 0;
		}
		else if (IsPlayerInRangeOfPoint(playerid, 2.5, 272.2939, 1388.8876, 11.1342))
		{
		    SetPlayerPosEx(playerid, 1206.8619, -1314.3546, 797.0880);
		    SetPlayerFacingAngle(playerid, 270.0000);

		    SetPlayerInterior(playerid, 5);
		    SetPlayerVirtualWorld(playerid, PRISON_WORLD);

		    SetCameraBehindPlayer(playerid);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 2.5, 1206.8619, -1314.3546, 796.7880) && GetPlayerVirtualWorld(playerid) == PRISON_WORLD && !PlayerData[playerid][pJailTime])
		{
		    if (PlayerData[playerid][pFreeze])
			{
		        TogglePlayerControllable(playerid, 1);
		        KillTimer(PlayerData[playerid][pFreezeTimer]);
			}
		    SetPlayerPos(playerid, 272.2939, 1388.8876, 11.1342);
		    SetPlayerFacingAngle(playerid, 270.0000);

		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);

		    SetCameraBehindPlayer(playerid);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 2.5, 1211.1923, -1354.3439, 796.7456) && GetPlayerVirtualWorld(playerid) == PRISON_WORLD)
		{
		    if (PlayerData[playerid][pFreeze])
			{
		        TogglePlayerControllable(playerid, 1);
		        KillTimer(PlayerData[playerid][pFreezeTimer]);
			}
		    SetPlayerPos(playerid, 201.8927, 1437.1788, 10.5950);
		    SetPlayerFacingAngle(playerid, 180.0000);

		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);

		    SetCameraBehindPlayer(playerid);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 2.5, 201.8927, 1437.1788, 10.5950))
		{
		    SetPlayerPosEx(playerid, 1211.1923, -1354.3439, 797.0456);
		    SetPlayerFacingAngle(playerid, 0.0000);

		    SetPlayerInterior(playerid, 5);
		    SetPlayerVirtualWorld(playerid, PRISON_WORLD);

		    SetCameraBehindPlayer(playerid);
		}
		for (new i = 0; i < sizeof(arrHospitalSpawns); i ++) if (IsPlayerInRangeOfPoint(playerid, 3.0, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2]))
		{
			SetPlayerPos(playerid, 1161.7427,-1309.1250,14.4256); // keluaran ASGH
			SetPlayerFacingAngle(playerid, 180.0000);

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, i);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHospitalInt] = i;

		    return 1;
	    }
	    if ((id = Gate_Nearest(playerid)) != -1)
		{
		    cmd_open(playerid, "\1");
		}
	    if ((id = House_Nearest(playerid)) != -1)
	    {
	        if (HouseData[id][houseLocked])
	            return SendErrorMessage(playerid, "Kamu tidak bisa masuk ke rumah yang terkunci.");

			SetPlayerPosEx(playerid, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2],3000);
			SetPlayerFacingAngle(playerid, HouseData[id][houseInt][3]);

			SetPlayerInterior(playerid, HouseData[id][houseInterior]);
			SetPlayerVirtualWorld(playerid, HouseData[id][houseID] + 5000);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHouse] = HouseData[id][houseID];
			return 1;
		}
		if ((id = House_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]))
	    {
			SetPlayerPosEx(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2],2000);
			SetPlayerFacingAngle(playerid, HouseData[id][housePos][3] - 180.0);

			SetPlayerInterior(playerid, HouseData[id][houseExterior]);
			SetPlayerVirtualWorld(playerid, HouseData[id][houseExteriorVW]);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHouse] = -1;
			return 1;
		}
        if ((id = Business_Nearest(playerid)) != -1)
	    {
	        if (BusinessData[id][bizLocked])
	            return SendErrorMessage(playerid, "Bisnis ini sudah ditutup oleh pemiliknya.");

			if (PlayerData[playerid][pTask] && !PlayerData[playerid][pStoreTask])
			{
			    PlayerData[playerid][pStoreTask] = 1;
			    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Retail Store", "Bisnis ini adalah Retail Store. Kamu dapat membeli banyak item di sini dengan menggunakan perintah /buy.\nAda banyak hal berguna yang dapat Kamu beli di sini, yang ditambahkan ke inventorymu.\n\nItem yang paling berguna adalah GPS System, karena perangkat ini memungkinkan Kamu menemukan yang Kamu butuhkan.\nKamu bisa meninggalkan bisnis ini setiap saat dengan menekan tombol 'F' di pintu.", "Tutup", "");

			    if (IsTaskCompleted(playerid))
				{
    				PlayerData[playerid][pTask] = 0;
					ShowPlayerFooter(playerid, "Kamu telah ~g~menyelesaikan~w~ semua misi!");
				}
			}
			SetPlayerPosEx(playerid, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2],3000);
			SetPlayerFacingAngle(playerid, BusinessData[id][bizInt][3]);
			SendServerMessage(playerid, "Ketik /buy jika ingin membeli sesuatu.");

			SetPlayerInterior(playerid, BusinessData[id][bizInterior]);
			SetPlayerVirtualWorld(playerid, BusinessData[id][bizID] + 6000);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pBusiness] = BusinessData[id][bizID];

			if (strlen(BusinessData[id][bizMessage]) && strcmp(BusinessData[id][bizMessage], "NULL", true)) {
			    SendClientMessage(playerid, COLOR_DEPARTMENT, BusinessData[id][bizMessage]);
			}
			return 1;
		}
		if ((id = Business_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]))
	    {
			SetPlayerPosEx(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2],3000);
			SetPlayerFacingAngle(playerid, BusinessData[id][bizPos][3] - 180.0);

			SetPlayerInterior(playerid, BusinessData[id][bizExterior]);
			SetPlayerVirtualWorld(playerid, BusinessData[id][bizExteriorVW]);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pBusiness] = -1;
			return 1;
		}
		if ((id = Entrance_Nearest(playerid)) != -1)
	    {
	        if (EntranceData[id][entranceLocked])
	            return SendErrorMessage(playerid, "Pintu masuk ini terkunci pada saat ini.");

            if (PlayerData[playerid][pTask])
			{
				if (EntranceData[id][entranceType] == 2 && !PlayerData[playerid][pBankTask])
				{
			    	PlayerData[playerid][pBankTask] = 1;
			    	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Banking", "Ini adalah salah satu bank San Andreas. Kamu bisa mengelola rekening bankmu di sini.\nSetiap pemain memiliki rekening bank standar dan rekening tabungan untuk dana tambahan.\n\nKamu bisa mengetik /bank di dalam gedung ini untuk mengelola salah satu rekening bankmu.\nJika Kamu berada di dekat mesin ATM, Kamu bisa menggunakan /atm untuk kebutuhan perbankanmu.", "Tutup", "");

				    if (IsTaskCompleted(playerid))
					{
				        PlayerData[playerid][pTask] = 0;
						ShowPlayerFooter(playerid, "Kamu berhasil ~g~menyelesaikan~w~ misi!");
					}
				}
				else if (EntranceData[id][entranceType] == 1 && !PlayerData[playerid][pTestTask])
				{
			    	PlayerData[playerid][pTestTask] = 1;
			    	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "DMV", "DMV adalah tempat pemain dapat mencoba tes mengemudi untuk mendapatkan lisensi mereka.\nKamu harus menghindari rintangan, merusak kendaraan atau mempercepat saat tes.\n\nSecara hukum diharuskan memiliki SIM untuk mengemudi di San Andreas.\nMengemudi tanpa lisensi bisa mengakibatkan beberapa konsekuensi oleh penegak hukum.", "Tutup", "");

				    if (IsTaskCompleted(playerid))
					{
				        PlayerData[playerid][pTask] = 0;
						ShowPlayerFooter(playerid, "Kamu berhasil ~g~menyelesaikan~w~ misi!");
					}
				}
			}
			if (EntranceData[id][entranceCustom])
				SetPlayerPosEx(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);

			else
			    SetPlayerPosEx(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
			if(EntranceData[id][entranceType] == 6)
			{
				inSchool[playerid] = 1;
			}
			SetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);

			SetPlayerInterior(playerid, EntranceData[id][entranceInterior]);
			SetPlayerVirtualWorld(playerid, EntranceData[id][entranceWorld]);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pEntrance] = EntranceData[id][entranceID];
			return 1;
		}
		if ((id = Entrance_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]))
	    {
	        if (EntranceData[id][entranceCustom])
				SetPlayerPosEx(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

			else
			    SetPlayerPosEx(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

			SetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3] - 180.0);
			if(EntranceData[id][entranceType] == 6)
			{
				inSchool[playerid] = 0;
			}
			SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);
			SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pEntrance] = Entrance_GetLink(playerid);
			return 1;
		}
		if ((id = Crate_Nearest(playerid)) != -1 && PlayerData[playerid][pCarryCrate] == -1 && !IsCrateInUse(id))
		{
		    // If the crate is within a stack, this function below
		    // will get the highest crate on the stack.

		    if ((id = Crate_Highest(id)) == -1)
		        id = Crate_Nearest(playerid);

		    ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);

            PlayerData[playerid][pCarryCrate] = id;
            SetPlayerAttachedObject(playerid, 4, 964, 1, -0.157020, 0.413313, 0.000000, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s meraih dan mengambil crates.", ReturnName(playerid, 0));
			SendServerMessage(playerid, "Kamu telah mengambil crates. Muat di kendaraan menggunakan tombol 'N'.");

			DestroyDynamicObject(CrateData[id][crateObject]);
			DestroyDynamic3DTextLabel(CrateData[id][crateText3D]);

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			CrateData[id][crateObject] = INVALID_OBJECT_ID;
			return 1;
		}
		if (PlayerData[playerid][pCarryCrate] != -1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY && !PlayerData[playerid][pCrafting])
		{
		    ApplyAnimation(playerid, "CARRY", "null", 4.0, 0, 0, 0, 0, 0);
		    ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);

			Crate_Drop(playerid, 1.5);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah meletakan crates.", ReturnName(playerid, 0));

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			return 1;
		}
		if (newkeys == 16)
		{
			if (IsInShml[playerid] > 0)
		    {
				new Float:X,Float:Y,Float:Z;
				GetVehiclePos(IsInShml[playerid], X, Y, Z);
				SetPlayerPosEx(playerid, X+1, Y+4, Z);
				SetPlayerInterior(playerid, 0);
				IsInShml[playerid] = 0;
			}
			else if (IsInBa[playerid] > 0)
		    {
				new Float:X,Float:Y,Float:Z;
				GetVehiclePos(IsInBa[playerid], X, Y, Z);
				SetPlayerPosEx(playerid, X+1, Y+4, Z);
				SetPlayerInterior(playerid, 0);
				IsInBa[playerid] = 0;
			}
			else if (IsInNev[playerid] > 0)
		    {
				new Float:X,Float:Y,Float:Z;
				GetVehiclePos(IsInNev[playerid], X, Y, Z);
				SetPlayerPosEx(playerid, X+1, Y+4, Z);
				SetPlayerInterior(playerid, 0);
				IsInNev[playerid] = 0;
			}
			else if (Intropic[playerid] > 0)
		    {
				new Float:X,Float:Y,Float:Z;
				GetVehiclePos(Intropic[playerid], X, Y, Z);
				SetPlayerPosEx(playerid, X+1, Y+4, Z);
				SetPlayerInterior(playerid, 0);
				Intropic[playerid] = 0;
			}
			else if (InAmbulance[playerid] > 0)
		    {
				new Float:X,Float:Y,Float:Z;
				GetVehiclePos(InAmbulance[playerid], X, Y, Z);
				SetPlayerPosEx(playerid, X+1, Y+4, Z);
				SetPlayerInterior(playerid, 0);
				InAmbulance[playerid] = 0;
			}
			else if (InEnforcer[playerid] > 0)
		    {
				new Float:X,Float:Y,Float:Z;
				GetVehiclePos(InEnforcer[playerid], X, Y, Z);
				SetPlayerPosEx(playerid, X+1, Y+4, Z);
				SetPlayerInterior(playerid, 0);
				InEnforcer[playerid] = 0;
			}
			else if (InJourney[playerid] > 0)
		    {
				new Float:X,Float:Y,Float:Z;
				GetVehiclePos(InJourney[playerid], X, Y, Z);
				SetPlayerPosEx(playerid, X+1, Y+1, Z);
				SetPlayerInterior(playerid, 0);
				InJourney[playerid] = 0;
			}
			else if (InRaindance[playerid] > 0)
		    {
				new Float:X,Float:Y,Float:Z;
				GetVehiclePos(InRaindance[playerid], X, Y, Z);
				SetPlayerPosEx(playerid, X-1, Y, Z);
				SetPlayerInterior(playerid, 0);
				InRaindance[playerid] = 0;
			}

		}
		if((newkeys & KEY_YES) && !(oldkeys & KEY_YES))
		{
	 		detonateExplosives(playerid);
		}
	}
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2)
	{
	   	if(!IsAPlane(GetPlayerVehicleID(playerid)) && !IsABoat(GetPlayerVehicleID(playerid)))
	   	{
	      	new vid = GetPlayerVehicleID(playerid);
	  	 	if(newkeys & ( KEY_LOOK_LEFT ) && newkeys & ( KEY_LOOK_RIGHT ))
			{
		    	if(CarData[vid][IndicatorXYZ][2] /*|| CarData[vid][IndicatorXYZ][5]*/) DestroyObject(CarData[vid][IndicatorXYZ][5]),DestroyObject(CarData[vid][IndicatorXYZ][2]), DestroyObject(CarData[vid][IndicatorXYZ][3]),CarData[vid][IndicatorXYZ][2]=0;
            	else if(CarData[vid][IndicatorXYZ][0] /*|| CarData[vid][IndicatorXYZ][4]*/) DestroyObject(CarData[vid][IndicatorXYZ][4]),DestroyObject(CarData[vid][IndicatorXYZ][0]), DestroyObject(CarData[vid][IndicatorXYZ][1]),CarData[vid][IndicatorXYZ][0]=0;
				else
				SetVehicleIndicator(vid,1,1);
				return 1;
			}
			if(newkeys & KEY_LOOK_RIGHT)
			{
	  		  	if(CarData[vid][IndicatorXYZ][0] /*|| CarData[vid][IndicatorXYZ][4]*/) DestroyObject(CarData[vid][IndicatorXYZ][4]), DestroyObject(CarData[vid][IndicatorXYZ][0]), DestroyObject(CarData[vid][IndicatorXYZ][1]),CarData[vid][IndicatorXYZ][0]=0;
      	      	else if(CarData[vid][IndicatorXYZ][2]/*|| CarData[vid][IndicatorXYZ][5]*/) DestroyObject(CarData[vid][IndicatorXYZ][5]), DestroyObject(CarData[vid][IndicatorXYZ][2]), DestroyObject(CarData[vid][IndicatorXYZ][3]),CarData[vid][IndicatorXYZ][2]=0;
				else
				SetVehicleIndicator(vid,0,1);
			}
			if(newkeys & KEY_LOOK_LEFT)
			{
			    if(CarData[vid][IndicatorXYZ][2]/*|| CarData[vid][IndicatorXYZ][5]*/) DestroyObject(CarData[vid][IndicatorXYZ][5]),DestroyObject(CarData[vid][IndicatorXYZ][2]), DestroyObject(CarData[vid][IndicatorXYZ][3]),CarData[vid][IndicatorXYZ][2]=0;
      	      	else if(CarData[vid][IndicatorXYZ][0] /*|| CarData[vid][IndicatorXYZ][4]*/) DestroyObject(CarData[vid][IndicatorXYZ][4]),DestroyObject(CarData[vid][IndicatorXYZ][0]), DestroyObject(CarData[vid][IndicatorXYZ][1]),CarData[vid][IndicatorXYZ][0]=0;
				else
				SetVehicleIndicator(vid,1,0);
			}
		}
	}
	return 1;
}
	//Baseball System !.
/*    if ((newkeys & KEY_SECONDARY_ATTACK) && !(oldkeys & KEY_SECONDARY_ATTACK) && !IsPlayerInAnyVehicle(playerid))
	{
		if(HavingBall[playerid])
		{
			ApplyAnimation(playerid,"BSKTBALL","BBALL_idleloop",4.1,1,1,1,1,1);
		}
		else
		{
			ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
		}
		Anim[playerid] = 1;
	}
	if (!(newkeys & KEY_SECONDARY_ATTACK) && (oldkeys & KEY_SECONDARY_ATTACK) && !IsPlayerInAnyVehicle(playerid))
	{
		ClearAnimations(playerid);
		Anim[playerid] = 0;
	}
	if(newkeys & KEY_FIRE && !IsPlayerInAnyVehicle(playerid))
	{
        if(!HavingBall[playerid])
		{
			new Float:x, Float:y, Float:z;
			GetObjectPos(Ball, x, y, z);
			if(IsPlayerInRangeOfPoint(playerid, 1.5, x, y, z))
			{
				HavingBall[playerid] = 1;
				ApplyAnimation(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0);
				if(Baller != 999)
				{
					HavingBall[Baller] = 0;
					ClearAnimations(Baller);
					ApplyAnimation(Baller, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
					ApplyAnimation(playerid,"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1);
				}
				Baller = playerid;
				BallStatus = 1;
				new Float:x2, Float:y2;
				GetXYInFrontOfPlayer(playerid, x2, y2, 0.8);
				GetPlayerPos(playerid, x, y, z);
				StopObject(Ball);
				MoveObject(Ball, x2, y2, z, 2.5);
				Anim[playerid] = 0;
				BallBounce = 0;
			}
		}
		else
		{
			if(IsPlayerInRangeOfPoint(playerid, 2, 2795.5237,-2019.6152,13.5547))
			{
				MoveObject(Ball, 2794.9612,-2019.5415,15.5075, 7.5);
				SetPlayerPos(playerid, 2795.5237,-2019.6152,13.5547);
				ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0);
				HavingBall[playerid] = 0;
				SetTimerEx("ClearAnim", 1100, 0, "d", playerid);
				SetTimerEx("BallDown2", 1100, 0, "d", playerid);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 4, 2795.5237,-2019.6152,13.5547) && IsPlayerFacingPoint(playerid, 20, 2795.5237,-2019.6152,13.5547))
			{
				new rand = random(1);
				if(rand == 0)
				{
					MoveObject(Ball, 2794.9612,-2019.5415,15.5075, 10.5+random(4));
					ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
					ShootingBall = 2;
					HavingBall[playerid] = 0;
					return 1;
				}
				ShootMiss(playerid);
				return 1;
			}
            else if(IsPlayerInRangeOfPoint(playerid, 7, 2795.5237,-2019.6152,13.5547) && IsPlayerFacingPoint(playerid, 20, 2795.5237,-2019.6152,13.5547))
			{
				new rand = random(2);
				if(rand == 0)
				{
					MoveObject(Ball, 2794.9612,-2019.5415,15.5075, 11.0+random(4));
					ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
					ShootingBall = 2;
					HavingBall[playerid] = 0;
					return 1;
				}
				ShootMiss(playerid);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 10, 2795.5237,-2019.6152,13.5547) && IsPlayerFacingPoint(playerid, 20, 2795.5237,-2019.6152,13.5547))
			{
				new rand = random(3);
				if(rand == 0)
				{
					MoveObject(Ball, 2794.9612,-2019.5415,15.5075, 11.5+random(4));
					ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
					ShootingBall = 2;
					HavingBall[playerid] = 0;
					return 1;
				}
				ShootMiss(playerid);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2, 2768.3669,-2019.6644,13.5547))
			{
				MoveObject(Ball, 2768.6289,-2019.7227,15.6287, 7.5);
				SetPlayerPos(playerid, 2768.3669,-2019.6644,13.5547);
				ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0);
				HavingBall[playerid] = 0;
				SetTimerEx("ClearAnim", 800, 0, "d", playerid);
				SetTimerEx("BallDown3", 1100, 0, "d", playerid);
				return 1;
			}
            else if(IsPlayerInRangeOfPoint(playerid, 4, 2768.3669,-2019.6644,13.5547) && IsPlayerFacingPoint(playerid, 20, 2768.3669,-2019.6644,13.5547))
			{
				new rand = random(1);
				if(rand == 0)
				{
					MoveObject(Ball, 2768.6289,-2019.7227,15.6287, 10.5+random(4));
					ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
					ShootingBall = 3;
					HavingBall[playerid] = 0;
					return 1;
				}
				ShootMiss2(playerid);
				return 1;
			}
            else if(IsPlayerInRangeOfPoint(playerid, 7, 2768.3669,-2019.6644,13.5547) && IsPlayerFacingPoint(playerid, 20, 2768.3669,-2019.6644,13.5547))
			{
				new rand = random(2);
				if(rand == 0)
				{
					MoveObject(Ball, 2768.6289,-2019.7227,15.6287, 11.0+random(4));
					ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
					ShootingBall = 3;
					HavingBall[playerid] = 0;
					return 1;
				}
				ShootMiss2(playerid);
				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 10, 2768.3669,-2019.6644,13.5547) && IsPlayerFacingPoint(playerid, 20, 2768.3669,-2019.6644,13.5547))
			{
				new rand = random(3);
				if(rand == 0)
				{
					MoveObject(Ball, 2768.6289,-2019.7227,15.6287, 11.5+random(4));
					ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
					ShootingBall = 3;
					HavingBall[playerid] = 0;
					return 1;
				}
				ShootMiss2(playerid);
				return 1;
			}
			for(new i; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(IsPlayerFacingPlayer(playerid, i, 15))
					{
						new Float:x, Float:y, Float:z;
						GetPlayerPos(i, x, y, z);
						if(IsPlayerInRangeOfPoint(playerid, 20.0, x, y, z))
						{
							Baller = i;
							HavingBall[playerid] = 0;
							ClearAnimations(playerid);
							ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
							SetTimerEx("ClearAnim", 700, 0, "d", playerid);
							MoveObject(Ball, x, y, z, 13+random(4));
							Anim[i] = 0;
							ShootingBall = 6;
							ApplyAnimation(i,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
							return 1;
						}
					}
				}
			}
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			HavingBall[playerid] = 0;
			new Float:x2, Float:y2;
			GetXYInFrontOfPlayer(playerid, x2, y2, 6.0);
			SetTimerEx("BallDown", 600, 0, "df", playerid, z);
			MoveObject(Ball, x2, y2, z+random(8)+3, 10.0+random(4));
			ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
			ShootingBall = 0;
        }*/
stock IsPlayerFacingPoint(playerid, Float:dOffset, Float:pX, Float:pY, Float:pZ)
{
	#pragma unused pZ
	new
		Float:X,
		Float:Y,
		Float:Z,
		Float:pA,
		Float:ang;

	if(!IsPlayerConnected(playerid)) return 0;

	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, pA);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(AngleInRangeOfAngle(-ang, pA, dOffset)) return true;
	return false;
}
 
stock IsPlayerFacingPlayer(playerid, targetid, Float:dOffset)
{
	new
		Float:pX,
		Float:pY,
		Float:pZ,
		Float:pA,
		Float:X,
		Float:Y,
		Float:Z,
		Float:ang;

	if(!IsPlayerConnected(playerid) || !IsPlayerConnected(targetid)) return 0;

	GetPlayerPos(targetid, pX, pY, pZ);
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, pA);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(AngleInRangeOfAngle(-ang, pA, dOffset)) return true;

	return false;
}
 
stock AngleInRangeOfAngle(Float:a1, Float:a2, Float:range)
{
	a1 -= a2;
	if((a1 < range) && (a1 > -range)) return true;

	return false;
}
 
/*forward BallDown(playerid, Float:oldz);
public BallDown(playerid, Float:oldz)
{
    new Float:x, Float:y, Float:z;
        GetObjectPos(Ball, x, y, z);
        new Float:a;
        new Float:x2, Float:y2;
        GetPlayerPos(playerid, x2, y2, a);
        GetPlayerFacingAngle(playerid, a);
        x2 += (16 * floatsin(-a, degrees));
        y2 += (16 * floatcos(-a, degrees));
        MoveObject(Ball, x2, y2, oldz-0.8, 10.0+random(3));
        Baller = 999;
        ShootingBall = 0;
        BallBounce = 1;
        return 1;
}
 
forward BallDown2(playerid);
public BallDown2(playerid)
{
	MoveObject(Ball, 2795.5237,-2019.6152,13.5547-0.8, 10.0+random(3));
	Baller = 999;
	ShootingBall = 0;
	GameTextForPlayer(playerid, "~g~Canestro!", 3000, 3);
	BallBounce = 1;
	return 1;
}
 
forward BallDown3(playerid);
public BallDown3(playerid)
{
	MoveObject(Ball, 2768.3669,-2019.6644,13.5547-0.8, 10.0+random(3));
	Baller = 999;
	ShootingBall = 0;
	GameTextForPlayer(playerid, "~g~Canestro!", 3000, 3);
	BallBounce = 1;
	return 1;
}
 
forward BallDown4(playerid);
public BallDown4(playerid)
{
	MoveObject(Ball, 2795.5237+random(5),-2019.6152+random(5),13.5547-0.8, 10.0+random(3));
	Baller = 999;
	ShootingBall = 0;
	GameTextForPlayer(playerid, "~r~Mancato!", 3000, 3);
	BallBounce = 1;
	return 1;
}
 
forward BallDown5(playerid);
public BallDown5(playerid)
{
	MoveObject(Ball, 2768.3669+random(5),-2019.6644+random(5),13.5547-0.8, 10.0+random(3));
	Baller = 999;
	ShootingBall = 0;
	GameTextForPlayer(playerid, "~r~Mancato!", 3000, 3);
	BallBounce = 1;
	return 1;
}
 
forward ShootMiss(playerid);
public ShootMiss(playerid)
{
	MoveObject(Ball, 2794.9612+random(2), -2019.5415+random(2), 15.5075+random(2), 12.5+random(4));
	ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
	ShootingBall = 4;
	HavingBall[playerid] = 0;
	return 1;
}
 
forward ShootMiss2(playerid);
public ShootMiss2(playerid)
{
	MoveObject(Ball, 2768.6289+random(2),-2019.7227+random(2),15.6287+random(2), 12.5+random(4));
	ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
	ShootingBall = 5;
	HavingBall[playerid] = 0;
	return 1;
}
 
forward ClearAnim(playerid);
public ClearAnim(playerid)
{
	ClearAnimations(playerid);
	return 1;
}*/
 
stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance) //kelar
{
	new Float:a;
	GetPlayerPos(playerid, x, y, a);
	GetPlayerFacingAngle(playerid, a);
	if (GetPlayerVehicleID(playerid))
	{
		GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}
//Ball system end!

forward PutInsideVehicle(playerid, vehicleid);
public PutInsideVehicle(playerid, vehicleid)
{
	if (!PlayerData[playerid][pDrivingTest])
	    return 0;

	RemoveFromVehicle(vehicleid);
    PutPlayerInVehicle(playerid, vehicleid, 0);
    return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    if (IsPlayerNPC(playerid))
	    return 1;
	    
		
	if (PlayerData[playerid][pTaxiDuty])
	{
        foreach (new i : Player) if (PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
	        LeaveTaxi(i, playerid);
	    }
	    SetPlayerColor(playerid, DEFAULT_COLOR);

        PlayerData[playerid][pTaxiDuty] = false;
        SendServerMessage(playerid, "Kamu tidak lagi bertugas di taksi!");
	}
    if (PlayerData[playerid][pDrivingTest])
	{
	    SetTimerEx("PutInsideVehicle", 500, false, "dd", playerid, vehicleid);
		Dialog_Show(playerid, LeaveTest, DIALOG_STYLE_MSGBOX, "Konfirmasi Keluar Tes", "Peringatan: Yakin ingin keluar dari tes mengemudi?", "Ya", "Tidak");
	}
	Seatbelt[playerid] = 0;
 	if(IsPlayerAttachedObjectSlotUsed(playerid, 17)) RemovePlayerAttachedObject(playerid, 17);
	if (PlayerData[playerid][pJob] == JOB_UNLOADER && GetVehicleModel(vehicleid) == 530)
	{
	    CoreVehicles[vehicleid][vehLoadType] = 0;
		DestroyDynamicObject(CoreVehicles[vehicleid][vehCrate]);

		CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    if (IsPlayerNPC(playerid))
	    return 1;

	if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || PlayerData[playerid][pInjured] || PlayerData[playerid][pFirstAid]) {
	    ClearAnimations(playerid);

	    return 0;
	}
	new id = Car_GetID(vehicleid);

	if (!ispassenger && id != -1 && CarData[id][carFaction] > 0 && CarData[id][carFaction] < 6 && GetFactionType(playerid) != CarData[id][carFaction]) {
	    ClearAnimations(playerid);

	    return SendErrorMessage(playerid, "Kamu tidak memiliki kunci kendaraan ini.");
	}
	if (ispassenger)
	{
		if (GetVehicleModel(vehicleid) == 519)
		{
			IsInShml[playerid]=vehicleid;
			SetPlayerPos(playerid, 1891.4706,-8156.8750,2.4471); // bentar matiin GTA
			SetPlayerFacingAngle(playerid, 0);
			SetCameraBehindPlayer(playerid);
			SetPlayerInterior(playerid, 1);
		}
		else if (GetVehicleModel(vehicleid) == 553)
		{
			IsInNev[playerid]=vehicleid;
			SetPlayerPos(playerid, 2468.996582, -2941.314209, 7.562979);
            SetPlayerFacingAngle(playerid, 0);
            SetCameraBehindPlayer(playerid);
            SetPlayerInterior(playerid, 1);
		}
	}
	

	
 	if(IsAnspeda(vehicleid))
	{
		    if(koran[playerid] >= 0)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    SendClientMessageEx(playerid, COLOR_TWPINK, "Kendaraan ini terkunci.");
			}
	}
	//penyapu
 	if(IsAnmobilpenyapu(vehicleid))
	{
			    if(penyapu[playerid] >= 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Untuk memulai menyapu jalan gunakan /mulainyapu");
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "* Untuk membatalkan menyapu jalan gunakan /batalnyapu");
				}
			    else
				{
				    RemovePlayerFromVehicle(playerid);
				    new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz);
				    SendClientMessageEx(playerid, COLOR_TWPINK, "Kendaraan ini khusus pegawai penyapu jalan.");
				}
	}
	//truckerjob
 	if(IsAntruckers(vehicleid))
	{
			    if(trucker[playerid] >= 0)
				{
					SendClientMessage(playerid, COLOR_TWPINK, "* Untuk memulai bekerja silahkan ambil trailer yang tersedia lalu pergi ke pos pemeriksaan di depan");
					SendClientMessage(playerid, COLOR_TWPINK, "* Untuk membatalkan mengirim trailer jalan gunakan /batalngirim");
				}
			    else
				{
				    RemovePlayerFromVehicle(playerid);
				    new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz);
				    SendClientMessageEx(playerid, COLOR_TWPINK, "Kendaraan ini khusus pegawai trucker.");
				}
	}
	//END
	CarBomb_OnVehicleStart(vehicleid);
	return 1;
}
public OnPlayerEnterCheckpoint(playerid)
{
	if (PlayerData[playerid][pTutorialStage])
	{
	    DisablePlayerCheckpoint(playerid);
		return 1;
	}
	
	if(PlayerCheckpoint[playerid] == PIZZA_CHECKPOINT)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid,PIZZA_INDEX))
	    {
	        new string[128];
			PlayerEarnings[playerid]+=PAY_PER_CHECKPOINT;
			format(string,sizeof(string),"Kamu mendapatkan {7FFF00}%d$ {FFFFFF}karena berhasil mengirimkan pizza!",PAY_PER_CHECKPOINT);
			SendClientMessage(playerid,-1,string);
			RemovePlayerAttachedObject(playerid,PIZZA_INDEX);
			PlayerCheckpoint[playerid]=CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
			DestroyActor(PlayerCustomer[playerid]);
			ClearAnimations(playerid);
			if(TipTime[playerid] > 0)
	        {
	            TipTime[playerid]=0;
	            new tip=random(MAX_TIP)+5;
	            PlayerTips[playerid]+=tip;
	            format(string,sizeof(string),"Selamat kamu mendapatkan {7FFF00}%d$ {FFFFFF}tip karena mengirim pizza dengan cepat!",tip);
	            SendClientMessage(playerid,-1,string);
	            PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
	            HideTipTimeText(playerid);
			}
	    }
	    else return SendClientMessage(playerid,-1,"Kamu harus memegang pizza sebelum masuk ke {FF0000}checkpoint{FFFFFF}!");
	}
	if(TruckingCheck[playerid] >= 1 && PlayerData[playerid][pUnloading] == -1)
	{
	    if (!IsPlayerInAnyVehicle(playerid))
		{
		    SendErrorMessage(playerid, "Kamu tidak di dalam kendaraan");
		    return 1;
		}
		new vehicleid = GetPlayerVehicleID(playerid);
		if (!IsLoadableVehicle(vehicleid))
  		{
  			SendErrorMessage(playerid, "Kamu tidak berada di dalam kendaraan delivery.");
  		}
	    new string[180];
        format(string, sizeof(string), "Kamu mendapatkan $%d dari misi kurir!", TruckingCheck[playerid]);
        GiveMoney(playerid, TruckingCheck[playerid]);
        TruckingCheck[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, string);
		DisablePlayerCheckpoint(playerid);
		RespawnVehicle(vehicleid);
	}
	if (PlayerData[playerid][pCP])
	{
	    DisablePlayerCheckpoint(playerid);
	    PlayerData[playerid][pCP] = 0;
	}
	if (PlayerData[playerid][pTask])
	{
	    new id = -1;

		if ((id = Entrance_Nearest(playerid)) != -1 && EntranceData[id][entranceType] == 2 && !PlayerData[playerid][pBankTask])
		    ShowPlayerFooter(playerid, "Tekan ~y~'F'~w~ untuk masuk ke bank.");

        if ((id = Business_Nearest(playerid)) != -1 && BusinessData[id][bizType] == 1 && !PlayerData[playerid][pStoreTask])
		    ShowPlayerFooter(playerid, "Tekan ~y~'F'~w~ untuk masuk ke retail store.");

        if ((id = Entrance_Nearest(playerid)) != -1 && EntranceData[id][entranceType] == 1 && !PlayerData[playerid][pTestTask])
		    ShowPlayerFooter(playerid, "Tekan ~y~'F'~w~ untuk masuk ke DMV.");

		DisablePlayerCheckpoint(playerid);
	}
 	if (PlayerData[playerid][pDealerCallMP] == 0)
 	{
   		DisablePlayerCheckpoint(playerid);
  	}
  	if (PlayerData[playerid][pDealerCallPP] == 0)
 	{
	    DisablePlayerCheckpoint(playerid);
  	}
  	if (PlayerData[playerid][pDealerCallSMGP] == 0)
 	{
	    DisablePlayerCheckpoint(playerid);
  	}
  	if (PlayerData[playerid][pDealerCallSP] == 0)
 	{
	    DisablePlayerCheckpoint(playerid);
  	}
  	if (PlayerData[playerid][pDealerCallRP] == 0)
 	{
	    DisablePlayerCheckpoint(playerid);
  	}
  	if (PlayerData[playerid][pDealerCallDP] == 0)
 	{
	    DisablePlayerCheckpoint(playerid);
  	}
	if (PlayerData[playerid][pDrivingTest])
	{
	    PlayerData[playerid][pTestStage]++;

	    if (PlayerData[playerid][pTestStage] < sizeof(g_arrDrivingCheckpoints)) {
			SetPlayerCheckpoint(playerid, g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][0], g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][1], g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][2], 3.0);
		}
		else
		{
		    static
		        Float:health;

		    GetVehicleHealth(GetPlayerVehicleID(playerid), health);

		    if (health < 950.0)
				SendErrorMessage(playerid, "Kamu telah gagal dalam tes mengemudi - kendaraan rusak!");

		    else
			{
		        GiveMoney(playerid, -50);
		        ShowPlayerFooter(playerid, "Kamu telah dikenai biaya ~r~$50~w~ untuk tes.");

		        Inventory_Add(playerid, "Car License", 1581);
		        SendServerMessage(playerid, "Kamu telah lulus tes mengemudi dan menerima lisensimu.");
		    }
  			CancelDrivingTest(playerid);
		}
	}
	else
	{
	    new
			vehicleid = GetPlayerVehicleID(playerid),
			Float:health;

		if (PlayerData[playerid][pWaypoint])
		{
		    PlayerData[playerid][pWaypoint] = 0;

		    DisablePlayerCheckpoint(playerid);
		    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][69]);
		}
		else if (PlayerData[playerid][pJob] == JOB_COURIER && !IsPlayerInAnyVehicle(playerid))
		{
			if (PlayerData[playerid][pLoading] && !PlayerData[playerid][pLoadCrate] && Job_NearestPoint(playerid) != -1)
			{
			    PlayerData[playerid][pLoadCrate] = 1;

		        SetPlayerAttachedObject(playerid, 4, 3014, 1, 0.038192, 0.371544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

				ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
				ShowPlayerFooter(playerid, "Tekan ~y~'N'~w~ didekat sebuah truk untuk memuat crates.");
			}
			else if (PlayerData[playerid][pUnloading] != -1)
			{
				if (!PlayerData[playerid][pLoadCrate])
				{
				    PlayerData[playerid][pLoadCrate] = 1;
				    ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);

			        SetPlayerAttachedObject(playerid, 4, 3014, 1, 0.038192, 0.371544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

					SetPlayerCheckpoint(playerid, BusinessData[PlayerData[playerid][pUnloading]][bizPos][0], BusinessData[PlayerData[playerid][pUnloading]][bizPos][1], BusinessData[PlayerData[playerid][pUnloading]][bizPos][2], 1.0);
					ShowPlayerFooter(playerid, "Kirim crate ke ~r~checkpoint.");

					CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoads]--;
				}
				else
				{
				    static
				        Float:fX,
				        Float:fY,
				        Float:fZ,
						string[64];

				    PlayerData[playerid][pLoadCrate] = 0;
				    ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);

				    RemovePlayerAttachedObject(playerid, 4);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

					switch (CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoadType])
					{
					    case 1:
						{
							TruckingCheck[playerid] += 50;
					        //GiveMoney(playerid, 35);
					        ShowPlayerFooter(playerid, "~g~$50~w~ telah ditambahkan ke cekmu.");
					    }
					    case 2:
						{
						    TruckingCheck[playerid] += 60;
					        //GiveMoney(playerid, 40);
					        ShowPlayerFooter(playerid, "~g~$60~w~ telah ditambahkan ke cekmu.");
					    }
					    case 3:
						{
						    TruckingCheck[playerid] += 40;
					        //GiveMoney(playerid, 30);
					        ShowPlayerFooter(playerid, "~g~$40~w~ telah ditambahkan ke cekmu.");
					    }
					    case 4:
						{
						    TruckingCheck[playerid] += 50;
					        //GiveMoney(playerid, 35);
					        ShowPlayerFooter(playerid, "~g~$50~w~ telah ditambahkan ke cekmu.");
					    }
					    case 5:
						{
						    TruckingCheck[playerid] += 45;
					        //GiveMoney(playerid, 40);
					        ShowPlayerFooter(playerid, "~g~$45~w~ telah ditambahkan ke cekmu.");
					    }
					    case 6:
						{
						    TruckingCheck[playerid] += 55;
					        //GiveMoney(playerid, 35);
					        ShowPlayerFooter(playerid, "~g~$55~w~ telah ditambahkan ke cekmu.");
					    }
					}
					if (CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoadType] == 5)
					{
						for (new i = 0; i < MAX_GAS_PUMPS; i ++) if (PumpData[i][pumpExists] && PumpData[i][pumpBusiness] == PlayerData[playerid][pUnloading]) {
						    PumpData[i][pumpFuel] += 100;

			                format(string, sizeof(string), "[Gas Pump: %d]\n{FFFFFF}Bensin tersisa: %d liter", i, PumpData[i][pumpFuel]);
						    UpdateDynamic3DTextLabelText(PumpData[i][pumpText3D], COLOR_DEPARTMENT, string);

						    Pump_Save(i);
						}
					}
					else
					{
						BusinessData[PlayerData[playerid][pUnloading]][bizProducts] += 20;
						Business_Save(PlayerData[playerid][pUnloading]);
					}
					if (CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoads] > 0)
					{
					    GetVehicleBoot(PlayerData[playerid][pUnloadVehicle], fX, fY, fZ);
					    SetPlayerCheckpoint(playerid, fX, fY, fZ, 1.0);
					}
					else
					{
					    CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoads] = 0;
					    CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoadType] = 0;

				     	PlayerData[playerid][pUnloading] = -1;
					    PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;

						DisablePlayerCheckpoint(playerid);
					    SendServerMessage(playerid, "Kamu telah mengirimkan semua crates dari kendaraan.");
					    SendServerMessage(playerid, "Kirimkan trukmu ke pos pemeriksaan untuk mendapatkan bayaran.");
					    SetPlayerCheckpoint(playerid, 2521.0376, -2090.3279, 13.4125, 5.0);

					    if (PlayerData[playerid][pShipment] != -1)
					    {
					        foreach (new i : Player) if (Business_IsOwner(i, PlayerData[playerid][pShipment])) {
					            SendServerMessage(playerid, "%s telah mengirimkan kirimanmu ke %s.", ReturnName(playerid, 0), BusinessData[PlayerData[playerid][pShipment]][bizName]);
							}
							BusinessData[PlayerData[playerid][pShipment]][bizShipment] = 0;
							Business_Save(PlayerData[playerid][pShipment]);

          					PlayerData[playerid][pShipment] = -1;
          					PlayerData[playerid][pDeliverShipment] = 0;
					    }
					}
				}
			}
		}
		else if (PlayerData[playerid][pJob] == JOB_MINER && PlayerData[playerid][pMinedRock] && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
		{
		    new money = random(60) + 20;

			SendServerMessage(playerid, "Kamu telah mendapatkan $%d untuk batu itu.", money);
			GiveMoney(playerid, money);

			PlayerData[playerid][pMinedRock] = 0;
			PlayerData[playerid][pMineCount] = 0;

			DisablePlayerCheckpoint(playerid);
			RemovePlayerAttachedObject(playerid, 4);

			SetPlayerAttachedObject(playerid, 4, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
	    else if (PlayerData[playerid][pJob] == JOB_UNLOADER && IsPlayerInWarehouse(playerid) && GetVehicleModel(vehicleid) == 530 && CoreVehicles[vehicleid][vehLoadType] == 7)
	    {
	        GetVehicleHealth(vehicleid, health);

	        CoreVehicles[vehicleid][vehLoadType] = 0;
	        DestroyDynamicObject(CoreVehicles[vehicleid][vehCrate]);

			CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
			DisablePlayerCheckpoint(playerid);

			if (health < CoreVehicles[vehicleid][vehLoadHealth]) {
			    SendErrorMessage(playerid, "Kamu telah merusak crates selama proses berlangsung.");
			}
			else {
				SendServerMessage(playerid, "Kamu telah menurunkan crates untuk $60.");
				GiveMoney(playerid, 60); // dah bener ini?
			}
		}
		else if (PlayerData[playerid][pJob] == JOB_SORTER && PlayerData[playerid][pSorting] != -1)
		{
		    if (PlayerData[playerid][pSortCrate])
		    {
		        PlayerData[playerid][pSortCrate] = 0;

		        RemovePlayerAttachedObject(playerid, 4);
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

		        ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
		        SetPlayerCheckpoint(playerid, JobData[PlayerData[playerid][pSorting]][jobPoint][0], JobData[PlayerData[playerid][pSorting]][jobPoint][1], JobData[PlayerData[playerid][pSorting]][jobPoint][2], 1.0);

				GiveMoney(playerid, 50);
				ShowPlayerFooter(playerid, "Kamu telah mendapatkan ~g~$50~w~ untuk paket.");
			}
			else
			{
                SetPlayerAttachedObject(playerid, 4, 1220, 5, 0.137832, 0.176979, 0.151424, 96.305931, 185.363006, 20.328088, 0.699999, 0.800000, 0.699999);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

				ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
				SetPlayerCheckpoint(playerid, JobData[PlayerData[playerid][pSorting]][jobDeliver][0], JobData[PlayerData[playerid][pSorting]][jobDeliver][1], JobData[PlayerData[playerid][pSorting]][jobDeliver][2], 1.0);

                PlayerData[playerid][pSortCrate] = 1;
				ShowPlayerFooter(playerid, "Kirimkan paket ke ~r~marker.");
			}
		}
	}
	//jobkoran
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 510)
	{
	    if(koran[playerid]==1)
	    {
	        new rand = random(sizeof(bmx1));
	    	antarkoran[playerid] = SetPlayerCheckpoint(playerid,bmx1[rand][0],bmx1[rand][1],bmx1[rand][2],3);
			koran[playerid] = 2;
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Masih ada koran untuk di antarkan");

	    }
	    else if(koran[playerid]==2)
	    {
	        new rand = random(sizeof(bmx1));
	    	antarkoran[playerid] = SetPlayerCheckpoint(playerid,bmx1[rand][0],bmx1[rand][1],bmx1[rand][2],3);
			koran[playerid] = 3;
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Masih ada koran untuk di antarkan");

	    }
	    else if(koran[playerid]==3)
	    {
	        new rand = random(sizeof(bmx1));
	    	antarkoran[playerid] =	SetPlayerCheckpoint(playerid,bmx1[rand][0],bmx1[rand][1],bmx1[rand][2],3);
			koran[playerid] = 4;
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Masih ada koran untuk di antarkan");

	    }
	    else if(koran[playerid]==4)
	    {
	        new rand = random(sizeof(bmx1));
	    	antarkoran[playerid] = SetPlayerCheckpoint(playerid,bmx1[rand][0],bmx1[rand][1],bmx1[rand][2],3);
			koran[playerid] = 5;
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Masih ada koran untuk di antarkan");

	    }
	    else if(koran[playerid]==5)
	    {
	        new rand = random(sizeof(bmx1));
			antarkoran[playerid] = SetPlayerCheckpoint(playerid,bmx1[rand][0],bmx1[rand][1],bmx1[rand][2],3);
			koran[playerid] = 6;
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Masih ada koran untuk di antarkan");

	    }
	    else if(koran[playerid]==6)
	    {
	    	antarkoran[playerid] = SetPlayerCheckpoint(playerid,1863.3519,-1044.6868,23.8872,3);//disini
			koran[playerid] = 7;
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Masih ada koran untuk di antarkan");
	    }
	    else if(koran[playerid]==7)
	    {
	        new rand = random(sizeof(bmx1));
	    	antarkoran[playerid] =	SetPlayerCheckpoint(playerid,bmx1[rand][0],bmx1[rand][1],bmx1[rand][2],3);
			koran[playerid] = -1;
            GiveMoney(playerid,30);
			new codet = GetPlayerVehicleID(playerid);
			SetVehicleToRespawn(codet);
            SendClientMessageEx(playerid,COLOR_YELLOW,"* Kamu mendapatkan $30 dari mengantarkan koran");
            DisablePlayerCheckpoint(playerid); //taruh dimana
            return 1;
	    }
	}
	//endkoran
	
	//truckerjob
   	if(IsPlayerInRangeOfPoint(playerid,5,-597.0900, -486.7400, 24.9400)) // Food and Drinks
 	{
					SendClientMessage(playerid, COLOR_WHITE, "Kamu mendapatkan $550 dari mengantarkan Trailer");
					trucker[playerid] = -1;
     				GiveMoney(playerid, 550);
     				new codit = GetPlayerVehicleID(playerid);
					SetVehicleToRespawn(codit);
     				DisablePlayerCheckpoint(playerid);
    }
   	if(trucker[playerid]==2)
	{
		new vehicleids = GetPlayerVehicleID(playerid);
	    new trailerId = GetVehicleTrailer(vehicleids);

		DetachTrailerFromVehicle(trailerId);
		SetVehicleToRespawn(trailerId);
		SetPlayerCheckpoint(playerid,-597.0900, -486.7400, 24.9400,3.0);//disini
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Kembali ke tempat trucker dan dapatkan bayaranmu !");
		return 1;
	}
    /*if(SetPlayerCheckpoint(playerid,1415.0300, 1099.9399, 11.0800, 3.0))
    {
    				new cowek = GetVehicleTrailer(playerid);
					SetVehicleToRespawn(cowek);
	}
	else if(SetPlayerCheckpoint(playerid,1394.2900, 1036.6000, 11.4400, 3.0))
    {
    				new cewek = GetVehicleTrailer(playerid);
					SetVehicleToRespawn(cewek);
	}
 	else if(SetPlayerCheckpoint(playerid,1409.2200, 983.4700, 12.2800, 3.0))
    {
	    			new cawik = GetVehicleTrailer(playerid);
					SetVehicleToRespawn(cawik);
	}*/
	//trucker
 
	//penyapu
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 574)
	{
	    if(penyapu[playerid]==1)
	    {
	        new rand = random(sizeof(penyapu1));
	    	mulainyapu[playerid] = SetPlayerCheckpoint(playerid,penyapu1[rand][0],penyapu1[rand][1],penyapu1[rand][2],3);
			penyapu[playerid] = 2;
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Masih ada jalan yang harus di sapu");
     	}
     	else if(penyapu[playerid]==2)
	    {
	        new rand = random(sizeof(penyapu1));
	    	mulainyapu[playerid] = SetPlayerCheckpoint(playerid,penyapu1[rand][0],penyapu1[rand][1],penyapu1[rand][2],3);
			penyapu[playerid] = 3;
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Masih ada jalan yang harus di sapu");

	    }
	    else if(penyapu[playerid]==3)
	    {
	        new rand = random(sizeof(penyapu1));
	    	mulainyapu[playerid] =	SetPlayerCheckpoint(playerid,penyapu1[rand][0],penyapu1[rand][1],penyapu1[rand][2],3);
			penyapu[playerid] = 4;
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Masih ada jalan yang harus di sapu");

	    }
	    else if(penyapu[playerid]==4)
	    {
	        new rand = random(sizeof(penyapu1));
	    	mulainyapu[playerid] = SetPlayerCheckpoint(playerid,penyapu1[rand][0],penyapu1[rand][1],penyapu1[rand][2],3);
			penyapu[playerid] = 5;
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Masih ada jalan yang harus di sapu");

	    }
	    else if(penyapu[playerid]==5)
	    {
	        new rand = random(sizeof(penyapu1));
			mulainyapu[playerid] = SetPlayerCheckpoint(playerid,penyapu1[rand][0],penyapu1[rand][1],penyapu1[rand][2],3);
			penyapu[playerid] = 6;
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Masih ada jalan yang harus di sapu");

	    }
	    else if(penyapu[playerid]==6)
	    {
	    	mulainyapu[playerid] = SetPlayerCheckpoint(playerid,1669.3743,-1881.9717,12.1225,3);//disini
			penyapu[playerid] = 7;
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Kembali ke tempat penyapu jalan dan dapatkan bayaranmu !");
	    }
	    else if(penyapu[playerid]==7)
	    {
	        new rand = random(sizeof(penyapu1));
	    	mulainyapu[playerid] =	SetPlayerCheckpoint(playerid,penyapu1[rand][0],penyapu1[rand][1],penyapu1[rand][2],3);
			penyapu[playerid] = -1;
            GiveMoney(playerid,100);
			new codit = GetPlayerVehicleID(playerid);
			SetVehicleToRespawn(codit);
            SendClientMessageEx(playerid,COLOR_YELLOW,"* Kamu mendapatkan $100 dari menyapu jalan");
            DisablePlayerCheckpoint(playerid); //taruh dimana
            return 1;
	    }
	}
	//END
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if (IsPlayerNPC(playerid))
	    return 1;

	new vehicleid = GetPlayerVehicleID(playerid);
	if(newstate != PLAYER_STATE_WASTED)
	{
	    Player_ResetCutting(playerid);
	    Player_RemoveLog(playerid);
	}
	if(oldstate == PLAYER_STATE_ONFOOT && newstate == PLAYER_STATE_DRIVER)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid,PIZZA_INDEX))
		{
	    	RemovePlayerFromVehicle(playerid);
			SetPlayerArmedWeapon(playerid,0);
			ApplyAnimation(playerid,"CARRY","crry_prtial",4.1,1,1,1,1,1,1);
		}
		new vehid = GetPlayerVehicleID(playerid);
		if(vehid == pizzabikes[0] || vehid == pizzabikes[1] || vehid == pizzabikes[2] || vehid == pizzabikes[3] || vehid == pizzabikes[4])
		{
		    if(IsInJob[playerid] == 1)
			{
		    	ShowPlayerPizzaBikeTexts(playerid);
		    	if(PlayerCheckpoint[playerid] == CHECKPOINT_NONE)
	    		{
	    		    ShowPlayerInfoTexts(playerid);
					PlayerTextDrawHide(playerid,Pizza_Textdraw0[playerid]);
					PlayerTextDrawSetString(playerid,Pizza_Textdraw0[playerid],"Sepertinya terdapat pelanggan yang memesan ~r~pizza!");
					PlayerTextDrawShow(playerid,Pizza_Textdraw0[playerid]);
					InfoTimer[playerid] = SetTimerEx("HidePlayerInfoTexts",5000,false,"d",playerid);
					new rand = random(sizeof(Houses));
					new skin = random(311)+1;
					if(skin == 74) return skin=75;
					SetPlayerCheckpoint(playerid,Houses[rand][0],Houses[rand][1],Houses[rand][2],2.0);
					PlayerCustomer[playerid] = CreateActor(skin,Houses[rand][0],Houses[rand][1],Houses[rand][2]+0.5,Houses[rand][3]-180.0);
					ApplyActorAnimation(PlayerCustomer[playerid],"DEALER","DEALER_IDLE",4.1,1,0,0,0,0);
					PlayerCheckpoint[playerid]=PIZZA_CHECKPOINT;
					TipTime[playerid]=30;
					ShowTipTimeText(playerid);
			    }
			}
			else
			{
				SendClientMessage(playerid,-1,"Kamu harus memulai pekerjaan dulu sebelum menggunakan motor ini!");
				RemovePlayerFromVehicle(playerid);
			}
		}
	}
	else if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER) { HidePlayerPizzaBikeTexts(playerid); }
	if (newstate == PLAYER_STATE_WASTED && PlayerData[playerid][pJailTime] < 1)
	{
	    for (new i = 34; i < 39; i ++) {
			PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
	    }
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][82]);

	    ShowHungerTextdraw(playerid, 0);
	    PlayerData[playerid][pHealth] = 100.0;

	    ResetWeapons(playerid);
	    ResetPlayer(playerid);

	    PlayerData[playerid][pKilled] = 1;

	    if (!PlayerData[playerid][pInjured])
		{

	        PlayerData[playerid][pInjured] = 1;

	        PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
	    	PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
	    	GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
	    	GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
		}
		else
		{
		    TextDrawHideForPlayer(playerid, gServerTextdraws[2]);
		    TextDrawHideForPlayer(playerid, Textdraw37);
			PlayerData[playerid][pInjured] = 0;
			PlayerData[playerid][pHospital] = GetClosestHospital(playerid);
		}
		if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
		{
		    SendClientMessage(PlayerData[playerid][pCallLine], COLOR_YELLOW, "[PHONE]:{FFFFFF} Jaringan mati...");
		    CancelCall(playerid);
		}
		if (PlayerData[playerid][pCarryCrate] != -1)
		{
			Crate_Drop(playerid);
		}
	}
	else if (oldstate == PLAYER_STATE_DRIVER)
	{
	    if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED)
	        return RemoveFromVehicle(playerid);

	    for (new i = 34; i < 39; i ++)
			PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][82]);
	}
	else if (newstate == PLAYER_STATE_DRIVER)
	{
	    new id = Car_GetID(vehicleid);
    	if (GetVehicleModel(vehicleid) == 509 && PlayerData[playerid][pChannel4] > 1)
	    {
 			SendErrorMessage(playerid, "Kamu sudah level 2, gunakan /call (nomor taxi).");
 			RemovePlayerFromVehicle(playerid);
 			ResetVehicle(vehicleid);
		}
		if(GetVehicleModel(vehicleid) == 530 && PlayerData[playerid][pJob] != JOB_UNLOADER)
		{
 			RemovePlayerFromVehicle(playerid);
			SendErrorMessage(playerid, "Kamu harus menjadi seorang Unloader agar bisa mengendarai kendaraan ini.");
 			ResetVehicle(vehicleid);
		}
		if(GetVehicleModel(vehicleid) == 422 && PlayerData[playerid][pJob] != JOB_LUMBER)
		{
 			RemovePlayerFromVehicle(playerid);
			SendErrorMessage(playerid, "Kamu harus menjadi seorang Lumberjack agar bisa mengendarai kendaraan ini.");
 			ResetVehicle(vehicleid);
		}
		if(GetVehicleModel(vehicleid) == 420 && PlayerData[playerid][pJob] != JOB_TAXI)
		{
 			RemovePlayerFromVehicle(playerid);
			SendErrorMessage(playerid, "Kamu harus menjadi seorang Taxi Driver agar bisa mengendarai kendaraan ini.");
 			ResetVehicle(vehicleid);
		}
		if (id != -1 && CarData[id][carFaction] > 0 && CarData[id][carFaction] < 6  &&GetFactionType(playerid) != CarData[id][carFaction]) {
		    RemovePlayerFromVehicle(playerid);

	    	return SendErrorMessage(playerid, "Kamu tidak memiliki kunci kendaraan ini.");
		}
		if(GetVehicleModel(vehicleid) == 408 && PlayerData[playerid][pJob] != JOB_GARBAGE)
		{
 			RemovePlayerFromVehicle(playerid);
			SendErrorMessage(playerid, "Kamu harus menjadi seorang Garbage Man agar bisa mengendarai kendaraan ini.");
			ResetVehicle(vehicleid);
		}
		if (id != -1 && CarData[id][carFaction] > 0 && CarData[id][carFaction] < 6 && GetFactionType(playerid) != CarData[id][carFaction]) {
		    RemovePlayerFromVehicle(playerid);

	    	return SendErrorMessage(playerid, "Kamu tidak memiliki kunci kendaraan ini.");
		}
		if (PlayerData[playerid][pJob] == JOB_GARBAGE && GetVehicleModel(vehicleid) == 408 && CoreVehicles[vehicleid][vehTrash] > 0)
		{
		    new pointid = -1;

		    if ((pointid = GetClosestJobPoint(playerid, 7)) != -1)
		    {
			    PlayerData[playerid][pCP] = 1;
			    SetPlayerCheckpoint(playerid, JobData[pointid][jobPoint][0], JobData[pointid][jobPoint][1], JobData[pointid][jobPoint][2], 2.5);

		    	SendServerMessage(playerid, "Kendaraan ini memuat %d trash bags (marker diatur ke dump).", CoreVehicles[vehicleid][vehTrash]);
		    }
		}
		if(IsARentCar(vehicleid))
		{
			if(GetMoney(playerid) < 2)
			{
			    RemovePlayerFromVehicle(playerid);
				return 1;
			}
			PlayerTextDrawSetString(playerid, RentCarText[playerid], "rentcar cost: ~g~$0");
			PlayerTextDrawShow(playerid, RentCarText[playerid]);
			RentTime[playerid] = 1;
			RentMoneySpent[playerid] = 0;
			if(RentCar[playerid] != vehicleid)
			{
				SendServerMessage(playerid, "Kamu menaiki kendaraan sewa kota Los Santos. Kamu akan dikenai biaya sewa $2/10 detik.");
				SendServerMessage(playerid, "Jangan lupa /lock untuk mengamankan kendaranmu. Kendaraan akan respawn jika kamu logout.");
				RentCar[playerid] = vehicleid;
				foreach(new i : Player)
				{
					if(i != playerid && RentCar[i] == RentCar[playerid])
					{
						RentCar[i] = -1;
						RentTime[i] = 0;
						RentMoneySpent[i] = 0;
						PlayerTextDrawHide(i, RentCarText[i]);
						SendServerMessage(i, "Kendaraan sewamu di sewa orang lain!");
						SendServerMessage(i, "Kunci kendaraanmu jika kamu tidak mau kendaraanmu dicuri.");
					}
				}
			}
        }
		if (PlayerData[playerid][pJob] == JOB_COURIER && IsLoadableVehicle(vehicleid) && CoreVehicles[vehicleid][vehLoads] > 0)
		{
		    if (PlayerData[playerid][pLoading])
		    {
				DisablePlayerCheckpoint(playerid);
				PlayerData[playerid][pLoading] = 0;
			}
			static
			    string[64];

		    switch (CoreVehicles[vehicleid][vehLoadType])
			{
				case 1: format(string, sizeof(string), "~b~Memuat:~w~ Retail Supplies~n~~b~Memuat Crates:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
		        case 2: format(string, sizeof(string), "~b~Memuat:~w~ Ammunition~n~~b~Memuat Crates:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 3: format(string, sizeof(string), "~b~Memuat:~w~ Clothing~n~~b~Memuat Crates:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 4: format(string, sizeof(string), "~b~Memuat:~w~ Food Supplies~n~~b~Memuat Crates:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 5: format(string, sizeof(string), "~b~Memuat:~w~ Gasoline~n~~b~Memuat Crates:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 6: format(string, sizeof(string), "~b~Memuat:~w~ Furniture~n~~b~Memuat Crates:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
			}
		    PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][82]);
		    PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][82], string);
		}
	    if (IsVehicleImpounded(vehicleid))
	    {
	        RemovePlayerFromVehicle(playerid);
	        SendErrorMessage(playerid, "Kendaraan ini disita dan Kamu tidak bisa menggunakannya.");
	    }
		else if (!IsEngineVehicle(vehicleid))
		{
			SetEngineStatus(vehicleid, true);
		}
		else
		{
			if (!GetEngineStatus(vehicleid))
			{
			    if (CoreVehicles[vehicleid][vehFuel] < 1)
	    			ShowPlayerFooter(playerid, "Tidak ada ~r~bensin~w~ di kendaraan ini.");

				else if (ReturnVehicleHealth(vehicleid) <= 300)
	    			ShowPlayerFooter(playerid, "Kendaraan ~r~rusak~w~ dan butuh diperbaiki.");

  				else ShowPlayerFooter(playerid, "Ketik ~r~/engine~w~ untuk menghidupkan mesin.");
			}
			if (IsDoorVehicle(vehicleid) && !Inventory_HasItem(playerid, "Car License") && !PlayerData[playerid][pDrivingTest])
			{
   				SendClientMessage(playerid, COLOR_LIGHTRED, "[WARNING]:{FFFFFF} Kamu mengoperasikan kendaraan tanpa lisensi yang sah. Kamu mungkin mendapat masalah.");
			}
			if (IsAMotorbike(vehicleid) && !Inventory_HasItem(playerid, "Motorbike License") && !PlayerData[playerid][pDrivingTest])
			{
   				SendClientMessage(playerid, COLOR_LIGHTRED, "[WARNING]:{FFFFFF} Kamu mengoperasikan sepeda motor tanpa lisensi Motor yang berlaku. Kamu mungkin mendapat masalah.");
			}
			if (IsAPlane(vehicleid) && !Inventory_HasItem(playerid, "Airplane License") && !PlayerData[playerid][pDrivingTest])
			{
   				SendClientMessage(playerid, COLOR_LIGHTRED, "[WARNING]:{FFFFFF} Kamu mengoperasikan pesawat terbang tanpa lisensi Pesawat yang valid. Kamu mungkin mendapat masalah.");
			}
			if (IsAHelicopter(vehicleid) && !Inventory_HasItem(playerid, "Helicopter License") && !PlayerData[playerid][pDrivingTest])
			{
   				SendClientMessage(playerid, COLOR_LIGHTRED, "[WARNING]:{FFFFFF} Kamu mengoperasikan helikopter tanpa lisensi Helicopter yang valid. Kamu mungkin mendapat masalah.");
			}
		}
	    if (IsSpeedoVehicle(vehicleid) && !PlayerData[playerid][pDisableSpeedo]) for (new i = 34; i < 39; i ++) {
			PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		SetPlayerArmedWeapon(playerid, 0);
	}
	if ((oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER) && PlayerData[playerid][pPlayRadio])
	{
	    PlayerData[playerid][pPlayRadio] = 0;
	    StopAudioStreamForPlayer(playerid);
	}
	if (newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
	    if (PlayerData[playerid][pBoombox] != INVALID_PLAYER_ID)
	    {
	        PlayerData[playerid][pBoombox] = INVALID_PLAYER_ID;
			StopAudioStreamForPlayer(playerid);
	    }
	    if (IsEngineVehicle(vehicleid) && CoreVehicles[vehicleid][vehRadio])
	    {
	        static
	            url[128];

			strunpack(url, CoreVehicles[vehicleid][vehURL]);

			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, url);

			PlayerData[playerid][pPlayRadio] = 1;
		}
	    foreach (new i : Player) if (PlayerData[i][pSpectator] == playerid) {
     		PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
		}
		if (PlayerData[playerid][pInjured] == 1)
		{
		    RemoveFromVehicle(playerid);
		}
	}
	if (newstate == PLAYER_STATE_PASSENGER)
	{
	    switch (GetPlayerWeapon(playerid))
	    {
	        case 22, 25, 28..33:
	    		SetPlayerArmedWeapon(playerid, GetPlayerWeapon(playerid));

			default:
				SetPlayerArmedWeapon(playerid, 0);
		}
	}
	else if (oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
	    foreach (new i : Player) if (PlayerData[i][pSpectator] == playerid) {
     		PlayerSpectatePlayer(i, playerid);
		}
	}
	if (newstate == PLAYER_STATE_PASSENGER && IsPlayerInsideTaxi(playerid))
	{
	    new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));

	    PlayerData[playerid][pTaxiFee] = 5;
	    PlayerData[playerid][pTaxiTime] = 0;
	    PlayerData[playerid][pTaxiPlayer] = driverid;

	    SendServerMessage(driverid, "%s telah memasuki taksimu sebagai penumpang.", ReturnName(playerid, 0));
		SendServerMessage(playerid, "Kamu sudah masuk taksi %s.", ReturnName(driverid, 0));
	}
 	if (oldstate == PLAYER_STATE_PASSENGER && PlayerData[playerid][pTaxiTime] != 0 && PlayerData[playerid][pTaxiPlayer] != INVALID_PLAYER_ID)
	{
	    LeaveTaxi(playerid, PlayerData[playerid][pTaxiPlayer]);
	}
	if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 582)
	{
     	SetPlayerPosEx(playerid, 1061.719727, -914.996704, 138.026016);
     	SetPlayerFacingAngle(playerid, 0);
        SetCameraBehindPlayer(playerid);
        SetPlayerInterior(playerid, 1);
		Intropic[playerid] = GetPlayerVehicleID(playerid);
	}
	if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 519)
	{
     	SetPlayerPosEx(playerid, 1892.5037, -8156.8062, 2.4471);
     	SetPlayerFacingAngle(playerid, 0);
        SetCameraBehindPlayer(playerid);
        SetPlayerInterior(playerid, 1);
		IsInShml[playerid] = GetPlayerVehicleID(playerid);
	}
	if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 433)
	{
     	SetPlayerPosEx(playerid, 3142.718994, -2312.429932, 16.005524);
     	SetPlayerFacingAngle(playerid, 0);
        SetCameraBehindPlayer(playerid);
        SetPlayerInterior(playerid, 1);
		IsInBa[playerid] = GetPlayerVehicleID(playerid);
	}
	if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 553)
	{
     	SetPlayerPosEx(playerid, 2468.996582, -2941.314209, 7.562979);
     	SetPlayerFacingAngle(playerid, 0);
        SetCameraBehindPlayer(playerid);
        SetPlayerInterior(playerid, 1);
		IsInNev[playerid] = GetPlayerVehicleID(playerid);
	}
	if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 416)
	{
     	SetPlayerPosEx(playerid, -813.1215, -1007.3622, 2525.9072);
     	SetPlayerFacingAngle(playerid, 0);
        SetCameraBehindPlayer(playerid);
        SetPlayerInterior(playerid, 1);
		InAmbulance[playerid] = GetPlayerVehicleID(playerid);
	}
	if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 427)
	{
     	SetPlayerPosEx(playerid, 1384.0615, -2245.8015, 3006.4172);
     	SetPlayerFacingAngle(playerid, 0);
        SetCameraBehindPlayer(playerid);
        SetPlayerInterior(playerid, 1);
		InEnforcer[playerid] = GetPlayerVehicleID(playerid);
	}
	if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 508)
	{
     	SetPlayerPosEx(playerid, -1503.1620, 2511.7263, 3207.6506);
     	SetPlayerFacingAngle(playerid, 0);
        SetCameraBehindPlayer(playerid);
        SetPlayerInterior(playerid, 1);
		InJourney[playerid] = GetPlayerVehicleID(playerid);
	}
	if(newstate == PLAYER_STATE_PASSENGER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 563)
	{
     	SetPlayerPosEx(playerid, -765.6241, 1596.5237, 3002.6099);
     	SetPlayerFacingAngle(playerid, 0);
        SetCameraBehindPlayer(playerid);
        SetPlayerInterior(playerid, 1);
		InRaindance[playerid] = GetPlayerVehicleID(playerid);
	}
    return 1;
}

new Float:CarHealth[MAX_PLAYERS];
forward AyamUpdate(playerid);
public AyamUpdate(playerid)
{
	if(IsPlayerInAnyVehicle(playerid) == 1 && Seatbelt[playerid] == 0)
	{
		new Float:TempCarHealth;
		GetVehicleHealth(GetPlayerVehicleID(playerid), TempCarHealth);
		new Float:Difference = floatsub(CarHealth[playerid], TempCarHealth);
		if((floatcmp(CarHealth[playerid], TempCarHealth) == 1) && (floatcmp(Difference,100.0) == 1))
		{
		    Difference = floatdiv(Difference, 10.0);
		    new Float:OldHealth;
		    GetPlayerHealth(playerid, OldHealth);
		    SetPlayerHealth(playerid, floatsub(OldHealth, Difference));
		}
		CarHealth[playerid] = TempCarHealth;
	}
	else
	{
		CarHealth[playerid] = 0.0;
	}
	return 1;
}
forward ServerStuff(playerid);
public ServerStuff(playerid)
{
	static str[64], id = -1, keys[3], vehicleid;
	if (PlayerData[playerid][pKicked])
		return 0;
	if (GetPlayerWeapon(playerid) > 1 && (PlayerData[playerid][pHoldWeapon] > 0 || PlayerData[playerid][pMining] > 0))
	    SetPlayerArmedWeapon(playerid, 0);

	if (IsPlayerInAnyVehicle(playerid))
		vehicleid = GetPlayerVehicleID(playerid);
	else
	    vehicleid = INVALID_VEHICLE_ID;
	if(Inventory_HasItem(playerid, "GPS System"))
	{
		GangZoneHideForPlayer(playerid, BlackRadar);
	}
	else
	{
	    GangZoneShowForPlayer(playerid, BlackRadar, 0x000000FF);
	}
	GetPlayerKeys(playerid, keys[0], keys[1], keys[2]);
	if (GetPlayerWeapon(playerid) != PlayerData[playerid][pWeapon])
	{
	    PlayerData[playerid][pWeapon] = GetPlayerWeapon(playerid);

		if (PlayerData[playerid][pWeapon] >= 1 && PlayerData[playerid][pWeapon] <= 45 && PlayerData[playerid][pWeapon] != 40 && PlayerData[playerid][pWeapon] != 2 && PlayerData[playerid][pGuns][g_aWeaponSlots[PlayerData[playerid][pWeapon]]] != GetPlayerWeapon(playerid) && !PlayerHasTazer(playerid) && !PlayerHasBeanBag(playerid) && PlayerData[playerid][pRangeBooth] == -1 && PlayerData[playerid][pCharacter] > 0)
		{
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah dikick karena cheat senjata (%s).", ReturnName(playerid, 0), ReturnWeaponName(PlayerData[playerid][pWeapon]));
			Log_Write("logs/cheat_log.txt", "[%s] %s elah dikick karena cheat senjata (%s).", ReturnDate(), ReturnName(playerid), ReturnWeaponName(PlayerData[playerid][pWeapon]));

			Kick(playerid);

			return 0;
		}
	}
	if (GetPlayerMoney(playerid) != PlayerData[playerid][pMoney])
	{
	    ResetPlayerMoney(playerid);
	    GivePlayerMoney(playerid, PlayerData[playerid][pMoney]);
	}
	if (GetPlayerScore(playerid) != PlayerData[playerid][pChannel4])
	{
		SetPlayerScore(playerid, PlayerData[playerid][pChannel4]);
	}
	if (PlayerData[playerid][pWaypoint])
	{
	    format(str, sizeof(str), "~b~Waypoint:~w~ %s (%.2f meter)", PlayerData[playerid][pLocation], GetPlayerDistanceFromPoint(playerid, PlayerData[playerid][pWaypointPos][0], PlayerData[playerid][pWaypointPos][1], PlayerData[playerid][pWaypointPos][2]));
		PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][69], str);
	}
	if (PlayerData[playerid][pMaskOn])
	{
		if (!PlayerData[playerid][pHideTags])
	    {
            foreach (new i : Player) {
				ShowPlayerNameTagForPlayer(i, playerid, 0);
			}
		    format(str, sizeof(str), "Mask_#%d", PlayerData[playerid][pMaskID]);

	        PlayerData[playerid][pHideTags] = 1;
	        PlayerData[playerid][pNameTag] = CreateDynamic3DTextLabel(str, COLOR_WHITE, 0.0, 0.0, 0.2, 8.0, playerid, INVALID_VEHICLE_ID, 0, -1, -1);
	    }
	}
	if (!PlayerData[playerid][pMaskOn] && PlayerData[playerid][pHideTags])
	{
	    foreach (new i : Player) {
			ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
		ResetNameTag(playerid);
	}
	if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    if (IsSpeedoVehicle(vehicleid) && !PlayerData[playerid][pDisableSpeedo])
	    {
		    static
		        Float:fDamage,
		        Float:fSpeed,
		        Float:fVelocity[3];

	  		GetVehicleHealth(vehicleid, fDamage);
	  		GetVehicleVelocity(vehicleid, fVelocity[0], fVelocity[1], fVelocity[2]);

	  		fDamage = floatdiv(1000 - fDamage, 10) * 1.42999; // 1.33334;
 	  		fSpeed = floatmul(floatsqroot((fVelocity[0] * fVelocity[0]) + (fVelocity[1] * fVelocity[1]) + (fVelocity[2] * fVelocity[2])), 100.0);

			if (fDamage < 0.0) fDamage = 0.0;
			else if (fDamage > 100.0) fDamage = 100.0;

	        format(str, sizeof(str), "~r~Bensin:~w~ %d%c", CoreVehicles[vehicleid][vehFuel], '%');
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][35], str);

			format(str, sizeof(str), "~r~Kecepatan:~w~ %.0f mph", fSpeed);
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][36], str);

			format(str, sizeof(str), "~r~Damage:~w~ %.0f/100%%", (fDamage > 100.0) ? (100.0) : (fDamage));
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][37], str);

	        format(str, sizeof(str), "~r~Jendela:~w~ %s", (CoreVehicles[vehicleid][vehWindowsDown]) ? ("Terbuka") : ("Tertutup"));
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][38], str);
		}
		for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
		{
			static
			    tires[4];

			GetVehicleDamageStatus(vehicleid, tires[0], tires[1], tires[2], tires[3]);

			if (tires[3] != 1111) {
			    UpdateVehicleDamageStatus(vehicleid, tires[0], tires[1], tires[2], 1111);
			}
			break;
		}
	}
	switch (PlayerData[playerid][pHouseLights])
	{
	    case 0:
	    {
	        if ((id = House_Inside(playerid)) != -1 && !HouseData[id][houseLights])
			{
	        	PlayerData[playerid][pHouseLights] = true;
	            PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][62]);
	        }
	        else PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][62]);
	    }
	    case 1:
	    {
	        if ((id = House_Inside(playerid)) == -1 || (id != -1 && HouseData[id][houseLights]))
			{
	            PlayerData[playerid][pHouseLights] = false;
                PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][62]);
	        }
	    }
	}
	if (PlayerData[playerid][pDrinking] && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_SPRUNK && !IsPlayerInAnyVehicle(playerid))
	{
 		DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
 		PlayerData[playerid][pDrinking] = 0;
	}
	if ((id = Speed_Nearest(playerid)) != -1 && GetPlayerSpeed(playerid) > SpeedData[id][speedLimit] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsEngineVehicle(vehicleid) && !PlayerData[playerid][pSpeedTime])
	{
		if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV)
	    {
	 		new price = 100 + floatround(GetPlayerSpeed(playerid) - SpeedData[id][speedLimit]);

	   		format(str, sizeof(str), "Kecepatan (%.0f/%.0f mph)", GetPlayerSpeed(playerid), SpeedData[id][speedLimit]);
	        SetTimerEx("HidePlayerBox", 500, false, "dd", playerid, _:ShowPlayerBox(playerid, 0xFFFFFF66));

			if (Ticket_Add(playerid, price, str) != -1)
			{
	    		format(str, sizeof(str), "Kamu menerima tiket ~r~%s~w~ karena terlalu ngebut.", FormatNumber(price));
	     		ShowPlayerFooter(playerid, str);
			}
			PlayerData[playerid][pSpeedTime] = 5;
		}
	}
	if (Detector_Nearest(playerid) != -1)
	{
		if (IsPlayerArmed(playerid) && gettime() > PlayerData[playerid][pDetectorTime])
		{
			PlayerData[playerid][pDetectorTime] = gettime() + 5;

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** Detektor logam berbunyi. (( %s ))", ReturnName(playerid, 0));
			PlayerPlaySoundEx(playerid, 43000);
		}
	}
	if ((keys[0] & KEY_FIRE) && GetPlayerWeapon(playerid) == 42)
	{
        static
	        Float:fX,
	        Float:fY,
	        Float:fZ;

	    for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	    {
			GetDynamicObjectPos(g_aFireObjects[i], fX, fY, fZ);

			if ((IsValidDynamicObject(g_aFireObjects[i]) && IsPlayerInRangeOfPoint(playerid, 4.0, fX, fY, fZ)) && ++ g_aFireExtinguished[i] == 32)
   			{
   			    SetTimerEx("DestroyWater", 2000, false, "d", CreateDynamicObject(18744, fX, fY, fZ - 0.2, 0.0, 0.0, 0.0));

      			DestroyDynamicObject(g_aFireObjects[i]);
	        	g_aFireExtinguished[i] = 0;
			}
		}
	}
	if ((keys[0] & KEY_FIRE) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 407 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 544))
	{
	    static
	        Float:fX,
	        Float:fY,
	        Float:fZ,
			Float:fVector[3],
			Float:fCamera[3];

	    GetPlayerCameraFrontVector(playerid, fVector[0], fVector[1], fVector[2]);
	    GetPlayerCameraPos(playerid, fCamera[0], fCamera[1], fCamera[2]);

	    for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	    {
			GetDynamicObjectPos(g_aFireObjects[i], fX, fY, fZ);

			if (IsValidDynamicObject(g_aFireObjects[i]) && IsPlayerInRangeOfPoint(playerid, 3050, fX, fY, fZ))
			{
				if (++g_aFireExtinguished[i] == 64 && DistanceCameraTargetToLocation(fCamera[0], fCamera[1], fCamera[2], fX, fY, fZ + 2.5, fVector[0], fVector[1], fVector[2]) < 12.0)
   				{
   			    	SetTimerEx("DestroyWater", 2000, false, "d", CreateDynamicObject(18744, fX, fY, fZ - 0.2, 0.0, 0.0, 0.0));

	      			DestroyDynamicObject(g_aFireObjects[i]);
		        	g_aFireExtinguished[i] = 0;
				}
		  	}
	    }
	}
	return 1;
}
public OnPlayerUpdate(playerid)
{

	return 1;
}
public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    if(!success) return SendClientMessage(playerid, 0xFFFFFFFF, "[SERVER] {8CED15}Maaf command tidak diketahui. Ketik {FFFFFF}/help {8CED15}untuk melihat list command.");
	return 1;
}
public OnPlayerConnect(playerid)
{	
	if (IsPlayerNPC(playerid))
	    return 1;
	
	if ((GetTickCount() - PlayerData[playerid][pLeaveTime]) < 2000 && !strcmp(ReturnIP(playerid), PlayerData[playerid][pLeaveIP]))
	{
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s (%s) dikick untuk kemungkinan rejoin hacks.", ReturnName(playerid), ReturnIP(playerid));
	    Kick(playerid);
		return 1;
	}

	new
		str[128];
		
    ResetVariable(playerid);
    
	//Lumberjack
	Player_Init(playerid);
	ResetPlayerWeapons(playerid);
	SetPlayerArmedWeapon(playerid, 0);

	RentCarText[playerid] = CreatePlayerTextDraw(playerid, 45.333335, 320.237182, " ");
	PlayerTextDrawLetterSize(playerid, RentCarText[playerid], 0.244333, 1.716147);
	PlayerTextDrawAlignment(playerid, RentCarText[playerid], 1);
	PlayerTextDrawColor(playerid, RentCarText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, RentCarText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, RentCarText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, RentCarText[playerid], 255);
	PlayerTextDrawFont(playerid, RentCarText[playerid], 3);
	PlayerTextDrawSetProportional(playerid, RentCarText[playerid], 1);
	//SetPlayerFightingStyle(playerid, PlayerData[playerid][pFightStyle]);

	PreloadAnimations(playerid);

	if (g_ServerRestart) {
		TextDrawShowForPlayer(playerid, gServerTextdraws[3]);
	}
	for (new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) {
	    RemovePlayerAttachedObject(playerid, i);
	}
 	ServerStuf[playerid] =	SetTimerEx("ServerStuff", 1500, true, "i", playerid);
	AyamUp[playerid] =   SetTimerEx("AyamUpdate", 5000, true, "i", playerid);
	Grade[playerid] = 1;
  	
	// Fishing Pier stuff removed
    RemoveBuildingForPlayer(playerid, 6463, 389.7734, -2028.4688, 19.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2028.5000, 32.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2021.6406, 29.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2017.4531, 24.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2017.4297, 16.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2021.6328, 10.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2028.5156, 8.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2035.3984, 10.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2039.6406, 16.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2039.6563, 24.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2035.3828, 29.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 364.6094, -2036.1797, 9.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 378.4609, -2012.9297, 7.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 386.5703, -2061.9531, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 379.5938, -2042.4922, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 379.5938, -2016.7500, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 386.5703, -2049.3516, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1340, 388.8594, -2071.6641, 7.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2039.6406, 16.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2039.6563, 24.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 6298, 389.7734, -2028.4688, 19.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 6461, 389.7734, -2028.5000, 20.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2028.5000, 32.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2021.6406, 29.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2017.4531, 24.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2017.4297, 16.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2021.6328, 10.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2028.5156, 8.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2035.3984, 10.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2035.3828, 29.9531, 0.25);
	
	//ASGH
	RemoveBuildingForPlayer(playerid, 5929, 1230.8906, -1337.9844, 12.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1341.8516, 12.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1328.0938, 12.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1356.2109, 12.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1374.6094, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1356.5547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 1231.6406, -1389.8672, 15.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1374.6094, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1356.5547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1335.0547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1317.7422, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 5812, 1230.8906, -1337.9844, 12.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1335.0547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1317.7422, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1300.9219, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1300.9219, 12.2969, 0.25);
	
	
	//trucker
	RemoveBuildingForPlayer(playerid, 17020, -475.9766, -544.8516, 28.1172, 0.25);

	//mappingan NG
	RemoveBuildingForPlayer(playerid, 3367, 149.9141, 2614.6172, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3368, 161.7891, 2411.3828, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3369, 123.0469, 2587.7422, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3368, 311.1328, 2614.6172, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3368, 176.7891, 2587.7422, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3368, 338.0078, 2587.7422, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3368, 323.0078, 2411.3828, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3369, 203.6563, 2614.6172, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3369, 230.5234, 2641.4844, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3369, 349.8750, 2438.2500, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3369, 269.2656, 2411.3828, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3369, 242.3984, 2438.2500, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3369, 188.6563, 2438.2500, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3369, 108.0469, 2411.3828, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3367, 176.7891, 2641.4844, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3367, 230.5234, 2587.7422, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3367, 257.3984, 2614.6172, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3367, 284.2656, 2641.4844, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3367, 284.2656, 2587.7422, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3367, 296.1406, 2438.2500, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3367, 215.5313, 2411.3828, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3367, 134.9141, 2438.2500, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 16598, 231.2813, 2545.7969, 20.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 3296, 255.9844, 2549.3281, 20.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 3269, 108.0469, 2411.3828, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3270, 161.7891, 2411.3828, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3269, 188.6563, 2438.2500, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3271, 134.9141, 2438.2500, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3271, 215.5313, 2411.3828, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3269, 242.3984, 2438.2500, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3287, 255.9844, 2549.3281, 20.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 16599, 231.2813, 2545.7969, 20.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 3269, 269.2656, 2411.3828, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3271, 296.1406, 2438.2500, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3269, 123.0469, 2587.7422, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3270, 176.7891, 2587.7422, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3271, 230.5234, 2587.7422, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3271, 284.2656, 2587.7422, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3271, 149.9141, 2614.6172, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3271, 176.7891, 2641.4844, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3269, 230.5234, 2641.4844, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3269, 203.6563, 2614.6172, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3271, 257.3984, 2614.6172, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3271, 284.2656, 2641.4844, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3270, 323.0078, 2411.3828, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 16101, 321.6719, 2463.4922, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 16368, 321.6719, 2463.4922, 25.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 3269, 349.8750, 2438.2500, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3270, 338.0078, 2587.7422, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3270, 311.1328, 2614.6172, 15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 16773, 397.4766, 2476.6328, 19.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 16775, 412.1172, 2476.6328, 19.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 16501, 429.9844, 2546.5156, 17.3516, 0.25);


	//mapping theo
	RemoveBuildingForPlayer(playerid, 647, 1400.4219, 2767.6094, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 1379.6797, 2765.1797, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 1404.8203, 2767.2344, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1416.7422, 2756.0938, 9.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1409.4141, 2769.0469, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1410.8359, 2745.9922, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1403.1641, 2782.4297, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 622, 1401.2266, 2797.3672, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 1396.8906, 2825.1875, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 622, 1408.0547, 2804.3672, 9.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 1410.4766, 2777.9766, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1408.5938, 2794.1250, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1407.8203, 2796.9219, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 1403.5938, 2814.0078, 9.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1414.3906, 2820.3125, 11.1953, 0.25);

		//mapping Ferdi
	RemoveBuildingForPlayer(playerid, 706, 301.0859, -1115.3750, 79.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 706, 252.9063, -1156.1953, 77.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 708, 287.9531, -1206.7266, 79.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 3733, 310.6172, -1145.5234, 85.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 3737, 279.1328, -1152.2266, 82.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 762, 245.1563, -1160.2813, 81.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 268.5234, -1189.7031, 78.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 274.1953, -1202.3281, 79.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 3604, 279.1328, -1152.2266, 82.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 310.2734, -1194.7422, 78.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 329.2109, -1178.5391, 78.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 336.5078, -1171.4531, 78.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3607, 310.6172, -1145.5234, 85.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 762, 337.4141, -1163.7188, 83.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 706, 230.7734, -1163.8828, 73.9063, 0.25);
	

	
	//TRAF
	RemoveBuildingForPlayer(playerid, 3295, 1099.1172, -358.4766, 77.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3347, 1107.5938, -358.5156, 72.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 3376, 1070.4766, -355.1641, 77.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 785, 1150.3516, -343.1094, 58.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 785, 1091.6094, -250.0078, 71.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1503, 1019.3203, -282.7891, 73.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, 1082.9922, -283.6797, 73.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 694, 1137.7031, -313.9141, 68.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 791, 1150.3516, -343.1094, 58.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3425, 1015.0938, -361.1016, 84.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 3375, 1070.4766, -355.1641, 77.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 13206, 1072.9531, -289.1797, 72.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 3286, 1099.1172, -358.4766, 77.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, 1107.5938, -358.5156, 72.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 3250, 1110.2422, -298.9453, 73.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1120.9297, -300.1172, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1120.8203, -305.6328, 73.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 1120.7344, -311.2188, 73.5703, 0.25);

	
	//Bank Modern
	RemoveBuildingForPlayer(playerid, 1283, 1490.296, -1031.664, 25.992, 0.250);
	// Gas pumps
	RemoveBuildingForPlayer(playerid, 1676, 1941.6563, -1767.2891, 14.1406, 6000.00);
	RemoveBuildingForPlayer(playerid, 3465, 2120.8203, 914.7188, 11.2578, 6000.00);
	RemoveBuildingForPlayer(playerid, 1686, -1610.6172, -2721.0000, 47.9297, 6000.00);

	// Construction in LS near All Saints
	RemoveBuildingForPlayer(playerid, 1388, 1238.3750, -1258.2813, 57.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1391, 1238.3750, -1258.2734, 44.6641, 0.25);

	// LS mall
	RemoveBuildingForPlayer(playerid, 6130, 1117.5859, -1490.0078, 32.7188, 10.0);
	RemoveBuildingForPlayer(playerid, 6255, 1117.5859, -1490.0078, 32.7188, 10.0);
	RemoveBuildingForPlayer(playerid, 762, 1175.3594, -1420.1875, 19.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 615, 1166.3516, -1417.6953, 13.9531, 0.25);

	// Sprunk machines
 	RemoveBuildingForPlayer(playerid, 1302, 0.0, 0.0, 0.0, 6000.0);
 	RemoveBuildingForPlayer(playerid, 1209, 0.0, 0.0, 0.0, 6000.0);
 	RemoveBuildingForPlayer(playerid, 955, 0.0, 0.0, 0.0, 6000.0);
 	RemoveBuildingForPlayer(playerid, 956, 0.0, 0.0, 0.0, 6000.0);
 	RemoveBuildingForPlayer(playerid, 1775, 0.0, 0.0, 0.0, 6000.0);
 	RemoveBuildingForPlayer(playerid, 1776, 0.0, 0.0, 0.0, 6000.0);
 	RemoveBuildingForPlayer(playerid, 1977, 0.0, 0.0, 0.0, 6000.0);

	// Fire station
	RemoveBuildingForPlayer(playerid, 717, 1703.9922, -1150.1484, 23.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 717, 1721.2344, -1150.1484, 23.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1300, 1715.4922, -1037.9766, 23.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1294, 1734.9531, -1156.9922, 27.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 717, 1738.7813, -1150.1484, 23.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1227, 1789.7734, -1116.0625, 23.8906, 0.25);
   	RemoveBuildingForPlayer(playerid, 1227, 1789.9063, -1112.6406, 23.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 717, 1726.0000, -1064.8828, 23.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 4640, 1728.7891, -1065.0938, 24.5000, 0.25);
    RemoveBuildingForPlayer(playerid, 1300, 1730.6328, -1033.6719, 23.2656, 0.25);
    RemoveBuildingForPlayer(playerid, 4598, 1737.2031, -1052.8203, 23.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 4599, 1738.1875, -1044.9922, 22.9844, 0.25);
    RemoveBuildingForPlayer(playerid, 1300, 1747.8594, -1063.2969, 23.2656, 0.25);
    RemoveBuildingForPlayer(playerid, 717, 1758.3828, -1066.3594, 23.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1300, 1758.0781, -1064.5547, 23.2656, 0.25);
    RemoveBuildingForPlayer(playerid, 717, 1765.1563, -1042.5234, 23.1797, 0.25);
    RemoveBuildingForPlayer(playerid, 1300, 1764.8594, -1040.7188, 23.2656, 0.25);
    RemoveBuildingForPlayer(playerid, 4641, 1788.5391, -1026.3516, 24.5000, 0.25);

	PlayerData[playerid][pTLAttached] = 0; // FlashLight system
	PlayerData[playerid][pFLAttached] = 0; // FlashLight system

		// Prison exterior
	RemoveBuildingForPlayer(playerid, 3682, 247.9297, 1461.8594, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3682, 192.2734, 1456.1250, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3682, 199.7578, 1397.8828, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 166.7891, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 166.7891, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 166.7891, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3288, 221.5703, 1374.9688, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 212.0781, 1426.0313, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3290, 218.2578, 1467.5391, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1435.1953, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1410.5391, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1385.8906, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1361.2422, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3290, 190.9141, 1371.7734, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 183.7422, 1444.8672, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 222.5078, 1444.6953, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 221.1797, 1390.2969, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3288, 223.1797, 1421.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1459.6406, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 207.5391, 1371.2422, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 220.6484, 1355.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 221.7031, 1404.5078, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 210.4141, 1444.8438, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 262.5078, 1465.2031, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 220.6484, 1355.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 166.7891, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3256, 190.9141, 1371.7734, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 166.7891, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 207.5391, 1371.2422, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 205.6484, 1394.1328, 10.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 205.6484, 1392.1563, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 205.6484, 1394.1328, 23.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 207.3594, 1390.5703, 19.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 206.5078, 1387.8516, 27.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3673, 199.7578, 1397.8828, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3257, 221.5703, 1374.9688, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 221.1797, 1390.2969, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 203.9531, 1409.9141, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3674, 199.3828, 1407.1172, 35.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 204.6406, 1409.8516, 11.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 206.5078, 1404.2344, 18.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 206.5078, 1400.6563, 22.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 221.7031, 1404.5078, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 207.3594, 1409.0000, 19.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3257, 223.1797, 1421.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 212.0781, 1426.0313, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 166.7891, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1361.2422, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1385.8906, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1410.5391, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 183.7422, 1444.8672, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 210.4141, 1444.8438, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 222.5078, 1444.6953, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 16086, 232.2891, 1434.4844, 13.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3673, 192.2734, 1456.1250, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3674, 183.0391, 1455.7500, 35.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1459.6406, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 196.0234, 1462.0156, 10.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 198.0000, 1462.0156, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 196.0234, 1462.0156, 23.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 180.2422, 1460.3203, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 180.3047, 1461.0078, 11.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3256, 218.2578, 1467.5391, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 199.5859, 1463.7266, 19.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 181.1563, 1463.7266, 19.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 185.9219, 1462.8750, 18.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 202.3047, 1462.8750, 27.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 189.5000, 1462.8750, 22.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1435.1953, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 254.6797, 1451.8281, 27.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 253.8203, 1458.1094, 23.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 255.5313, 1454.5469, 19.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 253.8203, 1456.1328, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 253.8203, 1458.1094, 10.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 262.5078, 1465.2031, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 254.6797, 1468.2109, 18.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3673, 247.9297, 1461.8594, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 254.6797, 1464.6328, 22.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3674, 247.5547, 1471.0938, 35.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 255.5313, 1472.9766, 19.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 252.8125, 1473.8281, 11.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 252.1250, 1473.8906, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 16089, 342.1250, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 16090, 315.7734, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 16091, 289.7422, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 16087, 358.6797, 1430.4531, 11.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 16088, 368.4297, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 16092, 394.1563, 1431.0938, 5.2734, 0.25);
	//Data
	Seatbelt[playerid] = 0;
	Grade[playerid] = 0;
	inSchool[playerid] = 0;
	inSakit[playerid] = 0;
	
	CancelSelectTextDraw(playerid);

	GetPlayerIp(playerid, PlayerData[playerid][pIP], 16);
	GetPlayerName(playerid, PlayerData[playerid][pUsername], MAX_PLAYER_NAME + 1);
	ResetStatistics(playerid);
	CreateTextDraws(playerid);
	
	//donatur time
	CheckDonatorTimer[playerid] = SetTimerEx("OnCheckedDonatorTime", 500, 1, "i", playerid);

	format(str, sizeof(str), "SELECT * FROM `blacklist` WHERE `Username` = '%s' OR `IP` = '%s'", ReturnName(playerid), PlayerData[playerid][pIP]);
	mysql_tquery(g_iHandle, str, "OnQueryFinished", "dd", playerid, THREAD_BAN_LOOKUP);
	return 1;
}

forward UpdateSnow(playerid);
public UpdateSnow(playerid)
{
	if(snowOn[playerid] == 0) return 0;
	new Float:apPos[3];
	GetPlayerPos(playerid, apPos[0], apPos[1], apPos[2]);
	for(new i = 0; i < MAX_SNOW_OBJECTS; i++) SetDynamicObjectPos(snowObject[playerid][i], apPos[0] + random(25), apPos[1] + random(25), apPos[2] - 5);
	return 1;
}

forward OnCheckedDonatorTime(playerid);
public OnCheckedDonatorTime(playerid)
{
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(PlayerData[playerid][pDonatorTime] > 0)
		{
			if(IsPlayerConnected(i))
			{
				if(gettime() > PlayerData[playerid][pDonatorTime])
				{
					PlayerData[playerid][pDonator] = 0;
					PlayerData[playerid][pDonatorTime] = 0;
					SendServerMessage(i,"Masa berlaku V.I.P Kamu telah habis.");
					SendServerMessage(i,"Kami berharap kamu bisa puas dengan layanan V.I.P yang kami berikan, terimakasih.");
				}
			}
		}
	}
	return 1;
}

GetRPName(playerid)
{
	new	RPName[MAX_PLAYER_NAME], i_pos;
	GetPlayerName(playerid, RPName, MAX_PLAYER_NAME);
	while ((i_pos = strfind(RPName, "_", false, i_pos)) != -1) RPName[i_pos] = ' ';
	return RPName;
}

public OnPlayerDisconnect(playerid, reason)
{
	DestroyDynamic3DTextLabel(ado[playerid]);
	DestroyDynamic3DTextLabel(ame[playerid]);
	amestatus[playerid] = 0;
	Delete3DTextLabel(event[playerid]);
	adostatus[playerid] = 0;
    donatorarmor[playerid] =0;
    pmdelay[playerid] =0;
	kacangbag[playerid] =0;
	SendNearbyMessage(playerid, 30.0, COLOR_RED, "[Disconnect] %s telah keluar dari server, Alasan : Quit / Crash", ReturnName(playerid, 0));

   	for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(playerid, i)) {
   	    Car_Save(i);
 		DestroyVehicle(CarData[i][carVehicle]);
        CarData[i][carVehicle] = -1;
	}
	
	if(PlayerData[playerid][pEventDuty] != 0)
	{
		SendClientMessageToAllEx(COLOR_RED, "[%s EVENT]: %s Telah keluar dari event.", EventData[EventMode], ReturnName(playerid, 0));
		SetPlayerSkin(playerid, GetPVarInt(playerid, "LastSkin"));
		SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
		SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);

		PlayerData[playerid][pInjured] = 0;
		PlayerData[playerid][pBleeding] = 0;

		Delete3DTextLabel(EventData[PlayerInfo]);
		ClearAnimations(playerid);
		
		OnEventFinished(playerid, 99);
		
		SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
	}
	
	if(RentCar[playerid] >= 0)
	{
	    new carid = Car_GetID(RentCar[playerid]);
	    if(CarData[carid][carLocked])
	    {
   			static
	        	engine,
	        	lights,
	        	alarm,
	        	doors,
	        	bonnet,
	        	boot,
	        	objective;
    		GetVehicleParamsEx(RentCar[playerid], engine, lights, alarm, doors, bonnet, boot, objective);
			CarData[carid][carLocked] = false;
			SetVehicleParamsEx(CarData[carid][carVehicle], engine, lights, alarm, 0, bonnet, boot, objective);
            RespawnVehicle(RentCar[playerid]);
			Car_Save(carid);
		}
		else
		{
		    RespawnVehicle(RentCar[playerid]);
		}
		RentCar[playerid] = -1;
	}
	KillTimer(AyamUp[playerid]);
	//Jobpizza
    IsInJob[playerid]=0;TipTime[playerid]=0;
    KillTimer(InfoTimer[playerid]);
	PlayerTutorialTime[playerid]=0;
	PlayerCheckpoint[playerid]=CHECKPOINT_NONE;
	PlayerTips[playerid]=0;
	PlayerEarnings[playerid]=0;
    if(IsValidActor(PlayerCustomer[playerid])) { DestroyActor(PlayerCustomer[playerid]); }
    PlayerSkin[playerid]=0;
	HidePlayerIntroTexts(playerid);
	HidePlayerInfoTexts(playerid);
	HidePlayerPizzaBikeTexts(playerid);
	HideTipTimeText(playerid);
	//End
	PlayerTextDrawHide(playerid, RentCarText[playerid]);
	//neonsystem
	DestroyDynamicObject(GetPVarInt(playerid, "neon"));
	DeletePVar(playerid, "Status"); DestroyDynamicObject(GetPVarInt(playerid, "neon1")); DestroyDynamicObject(GetPVarInt(playerid, "neon2")); DestroyDynamicObject(GetPVarInt(playerid, "neon3"));
  	DestroyDynamicObject(GetPVarInt(playerid, "neon4")); DestroyDynamicObject(GetPVarInt(playerid, "neon5")); DestroyDynamicObject(GetPVarInt(playerid, "neon6"));  DestroyDynamicObject(GetPVarInt(playerid, "neon7"));
	DestroyDynamicObject(GetPVarInt(playerid, "neon8")); DestroyDynamicObject(GetPVarInt(playerid, "neon9")); DestroyDynamicObject(GetPVarInt(playerid, "neon10")); DestroyDynamicObject(GetPVarInt(playerid, "neon11"));
  	DestroyDynamicObject(GetPVarInt(playerid, "neon12")); DestroyDynamicObject(GetPVarInt(playerid, "neon13")); DestroyDynamicObject(GetPVarInt(playerid, "neon14")); DestroyDynamicObject(GetPVarInt(playerid, "neon15"));
  	DestroyDynamicObject(GetPVarInt(playerid, "neon16")); DestroyDynamicObject(GetPVarInt(playerid, "neon17")); DestroyDynamicObject(GetPVarInt(playerid, "neon18")); DestroyDynamicObject(GetPVarInt(playerid, "neon19"));
  	DestroyDynamicObject(GetPVarInt(playerid, "neon20")); DestroyDynamicObject(GetPVarInt(playerid, "neon21")); DestroyDynamicObject(GetPVarInt(playerid, "neon22")); DestroyDynamicObject(GetPVarInt(playerid, "neon23"));
  	DestroyDynamicObject(GetPVarInt(playerid, "neon24")); DestroyDynamicObject(GetPVarInt(playerid, "neon25")); DestroyDynamicObject(GetPVarInt(playerid, "neon26")); DestroyDynamicObject(GetPVarInt(playerid, "neon27"));
  	DestroyDynamicObject(GetPVarInt(playerid, "neon28")); DestroyDynamicObject(GetPVarInt(playerid, "neon29")); DestroyDynamicObject(GetPVarInt(playerid, "neon30")); DestroyDynamicObject(GetPVarInt(playerid, "neon31"));
  	DestroyDynamicObject(GetPVarInt(playerid, "neon32")); DestroyDynamicObject(GetPVarInt(playerid, "neon33")); DestroyDynamicObject(GetPVarInt(playerid, "neon34")); DestroyDynamicObject(GetPVarInt(playerid, "neon35"));
	
	
	/*Basketball System!.
    HavingBall[playerid] = 0;
    Anim[playerid] = 0;
    if(HavingBall[playerid]) Baller = 999;*/
	
	Player_ResetCutting(playerid);
	Player_RemoveLog(playerid);

	EditingTreeID[playerid] = -1;
	ResetDamages(playerid);
	KillTimer(ServerStuf[playerid]);
	Grade[playerid] = 0;
	RemovePlayerAttachedObject(playerid, 17);
	KillTimer(sakittimer[playerid]);
	KillTimer(mobiltimer[playerid]);
	inSchool[playerid] = 0;
	inSakit[playerid] = 0;
	if(snowOn[playerid] == 1)
	{
		for(new i = 0; i < MAX_SNOW_OBJECTS; i++) DestroyDynamicObject(snowObject[playerid][i]);
		snowOn[playerid] = 0;
		KillTimer(updateTimer[playerid]);
	}
	PlayerTextDrawDestroy(playerid, Textdraw32[playerid]);
	TextDrawHideForPlayer(playerid, Textdraw33);
	PlayerTextDrawDestroy(playerid, Textdrawhud[playerid]);
	PlayerTextDrawDestroy(playerid, Textdrawhud1[playerid]);
	Delete3DTextLabel(mylabel[playerid]);
	PlayerData[playerid][pLeaveTime] = GetTickCount();
	inSchool[playerid] = 0;
	format(PlayerData[playerid][pLeaveIP], 16, PlayerData[playerid][pIP]);
 	TerminateConnection(playerid);
	return 1;
}

Server_Save()
{
	new
	    File:file = fopen("server.ini", io_write),
	    str[128];

	format(str, sizeof(str), "Pajak = %d\n", g_TaxVault);
	return (fwrite(file, str), fclose(file));
}

Server_Load()
{
	new File:file = fopen("server.ini", io_read);

	if (file) {
		g_TaxVault = file_parse_int(file, "Pajak");

		fclose(file);
	}
	return 1;
}

public OnGameModeInit()
{
	//Pizzajob
	pizza_jobpickup = CreatePickup(1239,1,2104.2502,-1806.3750,13.5547,0);
	pizza_restockpickup = CreatePickup(1239,1,2116.4973,-1788.3663,13.1152,0);

	pizzabikes[0] = CreateVehicle(448,2093.9578,-1812.5789,12.9786,89.6835,3,6,60000,0); // Pizzaboy
	pizzabikes[1] = CreateVehicle(448,2093.9387,-1814.8420,12.9820,91.6584,3,6,60000,0); // Pizzaboy
	pizzabikes[2] = CreateVehicle(448,2094.1182,-1816.9015,12.9825,89.0844,3,6,60000,0); // Pizzaboy
	pizzabikes[3] = CreateVehicle(448,2094.1975,-1819.0215,12.9821,88.4043,3,6,60000,0); // Pizzaboy
	pizzabikes[4] = CreateVehicle(448,2094.0500,-1821.4058,12.9817,90.0841,3,6,60000,0); // Pizzaboy

	PizzaBikesPizzas[pizzabikes[0]]=5;
	PizzaBikesPizzas[pizzabikes[1]]=5;
	PizzaBikesPizzas[pizzabikes[2]]=5;
	PizzaBikesPizzas[pizzabikes[3]]=5;
	PizzaBikesPizzas[pizzabikes[4]]=5;

	pizza_restocktext = Create3DTextLabel("{FF0000}Restock Point\n{FFFFFF}Gunakan {7FFF00}/restock{FFFFFF} untuk merestock pizzamu!",0x008080FF,2116.4973,-1788.3663,13.1152,40.0,0,0);

	TutorialTimer =	SetTimer("TutorialTime",1000,true);
	
	//penyapu
	penyapu_pickup = CreatePickup(1239,1,1669.2100, -1883.5300, 13.0800,0);
	
	mobilpenyapu[0] = CreateVehicle(574,1666.9939, -1885.9634, 13.4214, 180.0000,1,128,60000,0);
	mobilpenyapu[1] = CreateVehicle(574,1664.1039, -1885.9634, 13.4214, 180.0000,1,128, 60000,0);
	mobilpenyapu[2] = CreateVehicle(574,1664.2889, -1890.3063, 13.4214, -90.0000,1,128, 60000,0);

	penyapu_text = Create3DTextLabel("{FF0000}Tukang Sapu Jalan\n{FFFFFF} Gunakan {7FFF00}/joinpenyapu {FFFFFF}untuk join sebagai penyapu jalan raya", 0x008080FF,1669.2100,-1883.5300,13.0800, 40.0, 0, 0);
	//END
	
	//Event System by Lilx9
	LoadEventTextdraws();

	/*Basketball system!
	Baller = 999;
	DestroyObject(Ball);
	Ball = CreateObject(2114, 2782.3027,-2019.0826,13.5547-0.8, 0, 0, 96);*/
	
	//beliobat
	Create3DTextLabel("{FFFFFF} Gunakan {7FFF00}/beliobat {FFFFFF}untuk kembali sehat", 0x008080FF,1157.7523,-1310.3689,14.4256, 40.0, 0, 0); // -1?
	CreatePickup(1239,1,1157.7523,-1310.3689,14.4256,-1);
	
	
	//advertising
	Create3DTextLabel("{FFFFFF} Gunakan {7FFF00}/call 222 {FFFFFF}untuk mempublikasikan iklan anda", 0x008080FF,688.1168,-1346.6475,770.1760, 40.0, 0, 0);
	CreatePickup(1239,1,688.1168,-1346.6475,770.1760,-1);
	
	//heal
	Create3DTextLabel("{FFFFFF} Gunakan {7FFF00}/heal {FFFFFF}untuk menyembuhkan pasien", 0x008080FF,1174.5050,-1294.5243,14.4251, 7.0, 0, 0);
	CreatePickup(1240,1,1174.5050,-1294.5243,14.4251,-1);
	
	//heal2
	Create3DTextLabel("{FFFFFF} Gunakan {7FFF00}/heal {FFFFFF}untuk menyembuhkan pasien", 0x008080FF,1174.4449,-1299.4932,14.4251, 7.0, 0, 0);
	CreatePickup(1240,1,1174.4449,-1299.4932,14.4251,-1);
	
	//Dropinjured
    Create3DTextLabel("[Hospital Deliver]\n{FFFFFF}/dropinjured untuk mengantarkan pasien.", 0x008080FF,1161.4567,-1310.9136,31.4944, 12.0, 0, 0);
	CreatePickup(1240,1,1161.4567,-1310.9136,31.4944,-1);
	
	
	//truckerjob
	truckerjob_pickup = CreatePickup(1239,1,-525.5700, -498.6000, 25.6000,0);
	truckerpos_pickup = CreatePickup(1239,1,-485.9100, -557.4700, 25.9200,0);
	//CreateDynamic3DTextLabel("{FF0000}Trucker Job\n{FFFFFF} Gunakan {7FFF00}/mulaikerja {FFFFFF}untuk join sebagai trucker", 0x008080FF,525.5700, -498.6000, 25.6000, 40.0, 0);
	//CreateDynamic3DTextLabel("{FF0000}Pos Pemeriksaan\n{FFFFFF} Gunakan {7FFF00}/checkload {FFFFFF}untuk melanjutkan validasi trailer", 0x008080FF,-485.9100, -557.4700, 25.9200, 40.0, 0, 0);
 	Create3DTextLabel("{FF0000}Trucker Job\n{FFFFFF} Gunakan {7FFF00}/mulaikerja {FFFFFF}untuk join sebagai trucker", 0x008080FF,-525.5700, -498.6000, 25.6000, 40.0, 0, 0);
	Create3DTextLabel("{FF0000}Pos Pemeriksaan\n{FFFFFF} Gunakan {7FFF00}/checkload {FFFFFF}untuk melanjutkan validasi trailer", 0x008080FF,-485.9100, -557.4700, 25.9200, 40.0, 0, 0);
	
	truckers[0] = CreateVehicle(450, -471.7501, -506.1160, 26.5225, 90.0000,random(255),random(255),60000,0);
	truckers[1] = CreateVehicle(450, -471.7501, -512.7630, 26.5225, 90.0000,random(255),random(255),60000,0);
	truckers[2] = CreateVehicle(450, -471.7501, -519.4100, 26.5225, 90.0000,random(255),random(255),60000,0);
	truckers[3] = CreateVehicle(591, -471.6418, -525.8782, 26.5744, 90.0000,random(255),random(255),60000,0);
	truckers[4] = CreateVehicle(591, -471.6418, -531.9472, 26.5744, 90.0000,random(255),random(255),60000,0);
	truckers[5] = CreateVehicle(435, -471.9000, -538.7745, 26.6860, 90.0000,random(255),random(255),60000,0);
	truckers[6] = CreateVehicle(435, -471.9000, -545.4215, 26.6860, 90.0000,random(255),random(255),60000,0);
	truckers[7] = CreateVehicle(584, -471.7463, -552.2254, 27.2949, 90.0000,random(255),random(255),60000,0);
	truckers[8] = CreateVehicle(514, -559.5888, -474.1101, 26.1279, 180.0000,random(255),random(255),60000,0);
	truckers[9] = CreateVehicle(514, -564.5018, -474.1101, 26.1279, 180.0000,random(255),random(255),60000,0);
	truckers[10] = CreateVehicle(514, -569.7038, -474.1101, 26.1279, 180.0000,random(255),random(255),60000,0);
	truckers[11] = CreateVehicle(514, -579.5298, -474.1101, 26.1279, 180.0000,random(255),random(255),60000,0);
	truckers[12] = CreateVehicle(514, -584.4428, -474.1101, 26.1279, 180.0000,random(255),random(255),60000,0);
	truckers[13] = CreateVehicle(514, -589.3558, -474.1101, 26.1279, 180.0000,random(255),random(255),60000,0);
	
	//paytoll
	//Paytoll LSLV
	CreateDynamic3DTextLabel("{33AA33}Toll Gate\n {FFFF00}Type '{AA3333}/paytoll{FFFF00}' to open the gate.",COLOR_YELLOW,2840.92,-865.78,10.56,10.0);
	CreateDynamic3DTextLabel("{33AA33}Toll Gate\n {FFFF00}Type '{AA3333}/paytoll{FFFF00}' to open the gate.",COLOR_YELLOW,2846.39,-879.15,10.49,10.0);
	CreateDynamic3DTextLabel("{33AA33}Toll Gate\n {FFFF00}Type '{AA3333}/paytoll{FFFF00}' to open the gate.",COLOR_YELLOW,2872.72,-866.50,10.58,10.0);
	CreateDynamic3DTextLabel("{33AA33}Toll Gate\n {FFFF00}Type '{AA3333}/paytoll{FFFF00}' to open the gate.",COLOR_YELLOW,2893.35,-877.37,10.58,10.0);
	//Paytoll LSSF
	CreateDynamic3DTextLabel("{33AA33}Toll Gate\n {FFFF00}Type '{AA3333}/paytoll{FFFF00}' to open the gate.",COLOR_YELLOW,57.90,-1525.71,4.69,10.0);
	CreateDynamic3DTextLabel("{33AA33}Toll Gate\n {FFFF00}Type '{AA3333}/paytoll{FFFF00}' to open the gate.",COLOR_YELLOW,39.52,-1536.74,4.93,10.0);
	CreateDynamic3DTextLabel("{33AA33}Toll Gate\n {FFFF00}Type '{AA3333}/paytoll{FFFF00}' to open the gate.",COLOR_YELLOW,1698.48,-508.50,33.70,10.0);
	CreateDynamic3DTextLabel("{33AA33}Toll Gate\n {FFFF00}Type '{AA3333}/paytoll{FFFF00}' to open the gate.",COLOR_YELLOW,1714.10,-518.46,34.09,10.0);
	//Paytoll LVLS
	CreateDynamic3DTextLabel("{33AA33}Toll Gate\n {FFFF00}Type '{AA3333}/paytoll{FFFF00}' to open the gate.",COLOR_YELLOW,-197.68,241.50,11.78,10.0);
	CreateDynamic3DTextLabel("{33AA33}Toll Gate\n {FFFF00}Type '{AA3333}/paytoll{FFFF00}' to open the gate.",COLOR_YELLOW,-200.54,257.54,11.78,10.0);
	CreateDynamic3DTextLabel("{33AA33}Toll Gate\n {FFFF00}Type '{AA3333}/paytoll{FFFF00}' to open the gate.",COLOR_YELLOW,619.77,335.79,19.06,10.0);
	CreateDynamic3DTextLabel("{33AA33}Toll Gate\n {FFFF00}Type '{AA3333}/paytoll{FFFF00}' to open the gate.",COLOR_YELLOW,605.12,346.57,18.64,10.0);

	
	//jobkoran
	koran_antarpickup = CreatePickup(1239,1,1856.3959,-1040.4155,24.0105,0);
	koran_jobpickup = CreatePickup(1239,1,1863.3519,-1044.6868,23.8872,0);
	
 	speda[0] = CreateVehicle(510,1856.3120, -1036.5673, 23.9070,3,6,60000,0); //bmxkoran
	speda[1] = CreateVehicle(510,1857.8284, -1036.6115, 23.9070,3,6,60000,0); //bmxkoran
	speda[2] = CreateVehicle(510,1859.3384, -1036.6115, 23.9070,3,6,60000,0); //bmxkoran
	speda[3] = CreateVehicle(510,1860.8484, -1036.6115, 23.9070,3,6,60000,0); //bmxkoran
	speda[4] = CreateVehicle(510,1856.2637, -1039.9720, 23.9070,3,6,60000,0); //bmxkoran
	speda[5] = CreateVehicle(510,1858.0757, -1039.9720, 23.9070,3,6,60000,0); //bmxkoran
	speda[6] = CreateVehicle(510,1859.5857, -1039.9720, 23.9070,3,6,60000,0); //bmxkoran
	speda[7] = CreateVehicle(510,1861.0957, -1039.9720, 23.9070,3,6,60000,0); //bmxkoran
	
	koran_antarkoran = Create3DTextLabel("{FF0000}Tukang Koran\n{FFFFFF} Gunakan {7FFF00}/antarkoran {FFFFFF}untuk mengantar koran", 0x008080FF,1856.3959,-1040.4155,24.0105, 40.0, 0, 0);
	koran_jobtext = Create3DTextLabel("Tukang Koran\n{FFFFFF} Gunakan {7FFF00}/joinkoran {FFFFFF}untuk menjadi pengantar koran", 0x008080FF,1863.3519,-1044.6868,23.8872, 40.0, 0, 0);

	pizza_jobtext = Create3DTextLabel("{FF0000}Pizza Job\n{FFFFFF}Gunakan {7FFF00}/startjob{FFFFFF} untuk memulai part-time pizza job!",0x008080FF,2104.2502,-1806.3750,13.5547,40.0,0,0);

	//Lumberjack
    print("  [Lumberjack] Initializing...");

    // assign default values to variables
	for(new i; i < MAX_TREES; i++)
	{
		TreeData[i][treeObjID] = TreeData[i][treeTimer] = -1;
		TreeData[i][treeLabel] = Text3D: -1;
	}

	for(new i; i < MAX_LOGS; i++)
	{
	    LogData[i][logObjID] = LogData[i][logTimer] = -1;
	    LogData[i][logLabel] = Text3D: -1;
	}

	for(new i; i < MAX_BUYERS; i++)
	{
	    BuyerData[i][buyerActorID] = -1;
	    BuyerData[i][buyerLabel] = Text3D: -1;
	}

	for(new i; i < MAX_VEHICLES; i++) for(new x; x < LOG_LIMIT; x++) LogObjects[i][x] = -1;

	foreach(new i : Player) Player_Init(i);

	// open database & create tables
	ScriptDBHandle = db_open("lumberjack.db");
	db_query(ScriptDBHandle, "CREATE TABLE IF NOT EXISTS trees (ID INTEGER, PosX FLOAT, PosY FLOAT, PosZ FLOAT, RotX FLOAT, RotY FLOAT, RotZ FLOAT)");
	db_query(ScriptDBHandle, "CREATE TABLE IF NOT EXISTS buyers (ID INTEGER, Skin INTEGER, PosX FLOAT, PosY FLOAT, PosZ FLOAT, PosA FLOAT)");

	// prepare tree queries
	LoadTrees = db_prepare(ScriptDBHandle, "SELECT * FROM trees");
	AddTree = db_prepare(ScriptDBHandle, "INSERT INTO trees (ID, PosX, PosY, PosZ, RotX, RotY, RotZ) VALUES (?, ?, ?, ?, ?, ?, ?)");
    UpdateTree = db_prepare(ScriptDBHandle, "UPDATE trees SET PosX=?, PosY=?, PosZ=?, RotX=?, RotY=?, RotZ=? WHERE ID=?");
	RemoveTree = db_prepare(ScriptDBHandle, "DELETE FROM trees WHERE ID=?");

	// prepare buyer queries
	LoadBuyers = db_prepare(ScriptDBHandle, "SELECT * FROM buyers");
	AddBuyer = db_prepare(ScriptDBHandle, "INSERT INTO buyers (ID, Skin, PosX, PosY, PosZ, PosA) VALUES (?, ?, ?, ?, ?, ?)");
    UpdateBuyer = db_prepare(ScriptDBHandle, "UPDATE buyers SET Skin=?, PosX=?, PosY=?, PosZ=?, PosA=? WHERE ID=?");
	RemoveBuyer = db_prepare(ScriptDBHandle, "DELETE FROM buyers WHERE ID=?");

	// load trees
	new id, Float: pos[3], Float: rot[3];
	stmt_bind_result_field(LoadTrees, 0, DB::TYPE_INTEGER, id);
	stmt_bind_result_field(LoadTrees, 1, DB::TYPE_FLOAT, pos[0]);
	stmt_bind_result_field(LoadTrees, 2, DB::TYPE_FLOAT, pos[1]);
	stmt_bind_result_field(LoadTrees, 3, DB::TYPE_FLOAT, pos[2]);
	stmt_bind_result_field(LoadTrees, 4, DB::TYPE_FLOAT, rot[0]);
	stmt_bind_result_field(LoadTrees, 5, DB::TYPE_FLOAT, rot[1]);
	stmt_bind_result_field(LoadTrees, 6, DB::TYPE_FLOAT, rot[2]);

	if(stmt_execute(LoadTrees))
	{
	    print("  [Lumberjack] Loading trees...");

	    new label[96];
	    while(stmt_fetch_row(LoadTrees))
	    {
            TreeData[id][treeX] = pos[0];
		 	TreeData[id][treeY] = pos[1];
		  	TreeData[id][treeZ] = pos[2];
	        TreeData[id][treeRX] = rot[0];
		 	TreeData[id][treeRY] = rot[1];
		  	TreeData[id][treeRZ] = rot[2];

		    TreeData[id][treeObjID] = CreateDynamicObject(657, TreeData[id][treeX], TreeData[id][treeY], TreeData[id][treeZ], TreeData[id][treeRX], TreeData[id][treeRY], TreeData[id][treeRZ]);

			format(label, sizeof(label), "Pohon (%d)\n\n{FFFFFF}Ketik {F1C40F}~k~~CONVERSATION_NO~ {FFFFFF}untuk memotongnya.", id);
			TreeData[id][treeLabel] = CreateDynamic3DTextLabel(label, 0x2ECC71FF, TreeData[id][treeX], TreeData[id][treeY], TreeData[id][treeZ] + 1.5, 5.0);

			Iter_Add(Trees, id);
		}

		printf("  [Lumberjack] Loaded %d trees.", Iter_Count(Trees));
	}

	// load buyers
	new skin, Float: bpos[4];
	stmt_bind_result_field(LoadBuyers, 0, DB::TYPE_INTEGER, id);
	stmt_bind_result_field(LoadBuyers, 1, DB::TYPE_INTEGER, skin);
	stmt_bind_result_field(LoadBuyers, 2, DB::TYPE_FLOAT, bpos[0]);
	stmt_bind_result_field(LoadBuyers, 3, DB::TYPE_FLOAT, bpos[1]);
	stmt_bind_result_field(LoadBuyers, 4, DB::TYPE_FLOAT, bpos[2]);
	stmt_bind_result_field(LoadBuyers, 5, DB::TYPE_FLOAT, bpos[3]);

	if(stmt_execute(LoadBuyers))
	{
	    print("  [Lumberjack] Loading buyers...");

	    new label[172];
	    while(stmt_fetch_row(LoadBuyers))
	    {
            BuyerData[id][buyerSkin] = skin;
		 	BuyerData[id][buyerX] = bpos[0];
		  	BuyerData[id][buyerY] = bpos[1];
	        BuyerData[id][buyerZ] = bpos[2];
		 	BuyerData[id][buyerA] = bpos[3];

		    BuyerData[id][buyerActorID] = CreateActor(BuyerData[id][buyerSkin], BuyerData[id][buyerX], BuyerData[id][buyerY], BuyerData[id][buyerZ], BuyerData[id][buyerA]);
            SetActorInvulnerable(BuyerData[id][buyerActorID], 1);

			format(label, sizeof(label), "Pembeli kayu (%d)\n\n{FFFFFF}Gunakan {F1C40F}/chainsaw {FFFFFF}untuk membeli chainsaw seharga {2ECC71}$%d.\n{F1C40F}/log sell {FFFFFF}untuk jual kayu {2ECC71}$%d.", id, CSAW_PRICE, LOG_PRICE);
			BuyerData[id][buyerLabel] = CreateDynamic3DTextLabel(label, 0xF1C40FFF, BuyerData[id][buyerX], BuyerData[id][buyerY], BuyerData[id][buyerZ] + 0.25, 5.0, .testlos = 1);

			Iter_Add(Buyers, id);
		}

		printf("  [Lumberjack] Loaded %d buyers.", Iter_Count(Buyers));
	}
	//Lumberjack End
	SetTimer("Zones_Update", 5000, 1);

	Textdraw33 = TextDrawCreate(170.667633, 426.166687, "usebox");
	TextDrawLetterSize(Textdraw33, 0.000000, 1.303701);
	TextDrawTextSize(Textdraw33, 35.013175, 0.000000);
	TextDrawAlignment(Textdraw33, 1);
	TextDrawColor(Textdraw33, 0);
	TextDrawUseBox(Textdraw33, true);
	TextDrawBoxColor(Textdraw33, 102);
	TextDrawSetShadow(Textdraw33, 0);
	TextDrawSetOutline(Textdraw33, 0);
	TextDrawFont(Textdraw33, 0);

	BlackRadar= GangZoneCreate(-3334.758544, -3039.903808, 3049.241455, 3184.096191);
    for(new i=0; i<MAX_PLAYERS; i++){
	Zones[i] = TextDrawCreate(41.698379, 427.583282, "Los Santos Airport");
	TextDrawLetterSize(Zones[i], 0.223235, 0.911666);
	TextDrawAlignment(Zones[i], 1);
	TextDrawColor(Zones[i], -1);
	TextDrawSetShadow(Zones[i], 0);
	TextDrawSetOutline(Zones[i], 1);
	TextDrawBackgroundColor(Zones[i], 51);
	TextDrawFont(Zones[i], 2);
	TextDrawSetProportional(Zones[i], 1);}

	static
	    arrVirtualWorlds[2000],
		id2 = -1;

	WeatherRotator();

	SQL_Connect();
	ManualVehicleEngineAndLights();
	new rcon[80];
	format(rcon, sizeof(rcon), "hostname %s", SERVER_NAME);
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "weburl %s", SERVER_URL);
	SendRconCommand(rcon);
	SetGameModeText(SERVER_REVISION);
	if (mysql_errno(g_iHandle) != 0)
	    return 0;

	Server_Load();
    mysql_tquery(g_iHandle, "SELECT * FROM `billboards`", "Billboard_Load", "");
	mysql_tquery(g_iHandle, "SELECT * FROM `houses`", "House_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `businesses`", "Business_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `dropped`", "Dropped_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `entrances`", "Entrance_Load", "");
	mysql_tquery(g_iHandle, "SELECT * FROM `cars`", "Car_Load", "");
	mysql_tquery(g_iHandle, "SELECT * FROM `jobs`", "Job_Load", "");
	mysql_tquery(g_iHandle, "SELECT * FROM `crates`", "Crate_Load", "");
	mysql_tquery(g_iHandle, "SELECT * FROM `plants`", "Plant_Load", "");
	mysql_tquery(g_iHandle, "SELECT * FROM `factions`", "Faction_Load", "");
	mysql_tquery(g_iHandle, "SELECT * FROM `arrestpoints`", "Arrest_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `gates`", "Gate_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `backpacks`", "Backpack_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `impoundlots`", "Impound_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `atm`", "ATM_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `garbage`", "Garbage_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `vendors`", "Vendor_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `gunracks`", "Rack_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `speedcameras`", "Speed_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `graffiti`", "Graffiti_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `detectors`", "Detector_Load", "");

    SetModelPreviewRotation(18875, 90.0, 180.0, 0.0);
    SetModelPreviewRotation(2703, -105.0, 0.0, -15.0);
    SetModelPreviewRotation(2702, 90.0, 90.0, 0.0);
    SetModelPreviewRotation(2814, -90.0, 0.0, -90.0);
    SetModelPreviewRotation(2768, -15.0, 0.0, -160.0);
    SetModelPreviewRotation(19142, -20.0, -90.0, 0.0);
    SetModelPreviewRotation(1581, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(2958, -10.0, -15.0, 0.0);
    SetModelPreviewRotation(1575, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(1577, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(1578, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(18634, 90.0, 90.0, 0.0);
    SetModelPreviewRotation(2043, 0.0, 0.0, 90.0);
    SetModelPreviewRotation(1484, -15.0, 30.0, 0.0);
    SetModelPreviewRotation(2226, 0.0, 0.0, 180.0);

	for (new i = 0; i < sizeof(arrVirtualWorlds); i ++) {
	    arrVirtualWorlds[i] = i + 7000;
	}
	CreateDynamicPickup(1581, 23, -2033.0439, -117.4885, 1035.1719);
	CreateDynamic3DTextLabel("[Driving Test]\n{FFFFFF}Ketik /drivingtest untuk memulai tes.", COLOR_DEPARTMENT, -2033.0439, -117.4885, 1035.1719, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);

	CreateDynamicPickup(1239, 23, 1260.3976, -20.0215, 1001.0234);
	CreateDynamic3DTextLabel("[Bongkar Muat]\n{FFFFFF}Ketik /loadcrate untuk mulai memuat muatan.", COLOR_YELLOW, 1260.3976, -20.0215, 1001.0234, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);

    CreateDynamicPickupEx(1239, 23, 361.2687, 171.5613, 1008.3828, 100.0, arrVirtualWorlds);
	CreateDynamic3DTextLabel("[Tickets]\n{FFFFFF}Ketik /tickets untuk membayar tagihan tiketmu.", COLOR_DEPARTMENT, 361.2687, 171.5613, 1008.3828, 10.0);



	CreateDynamicPickupEx(1239, 23, 361.1653, 175.8127, 1008.3828, 100.0, arrVirtualWorlds);
	CreateDynamic3DTextLabel("[Bebaskan Kendaraan]\n{FFFFFF}Ketik /releasecar untuk membebaskan kendaraan.", COLOR_DEPARTMENT, 361.1653, 175.8127, 1008.3828, 10.0);

	CreateDynamicPickupEx(1239, 23, 359.7919, 177.8100, 1008.3828, 100.0, arrVirtualWorlds);
	CreateDynamic3DTextLabel("[Departemen Lisensi]\n{FFFFFF}Ketik /buylicense untuk membeli sebuah lisensi.", COLOR_DEPARTMENT, 359.7919, 177.8100, 1008.3828, 10.0);

	//CreateDynamicPickup(1239, 23, 1083.3856,-1451.0500,22.7434);
	//CreateDynamic3DTextLabel("[Black Market]\n{FFFFFF}Ketik /blackmarket untuk mengaksesnya.", COLOR_DEPARTMENT, 1083.3856,-1451.0500,22.7434, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);

	CreateDynamicPickup(1559, 23, 272.2939, 1388.8876, 11.8342);
	CreateDynamic3DTextLabel("Penjara San Andreas", COLOR_DEPARTMENT, 272.2939, 1388.8876, 11.1342, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);

    CreateDynamicPickup(1559, 23, 1211.1923, -1354.3439, 797.4456);
	CreateDynamic3DTextLabel("Penjara Yard", COLOR_DEPARTMENT, 1211.1923, -1354.3439, 796.7456, 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, PRISON_WORLD, 5);

	for (new i = 0; i < sizeof(arrBoothPositions); i ++) {
	    CreateDynamic3DTextLabel("[Shooting Range]\n{FFFFFF}Tekan 'F' untuk menggunakan stan ini.", COLOR_DEPARTMENT, arrBoothPositions[i][0], arrBoothPositions[i][1], arrBoothPositions[i][2], 25.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 7);
	}
	for (new i = 0; i < sizeof(arrHospitalSpawns); i ++) {
	    CreateDynamicMapIcon(arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2], 22, 0, -1, -1, -1, 300.0);

		CreatePickup(1559, 23, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2] + 0.7);
		Create3DTextLabel("General Hospital", COLOR_DEPARTMENT, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2], 25.0, 0);

		CreatePickup(1240, 23, arrHospitalDeliver[i][0], arrHospitalDeliver[i][1], arrHospitalDeliver[i][2]);
		Create3DTextLabel("[Hospital Deliver]\n{FFFFFF}/dropinjured untuk mengantarkan pasien.", COLOR_DEPARTMENT, arrHospitalDeliver[i][0], arrHospitalDeliver[i][1], arrHospitalDeliver[i][2], 25.0, 0);

	}
	// Textdraws
	gServerTextdraws[0] = TextDrawCreate(547.000000, 23.000000, "12:00 PM");
	TextDrawBackgroundColor(gServerTextdraws[0], 255);
	TextDrawFont(gServerTextdraws[0], 1);
	TextDrawLetterSize(gServerTextdraws[0], 0.360000, 1.499999);
	TextDrawColor(gServerTextdraws[0], -1);
	TextDrawSetOutline(gServerTextdraws[0], 1);
	TextDrawSetProportional(gServerTextdraws[0], 1);
	TextDrawSetSelectable(gServerTextdraws[0], 0);

	gServerTextdraws[1] = TextDrawCreate(500.000000, 6.000000, "Vandora Ravens ~r~Roleplay");
	TextDrawBackgroundColor(gServerTextdraws[1], 255);
	TextDrawFont(gServerTextdraws[1], 1);
	TextDrawLetterSize(gServerTextdraws[1], 0.260000, 1.200000);
	TextDrawColor(gServerTextdraws[1], -1);
	TextDrawSetOutline(gServerTextdraws[1], 1);
	TextDrawSetProportional(gServerTextdraws[1], 1);
	TextDrawSetSelectable(gServerTextdraws[1], 0);

	Textdraw37 = TextDrawCreate(451.780395, 425.583312, "usebox");
	TextDrawLetterSize(Textdraw37, -0.004685, 1.292040);
	TextDrawTextSize(Textdraw37, 191.499267, 0.000000);
	TextDrawAlignment(Textdraw37, 1);
	TextDrawColor(Textdraw37, 0);
	TextDrawUseBox(Textdraw37, true);
	TextDrawBoxColor(Textdraw37, 102);
	TextDrawSetShadow(Textdraw37, 0);
	TextDrawSetOutline(Textdraw37, 0);
	TextDrawFont(Textdraw37, 0);

	gServerTextdraws[2] = TextDrawCreate(208.023330, 425.250061, "~r~Kamu terluka! ~w~/call 911 atau /giveup");
	TextDrawLetterSize(gServerTextdraws[2], 0.264465, 1.127499);
	TextDrawAlignment(gServerTextdraws[2], 1);
	TextDrawColor(gServerTextdraws[2], -1);
	TextDrawSetShadow(gServerTextdraws[2], 0);
	TextDrawSetOutline(gServerTextdraws[2], 1);
	TextDrawBackgroundColor(gServerTextdraws[2], 51);
	TextDrawFont(gServerTextdraws[2], 2);
	TextDrawSetProportional(gServerTextdraws[2], 1);

    gServerTextdraws[3] = TextDrawCreate(237.000000, 409.000000, "~r~Server Restart:~w~ 00:00");
	TextDrawBackgroundColor(gServerTextdraws[3], 255);
	TextDrawFont(gServerTextdraws[3], 1);
	TextDrawLetterSize(gServerTextdraws[3], 0.480000, 1.300000);
	TextDrawColor(gServerTextdraws[3], -1);
	TextDrawSetOutline(gServerTextdraws[3], 1);
	TextDrawSetProportional(gServerTextdraws[3], 1);
	TextDrawSetSelectable(gServerTextdraws[3], 0);
	
	//Fishing sistem
	Create3DTextLabel("Pier Shop\n/Buyrod\n/sellfish", 0x008080FF, 378.6885,-2061.8040,7.8359, 40.0, 0, 1);
	Create3DTextLabel("Fishing Spot",0x008080FF, 403.9774,-2088.6292,7.8359, 40.0, 0, 1);
	Create3DTextLabel("Fishing Spot",0x008080FF, 383.0248,-2088.5334,7.8359, 40.0, 0, 1);
	Create3DTextLabel("Fishing Spot",0x008080FF, 356.4932,-2088.7969,7.8359, 40.0, 0, 1);
	Create3DTextLabel("Los Santos Fishing Pier",0x008080FF, 383.7704,-2048.6101,7.8359, 40.0, 0, 1);
	
	
	/* Fishing Pier */
	CreateObject(970, 379.95294, -2014.83093, 7.32475,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 379.95575, -2018.95471, 7.32475,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 379.54205, -2032.41858, 7.32475,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 379.54211, -2036.54163, 7.32470,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 379.54211, -2040.72363, 7.32470,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 379.54211, -2044.90564, 7.32470,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 379.54211, -2049.08765, 7.32470,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 392.42929, -2049.80054, 7.32470,   0.00000, 0.00000, 0.00000);
	CreateObject(10183, 395.28754, -2034.53809, 6.83220,   0.00000, 0.00000, -45.00000);
	CreateObject(970, 387.01730, -2049.80054, 7.32470,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 381.60529, -2049.80054, 7.32470,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 355.20148, -2050.41016, 7.32470,   0.00000, 0.00000, 90.00000);
	CreateObject(1215, 379.90939, -2014.85681, 7.37500,   356.85840, 0.00000, 3.14159);
	CreateObject(1215, 379.90939, -2019.03882, 7.37500,   356.85840, 0.00000, 3.14160);
	CreateObject(1215, 379.90933, -2021.27283, 7.37500,   356.85840, 0.00000, 3.14160);
	CreateObject(8406, 379.88095, -2028.95129, 12.19460,   0.00000, 0.00000, 89.00000);
	CreateObject(19425, 379.99271, -2023.55029, 6.83330,   0.00000, 0.00000, 90.00000);
	CreateObject(19425, 379.99271, -2027.97827, 6.83330,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 398.60422, -2049.38306, 7.32470,   0.00000, 0.00000, 76.00000);
	CreateObject(1280, 379.63022, -2017.23962, 7.21094,   3.14159, 0.00000, 3.13624);
	CreateObject(1280, 379.20010, -2032.44482, 7.21094,   3.14159, 0.00000, 3.13624);
	CreateObject(1280, 379.19434, -2037.98877, 7.21094,   3.14159, 0.00000, 3.13624);
	CreateObject(1280, 379.25299, -2044.29431, 7.21094,   3.14159, 0.00000, 3.13624);
	CreateObject(1522, 378.20685, -2062.60962, 6.81255,   0.00000, 0.00000, 90.00000);
	CreateObject(1232, 364.87814, -2047.01599, 9.50000,   356.85840, 0.00000, 3.14159);
	CreateObject(1232, 392.43045, -2049.78467, 9.50000,   356.85840, 0.00000, 3.14159);
	CreateObject(1232, 387.01849, -2049.66162, 9.50000,   356.85840, 0.00000, 3.14160);
	CreateObject(1232, 381.60651, -2049.66162, 9.50000,   356.85840, 0.00000, 3.14160);
	//Fishing system end.

	
	//jobkoran
	CreateDynamicObject(19313, 1851.44958, -1062.59009, 21.61635,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 1851.45996, -1048.57263, 21.61630,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 1851.51831, -1034.53162, 21.61630,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 1864.79272, -1043.34668, 17.97404,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19313, 1854.90259, -1043.17407, 17.99140,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(4642, 1857.25720, -1045.38550, 24.67110,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(7921, 1867.02991, -1042.61743, 23.61970,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(7921, 1852.00623, -1041.86633, 23.61970,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(7921, 1852.76245, -1033.66980, 23.61970,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(7921, 1867.78113, -1034.11536, 23.61970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 1860.51221, -1033.09473, 21.61630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1861.56104, -1043.23340, 23.88950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 1851.81787, -1064.44714, 22.29340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1851.81787, -1054.14709, 22.29340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1851.81787, -1048.70715, 22.29340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1860.00073, -1038.00793, 22.50570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1857.94104, -1043.23340, 23.88950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 1868.39148, -1038.62524, 17.97400,   0.00000, 90.00000, 90.00000);
	
	
	//Lumber
	CreateDynamicObject(8531, 2573.70703, -806.64935, 92.50515,   0.00000, 0.00000, -92.00000);
	CreateDynamicObject(17545, 2613.98633, -802.54126, 60.00810,   90.00000, 0.00000, 88.00000);
	CreateDynamicObject(17545, 2613.39673, -814.35370, 60.00810,   90.00000, 0.00000, 88.00000);
	CreateDynamicObject(17545, 2590.72705, -778.37579, 60.14374,   90.00000, 0.00000, 180.00000);
	CreateDynamicObject(17545, 2588.98389, -837.18048, 60.14370,   90.00000, 0.00000, -2.00000);
	CreateDynamicObject(17545, 2556.72559, -836.04999, 60.14370,   90.00000, 0.00000, -2.00000);
	CreateDynamicObject(17545, 2533.49243, -811.09229, 60.14370,   90.00000, 0.00000, -92.00000);
	CreateDynamicObject(17545, 2533.89819, -803.41882, 60.14370,   90.00000, 0.00000, -92.00000);
	CreateDynamicObject(17038, 2606.07129, -784.21674, 91.80260,   0.00000, 0.00000, 88.00000);
	CreateDynamicObject(8645, 2579.07764, -777.02350, 92.63330,   0.00000, 0.00000, 178.00000);
	CreateDynamicObject(8645, 2563.80737, -776.45264, 92.63330,   0.00000, 0.00000, 178.00000);
	CreateDynamicObject(13435, 2557.59790, -802.50629, 95.26889,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13435, 2575.60498, -803.32617, 95.26889,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13435, 2595.11108, -804.59174, 95.26889,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18267, 2541.46851, -822.84277, 93.45409,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18565, 2561.09839, -826.60736, 92.92165,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18565, 2572.91162, -826.88550, 92.92165,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18565, 2587.15698, -826.93585, 92.92165,   0.00000, 0.00000, 0.00000);
	
	//truckerjob
	CreateDynamicObject(5837, -489.57288, -557.02179, 26.07010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3472, -480.40591, -561.10895, 25.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, -498.43143, -561.20068, 25.02700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, -501.89481, -539.23993, 24.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, -501.42963, -509.63519, 24.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3715, -489.30930, -564.97583, 32.22620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, -435.16849, -628.01758, 12.82780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, -430.88916, -642.01996, 12.82780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, -462.49271, -637.99701, 14.76680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, -455.95590, -624.72382, 14.76680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, -455.95590, -624.72382, 14.76680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, -484.52600, -610.69299, 16.15180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, -469.53119, -605.73029, 16.15180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, -494.64700, -585.86377, 19.75280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, -481.23999, -580.54828, 19.47580,   0.00000, 0.00000, 0.00000);
	
    // School
 	CreateDynamicObject(19379, 1297.65, 156.01, 1071.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1287.15, 156.02, 1071.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1276.66, 156.02, 1071.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1266.16, 156.00, 1071.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1266.17, 146.38, 1071.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1276.69, 146.40, 1071.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1287.17, 146.40, 1071.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(14411, 1294.47, 147.92, 1071.79,   0.00, 0.00, -180.06);
    CreateDynamicObject(19445, 1292.36, 146.35, 1073.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1277.92, 141.69, 1073.22,   0.00, 0.00, 89.70);
    CreateDynamicObject(19445, 1268.32, 141.73, 1073.22,   0.00, 0.00, 89.70);
    CreateDynamicObject(19379, 1255.67, 146.42, 1071.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19445, 1258.70, 141.77, 1073.22,   0.00, 0.00, 89.70);
    CreateDynamicObject(19379, 1255.66, 156.07, 1071.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19445, 1301.23, 151.19, 1073.22,   0.00, 0.00, 89.70);
    CreateDynamicObject(19445, 1296.49, 146.42, 1073.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1298.08, 160.75, 1073.22,   0.00, 0.00, 89.70);
    CreateDynamicObject(19445, 1302.79, 155.89, 1073.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1253.92, 146.50, 1073.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1253.90, 156.06, 1073.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1288.66, 160.74, 1073.22,   0.00, 0.00, 90.36);
    CreateDynamicObject(19445, 1269.52, 160.62, 1073.22,   0.00, 0.00, 90.36);
    CreateDynamicObject(19445, 1259.96, 160.54, 1073.22,   0.00, 0.00, 90.36);
    CreateDynamicObject(19445, 1250.35, 160.49, 1073.22,   0.00, 0.00, 90.36);
    CreateDynamicObject(19445, 1279.52, 146.28, 1073.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1287.58, 151.04, 1073.22,   0.00, 0.00, 90.36);
    CreateDynamicObject(19383, 1281.20, 151.01, 1073.22,   0.00, 0.00, 89.88);
    CreateDynamicObject(1491, 1280.42, 151.02, 1071.48,   0.00, 0.00, 0.00);
    CreateDynamicObject(18070, 1289.57, 157.02, 1072.00,   0.00, 0.00, 89.88);
    CreateDynamicObject(1569, 1302.70, 158.17, 1071.49,   0.00, 0.00, -89.88);
    CreateDynamicObject(1569, 1302.70, 155.18, 1071.49,   0.00, 0.00, 89.88);
    CreateDynamicObject(2412, 1302.14, 158.73, 1071.49,   0.00, 0.00, 88.56);
    CreateDynamicObject(2412, 1302.18, 155.36, 1071.49,   0.00, 0.00, 88.56);
    CreateDynamicObject(1713, 1299.84, 151.87, 1071.49,   0.00, 0.00, 179.76);
    CreateDynamicObject(2894, 1291.19, 159.61, 1072.51,   0.00, 0.00, -61.74);
    CreateDynamicObject(2190, 1291.58, 158.46, 1072.51,   0.00, 0.00, -91.62);
    CreateDynamicObject(1713, 1297.86, 160.10, 1071.49,   0.00, 0.00, 360.72);
    CreateDynamicObject(19383, 1277.85, 151.00, 1073.21,   0.00, 0.00, 89.88);
    CreateDynamicObject(19353, 1274.67, 151.01, 1073.22,   0.00, 0.00, 89.76);
    CreateDynamicObject(19445, 1273.17, 146.27, 1073.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(1491, 1277.05, 151.04, 1071.48,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1273.16, 159.11, 1073.20,   0.00, 0.00, 0.00);
    CreateDynamicObject(19383, 1273.16, 152.70, 1073.20,   0.00, 0.00, -0.06);
    CreateDynamicObject(1491, 1273.19, 151.95, 1071.43,   0.00, 0.00, 89.52);
    CreateDynamicObject(14782, 1276.45, 160.22, 1072.46,   0.00, 0.00, 0.00);
    CreateDynamicObject(14782, 1273.58, 158.91, 1072.46,   0.00, 0.00, 91.68);
    CreateDynamicObject(3496, 1262.90, 141.18, 1070.63,   0.00, 0.00, 0.00);
    CreateDynamicObject(3496, 1265.67, 161.13, 1070.56,   0.00, 0.00, 177.66);
    CreateDynamicObject(2114, 1266.64, 160.20, 1071.60,   0.00, 0.00, 0.00);
    CreateDynamicObject(2114, 1263.90, 155.37, 1071.60,   0.00, 0.00, 0.00);
    CreateDynamicObject(2628, 1255.00, 159.49, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2628, 1256.70, 159.60, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2628, 1254.87, 157.40, 1071.51,   0.00, 0.00, 90.42);
    CreateDynamicObject(2628, 1254.83, 155.80, 1071.49,   0.00, 0.00, 90.42);
    CreateDynamicObject(2627, 1254.88, 143.31, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2627, 1256.30, 143.33, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2627, 1257.65, 143.39, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2627, 1254.90, 146.44, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2627, 1256.29, 146.43, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2627, 1257.64, 146.44, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(14782, 1272.74, 146.22, 1072.45,   0.00, 0.00, -90.24);
    CreateDynamicObject(2630, 1272.20, 159.11, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2630, 1270.72, 159.01, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2630, 1269.50, 158.93, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(3034, 1254.05, 151.48, 1073.27,   0.00, 0.00, 90.60);
    CreateDynamicObject(3034, 1267.94, 141.89, 1073.27,   0.00, 0.00, 179.52);
    CreateDynamicObject(19379, 1266.17, 146.38, 1074.89,   0.00, 90.00, 0.00);
    CreateDynamicObject(1985, 1269.86, 144.73, 1074.80,   0.00, 0.00, 0.00);
    CreateDynamicObject(1985, 1267.58, 144.48, 1074.80,   0.00, 0.00, 0.00);
    CreateDynamicObject(19379, 1255.69, 146.39, 1074.89,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1255.68, 156.01, 1074.89,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1266.15, 156.00, 1074.89,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1276.61, 155.99, 1074.89,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1276.64, 146.39, 1074.89,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1287.10, 155.94, 1074.89,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1287.14, 146.32, 1074.89,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1297.58, 155.95, 1074.89,   0.00, 90.00, 0.00);
    CreateDynamicObject(19445, 1296.49, 146.42, 1076.72,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1291.78, 141.54, 1076.72,   0.00, 0.00, 90.06);
    CreateDynamicObject(19445, 1291.80, 151.33, 1076.72,   0.00, 0.00, 89.10);
    CreateDynamicObject(19445, 1292.37, 150.84, 1076.72,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1282.14, 132.21, 1076.72,   0.00, 0.00, 90.06);
    CreateDynamicObject(19445, 1272.52, 141.49, 1076.72,   0.00, 0.00, 90.06);
    CreateDynamicObject(19445, 1287.06, 156.14, 1076.72,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1282.52, 160.64, 1076.72,   0.00, 0.00, 90.06);
    CreateDynamicObject(19445, 1272.89, 160.63, 1076.72,   0.00, 0.00, 90.06);
    CreateDynamicObject(19445, 1263.29, 160.60, 1076.72,   0.00, 0.00, 90.06);
    CreateDynamicObject(19445, 1258.60, 155.74, 1076.72,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1258.61, 146.14, 1076.72,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1262.90, 141.48, 1076.72,   0.00, 0.00, 90.06);
    CreateDynamicObject(2417, 1289.40, 150.70, 1074.97,   0.00, 0.00, 0.00);
    CreateDynamicObject(2416, 1290.57, 150.62, 1074.97,   0.00, 0.00, 1.44);
    CreateDynamicObject(2418, 1291.58, 148.98, 1074.97,   0.00, 0.00, -89.28);
    CreateDynamicObject(2451, 1287.45, 150.61, 1074.97,   0.00, 0.00, 0.00);
    CreateDynamicObject(2419, 1289.94, 146.92, 1074.97,   0.00, 0.00, 179.04);
    CreateDynamicObject(19445, 1287.61, 146.19, 1076.72,   0.00, 0.00, 89.10);
    CreateDynamicObject(2415, 1287.50, 147.03, 1074.97,   0.00, 0.00, 179.10);
    CreateDynamicObject(2415, 1286.63, 147.06, 1074.97,   0.00, 0.00, 179.10);
    CreateDynamicObject(2429, 1287.18, 152.67, 1076.02,   0.00, 0.00, -92.40);
    CreateDynamicObject(1984, 1283.10, 154.25, 1074.97,   0.00, 0.00, 90.42);
    CreateDynamicObject(2421, 1285.25, 146.37, 1076.67,   0.00, 0.00, 177.90);
    CreateDynamicObject(2367, 1283.13, 151.21, 1074.97,   0.00, 0.00, -89.34);
    CreateDynamicObject(19353, 1282.84, 147.90, 1076.71,   0.00, 0.00, 181.50);
    CreateDynamicObject(2367, 1283.12, 153.33, 1074.97,   0.00, 0.00, -89.34);
    CreateDynamicObject(2418, 1286.30, 154.69, 1074.97,   0.00, 0.00, -89.28);
    CreateDynamicObject(2426, 1292.04, 148.27, 1075.92,   0.00, 0.00, -89.76);
    CreateDynamicObject(1513, 1283.12, 154.47, 1076.23,   0.00, 0.00, -135.12);
    CreateDynamicObject(2500, 1286.87, 154.01, 1075.93,   0.00, 0.00, -90.00);
    CreateDynamicObject(1330, 1286.50, 151.97, 1075.43,   0.00, 0.00, 0.00);
    CreateDynamicObject(2452, 1285.58, 160.10, 1074.97,   0.00, 0.00, 0.00);
    CreateDynamicObject(2665, 1286.88, 155.90, 1077.35,   0.00, 0.00, -89.46);
    CreateDynamicObject(2718, 1282.65, 148.45, 1077.52,   0.00, 0.00, -89.40);
    CreateDynamicObject(2453, 1288.85, 146.84, 1076.29,   0.00, 0.00, 15.60);
    CreateDynamicObject(1775, 1259.41, 159.70, 1076.08,   0.00, 0.00, 43.02);
    CreateDynamicObject(2964, 1270.52, 157.47, 1074.97,   0.00, 0.00, 47.40);
    CreateDynamicObject(14657, 1270.38, 148.55, 1075.59,   0.00, 0.00, -89.82);
    CreateDynamicObject(14657, 1270.49, 143.34, 1075.59,   0.00, 0.00, -89.82);
    CreateDynamicObject(2964, 1274.45, 157.30, 1074.97,   0.00, 0.00, 47.40);
    CreateDynamicObject(1713, 1262.12, 159.93, 1074.97,   0.00, 0.00, 0.00);
    CreateDynamicObject(1713, 1259.50, 147.51, 1074.97,   0.00, 0.00, 0.00);
    CreateDynamicObject(1713, 1261.17, 142.11, 1074.97,   0.00, 0.00, 180.18);
    CreateDynamicObject(1713, 1262.88, 145.34, 1074.97,   0.00, 0.00, 271.86);
    CreateDynamicObject(19379, 1276.61, 155.99, 1078.39,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1286.98, 155.97, 1078.39,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1291.31, 146.46, 1078.39,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1280.85, 146.36, 1078.39,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1270.38, 146.34, 1078.39,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1259.88, 146.35, 1078.39,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1266.10, 156.00, 1078.39,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1255.61, 155.97, 1078.39,   0.00, 90.00, 0.00);
    CreateDynamicObject(2690, 1282.64, 148.74, 1076.03,   0.00, 0.00, -91.20);
    CreateDynamicObject(2961, 1282.78, 146.61, 1076.65,   0.00, 0.00, 88.14);
    CreateDynamicObject(2690, 1291.64, 146.62, 1075.35,   0.00, 0.00, -116.88);
    CreateDynamicObject(19383, 1282.60, 158.31, 1076.76,   0.00, 0.00, 2.46);
    CreateDynamicObject(19383, 1282.46, 161.49, 1076.76,   0.00, 0.00, 2.46);
    CreateDynamicObject(1523, 1282.56, 159.09, 1074.98,   0.00, 0.00, -86.94);
    CreateDynamicObject(1827, 1259.94, 144.57, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(19172, 1258.77, 150.32, 1077.29,   0.00, 0.00, 90.24);
    CreateDynamicObject(19175, 1258.72, 155.68, 1077.24,   0.00, 0.00, 90.06);
    CreateDynamicObject(19174, 1258.82, 144.56, 1077.31,   0.00, 0.00, 89.76);
    CreateDynamicObject(2010, 1260.83, 159.88, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1295.68, 142.21, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(3034, 1274.91, 160.51, 1077.03,   0.00, 0.00, 0.00);
    CreateDynamicObject(3034, 1264.68, 160.49, 1077.03,   0.00, 0.00, 0.00);
    CreateDynamicObject(18608, 1276.29, 155.02, 1079.43,   0.00, 0.00, 0.00);
    CreateDynamicObject(18608, 1265.76, 155.06, 1079.43,   0.00, 0.00, 0.00);
    CreateDynamicObject(18608, 1285.89, 155.87, 1079.43,   0.00, 0.00, 0.00);
    CreateDynamicObject(18608, 1290.00, 148.54, 1079.43,   0.00, 0.00, 0.00);
    CreateDynamicObject(18608, 1289.98, 148.54, 1079.43,   0.00, 0.00, 0.00);
    CreateDynamicObject(18608, 1297.16, 157.76, 1075.63,   0.00, 0.00, 88.02);
    CreateDynamicObject(2631, 1270.91, 156.13, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2631, 1268.41, 144.22, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2631, 1268.42, 146.44, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2915, 1272.29, 156.78, 1071.67,   0.00, 0.00, 0.00);
    CreateDynamicObject(2915, 1271.80, 156.43, 1071.67,   0.00, 0.00, 0.00);
    CreateDynamicObject(2915, 1270.30, 156.30, 1071.67,   0.00, 0.00, 30.00);
    CreateDynamicObject(2915, 1269.87, 143.57, 1071.66,   0.00, 0.00, 0.00);
    CreateDynamicObject(2844, 1271.48, 142.63, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(3077, 1277.33, 142.50, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2165, 1273.85, 145.17, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(1671, 1274.57, 143.00, 1071.93,   0.00, 0.00, 145.50);
    CreateDynamicObject(1721, 1279.06, 146.66, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1278.31, 146.67, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1277.60, 146.65, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1276.96, 146.65, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1276.34, 146.63, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1279.09, 147.97, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1278.43, 147.96, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1277.71, 147.95, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1277.01, 147.91, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1276.35, 147.90, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1279.10, 149.35, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1278.44, 149.38, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1275.31, 149.48, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1274.58, 149.50, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1273.79, 149.59, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(19379, 1281.96, 136.76, 1074.89,   0.00, 90.00, 0.00);
    CreateDynamicObject(19445, 1287.03, 136.81, 1076.72,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1277.26, 136.75, 1076.72,   0.00, 0.00, 0.00);
    CreateDynamicObject(19379, 1281.93, 136.87, 1078.39,   0.00, 90.00, 0.00);
    CreateDynamicObject(19445, 1278.99, 141.52, 1076.71,   0.00, 0.00, 90.06);
    CreateDynamicObject(19383, 1285.37, 141.52, 1076.70,   0.00, 0.00, 89.88);
    CreateDynamicObject(1491, 1284.58, 141.54, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(2616, 1279.13, 141.38, 1076.74,   0.00, 0.00, 0.00);
    CreateDynamicObject(2737, 1281.70, 141.36, 1076.70,   0.00, 0.00, 0.00);
    CreateDynamicObject(14532, 1283.26, 140.82, 1075.97,   0.00, 0.00, 155.52);
    CreateDynamicObject(2608, 1277.56, 139.65, 1076.80,   0.00, 0.00, 86.16);
    CreateDynamicObject(2185, 1277.71, 138.82, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(1663, 1278.55, 140.47, 1075.43,   0.00, 0.00, 14.70);
    CreateDynamicObject(2185, 1279.21, 136.33, 1074.98,   0.00, 0.00, 180.12);
    CreateDynamicObject(2185, 1281.20, 136.33, 1074.98,   0.00, 0.00, 180.12);
    CreateDynamicObject(2185, 1283.18, 136.34, 1074.98,   0.00, 0.00, 180.12);
    CreateDynamicObject(2185, 1279.25, 134.05, 1074.98,   0.00, 0.00, 180.12);
    CreateDynamicObject(1722, 1278.23, 134.69, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(1722, 1280.03, 134.72, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(1722, 1282.10, 134.78, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(1722, 1278.07, 132.41, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(2185, 1281.25, 134.05, 1074.98,   0.00, 0.00, 180.12);
    CreateDynamicObject(2185, 1283.24, 134.03, 1074.98,   0.00, 0.00, 180.12);
    CreateDynamicObject(1722, 1280.10, 132.40, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(1722, 1282.10, 132.41, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(2186, 1286.42, 133.75, 1074.98,   0.00, 0.00, -89.46);
    CreateDynamicObject(14455, 1287.18, 141.80, 1073.09,   0.00, 0.00, 0.00);
    CreateDynamicObject(14455, 1281.48, 141.78, 1073.09,   0.00, 0.00, 0.00);
    CreateDynamicObject(1999, 1290.09, 149.38, 1071.49,   0.00, 0.00, 91.62);
    CreateDynamicObject(2491, 1289.43, 146.53, 1070.71,   0.00, 0.00, 0.00);
    CreateDynamicObject(3077, 1291.73, 145.86, 1071.49,   0.00, 0.00, 90.60);
    CreateDynamicObject(1663, 1291.62, 150.39, 1071.96,   0.00, 0.00, -58.98);
    CreateDynamicObject(2010, 1291.57, 142.45, 1071.47,   0.00, 0.00, 0.00);
    CreateDynamicObject(2185, 1286.85, 149.09, 1071.49,   0.00, 0.00, 93.66);
    CreateDynamicObject(2185, 1286.89, 145.57, 1071.49,   0.00, 0.00, 93.66);
    CreateDynamicObject(2185, 1284.21, 149.02, 1071.49,   0.00, 0.00, 93.66);
    CreateDynamicObject(2185, 1284.35, 145.51, 1071.49,   0.00, 0.00, 93.66);
    CreateDynamicObject(2185, 1282.00, 145.35, 1071.49,   0.00, 0.00, 93.66);
    CreateDynamicObject(1722, 1284.98, 149.89, 1071.49,   0.00, 0.00, -84.78);
    CreateDynamicObject(1722, 1285.33, 146.41, 1071.49,   0.00, 0.00, -84.78);
    CreateDynamicObject(1722, 1282.51, 149.88, 1071.49,   0.00, 0.00, -84.78);
    CreateDynamicObject(1722, 1282.62, 145.98, 1071.49,   0.00, 0.00, -84.78);
    CreateDynamicObject(1722, 1280.28, 145.81, 1071.49,   0.00, 0.00, -84.78);
    CreateDynamicObject(1808, 1279.96, 142.00, 1071.49,   0.00, 0.00, 151.02);
    CreateDynamicObject(1808, 1272.65, 151.08, 1071.60,   0.00, 0.00, -91.38);
    CreateDynamicObject(1808, 1286.71, 136.67, 1074.98,   0.00, 0.00, -91.26);
    CreateDynamicObject(1808, 1282.07, 160.11, 1074.98,   0.00, 0.00, -41.04);
    CreateDynamicObject(19383, 1282.24, 160.72, 1073.23,   0.00, 0.00, 89.76);
    CreateDynamicObject(19353, 1279.06, 160.74, 1073.22,   0.00, 0.00, 89.76);
    CreateDynamicObject(19353, 1275.86, 160.74, 1073.22,   0.00, 0.00, 89.76);
    CreateDynamicObject(19379, 1281.39, 165.56, 1071.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19445, 1281.69, 170.37, 1073.22,   0.00, 0.00, 90.36);
    CreateDynamicObject(19445, 1286.63, 165.60, 1073.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1276.98, 165.62, 1073.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(19379, 1281.39, 165.56, 1074.91,   0.00, 90.00, 0.00);
    CreateDynamicObject(2008, 1277.73, 169.64, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2612, 1281.71, 170.21, 1073.54,   0.00, 0.00, 0.00);
    CreateDynamicObject(2606, 1286.45, 162.95, 1073.76,   0.00, 0.00, -90.90);
    CreateDynamicObject(2606, 1286.45, 162.95, 1073.31,   0.00, 0.00, -90.90);
    CreateDynamicObject(2181, 1285.03, 169.78, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2197, 1283.99, 168.90, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2197, 1283.31, 168.90, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2186, 1280.61, 169.66, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(1806, 1278.07, 168.33, 1071.47,   0.00, 0.00, -36.66);
    CreateDynamicObject(2332, 1276.83, 166.91, 1071.94,   0.00, 0.00, 89.34);
    CreateDynamicObject(2010, 1277.71, 161.53, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2690, 1283.41, 151.20, 1072.58,   0.00, 0.00, 179.70);
    CreateDynamicObject(1775, 1302.32, 153.48, 1072.59,   0.00, 0.00, -88.98);
    CreateDynamicObject(2608, 1277.27, 163.31, 1073.80,   0.00, 0.00, 89.46);
    CreateDynamicObject(2613, 1279.81, 170.73, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2161, 1286.51, 167.12, 1071.49,   0.00, 0.00, -89.04);
    CreateDynamicObject(2162, 1286.52, 165.74, 1071.49,   0.00, 0.00, -88.86);
    CreateDynamicObject(2200, 1285.34, 160.90, 1071.49,   0.00, 0.00, 180.78);
    CreateDynamicObject(1806, 1285.70, 168.35, 1071.47,   0.00, 0.00, 27.66);
    CreateDynamicObject(1722, 1278.75, 161.08, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(1722, 1279.56, 161.11, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(1722, 1280.24, 161.06, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(1808, 1283.33, 161.06, 1071.49,   0.00, 0.00, 178.92);
    CreateDynamicObject(18608, 1281.17, 166.09, 1075.63,   0.00, 0.00, 89.58);
    CreateDynamicObject(1491, 1281.46, 160.67, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(18608, 1282.10, 136.68, 1079.43,   0.00, 0.00, 0.00);

    //Post Office Business Type Interior
    CreateDynamicObject(19378,-119.4500000,2020.5200000,900.0000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19460,-105.7300000,2020.4500000,901.8100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19360,-110.9300000,2025.1500000,901.5800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19460,-109.2000000,2015.6900000,901.8100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19460,-107.9800000,2028.0000000,901.8100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19460,-104.6000000,2019.8400000,901.8100000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(1566,-107.4600000,2022.6100000,901.5700000,0.0000000,0.0000000,-45.0000000); //
	CreateDynamicObject(19414,-113.0600000,2020.2600000,901.8100000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(19368,-111.9300000,2017.5900000,901.8100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19378,-108.9600000,2020.5100000,900.0000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19396,-115.6300000,2016.5300000,901.8100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19441,-114.9100000,2021.3800000,901.8100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19460,-118.7900000,2015.6900000,901.8100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19460,-110.8200000,2026.8000000,901.8100000,0.0000000,0.0000000,-45.0000000); //
	CreateDynamicObject(2412,-115.0100000,2021.9700000,900.0900000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2412,-115.0100000,2023.4600000,900.0900000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19368,-115.7700000,2023.4200000,901.8100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19396,-118.9700000,2023.4200000,901.8100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19460,-120.6600000,2025.0500000,901.8100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19396,-121.7700000,2019.1600000,901.8100000,0.0000000,0.0000000,-45.0000000); //
	CreateDynamicObject(19368,-122.8800000,2016.4800000,901.8100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19460,-127.6600000,2018.0200000,901.8100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19460,-115.2200000,2028.2200000,901.8100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19460,-115.8800000,2029.6400000,901.8100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19378,-119.9800000,2030.1500000,900.0000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19378,-130.4800000,2030.1500000,900.0000000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19378,-129.9400000,2020.5100000,900.0100000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19460,-130.0400000,2021.1700000,901.8100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19460,-130.0400000,2030.7200000,901.8100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19460,-125.4500000,2029.2300000,901.8100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19368,-115.6300000,2019.7000000,901.8100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19368,-111.9300000,2014.3800000,901.8100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19460,-104.6400000,2023.4300000,901.8100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19414,-111.0500000,2023.4300000,901.8100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19441,-113.4500000,2023.4300000,901.8100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19460,-109.8700000,2028.1800000,901.8100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19460,-112.2900000,2028.2100000,901.8100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19372,-111.1800000,2025.0500000,901.0800000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19372,-111.1800000,2025.0500000,903.1100000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(1599,-111.5100000,2024.0000000,901.8500000,234333216.0000000,0.0000000,32432432.0000000); //
	CreateDynamicObject(1604,-110.2800000,2024.7900000,901.4000000,433453.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1604,-111.4800000,2024.6100000,902.0700000,56757656.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1599,-110.7600000,2024.2300000,901.6200000,32432.0000000,0.0000000,32432.0000000); //
	CreateDynamicObject(19466,-111.0700000,2023.4100000,901.9000000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19466,-113.2000000,2020.3800000,902.5700000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(1491,-115.5900000,2015.7900000,900.0600000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1491,-119.7400000,2023.4200000,900.0600000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1491,-122.2800000,2018.6200000,900.0600000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(19435,-126.6500000,2025.8200000,899.0900000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(19435,-124.7400000,2025.8000000,899.0900000,0.0000000,0.0000000,-45.0000000); //
	CreateDynamicObject(19362,-125.7500000,2023.5600000,899.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19435,-124.8900000,2021.2700000,899.0900000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(19435,-126.6000000,2021.2500000,899.0900000,0.0000000,0.0000000,-45.0000000); //
	CreateDynamicObject(19370,-125.7100000,2021.6900000,900.8600000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(19370,-125.7100000,2025.1900000,900.8600000,0.0000000,90.0000000,90.0000000); //
	CreateDynamicObject(1720,-127.5100000,2025.8100000,900.1200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1720,-127.5100000,2024.3100000,900.1200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1720,-127.5100000,2022.8100000,900.1200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1720,-127.5100000,2021.3100000,900.1200000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1720,-124.0100000,2021.3100000,900.1200000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1720,-124.0100000,2022.8100000,900.1200000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1720,-124.0100000,2024.3100000,900.1200000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1720,-124.0100000,2025.8100000,900.1200000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1649,-125.7100000,2029.1300000,901.7300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2229,-122.8900000,2029.4700000,901.5100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2229,-127.8900000,2029.4700000,901.5100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1705,-125.4400000,2018.8900000,900.0900000,0.0000000,0.0000000,160.0000000); //
	CreateDynamicObject(2207,-118.7900000,2026.5300000,900.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1714,-117.8400000,2028.1800000,900.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2606,-115.2400000,2026.3300000,902.9100000,20.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2606,-115.2400000,2026.3300000,902.1600000,20.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2007,-121.1200000,2027.0000000,900.0900000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2007,-121.1200000,2025.9800000,900.0900000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2007,-121.1200000,2024.9600000,900.0900000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2608,-129.7000000,2019.6000000,900.9800000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19175,-129.9400000,2024.4100000,901.8100000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(19174,-120.7600000,2022.3300000,902.0600000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1455,-125.4800000,2020.1600000,901.0300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1455,-124.6000000,2022.3200000,901.0300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1455,-124.5500000,2023.5900000,901.0300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1455,-127.0000000,2022.7400000,901.0300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2244,-125.7800000,2025.8800000,901.2100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2244,-125.7800000,2023.8800000,901.2100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2244,-125.7800000,2021.8800000,901.2100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2011,-123.0100000,2018.7900000,900.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2011,-121.4700000,2020.3600000,900.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2011,-121.2600000,2028.6000000,900.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2011,-129.4200000,2021.1000000,900.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2225,-115.6100000,2029.4500000,900.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2078,-116.1600000,2023.7400000,900.0600000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(2000,-120.1000000,2028.6600000,900.2700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2000,-120.1000000,2028.1500000,900.2700000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(1663,-118.7700000,2025.9400000,900.5100000,0.0000000,0.0000000,145.0000000); //
	CreateDynamicObject(1663,-117.5100000,2025.7600000,900.5100000,0.0000000,0.0000000,190.0000000); //
	CreateDynamicObject(2190,-118.7300000,2026.7800000,900.8700000,0.0000000,0.0000000,135.0000000); //
	CreateDynamicObject(2855,-117.0900000,2026.9100000,900.8700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1667,-117.4500000,2026.9800000,900.9600000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2251,-119.0300000,2027.2200000,901.7100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19172,-117.8300000,2029.5500000,901.9700000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19460,-119.0300000,2015.1600000,901.8100000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(2080,-119.1100000,2016.2800000,900.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1811,-119.9000000,2016.8600000,900.6000000,0.0000000,0.0000000,-135.0000000); //
	CreateDynamicObject(1811,-120.6100000,2017.4600000,900.6000000,0.0000000,0.0000000,-135.0000000); //
	CreateDynamicObject(2816,-118.7100000,2016.2400000,900.8800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2010,-120.0000000,2022.8600000,900.0800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2010,-111.7900000,2019.6600000,900.0800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2010,-108.1100000,2022.7000000,900.0800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2311,-111.8100000,2022.8500000,900.0400000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2852,-111.4600000,2022.8700000,900.5400000,0.0000000,0.0000000,90.0000000); //
	CreateDynamicObject(2244,-110.3700000,2022.9500000,900.7800000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1703,-106.5700000,2019.5900000,900.0900000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(1703,-107.6500000,2016.2800000,900.0900000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1822,-107.0300000,2015.9100000,900.0900000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2069,-110.4900000,2016.3100000,900.1300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2069,-106.4100000,2020.2500000,900.1300000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2835,-109.0000000,2018.0100000,900.0900000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(2165,-113.9000000,2020.2300000,900.0900000,0.0000000,0.0000000,-45.0000000); //
	CreateDynamicObject(2165,-112.5800000,2018.1500000,900.0900000,0.0000000,0.0000000,-90.0000000); //
	CreateDynamicObject(2007,-113.9100000,2016.1800000,900.0600000,0.0000000,0.0000000,180.0000000); //
	CreateDynamicObject(1715,-113.5300000,2017.8600000,900.0900000,0.0000000,0.0000000,45.0000000); //
	CreateDynamicObject(1715,-114.3800000,2019.2900000,900.0900000,0.0000000,0.0000000,120.0000000); //
	CreateDynamicObject(1811,-116.1300000,2018.2100000,900.6000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1811,-116.1200000,2019.1800000,900.6000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(1811,-116.1100000,2020.2500000,900.6000000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(19376,-130.4800000,2030.1500000,903.5700000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19376,-129.9400000,2020.5100000,903.5700000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19376,-119.4500000,2020.5200000,903.5700000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19376,-119.9800000,2030.1500000,903.5700000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(19376,-108.9600000,2020.5100000,903.5700000,0.0000000,90.0000000,0.0000000); //
	CreateDynamicObject(14461,-107.6800000,2012.2600000,901.9100000,0.0000000,0.0000000,0.0000000); //
	CreateDynamicObject(2894,-106.5300000,2016.3800000,900.5600000,0.0000000,0.0000000,435456.0600000); //

	// Company Office Interior
	CreateDynamicObject(19378, 38.37000, 41.89000, 999.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 38.37060, 32.26450, 999.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 27.87260, 32.26450, 999.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 27.86880, 41.90000, 999.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19358, 22.72280, 32.27110, 1000.84003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 33.10410, 29.05930, 1000.84003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 22.72280, 35.47890, 1000.84003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 22.72280, 38.69000, 1000.84003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 22.72280, 41.90000, 1000.84003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 24.24000, 27.54000, 1000.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 24.24000, 27.54000, 1000.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 24.25520, 43.18150, 1000.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 27.45600, 27.55300, 1000.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 30.66000, 27.55300, 1000.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 33.84054, 27.55761, 1000.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 22.72280, 29.05930, 1000.84003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 33.10410, 32.27110, 1000.84003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 22.72280, 35.47890, 1000.84003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 33.10410, 35.47890, 1000.84003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 33.10410, 38.69000, 1000.84003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 33.10410, 41.90000, 1000.84003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 24.25520, 27.55300, 1000.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 27.45600, 43.18150, 1000.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 30.66000, 43.18150, 1000.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 33.84050, 43.16160, 1000.84003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 29.21470, 43.11560, 999.08557,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 22.10590, 27.67700, 1000.65961,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 27.85997, 27.67697, 1000.65961,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1705, 28.62019, 34.05582, 999.06598,   0.00000, 0.00000, -15.06000);
	CreateDynamicObject(1714, 27.86260, 30.38240, 999.08679,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2184, 28.95569, 32.46917, 999.08728,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2190, 27.15368, 32.39522, 999.86151,   0.00000, 0.00000, 4.00000);
	CreateDynamicObject(2811, 31.13203, 42.50349, 999.08661,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 28.82920, 42.46620, 999.08661,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2825, 28.66204, 31.97801, 999.86047,   0.00000, 0.00000, -104.38003);
	CreateDynamicObject(2202, 32.51117, 30.55148, 999.08539,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2161, 32.98070, 34.03740, 1000.43884,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2161, 32.97870, 35.36660, 999.09082,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2161, 32.98070, 34.03740, 999.09082,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2161, 32.97870, 35.36660, 1000.42853,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2164, 33.01468, 32.49195, 999.06989,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 23.51629, 42.54107, 999.08600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1724, 26.88564, 41.62007, 999.08588,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1724, 26.89209, 40.36493, 999.08588,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 25.53385, 38.37599, 999.08600,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2069, 26.86627, 42.49629, 999.10132,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2069, 26.92299, 38.39777, 999.10132,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1818, 23.86817, 39.97588, 999.08618,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1486, 24.02109, 40.94822, 999.72882,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 32.75803, 40.64501, 999.08813,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2110, 32.49409, 38.69324, 999.08759,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2342, 32.56007, 38.53936, 1000.00116,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19172, 22.75970, 40.19320, 1001.36041,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19172, 22.81400, 40.47020, 1001.18762,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18652, 22.79930, 40.45160, 1001.93848,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1705, 26.25432, 33.82211, 999.06598,   0.00000, 0.00000, 15.06000);
	CreateDynamicObject(19377, 27.87410, 32.26200, 1002.59302,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 27.87410, 41.89850, 1002.59302,   0.00000, 90.00000, 0.00000);

	//Government Loan Division
	CreateDynamicObject(19379, 80.38050, 1779.03772, -24.84313,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 90.86570, 1779.03870, -24.84310,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19461, 75.42387, 1779.13452, -23.11070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19461, 81.74060, 1774.40344, -23.11070,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19461, 91.36728, 1774.40796, -23.11070,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19461, 76.49736, 1775.71606, -23.11070,   0.00000, 0.00000, 55.00000);
	CreateDynamicObject(19461, 77.97518, 1783.71594, -23.11070,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19397, 82.69970, 1782.04370, -23.11070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19461, 82.69850, 1775.63489, -23.11070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19461, 92.21424, 1787.11011, -23.11070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19461, 87.50612, 1783.58411, -23.11070,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19461, 95.88243, 1778.88037, -23.11070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19461, 96.94480, 1782.37451, -23.11070,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1569, 93.17176, 1782.30713, -24.75639,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1703, 95.12690, 1778.35327, -24.75690,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1703, 94.13338, 1775.03540, -24.75690,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1827, 92.77980, 1777.27930, -24.75603,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2853, 92.74978, 1777.30713, -24.33031,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 90.53380, 1774.77454, -24.75570,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1433, 89.42865, 1775.07983, -24.58190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1455, 89.27781, 1774.81213, -24.01490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1455, 89.38760, 1775.07471, -24.01490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1455, 89.66713, 1774.95776, -24.01490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1455, 89.78925, 1775.24963, -24.01490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1455, 89.50972, 1775.36658, -24.01490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1455, 89.26015, 1775.33923, -24.01490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1455, 89.35841, 1775.21167, -24.01490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2435, 86.93410, 1774.94299, -24.75730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2435, 86.93230, 1775.87183, -24.75730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2435, 86.92840, 1776.79504, -24.75730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2435, 86.92000, 1777.71753, -24.75730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2435, 85.79626, 1780.65234, -24.75730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2435, 86.92150, 1779.56299, -24.75730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2434, 86.92108, 1780.49109, -24.75600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2435, 86.91765, 1778.64087, -24.75730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2435, 83.25257, 1780.61511, -24.75730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1491, 82.72009, 1781.30408, -24.75590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2165, 78.54308, 1777.37354, -24.75710,   0.00000, 0.00000, 324.00000);
	CreateDynamicObject(2166, 76.39107, 1777.70337, -24.75560,   0.00000, 0.00000, 324.00000);
	CreateDynamicObject(2200, 78.95037, 1783.80054, -24.75585,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2162, 82.62396, 1777.76331, -23.03271,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2211, 75.71010, 1780.81750, -24.25040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 77.34619, 1776.04187, -24.75540,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(1715, 80.01204, 1778.51770, -24.75540,   0.00000, 0.00000, -65.00000);
	CreateDynamicObject(1715, 78.56033, 1779.52307, -24.75542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 85.17599, 1778.17151, -24.75540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 85.65091, 1775.71118, -24.75540,   0.00000, 0.00000, 207.00000);
	CreateDynamicObject(2190, 87.09617, 1778.03784, -23.70270,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19422, 86.80660, 1777.63452, -23.70288,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2257, 87.86994, 1783.47986, -22.87770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2286, 82.81354, 1778.19250, -22.35800,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 80.38050, 1779.03772, -21.46100,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 90.86570, 1779.03870, -21.46099,   0.00000, 90.00000, 0.00000);

	// Bus Interior
	CreateDynamicObject(2631, 2022.0, 2236.7, 2102.9, 0.0, 0.0, 90.0);
	CreateDynamicObject(2631, 2022.0, 2240.6, 2102.9, 0.0, 0.0, 90.0);
	CreateDynamicObject(2631, 2022.0, 2244.5, 2102.9, 0.0, 0.0, 90.0);
	CreateDynamicObject(2631, 2022.0, 2248.4, 2102.9, 0.0, 0.0, 90.0);
	CreateDynamicObject(16501, 2022.1, 2238.3, 2102.8, 0.0, 90.0, 0.0);
	CreateDynamicObject(16501, 2022.1, 2245.3, 2102.8, 0.0, 90.0, 0.0);
	CreateDynamicObject(16000, 2024.2, 2240.1, 2101.2, 0.0, 0.0, 90.0);
	CreateDynamicObject(16000, 2019.8, 2240.6, 2101.2, 0.0, 0.0, -90.0);
	CreateDynamicObject(16000, 2022.2, 2248.7, 2101.2, 0.0, 0.0, 180.0);
	CreateDynamicObject(16501, 2021.8, 2246.5, 2107.3, 0.0, 270.0, 90.0);
	CreateDynamicObject(16501, 2022.0, 2240.8, 2107.3, 0.0, 270.0, 0.0);
	CreateDynamicObject(16501, 2022.0, 2233.7, 2107.3, 0.0, 270.0, 0.0);
	CreateDynamicObject(18098, 2024.3, 2239.6, 2104.8, 0.0, 0.0, 90.0);
	CreateDynamicObject(18098, 2024.3, 2239.7, 2104.7, 0.0, 0.0, 450.0);
	CreateDynamicObject(18098, 2020.1, 2239.6, 2104.8, 0.0, 0.0, 90.0);
	CreateDynamicObject(18098, 2020.0, 2239.6, 2104.7, 0.0, 0.0, 90.0);
	CreateDynamicObject(2180, 2023.6, 2236.1, 2106.7, 0.0, 180.0, 90.0);
	CreateDynamicObject(2180, 2023.6, 2238.1, 2106.7, 0.0, 180.0, 90.0);
	CreateDynamicObject(2180, 2023.6, 2240.1, 2106.7, 0.0, 180.0, 90.0);
	CreateDynamicObject(2180, 2023.6, 2242.1, 2106.7, 0.0, 180.0, 90.0);
	CreateDynamicObject(2180, 2023.6, 2244.1, 2106.7, 0.0, 180.0, 90.0);
	CreateDynamicObject(2180, 2023.6, 2246.1, 2106.7, 0.0, 180.0, 90.0);
	CreateDynamicObject(2180, 2023.6, 2248.1, 2106.7, 0.0, 180.0, 90.0);
	CreateDynamicObject(2180, 2020.3, 2235.1, 2106.7, 0.0, 180.0, 270.0);
	CreateDynamicObject(2180, 2020.3, 2237.1, 2106.7, 0.0, 180.0, 270.0);
	CreateDynamicObject(2180, 2020.3, 2239.1, 2106.7, 0.0, 180.0, 270.0);
	CreateDynamicObject(2180, 2020.3, 2241.1, 2106.7, 0.0, 180.0, 270.0);
	CreateDynamicObject(2180, 2020.3, 2243.1, 2106.7, 0.0, 180.0, 270.0);
	CreateDynamicObject(2180, 2020.3, 2245.1, 2106.7, 0.0, 180.0, 270.0);
	CreateDynamicObject(2674, 2023.4, 2238.3, 2102.9, 0.0, 0.0, 600.0);
	CreateDynamicObject(2674, 2020.4, 2242.3, 2102.9, 0.0, 0.0, 600.0);
	CreateDynamicObject(2674, 2023.4, 2246.3, 2102.9, 0.0, 0.0, 600.0);
	CreateDynamicObject(14405, 2022.0, 2242.1, 2103.5, 0.0, 0.0, 540.0);
	CreateDynamicObject(14405, 2022.0, 2243.6, 2103.5, 0.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2022.0, 2245.1, 2103.5, 0.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2022.0, 2246.6, 2103.5, 0.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2022.0, 2248.1, 2103.5, 0.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2022.0, 2249.6, 2103.5, 0.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2022.0, 2251.1, 2103.5, 0.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2024.6, 2242.1, 2103.5, 0.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2024.6, 2243.6, 2103.5, 0.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2024.6, 2245.1, 2103.5, 0.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2024.6, 2246.6, 2103.5, 0.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2024.6, 2248.1, 2103.5, 0.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2024.6, 2249.6, 2103.5, 0.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2024.6, 2251.1, 2103.5, 0.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2019.4, 2242.1, 2103.5, 0.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2019.4, 2243.6, 2103.5, 0.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2019.4, 2245.1, 2103.5, 0.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2019.4, 2246.6, 2103.5, 0.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2019.4, 2248.1, 2103.5, 0.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2019.4, 2249.6, 2103.5, 0.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2019.4, 2251.1, 2103.5, 0.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2022.0, 2253.6, 2104.0, -6.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2021.1, 2253.6, 2104.0, -6.0, 0.0, 180.0);
	CreateDynamicObject(14405, 2024.6, 2253.6, 2103.5, 0.0, 0.0, 180.0);
	CreateDynamicObject(2674, 2020.4, 2235.7, 2102.9, 0.0, 0.0, 52.0);
	CreateDynamicObject(2673, 2020.4, 2246.7, 2102.9, 0.0, 0.0, 270.0);
	CreateDynamicObject(2700, 2023.5, 2235.1, 2105.5, 180.0, -4.0, 90.0);
	CreateDynamicObject(2700, 2020.4, 2235.1, 2105.5, 180.0, 0.0, 90.0);
	CreateDynamicObject(2700, 2023.5, 2242.1, 2105.5, 180.0, -4.0, 90.0);
	CreateDynamicObject(2700, 2020.4, 2242.1, 2105.5, 180.0, 0.0, 90.0);
	CreateDynamicObject(1799, 2023.1, 2234.2, 2105.7, 270.0, 0.0, 360.0);
	CreateDynamicObject(1799, 2019.8, 2234.2, 2105.7, 270.0, 0.0, 0.0);
	CreateDynamicObject(1538, 2022.7, 2234.7, 2102.8, 0.0, 0.0, 180.0);
	CreateDynamicObject(1799, 2022.1, 2234.2, 2106.1, 720.0, 90.0, 450.0);
	CreateDynamicObject(1799, 2021.8, 2234.2, 2105.1, 0.0, 270.0, 270.0);
	CreateDynamicObject(1799, 2022.1, 2234.2, 2107.3, 0.0, 90.0, 90.0);
	CreateDynamicObject(1799, 2021.6, 2234.2, 2106.3, 0.0, 270.0, 270.0);
	CreateDynamicObject(1799, 2022.3, 2234.2, 2104.3, 90.0, 0.0, 180.0);

	// Shamal Interior
	CreateDynamicObject(14404, 1891.504150, -8159.505371, 3.197141, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(14405, 1891.563843, -8159.571777, 2.037500, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(14405, 1891.538452, -8170.821777, 2.037498, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(14405, 1891.552856, -8169.589844, 2.056684, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(14405, 1891.562378, -8168.301270, 2.043864, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(14405, 1891.554321, -8167.053711, 2.050836, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(14405, 1891.568481, -8165.810547, 2.056400, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(14405, 1891.559570, -8164.451660, 2.065336, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1518, 1892.578003, -8158.128906, 3.474201, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1518, 1890.467773, -8158.104004, 3.466745, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1523, 1890.730835, -8155.586426, 1.459633, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1796, 1890.952271, -8166.693359, 1.418374, 0.0000, 0.0000, 268.8998);
	CreateDynamicObject(955, 1890.441895, -8167.008301, 1.850188, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(1649, 1891.415771, -8153.192383, 3.096034, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2406, 1890.376221, -8164.333984, 4.256859, 18.9076, 91.9597, 91.7189);
	CreateDynamicObject(2404, 1890.386719, -8161.762695, 4.292717, 15.4699, 90.2409, 91.6415);
	CreateDynamicObject(2405, 1890.479004, -8159.889160, 4.294949, 0.8594, 91.9597, 83.9066);
	CreateDynamicObject(1742, 1889.848511, -8157.031738, 1.442635, 0.0000, 0.0000, 90.0000);

	// News Van Interior
	CreateDynamicObject(11292, 1058.344727, -914.495117, 138.562683, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2395, 1056.847900, -915.557068, 137.356659, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(1493, 1062.606445, -912.755554, 137.348099, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(1493, 1062.608887, -915.780823, 137.348099, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(1663, 1058.348877, -913.866211, 137.816879, 0.0000, 0.0000, 135.0000);
    CreateDynamicObject(3397, 1058.476318, -912.654968, 137.229477, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(3396, 1060.683350, -912.664001, 137.229477, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(1663, 1060.648682, -913.759338, 137.785034, 0.0000, 0.0000, 135.0000);
    CreateDynamicObject(3388, 1057.165771, -915.573486, 137.156708, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(3389, 1058.150635, -915.572021, 137.356659, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(3387, 1059.139893, -915.551331, 137.356659, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(3386, 1060.137451, -915.545837, 136.981750, 0.0000, 0.0000, 270.0000);
    CreateDynamicObject(2596, 1060.627686, -912.706665, 139.171539, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2818, 1058.974365, -914.695984, 137.349045, 0.0000, 0.0000, 0.0000);
    CreateDynamicObject(2606, 1056.803711, -913.815796, 139.517899, 0.0000, 0.0000, 90.0000);
    CreateDynamicObject(2606, 1056.803711, -913.817139, 139.067825, 0.0000, 0.0000, 90.0000);

    // Ambulance Interior
    CreateDynamicObject(2939, -812.86237, -1008.09412, 2524.90747,   -23.50000, 0.00000, 0.00000);
	CreateDynamicObject(2939, -812.86017, -1001.93646, 2524.90747,   -23.50000, 0.00000, 0.00000);
	CreateDynamicObject(19451, -814.49048, -1007.74384, 2525.85132,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19451, -811.32599, -1007.86755, 2525.87476,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19451, -811.34308, -1007.81793, 2525.65381,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19451, -811.22913, -1003.02002, 2524.47119,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1997, -813.78174, -1005.58710, 2524.75903,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1997, -812.04730, -1005.53882, 2524.75562,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3386, -814.65881, -1003.64349, 2524.58105,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3386, -811.18982, -1003.68390, 2524.58838,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, -811.56329, -1004.34497, 2525.23853,   0.00000, 0.00000, -81.78000);
	CreateDynamicObject(2690, -814.26483, -1004.33893, 2525.23853,   0.00000, 0.00000, -81.78000);
	CreateDynamicObject(19451, -811.28918, -1003.01837, 2528.58154,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(9819, -812.74628, -1002.34857, 2525.61816,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, -813.12817, -1001.04956, 2526.42163,   -316.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, -813.77905, -1002.71222, 2525.44409,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1714, -812.25916, -1002.68903, 2525.44409,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1714, -811.72516, -1002.67438, 2525.44409,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1714, -812.76227, -1002.70142, 2525.44409,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, -814.43823, -1000.72430, 2526.42163,   -360.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, -814.43823, -1000.72430, 2526.42163,   -360.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, -814.43823, -1000.72430, 2526.42163,   -360.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, -814.43823, -1000.72430, 2526.42163,   -360.00000, 0.00000, 89.94000);
	CreateDynamicObject(1649, -814.43823, -1000.72430, 2526.42163,   -360.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, -814.43823, -1000.72430, 2526.42163,   -360.00000, 0.00000, 89.94000);
	CreateDynamicObject(1649, -814.43823, -1000.72430, 2526.42163,   -360.00000, 0.00000, 89.94000);
	CreateDynamicObject(1649, -811.37689, -1001.18872, 2526.42163,   -360.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, -814.43823, -1000.72430, 2526.42163,   -360.00000, 0.00000, 89.94000);
	CreateDynamicObject(1649, -814.43823, -1000.72430, 2526.42163,   -360.00000, 0.00000, 89.94000);
	CreateDynamicObject(1649, -814.43823, -1000.72430, 2526.42163,   -360.00000, 0.00000, 89.94000);
	CreateDynamicObject(19451, -814.50128, -1005.87848, 2524.68408,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19451, -811.30322, -1005.83167, 2524.72607,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -811.37689, -1001.18872, 2526.42163,   -360.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, -811.37689, -1001.18872, 2526.42163,   -360.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, -811.37689, -1001.18872, 2526.42163,   -360.00000, 0.00000, -90.06000);
	CreateDynamicObject(1649, -811.37689, -1001.18872, 2526.42163,   -360.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, -811.37689, -1001.18872, 2526.42163,   -360.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, -811.37689, -1001.18872, 2526.42163,   -360.00000, 0.00000, -90.06000);
	CreateDynamicObject(1649, -811.37689, -1001.18872, 2526.42163,   -360.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, -811.37689, -1001.18872, 2526.42163,   -360.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, -811.37689, -1001.18872, 2526.42163,   -360.00000, 0.00000, -90.06000);
	CreateDynamicObject(1649, -811.37689, -1001.18872, 2526.42163,   -360.00000, 0.00000, -90.06000);
	CreateDynamicObject(1649, -814.43823, -1000.72430, 2526.42163,   -360.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, -814.43823, -1000.72430, 2526.42163,   -360.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, -814.43823, -1000.72430, 2526.42163,   -360.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, -814.43823, -1000.72430, 2526.42163,   -360.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, -814.43823, -1000.72430, 2526.42163,   -360.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, -814.43823, -1000.72430, 2526.42163,   -360.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, -813.16827, -1001.02966, 2526.42163,   -316.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -813.16840, -1000.98962, 2526.42163,   -316.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -813.18854, -1000.94965, 2526.42163,   -316.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -813.18860, -1000.92963, 2526.42163,   -316.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, -813.47272, -1004.49988, 2528.19849,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, -813.47009, -1006.66077, 2528.18555,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -814.50360, -1000.55127, 2528.11255,   -225.47400, 0.00000, 0.00000);
	CreateDynamicObject(19358, -811.28973, -1000.51959, 2527.99829,   -225.47400, 0.00000, 0.00000);
	CreateDynamicObject(19451, -812.97186, -1007.87982, 2527.67358,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3387, -814.66193, -1004.14783, 2527.06836,   -90.00000, 0.00000, 180.00000);
	CreateDynamicObject(19451, -812.62396, -1007.83923, 2529.13501,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3387, -811.19067, -1004.17712, 2527.07837,   -270.00000, 0.00000, 0.00000);
	CreateDynamicObject(2167, -812.87085, -1003.07422, 2524.87842,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, -812.25555, -1003.03479, 2525.88525,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2924, -814.26587, -1007.74701, 2526.09229,   0.00000, 0.00000, 179.57997);
	CreateDynamicObject(2924, -811.52533, -1007.77838, 2526.09229,   0.00000, 0.00000, 360.00000);

	// Enforcer Interior
	CreateDynamicObject(3115, 1383.94141, -2241.71924, 3005.09375,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3115, 1385.69629, -2241.55444, 2996.21802,   0.00000, 90.00000, 180.00000);
	CreateDynamicObject(3115, 1376.29980, -2240.67017, 3008.17505,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(1721, 1382.57056, -2245.49194, 3005.32251,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1721, 1382.56812, -2244.91162, 3005.32251,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1721, 1382.56213, -2244.33105, 3005.32251,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1721, 1382.55652, -2243.75098, 3005.32251,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1721, 1382.55066, -2243.17065, 3005.32251,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1721, 1385.31641, -2243.17114, 3005.32251,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(1721, 1385.31970, -2243.75122, 3005.32251,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(1721, 1385.30884, -2244.33252, 3005.32251,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(1721, 1385.29785, -2244.91357, 3005.32251,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(1721, 1385.30139, -2245.49414, 3005.32251,   0.00000, 0.00000, -270.00000);
	CreateDynamicObject(14819, 1383.93860, -2246.24512, 3006.51978,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14819, 1383.91443, -2246.52734, 3006.53296,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1893, 1383.90869, -2243.58643, 3008.45923,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2606, 1382.28503, -2241.68115, 3007.36060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2606, 1382.28503, -2241.68115, 3006.90186,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11631, 1383.11633, -2241.78662, 3006.54248,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, 1384.09204, -2241.67090, 3005.40356,   0.00000, 0.00000, 79.26000);
	CreateDynamicObject(3115, 1382.18848, -2247.34497, 2996.22534,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3115, 1382.18848, -2247.34497, 2999.64746,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3115, 1382.17114, -2256.64307, 3014.71655,   -90.00000, 90.00000, 0.00000);
	CreateDynamicObject(3115, 1382.18494, -2234.36743, 3014.71655,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(3115, 1382.20349, -2239.46191, 3017.52295,   -180.00000, 90.00000, 0.00000);
	CreateDynamicObject(1649, 1382.29529, -2244.79590, 3006.98730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3115, 1390.68896, -2246.64600, 2997.89355,   0.00000, -90.00000, -90.00000);
	CreateDynamicObject(1649, 1382.31519, -2244.77563, 3006.98730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1382.33533, -2244.79565, 3006.98730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1385.64954, -2245.59912, 3006.98730,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3115, 1385.71069, -2256.60376, 3014.71655,   90.00000, 90.00000, 180.00000);
	CreateDynamicObject(3115, 1385.70947, -2241.53931, 3017.52295,   -180.00000, 90.00000, -180.00000);
	CreateDynamicObject(3115, 1385.71667, -2234.37524, 3014.71655,   -90.00000, 90.00000, 180.00000);
	CreateDynamicObject(1649, 1385.63184, -2245.57715, 3006.98730,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, 1385.60974, -2245.59473, 3006.98730,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, 1385.56775, -2245.61011, 3006.98730,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3115, 1385.77844, -2240.33765, 3017.39429,   -180.00000, 90.00000, -90.00000);
	CreateDynamicObject(3115, 1385.44495, -2240.33838, 2995.78027,   0.00000, 90.00000, 270.00000);
	CreateDynamicObject(3115, 1372.90833, -2240.33545, 3014.71655,   -90.00000, 90.00000, 270.00000);
	CreateDynamicObject(3115, 1395.02637, -2240.33325, 3014.71655,   90.00000, 90.00000, 270.00000);
	CreateDynamicObject(1649, 1383.86511, -2238.61206, 3006.98730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1382.94995, -2240.13574, 3006.98730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3115, 1385.65979, -2237.75391, 3015.95215,   -180.00000, 90.00000, -90.00000);
	CreateDynamicObject(9819, 1385.51477, -2239.80493, 3005.84326,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1382.97876, -2240.23950, 3006.98730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1383.04517, -2240.36816, 3006.98730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1383.02759, -2240.52734, 3006.98730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3026, 1385.43420, -2243.15308, 3006.60425,   4.00000, -90.00000, -92.32001);
	CreateDynamicObject(3026, 1385.45154, -2243.59351, 3006.60449,   4.00000, -90.00000, -92.32001);
	CreateDynamicObject(3026, 1385.43054, -2243.99390, 3006.60352,   4.00000, -90.00000, -92.32001);
	CreateDynamicObject(2463, 1385.34460, -2241.49512, 3005.68042,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2035, 1385.06030, -2241.59546, 3005.83154,   0.00000, 0.00000, -86.70001);
	CreateDynamicObject(2035, 1385.13892, -2241.55249, 3006.13232,   0.00000, 0.00000, -86.70001);
	CreateDynamicObject(2035, 1385.15967, -2241.57178, 3006.47290,   0.00000, 0.00000, -86.70001);
	CreateDynamicObject(2035, 1385.13892, -2241.55249, 3006.83252,   0.00000, 0.00000, -86.70001);
	CreateDynamicObject(2035, 1385.12817, -2241.59229, 3007.20874,   0.00000, 0.00000, -86.70001);
	CreateDynamicObject(2035, 1385.14905, -2241.55249, 3007.54663,   0.00000, 0.00000, -86.70001);
	CreateDynamicObject(2040, 1385.21582, -2242.29810, 3005.91284,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2040, 1384.95557, -2242.29565, 3005.91284,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2040, 1385.21582, -2242.29834, 3006.23315,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2040, 1385.21582, -2242.29834, 3006.57349,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2040, 1385.21582, -2242.29834, 3006.93335,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2047, 1383.90076, -2240.67236, 3007.40039,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3026, 1385.44128, -2244.51514, 3006.60352,   4.00000, -90.00000, -92.32001);
	CreateDynamicObject(373, 1382.49048, -2244.75464, 3007.02490,   -28.00000, 287.00000, -4.38000);
	CreateDynamicObject(373, 1382.52319, -2243.74707, 3007.02490,   -28.00000, 287.00000, -4.38000);
	CreateDynamicObject(373, 1382.54993, -2243.26489, 3007.02490,   -28.00000, 287.00000, -4.38000);
	CreateDynamicObject(2372, 1386.45483, -2243.23828, 3006.77954,   0.00000, 90.00000, -180.00000);
	CreateDynamicObject(2372, 1381.50378, -2244.42896, 3006.79492,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(373, 1382.49231, -2244.24292, 3007.02490,   -28.00000, 287.00000, -4.38000);

	// Journey Interior
	CreateDynamicObject(2395, -1503.79053, 2511.97144, 3206.69482,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -1507.52356, 2511.97119, 3206.69482,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -1507.52039, 2509.22998, 3206.69482,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -1503.80469, 2509.23267, 3206.69482,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19407, -1506.33765, 2514.59204, 3208.37256,   0.00000, 0.00000, 89.99999);
	CreateDynamicObject(19407, -1507.85986, 2512.89844, 3208.37061,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19407, -1506.32813, 2511.23535, 3208.36890,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2558, -1507.40503, 2512.40723, 3207.89893,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2558, -1505.75806, 2511.73535, 3207.90137,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2558, -1506.88013, 2514.11499, 3207.88672,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19407, -1501.62781, 2512.90967, 3208.37866,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1498, -1503.83496, 2511.27002, 3206.62524,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, -1500.56555, 2514.32910, 3206.69482,   -90.00000, 0.00000, -90.00000);
	CreateDynamicObject(9819, -1500.71106, 2512.76270, 3206.64746,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, -1501.19165, 2511.88818, 3206.75366,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, -1501.19092, 2512.40967, 3206.75366,   0.00000, 0.00000, 90.66000);
	CreateDynamicObject(1714, -1501.20056, 2512.93530, 3206.75366,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, -1501.20776, 2513.94238, 3206.75366,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, -1503.14563, 2514.59326, 3208.37109,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, -1503.13330, 2511.23413, 3208.37109,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, -1499.93347, 2514.32983, 3205.85938,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, -1500.00574, 2511.45703, 3205.85938,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, -1499.44434, 2514.33618, 3208.45728,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -1500.38538, 2512.90967, 3208.25830,   47.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, -1499.44507, 2514.35620, 3208.45728,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -1499.41699, 2514.38965, 3208.45728,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -1499.44507, 2514.35620, 3208.45728,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -1499.35144, 2511.45508, 3208.45728,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1649, -1499.35083, 2511.43506, 3208.45728,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1649, -1499.34961, 2511.39502, 3208.45728,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1649, -1500.34583, 2512.90332, 3208.25830,   47.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, -1500.30322, 2512.93066, 3208.25830,   47.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, -1500.22327, 2512.92676, 3208.25830,   47.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, -1500.18323, 2512.92480, 3208.25830,   47.00000, 0.00000, -90.00000);
	CreateDynamicObject(19359, -1499.24890, 2512.70068, 3205.44556,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19359, -1499.20850, 2514.33130, 3209.22363,   47.00000, 0.00000, -90.00000);
	CreateDynamicObject(19359, -1499.25281, 2511.45435, 3209.22363,   47.00000, 0.00000, -90.00000);
	CreateDynamicObject(19359, -1500.03748, 2511.43262, 3210.15942,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, -1500.07336, 2514.33765, 3210.14063,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19359, -1501.58826, 2512.99683, 3209.46680,   0.00000, -47.00000, 0.00000);
	CreateDynamicObject(1649, -1499.34961, 2511.39502, 3208.45728,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1649, -1499.36060, 2511.33569, 3208.45728,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1649, -1499.33362, 2511.37158, 3208.45728,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1649, -1499.38904, 2514.48779, 3208.45728,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -1499.38904, 2514.48779, 3208.45728,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -1505.80090, 2511.22778, 3208.45728,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1649, -1505.80127, 2511.24780, 3208.45728,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1649, -1505.80200, 2511.28784, 3208.45728,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1649, -1505.80090, 2511.22778, 3208.45728,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1649, -1505.53174, 2514.54883, 3208.45728,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -1505.55103, 2514.56958, 3208.45728,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -1505.55029, 2514.58960, 3208.45728,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -1505.54956, 2514.60962, 3208.45728,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -1505.55029, 2514.58960, 3208.45728,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -1507.84912, 2512.65918, 3208.45728,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, -1507.84766, 2512.63916, 3208.45728,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, -1507.90881, 2512.65479, 3208.45728,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, -1507.84912, 2512.65918, 3208.45728,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19448, -1506.46558, 2512.95044, 3209.87695,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(2559, -1502.09900, 2513.41895, 3207.87988,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2414, -1504.38879, 2511.70044, 3206.66089,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2414, -1506.39465, 2511.69922, 3206.66089,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1703, -1503.97449, 2513.97510, 3206.64893,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2336, -1506.73425, 2514.03320, 3206.64941,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2158, -1504.74939, 2514.02979, 3206.64941,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2613, -1507.26978, 2514.87451, 3206.64063,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2847, -1506.53735, 2512.39478, 3206.64868,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, -1507.39270, 2512.86304, 3210.32813,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, -1504.92810, 2512.88794, 3210.30811,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -1501.60742, 2512.65942, 3208.45728,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, -1501.63293, 2512.67163, 3208.45728,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19361, -1502.74182, 2512.95264, 3210.43823,   0.00000, 47.00000, -180.00000);
	CreateDynamicObject(2814, -1505.20422, 2511.68970, 3207.70361,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2823, -1505.80676, 2511.71289, 3207.71948,   0.00000, 0.00000, -107.76000);
	CreateDynamicObject(2149, -1507.55347, 2511.59619, 3207.86108,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2261, -1502.91357, 2514.01099, 3208.35571,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1749, -1504.62195, 2511.69092, 3207.67407,   0.00000, 0.00000, 151.02000);
	CreateDynamicObject(2690, -1507.40576, 2514.35034, 3206.98267,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2262, -1504.60071, 2511.81445, 3208.40967,   0.00000, 0.00000, 180.00000);
	//gang hq
	CreateDynamicObject(18667, 2107.58887, -1736.12317, 14.98190,   0.00000, 0.00000, -19.08000);
	CreateDynamicObject(18659, 2106.48438, -1739.13232, 14.58420,   20.16000, 0.00000, -19.14000);
	CreateDynamicObject(3502, 2126.16138, -1713.27039, 13.52150,   0.00000, 0.00000, 19.62000);
	CreateDynamicObject(2226, 2131.89282, -1715.74609, 14.77390,   0.00000, 0.00000, -35.58000);
	CreateDynamicObject(2582, 2126.72778, -1738.62964, 13.41240,   0.00000, 0.00000, 89.75999);
	CreateDynamicObject(1984, 2128.94385, -1741.94287, 12.51150,   0.00000, 0.00000, -180.54002);
	CreateDynamicObject(1491, 2129.37109, -1742.27100, 10.95490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1728, 2137.59619, -1729.28198, 12.49870,   0.00000, 0.00000, -180.42000);
	CreateDynamicObject(3525, 2134.40015, -1725.32690, 12.67660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1442, 2134.40137, -1725.40771, 13.03641,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2114, 2158.20337, -1726.68286, 12.62850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(910, 2123.88965, -1726.74927, 13.75160,   0.00000, 0.00000, -179.75990);
	CreateDynamicObject(1462, 2122.36401, -1726.83374, 12.55420,   0.00000, 0.00000, 175.56000);
	CreateDynamicObject(3593, 2131.79395, -1712.95691, 14.39760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1279, 2131.74365, -1712.69836, 14.15900,   0.00000, 0.00000, -21.06000);
	CreateDynamicObject(1579, 2131.90698, -1713.47095, 14.03310,   0.00000, 0.00000, 5.10000);
	CreateDynamicObject(1580, 2132.16968, -1712.20276, 14.08320,   0.00000, 0.00000, 33.96000);
	CreateDynamicObject(1550, 2132.74072, -1713.51917, 14.47720,   0.00000, 0.00000, -42.48000);
	CreateDynamicObject(1814, 2135.82764, -1727.25452, 12.48750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1551, 2136.73340, -1726.82654, 13.21150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 2135.95483, -1727.04688, 13.01680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1486, 2136.57715, -1726.75049, 13.10421,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1485, 2135.91455, -1726.90637, 12.99660,   0.00000, 0.00000, -78.78000);
	CreateDynamicObject(1529, 2130.89648, -1738.80969, 14.20120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1528, 2130.88281, -1735.83691, 13.88940,   -10.00000, -0.16000, 0.00000);
	CreateDynamicObject(946, 2290.64063, -1541.60938, 28.07031,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(946, 2290.64063, -1541.60938, 28.07031,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(946, 2160.90405, -1726.58826, 14.67030,   356.83841, 0.00000, 91.96161);
	CreateDynamicObject(2669, 2165.23145, -1732.70313, 17.56410,   0.00000, 0.00000, -90.18000);
	CreateDynamicObject(1491, 2162.66675, -1733.49634, 16.27490,   0.00000, 0.00000, 89.88000);
	CreateDynamicObject(2964, 2153.27734, -1732.46423, 16.20670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(338, 2152.43164, -1731.93970, 17.13600,   87.18000, 60.14000, 3.42000);
	CreateDynamicObject(2995, 2153.31201, -1732.59680, 17.12720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2998, 2153.90308, -1732.57581, 17.13570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2998, 2153.14893, -1732.38623, 17.13570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2995, 2153.74854, -1732.19299, 17.12720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3100, 2152.75366, -1732.29089, 17.13672,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3100, 2152.88086, -1732.63586, 17.13672,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3100, 2153.62891, -1732.44458, 17.13672,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3105, 2153.58472, -1732.68469, 17.14672,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3105, 2153.24951, -1732.07056, 17.14672,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3014, 2167.37671, -1733.66711, 16.52870,   0.00000, 0.00000, 89.82001);
	CreateDynamicObject(3014, 2167.36450, -1733.06360, 16.52870,   0.00000, 0.00000, 89.82001);
	CreateDynamicObject(3014, 2167.38379, -1732.45349, 16.52870,   0.00000, 0.00000, 89.82001);
	CreateDynamicObject(3014, 2167.35522, -1731.83386, 16.52870,   0.00000, 0.00000, 89.82001);
	CreateDynamicObject(349, 2167.76978, -1732.30237, 17.62260,   0.00000, 0.00000, -85.02000);
	CreateDynamicObject(355, 2167.58643, -1732.64648, 18.17090,   0.00000, 0.00000, -78.12000);
	CreateDynamicObject(1736, 2144.51758, -1729.43713, 15.65580,   0.00000, 0.00000, -182.69991);
	CreateDynamicObject(2047, 2141.21802, -1729.75134, 15.58531,   0.00000, 0.00000, -179.75999);
	CreateDynamicObject(2048, 2147.09766, -1729.67932, 15.52530,   0.00000, 0.00000, -179.99989);
	CreateDynamicObject(8548, 2113.13794, -1720.47327, 13.73140,   0.00000, 0.00000, -99.12000);
	CreateDynamicObject(19969, 2109.62061, -1729.78662, 12.52740,   0.00000, 0.00000, -105.96000);
	CreateDynamicObject(17504, 2378.58936, -1455.26294, 26.74219,   356.85840, 0.00000, 3.14159);
	// Raindance Interior
	CreateDynamicObject(14404, -765.84021, 1601.17419, 3003.35986,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2939, -766.87140, 1596.49817, 3000.62598,   50.00000, 0.00000, 180.00000);
	CreateDynamicObject(1714, -766.64954, 1606.20508, 3001.38135,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1714, -764.99225, 1606.17957, 3001.38135,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1997, -766.86548, 1601.53577, 3001.56934,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1997, -766.84985, 1598.35181, 3001.56934,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3386, -767.45715, 1599.97070, 3000.94849,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1721, -764.24591, 1598.44617, 3001.54443,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -764.24408, 1599.10645, 3001.54443,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -764.27728, 1600.80469, 3001.54443,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -764.26636, 1601.48706, 3001.54443,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -764.25671, 1602.16772, 3001.54443,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2167, -764.23737, 1599.94690, 3001.58936,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1500, -766.62659, 1605.19043, 3001.57324,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19359, -765.76648, 1605.24182, 3005.82202,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1649, -765.17041, 1607.42383, 3003.00879,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -765.17139, 1607.50391, 3003.00879,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -765.17139, 1607.50391, 3003.00879,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -765.13037, 1607.42432, 3003.00879,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2007, -766.92682, 1603.38611, 3001.58936,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2007, -766.92279, 1604.40698, 3001.58936,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1721, -764.27063, 1596.91626, 3001.54443,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3047, -766.79297, 1598.78601, 3004.17847,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3047, -766.81311, 1601.15967, 3004.17603,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3047, -766.82721, 1596.30615, 3004.17676,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19087, -766.95306, 1597.96387, 3005.49756,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19087, -766.87189, 1602.19434, 3005.49756,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19472, -766.87878, 1602.16101, 3003.04736,   0.00000, 0.00000, -62.81998);
	CreateDynamicObject(19472, -766.97052, 1598.00330, 3003.04736,   0.00000, 0.00000, 88.44003);
	CreateDynamicObject(2690, -764.22705, 1597.70105, 3002.46875,   0.00000, 0.00000, -75.29999);
	CreateDynamicObject(2690, -767.40265, 1596.56738, 3002.46875,   0.00000, 0.00000, 89.64001);

	// Police department
    CreateDynamicObject(19452,1578.2000000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (1)
	CreateDynamicObject(19452,1578.2002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7000000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (3)
	CreateDynamicObject(19452,1581.7002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (4)
	CreateDynamicObject(19452,1581.7002000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (5)
	CreateDynamicObject(19452,1585.2002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (6)
	CreateDynamicObject(19452,1585.2002000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (7)
	CreateDynamicObject(19452,1588.7002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (8)
	CreateDynamicObject(19452,1592.2000000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (9)
	CreateDynamicObject(19452,1592.2002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (10)
	CreateDynamicObject(19452,1595.5996000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (11)
	CreateDynamicObject(19452,1595.5898000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (12)
	CreateDynamicObject(19358,1576.5000000,-1709.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (1)
	CreateDynamicObject(19358,1595.5200000,-1708.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (2)
	CreateDynamicObject(19358,1592.4000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (3)
	CreateDynamicObject(19358,1589.2000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (4)
	CreateDynamicObject(19358,1586.0000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (5)
	CreateDynamicObject(19358,1583.0000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (6)
	CreateDynamicObject(19358,1579.8000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (7)
	CreateDynamicObject(19358,1577.0000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (8)
	CreateDynamicObject(19358,1597.2998000,-1709.7998000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (9)
	CreateDynamicObject(1536,1586.2998000,-1708.2568000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorext15) (1)
	CreateDynamicObject(1536,1589.3199000,-1708.2300000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(gen_doorext15) (2)
	CreateDynamicObject(19358,1576.5000000,-1712.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (10)
	CreateDynamicObject(19358,1576.5000000,-1715.9000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (11)
	CreateDynamicObject(19358,1576.5000000,-1719.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (12)
	CreateDynamicObject(19358,1576.5000000,-1721.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (13)
	CreateDynamicObject(19358,1576.5000000,-1725.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1597.3000000,-1712.6000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (15)
	CreateDynamicObject(19358,1595.9000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (16)
	CreateDynamicObject(19358,1597.3000000,-1715.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (17)
	CreateDynamicObject(19358,1597.2998000,-1719.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1597.2998000,-1722.2002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (19)
	CreateDynamicObject(19358,1597.2998000,-1725.4004000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1584.4000000,-1709.4000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (21)
	CreateDynamicObject(19358,1595.8000000,-1717.4000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (22)
	CreateDynamicObject(19358,1593.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (24)
	CreateDynamicObject(19404,1584.4004000,-1712.5996000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(boigagr_sfw) (1)
	CreateDynamicObject(19358,1584.4004000,-1715.7998000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (25)
	CreateDynamicObject(19358,1591.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (26)
	CreateDynamicObject(19388,1586.0996000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1589.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (27)
	CreateDynamicObject(1649,1584.4000000,-1712.5000000,-34.5000000,0.0000000,0.0000000,90.0000000); //object(wglasssmash) (1)
	CreateDynamicObject(1649,1584.4004000,-1712.5000000,-34.5000000,0.0000000,0.0000000,270.0000000); //object(wglasssmash) (2)
	//CreateDynamicObject(1495,1585.3101000,-1717.4000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (1)
	CreateDynamicObject(1706,1590.4000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(kb_couch03) (1)
	CreateDynamicObject(1706,1592.5000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(kb_couch03) (2)
	CreateDynamicObject(1706,1594.6000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(kb_couch03) (4)
	CreateDynamicObject(1706,1596.7000000,-1709.9000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(kb_couch03) (5)
	CreateDynamicObject(949,1585.7998000,-1708.7002000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(949,1596.7000000,-1708.8000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (2)
	CreateDynamicObject(1706,1596.7000000,-1712.1000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(kb_couch03) (6)
	CreateDynamicObject(1706,1596.7000000,-1714.3000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(kb_couch03) (7)
	CreateDynamicObject(1706,1595.5000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(kb_couch03) (8)
	CreateDynamicObject(949,1596.7000000,-1716.8000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (3)
	CreateDynamicObject(1706,1593.3000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,179.9945100); //object(kb_couch03) (9)
	CreateDynamicObject(1706,1591.1000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,179.9945100); //object(kb_couch03) (10)
	CreateDynamicObject(1706,1588.9000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,179.9945100); //object(kb_couch03) (11)
	CreateDynamicObject(2319,1592.5000000,-1712.6000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(cj_tv_table5) (1)
	CreateDynamicObject(2319,1590.1000000,-1712.6000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(cj_tv_table5) (2)
	CreateDynamicObject(2853,1590.2000000,-1712.5000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags03) (1)
	CreateDynamicObject(2854,1591.1000000,-1712.6000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags04) (1)
	CreateDynamicObject(2855,1592.6000000,-1712.6000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags05) (1)
	CreateDynamicObject(2852,1593.4000000,-1712.6000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags02) (1)
	CreateDynamicObject(2700,1597.2000000,-1708.4000000,-35.0999980,0.0000000,0.0000000,220.4877000); //object(cj_sex_tv2) (1)
	CreateDynamicObject(2202,1582.9000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(photocopier_2) (1)
	CreateDynamicObject(2198,1583.8000000,-1712.1000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(med_office2_desk_3) (1)
	CreateDynamicObject(1671,1578.3000000,-1718.9000000,-37.4000020,0.0000000,0.0000000,180.0000000); //object(swivelchair_a) (1)
	CreateDynamicObject(1742,1576.6000000,-1716.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (1)
	CreateDynamicObject(1742,1576.5996000,-1709.4004000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (2)
	CreateDynamicObject(1742,1576.6000000,-1710.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (3)
	CreateDynamicObject(1742,1576.5996000,-1712.2002000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (4)
	CreateDynamicObject(1742,1576.5996000,-1713.5996000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (5)
	CreateDynamicObject(1742,1576.5996000,-1715.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (6)
	CreateDynamicObject(19358,1578.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (27)
	CreateDynamicObject(19358,1581.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (27)
	CreateDynamicObject(19388,1583.6000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(949,1589.5000000,-1708.7998000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (4)
	CreateDynamicObject(2161,1582.0000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_office_unit_4) (1)
	CreateDynamicObject(2164,1581.0000000,-1717.3000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(med_office_unit_5) (1)
	CreateDynamicObject(2167,1579.2000000,-1717.3000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(med_office_unit_7) (1)
	CreateDynamicObject(11631,1579.3000000,-1709.0000000,-36.5999980,0.0000000,0.0000000,0.0000000); //object(ranch_desk) (1)
	CreateDynamicObject(1671,1582.5000000,-1712.7002000,-37.4000020,0.0000000,0.0000000,87.6214600); //object(swivelchair_a) (2)
	CreateDynamicObject(19447,1596.1000000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1592.6000000,-1712.9004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (4)
	CreateDynamicObject(19447,1582.2000000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (5)
	CreateDynamicObject(19447,1589.2002000,-1712.9004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (6)
	CreateDynamicObject(19447,1585.7002000,-1712.9004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (9)
	CreateDynamicObject(19447,1578.7600000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (10)
	CreateDynamicObject(19447,1577.9000000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (11)
	CreateDynamicObject(19452,1578.2002000,-1732.2000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1585.2002000,-1732.2002000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1581.7002000,-1732.2002000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7002000,-1732.2000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1592.2002000,-1732.2000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1595.5898000,-1732.2002000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1597.3000000,-1728.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1731.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1734.2000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1737.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1727.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1730.5996000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1733.7998000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1736.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1587.0000000,-1719.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.0000000,-1722.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.0000000,-1725.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1588.5000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1591.7000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1595.6000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1592.4000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(2748,1592.9000000,-1718.1000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (1)
	CreateDynamicObject(2747,1596.4000000,-1719.4000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (1)
	CreateDynamicObject(2748,1593.1000000,-1724.3000000,-37.2000010,0.0000000,0.0000000,180.0000000); //object(cj_donut_chair2) (2)
	CreateDynamicObject(2748,1596.4004000,-1718.0996000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (3)
	CreateDynamicObject(2747,1592.8000000,-1719.5000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (2)
	CreateDynamicObject(2748,1596.5000000,-1720.7002000,-37.2000010,0.0000000,0.0000000,179.9945100); //object(cj_donut_chair2) (4)
	CreateDynamicObject(2748,1596.5000000,-1721.9000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (5)
	CreateDynamicObject(2748,1593.0000000,-1721.9000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (6)
	CreateDynamicObject(2747,1593.0000000,-1723.2000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (3)
	CreateDynamicObject(2747,1596.4000000,-1723.2000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (4)
	CreateDynamicObject(2748,1593.0000000,-1720.7002000,-37.2000010,0.0000000,0.0000000,179.9945100); //object(cj_donut_chair2) (7)
	CreateDynamicObject(2748,1596.4000000,-1724.3000000,-37.2000010,0.0000000,0.0000000,179.9945100); //object(cj_donut_chair2) (8)
	CreateDynamicObject(2448,1589.0000000,-1721.7000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(cj_ff_conter_5d) (1)
	CreateDynamicObject(2448,1589.0000000,-1719.4004000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(cj_ff_conter_5d) (2)
	CreateDynamicObject(2450,1589.2000000,-1722.4000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(cj_ff_conter_5b) (1)
	CreateDynamicObject(1776,1587.5000000,-1726.5000000,-36.7000010,0.0000000,0.0000000,90.0000000); //object(cj_candyvendor) (1)
	CreateDynamicObject(1775,1587.6000000,-1725.3000000,-36.7000010,0.0000000,0.0000000,90.0000000); //object(cj_sprunk1) (1)
	CreateDynamicObject(1502,1594.8000000,-1727.2000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (1)
	CreateDynamicObject(1502,1580.3000000,-1730.2000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (2)
	CreateDynamicObject(19358,1582.7000000,-1719.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1722.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1725.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1728.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1578.0000000,-1730.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1581.0996000,-1730.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(1502,1582.7998000,-1717.4399000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (3)
	CreateDynamicObject(1998,1581.2000000,-1718.9000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1l) (1)
	CreateDynamicObject(1998,1579.3000000,-1718.9000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1l) (2)
	CreateDynamicObject(1998,1577.4000000,-1718.9000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1l) (3)
	CreateDynamicObject(2008,1577.0996000,-1728.4004000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (2)
	CreateDynamicObject(2008,1577.0996000,-1726.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (3)
	CreateDynamicObject(2008,1577.2002000,-1723.5996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (4)
	CreateDynamicObject(2008,1581.1000000,-1723.5996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (5)
	CreateDynamicObject(2008,1581.1000000,-1726.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (6)
	CreateDynamicObject(1671,1579.7002000,-1710.0996000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (3)
	CreateDynamicObject(1671,1580.3000000,-1719.0000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (4)
	CreateDynamicObject(1671,1582.2000000,-1719.0000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (5)
	CreateDynamicObject(1671,1578.0000000,-1724.8000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (6)
	CreateDynamicObject(1671,1582.1000000,-1724.8000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (7)
	CreateDynamicObject(1671,1578.0000000,-1727.2000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (8)
	CreateDynamicObject(1671,1578.1000000,-1729.8000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (9)
	CreateDynamicObject(1671,1582.0000000,-1727.5000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (10)
	CreateDynamicObject(19452,1578.2002000,-1741.7998000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1581.7002000,-1741.7998000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1585.2002000,-1741.7998000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7002000,-1741.8000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1592.2002000,-1741.8000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1595.5898000,-1741.8000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1578.2002000,-1751.4000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1581.7001953,-1751.4003906,-37.9000015,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7002000,-1751.4004000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1585.2002000,-1751.4004000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1592.2002000,-1751.4004000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1595.5898000,-1751.4000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1597.3000000,-1740.2000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1743.4000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1746.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1749.6000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1739.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1742.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1745.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1747.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1750.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1753.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1755.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1752.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.2998000,-1755.0996000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1593.0000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1590.2002000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1587.5000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1584.4004000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1581.5996000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.5000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19447,1596.0996000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (13)
	CreateDynamicObject(19447,1592.5996000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (14)
	CreateDynamicObject(19447,1585.7002000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (15)
	CreateDynamicObject(19447,1582.2002000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (16)
	CreateDynamicObject(19447,1578.7598000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (17)
	CreateDynamicObject(19447,1578.0996000,-1722.4004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (18)
	CreateDynamicObject(18767,1574.5000000,-1735.6000000,-34.2999990,0.0000000,0.0000000,0.0000000); //object(stands) (1)
	CreateDynamicObject(18767,1574.1000000,-1735.6000000,-34.2999990,0.0000000,0.0000000,0.0000000); //object(stands) (2)
	CreateDynamicObject(19358,1578.1000000,-1731.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0996000,-1736.7002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0996000,-1733.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1596.2002000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1577.9004000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1581.0996000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1582.7000000,-1731.9000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(1502,1582.7300000,-1732.6700000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(gen_doorint04) (4)
	CreateDynamicObject(19358,1582.7000000,-1735.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1738.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1741.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1743.2000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(2949,1576.5699000,-1744.0000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(kmb_lockeddoor) (1)
	CreateDynamicObject(19358,1592.9004000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.5000000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1584.2998000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1590.7002000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(1502,1589.9004000,-1733.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(19358,1593.0000000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1594.5000000,-1734.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1594.5000000,-1737.9000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1594.5000000,-1741.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1594.5000000,-1743.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1584.2998000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.5000000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1590.7002000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(14532,1583.5996000,-1733.7998000,-36.7999990,0.0000000,0.0000000,221.2097200); //object(tv_stand_driv) (1)
	CreateDynamicObject(14532,1593.4004000,-1743.5996000,-36.7999990,0.0000000,0.0000000,48.0596920); //object(tv_stand_driv) (2)
	CreateDynamicObject(3077,1584.5000000,-1743.0000000,-38.2000010,0.0000000,0.0000000,307.2500000); //object(nf_blackboard) (1)
	CreateDynamicObject(2606,1577.7000000,-1708.3000000,-35.1199990,0.0000000,0.0000000,0.0000000); //object(cj_police_counter2) (1)
	CreateDynamicObject(2606,1577.7002000,-1708.2998000,-34.7000010,0.0000000,0.0000000,0.0000000); //object(cj_police_counter2) (2)
	CreateDynamicObject(1721,1591.8000000,-1742.5000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (1)
	CreateDynamicObject(1721,1591.8000000,-1741.9000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (2)
	CreateDynamicObject(1721,1591.8000000,-1741.3000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (3)
	CreateDynamicObject(1721,1591.8000000,-1740.7000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (4)
	CreateDynamicObject(1721,1591.8000000,-1740.1000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (5)
	CreateDynamicObject(1721,1591.8000000,-1739.5000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (6)
	CreateDynamicObject(1721,1591.8000000,-1738.9000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (7)
	CreateDynamicObject(1721,1591.8000000,-1738.3000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (8)
	CreateDynamicObject(1721,1591.8000000,-1737.7000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (9)
	CreateDynamicObject(1721,1591.8000000,-1737.1000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (10)
	CreateDynamicObject(1721,1590.0000000,-1742.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (11)
	CreateDynamicObject(1721,1590.0000000,-1741.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (12)
	CreateDynamicObject(1721,1590.0000000,-1741.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (13)
	CreateDynamicObject(1721,1590.0000000,-1740.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (14)
	CreateDynamicObject(1721,1590.0000000,-1740.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (15)
	CreateDynamicObject(1721,1590.0000000,-1739.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (16)
	CreateDynamicObject(1721,1590.0000000,-1738.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (17)
	CreateDynamicObject(1721,1590.0000000,-1738.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (18)
	CreateDynamicObject(1721,1590.0000000,-1737.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (19)
	CreateDynamicObject(1721,1590.0000000,-1737.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (20)
	CreateDynamicObject(1721,1588.3000000,-1742.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (21)
	CreateDynamicObject(1721,1588.3000000,-1741.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (22)
	CreateDynamicObject(1721,1588.3000000,-1741.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (23)
	CreateDynamicObject(1721,1588.3000000,-1740.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (24)
	CreateDynamicObject(1721,1588.3000000,-1740.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (25)
	CreateDynamicObject(1721,1588.3000000,-1739.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (26)
	CreateDynamicObject(1721,1588.3000000,-1738.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (27)
	CreateDynamicObject(1721,1588.3000000,-1738.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (28)
	CreateDynamicObject(1721,1588.3000000,-1737.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (29)
	CreateDynamicObject(1721,1588.3000000,-1737.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (30)
	CreateDynamicObject(2614,1582.9000000,-1738.6000000,-35.5999980,0.0000000,0.0000000,90.5000000); //object(cj_us_flag) (1)
	CreateDynamicObject(2614,1591.8000000,-1717.2000000,-35.5999980,0.0000000,0.0000000,181.7500000); //object(cj_us_flag) (2)
	CreateDynamicObject(14532,1583.5996000,-1733.7998000,-36.7999990,0.0000000,0.0000000,221.2097200); //object(tv_stand_driv) (1)
	CreateDynamicObject(2491,1585.4000000,-1738.4000000,-38.2999990,0.0000000,0.0000000,0.0000000); //object(model_stand) (1)
	CreateDynamicObject(19447,1596.1000000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1582.2002000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1585.7002000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1579.9000000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.0996000,-1725.3000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (18)
	CreateDynamicObject(19358,1595.6000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19447,1592.5996000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19388,1592.4000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1589.2000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1586.0000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1582.8000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1579.6000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1577.0000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(1502,1578.8000000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(1502,1591.5996000,-1749.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(1502,1585.2002000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(19358,1582.8000000,-1755.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7998000,-1750.7002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7998000,-1753.9004000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1589.1000000,-1755.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1589.0996000,-1750.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1589.0996000,-1753.7002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(1999,1593.8000000,-1754.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk2) (1)
	CreateDynamicObject(1742,1595.0000000,-1749.1000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (7)
	CreateDynamicObject(1742,1593.5996000,-1749.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (8)
	CreateDynamicObject(1714,1594.7000000,-1755.4000000,-37.7999990,0.0000000,0.0000000,174.7500000); //object(kb_swivelchair1) (1)
	CreateDynamicObject(1721,1595.6000000,-1752.3000000,-37.7999990,0.0000000,0.0000000,142.7500000); //object(est_chair1) (31)
	CreateDynamicObject(1721,1593.3000000,-1752.2000000,-37.7999990,0.0000000,0.0000000,214.4953600); //object(est_chair1) (32)
	CreateDynamicObject(912,1589.6000000,-1754.3000000,-37.2999990,0.0000000,0.0000000,90.0000000); //object(bust_cabinet_2) (1)
	CreateDynamicObject(2614,1593.6000000,-1756.0000000,-35.5999980,0.0000000,0.0000000,177.7500000); //object(cj_us_flag) (3)
	CreateDynamicObject(1999,1580.6000000,-1754.6000000,-37.7999990,0.0000000,0.0000000,50.7500000); //object(officedesk2) (2)
	CreateDynamicObject(1999,1584.4000000,-1754.0000000,-37.7999990,0.0000000,0.0000000,304.7500000); //object(officedesk2) (3)
	CreateDynamicObject(1714,1583.6000000,-1755.3000000,-37.7999990,0.0000000,0.0000000,137.2485400); //object(kb_swivelchair1) (2)
	CreateDynamicObject(1714,1582.0000000,-1755.4000000,-37.7999990,0.0000000,0.0000000,220.2467000); //object(kb_swivelchair1) (3)
	CreateDynamicObject(1721,1580.4000000,-1752.5000000,-37.7999990,0.0000000,0.0000000,214.4915800); //object(est_chair1) (33)
	CreateDynamicObject(1721,1579.2000000,-1753.9000000,-37.7999990,0.0000000,0.0000000,251.5000000); //object(est_chair1) (34)
	CreateDynamicObject(1742,1577.8000000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (9)
	CreateDynamicObject(1742,1584.3000000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (10)
	CreateDynamicObject(1721,1586.6000000,-1754.3000000,-37.7999990,0.0000000,0.0000000,120.2415800); //object(est_chair1) (35)
	CreateDynamicObject(1721,1585.7000000,-1753.3000000,-37.7999990,0.0000000,0.0000000,120.2398700); //object(est_chair1) (36)
	CreateDynamicObject(2164,1587.0000000,-1756.1000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(med_office_unit_5) (2)
	CreateDynamicObject(2164,1576.6000000,-1753.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_office_unit_5) (3)
	CreateDynamicObject(2614,1584.5000000,-1756.0000000,-35.5999980,0.0000000,0.0000000,179.5000000); //object(cj_us_flag) (4)
	CreateDynamicObject(2614,1580.5000000,-1756.0000000,-35.7000010,0.0000000,0.0000000,178.7500000); //object(cj_us_flag) (5)
	CreateDynamicObject(1721,1579.2002000,-1753.9004000,-37.7999990,0.0000000,0.0000000,251.4990200); //object(est_chair1) (37)
	CreateDynamicObject(19447,1596.1000000,-1741.6000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1741.5996000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1592.5996000,-1741.5996000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1585.7002000,-1741.6000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1582.2002000,-1741.5996000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1579.9000000,-1741.6000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19358,1578.1000000,-1736.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.1000000,-1731.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0996000,-1733.5000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(18767,1574.7000000,-1725.1000000,-34.2999990,0.0000000,0.0000000,180.0000000); //object(stands) (1)
	CreateDynamicObject(19358,1576.9004000,-1729.7000000,-32.5999980,0.0000000,0.0000000,74.9981690); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1575.0000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1575.0000000,-1729.4000000,-34.2099990,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1574.2002000,-1729.4004000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1571.0000000,-1729.4000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1732.8000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1736.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1739.2000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19447,1578.2000000,-1743.1000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19358,1576.9000000,-1738.4000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1571.9004000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1727.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1568.7000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1565.5000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1566.0000000,-1729.4004000,-34.2099990,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1567.7998000,-1729.4004000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.0000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1558.5000000,-1726.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1564.5996000,-1729.4004000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1725.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1558.5000000,-1723.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1558.5000000,-1729.4004000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1717.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1558.5000000,-1720.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1563.0000000,-1721.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1718.8000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1715.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1564.5996000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1561.5000000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1558.5996000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1556.0000000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1550.0000000,-1720.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1723.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1726.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1729.4004000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1553.9004000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1550.7998000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1548.2002000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2998000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1716.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1719.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1722.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1725.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1729.1000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1731.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1561.4004000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1559.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1556.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1554.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1551.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1548.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19447,1596.0996000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1592.5996000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1582.2002000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1580.8000000,-1755.5000000,-34.2999990,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.8000000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.0000000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1585.7002000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1590.4000000,-1755.3000000,-34.2999990,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1599.4000000,-1755.4000000,-34.2999990,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19302,1549.4000000,-1718.6000000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (1)
	CreateDynamicObject(19388,1549.4000000,-1718.6000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1546.2000000,-1718.6000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1559.8000000,-1716.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1562.2002000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19302,1562.2998000,-1718.5996000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (2)
	CreateDynamicObject(19358,1550.3000000,-1717.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1559.7998000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1557.4004000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19302,1557.5000000,-1718.5996000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (3)
	CreateDynamicObject(19358,1555.7002000,-1717.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1552.0000000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19302,1552.0996000,-1718.5996000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (4)
	CreateDynamicObject(19358,1554.2002000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(1771,1560.7000000,-1717.0000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (1)
	CreateDynamicObject(19452,1558.5000000,-1717.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(1771,1559.0000000,-1716.9000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (2)
	CreateDynamicObject(1771,1554.8000000,-1717.0000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (3)
	CreateDynamicObject(1771,1545.9000000,-1717.0000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (4)
	CreateDynamicObject(2602,1549.8000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (1)
	CreateDynamicObject(2602,1551.2000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (2)
	CreateDynamicObject(2602,1556.4000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (3)
	CreateDynamicObject(2602,1562.4000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (4)
	CreateDynamicObject(2008,1552.0000000,-1727.9000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(officedesk1) (1)
	CreateDynamicObject(2008,1546.7998000,-1727.9004000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(officedesk1) (7)
	CreateDynamicObject(2008,1556.2000000,-1727.8000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(officedesk1) (8)
	CreateDynamicObject(1671,1547.4000000,-1729.1000000,-33.7000010,0.0000000,0.0000000,180.0000000); //object(swivelchair_a) (2)
	CreateDynamicObject(1671,1557.1000000,-1729.0000000,-33.7000010,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (2)
	CreateDynamicObject(1671,1552.9004000,-1729.0996000,-33.7000010,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (2)
	CreateDynamicObject(949,1554.6000000,-1727.8000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(949,1549.7998000,-1727.9004000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(949,1558.7000000,-1727.9000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(1808,1545.5000000,-1724.3000000,-34.0999980,0.0000000,0.0000000,90.0000000); //object(cj_watercooler2) (1)
	CreateDynamicObject(1808,1545.5000000,-1724.7002000,-34.0999980,0.0000000,0.0000000,90.0000000); //object(cj_watercooler2) (2)
	CreateDynamicObject(2833,1557.4000000,-1724.5000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(gb_livingrug02) (1)
	CreateDynamicObject(2836,1550.4000000,-1724.6000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(gb_livingrug05) (1)
	CreateDynamicObject(19447,1573.9000000,-1729.8000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.0000000,-1734.7998000,-31.0000000,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1555.0000000,-1729.6000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.3000000,-1726.5000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1564.5000000,-1729.7998000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1547.5000000,-1729.5000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1726.5000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1723.2000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1719.8000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1717.0000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.3000000,-1723.2000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.2998000,-1717.0000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1717.0000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.2998000,-1719.8000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)

	// Construction in LS near All Saints.
	CreateDynamicObject(2669, 1263.89246, -1268.83276, 13.75695,   0.00000, 0.00000, -269.21988);
	CreateDynamicObject(3502, 1278.83875, -1247.69934, 12.29811,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3502, 1271.23132, -1246.35620, 14.43547,   0.00000, 0.00000, -23.82000);
	CreateDynamicObject(3502, 1253.15784, -1247.03540, 14.43547,   0.00000, 0.00000, 88.74001);
	CreateDynamicObject(19791, 1263.49976, -1236.20557, 12.15952,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 1282.19092, -1255.94116, 13.32204,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 1282.22339, -1258.77979, 13.32204,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 1282.21338, -1261.64124, 13.32204,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 1282.24365, -1264.48474, 13.32204,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 1282.30847, -1267.46899, 13.32204,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 1282.31030, -1265.92163, 14.72153,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 1282.27441, -1262.93518, 14.72153,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 1282.29858, -1260.12817, 14.72153,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1685, 1282.24060, -1257.35437, 14.72153,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19975, 1281.04858, -1270.40454, 12.40598,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19975, 1270.60193, -1270.34924, 12.40598,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(898, 1233.30505, -1239.52771, 14.63143,   -1.44001, -74.58006, -25.31998);
	CreateDynamicObject(898, 1240.11877, -1237.23120, 14.63143,   -1.44001, -74.58006, 0.00000);
	CreateDynamicObject(1388, 1236.15479, -1227.80347, 24.01220,   3.14159, 0.00000, -138.44725);

	// Fire station
    CreateDynamicObject(1649, 1737.09998, -1102.50000, 24.00000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(942, 1721.09998, -1114.80005, 25.50000,   0.00000, 0.25000, 91.25000);
    CreateDynamicObject(930, 1721.19995, -1111.19995, 23.54000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(931, 1720.90002, -1121.00000, 24.10000,   0.00000, 0.00000, 92.00000);
    CreateDynamicObject(2567, 1707.80005, -1130.19995, 25.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3800, 1712.69995, -1130.00000, 23.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3800, 1711.09998, -1130.19995, 23.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1736.42004, -1094.81995, 28.18000,   0.00000, 0.00000, 0.24000);
    CreateDynamicObject(2165, 1752.69995, -1104.59998, 23.12000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2165, 1750.80005, -1104.59998, 23.12000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1671, 1751.50000, -1105.90002, 23.52000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1671, 1753.40002, -1105.90002, 23.52000,   0.00000, 0.00000, 179.99001);
    CreateDynamicObject(1723, 1740.30005, -1095.59998, 23.12000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1723, 1744.59998, -1095.59998, 23.12000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2315, 1740.50000, -1097.40002, 23.12000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2315, 1744.90002, -1097.40002, 23.12000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1723, 1742.30005, -1099.40002, 23.12000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1723, 1746.59998, -1099.40002, 23.12000,   0.00000, 0.00000, 179.99001);
    CreateDynamicObject(1649, 1714.78003, -1142.39001, 28.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1722.90002, -1142.40002, 28.10000,   0.00000, 0.00000, 180.24001);
    CreateDynamicObject(925, 1720.90002, -1123.59998, 24.10000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2700, 1743.19995, -1108.00000, 26.50000,   0.00000, 0.00000, 89.75000);
    CreateDynamicObject(2700, 1755.93994, -1101.44995, 26.30000,   0.00000, 0.00000, 179.99001);
    CreateDynamicObject(2631, 1735.40002, -1113.90002, 23.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2632, 1735.40002, -1115.90002, 23.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2631, 1735.40002, -1117.90002, 23.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2632, 1735.40002, -1119.90002, 23.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2631, 1735.40002, -1121.90002, 23.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2632, 1735.40002, -1123.90002, 23.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1211, 1729.69995, -1140.59998, 23.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1211, 1712.50000, -1140.59998, 23.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1211, 1746.80005, -1140.59998, 23.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1211, 1729.57996, -1096.68005, 23.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1211, 1712.40002, -1096.80005, 23.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1238, 1713.80005, -1129.69995, 23.40000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1238, 1713.80005, -1129.69995, 23.60000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1238, 1714.50000, -1129.69995, 23.40000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1238, 1714.50000, -1129.69995, 23.60000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(7090, 1728.40002, -1095.50000, 35.30000,   0.00000, 0.00000, 92.00000);
    CreateDynamicObject(1502, 1737.14001, -1106.19995, 23.06000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1729.69995, -1137.30005, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1729.69995, -1134.30005, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1712.50000, -1137.30005, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1704.82996, -1137.38000, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1738.29004, -1135.20996, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1746.80005, -1136.90002, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1746.80005, -1127.19995, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1238, 1740.53003, -1130.07996, 24.60000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1238, 1740.54004, -1130.06995, 24.68000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1238, 1741.40002, -1129.95996, 24.60000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2627, 1735.57996, -1113.58997, 23.15000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(2627, 1735.58997, -1114.73999, 23.15000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(2630, 1735.69995, -1116.56006, 23.15000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2630, 1735.68005, -1117.78003, 23.15000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2628, 1736.14001, -1119.76001, 23.15000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(2628, 1736.14001, -1121.45996, 23.15000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(1808, 1736.88000, -1125.26001, 23.09000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(2223, 1744.93994, -1097.45996, 23.68000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2342, 1746.51001, -1097.40002, 23.72000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3578, 1712.40002, -1101.00000, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1704.77002, -1101.10999, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1736.80005, -1099.97998, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1736.80005, -1101.19995, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1729.59998, -1101.00000, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1721.09998, -1100.90002, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1649, 1737.08997, -1102.53003, 27.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1649, 1737.09998, -1106.83997, 27.22000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(1649, 1737.09998, -1098.09998, 27.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1649, 1737.09998, -1098.16003, 24.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1615, 1754.19995, -1095.80005, 28.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1615, 1754.19995, -1130.00000, 28.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1615, 1705.09998, -1107.50000, 27.90000,   0.00000, 0.00000, 184.50000);
    CreateDynamicObject(1615, 1705.09998, -1130.09998, 27.90000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(638, 1701.50000, -1096.50000, 23.80000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(638, 1701.59998, -1100.30005, 23.80000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2774, 1730.19995, -1095.57996, 20.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2774, 1729.09998, -1095.57996, 20.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2774, 1713.19995, -1095.57996, 20.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1752.40002, -1094.80005, 27.90000,   0.00000, 0.00000, 0.25000);
    CreateDynamicObject(1649, 1748.00000, -1094.80005, 27.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1743.59998, -1094.80005, 27.90000,   0.00000, 0.00000, 180.24001);
    CreateDynamicObject(1649, 1739.30005, -1094.80005, 27.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1732.09998, -1094.83984, 28.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1739.30005, -1094.81995, 24.70000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2774, 1712.00000, -1095.57996, 20.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1702.97009, -1097.71997, 27.22000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1649, 1702.96997, -1097.68005, 30.48000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1712.51294, -1127.09998, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1704.84399, -1127.19995, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1754.50000, -1136.00000, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1649, 1727.50000, -1094.80005, 28.20000,   0.18000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1723.19995, -1094.80005, 28.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1719.40002, -1094.80005, 28.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1715.09998, -1094.80005, 28.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1710.30005, -1094.80005, 28.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1706.00000, -1094.83997, 28.20000,   0.00000, 0.00000, 0.99000);
    CreateDynamicObject(2774, 1747.27002, -1141.64001, 20.38000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2774, 1746.23999, -1141.69995, 20.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2774, 1730.18005, -1141.69995, 18.70000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2774, 1728.88000, -1141.69995, 18.70000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2774, 1711.97998, -1141.69995, 19.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2774, 1713.12000, -1141.69995, 19.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1740.19995, -1142.40002, 28.20000,   0.00000, 0.00000, 180.50000);
    CreateDynamicObject(1649, 1744.50000, -1142.38000, 28.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1749.09998, -1142.38000, 28.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1753.40002, -1142.38000, 28.10000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1736.30005, -1142.40002, 28.20000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1731.90002, -1142.42004, 28.20000,   0.00000, 0.00000, 180.24001);
    CreateDynamicObject(1649, 1727.19995, -1142.40002, 28.10000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1719.18005, -1142.40002, 28.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1710.30005, -1142.40002, 28.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1705.95996, -1142.39001, 28.20000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(19461, 1703.01001, -1104.71997, 24.82000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1756.32996, -1135.59998, 28.28000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1702.98999, -1135.85999, 24.80000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1703.00000, -1135.82996, 28.28000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1756.32996, -1135.62000, 24.82000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1756.31006, -1101.70996, 28.34000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1737.12000, -1102.46997, 24.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1649, 1752.38000, -1094.81995, 24.68000,   0.00000, 0.00000, 0.25000);
    CreateDynamicObject(1649, 1736.39001, -1094.81995, 28.18000,   0.00000, 0.00000, 180.36000);
    CreateDynamicObject(1649, 1714.81995, -1142.39001, 28.10000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(3578, 1712.50000, -1137.30005, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1746.80005, -1127.19995, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(931, 1741.21997, -1130.07996, 24.14000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1428, 1742.60999, -1130.43005, 24.65000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1428, 1742.60999, -1129.76001, 24.65000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1502, 1756.29004, -1099.26001, 23.06000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1712.50000, -1137.30005, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1746.80005, -1127.19995, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1238, 1740.54004, -1130.06995, 24.68000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1737.10999, -1102.45996, 27.30000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(1649, 1737.10999, -1106.75000, 27.22000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1649, 1737.09998, -1098.14001, 27.30000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(1649, 1737.10999, -1098.14001, 24.00000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(1649, 1752.40002, -1094.81006, 27.90000,   0.00000, 0.00000, 180.25000);
    CreateDynamicObject(1649, 1748.00000, -1094.77002, 27.90000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1743.59998, -1094.81995, 27.90000,   0.00000, 0.00000, 0.02000);
    CreateDynamicObject(1649, 1739.30005, -1094.80005, 27.90000,   0.00000, 0.00000, 179.74001);
    CreateDynamicObject(1649, 1732.07996, -1094.81995, 28.20000,   0.00000, 0.00000, 179.99001);
    CreateDynamicObject(1649, 1739.26001, -1094.81995, 24.70000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1702.97986, -1098.45996, 27.22000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1649, 1702.97009, -1098.31006, 30.42000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1649, 1727.47998, -1094.80005, 28.20000,   0.00000, 0.00000, 179.99001);
    CreateDynamicObject(1649, 1723.19995, -1094.80005, 28.20000,   0.00000, 0.06000, 179.99001);
    CreateDynamicObject(1649, 1719.38000, -1094.80005, 28.20000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1715.00000, -1094.80005, 28.20000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1710.30005, -1094.80005, 28.20000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1705.95996, -1094.80005, 28.20000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2774, 1747.27002, -1141.64001, 20.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1740.28003, -1142.40002, 28.20000,   0.00000, 0.00000, 0.50000);
    CreateDynamicObject(1649, 1753.45996, -1142.38000, 28.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1736.26001, -1142.40002, 28.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1727.18005, -1142.40002, 28.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1719.19995, -1142.40002, 28.10000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1710.33997, -1142.35999, 28.20000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1705.97998, -1142.39001, 28.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1756.30005, -1104.88000, 24.83000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1765.79004, -1094.87000, 24.68000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(7090, 1728.57996, -1142.33997, 35.40000,   0.00000, 0.00000, 272.00000);
    CreateDynamicObject(3578, 1712.50000, -1137.30005, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1746.80005, -1127.19995, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1428, 1742.60999, -1129.76001, 24.65000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1649, 1743.65002, -1094.81006, 24.68000,   0.00000, 0.00000, 179.95000);
    CreateDynamicObject(1649, 1743.63000, -1094.81995, 24.70000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1703.01001, -1104.69995, 28.32000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1790.56006, -1099.70996, 28.30000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(616, 840.28003, -923.78003, 52.09000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1536, 1737.10999, -1108.27002, 23.02000,   0.00000, 0.00000, 269.98001);
    CreateDynamicObject(2737, 1751.96997, -1108.23999, 24.51000,   0.00000, 0.00000, 540.32001);
    CreateDynamicObject(6973, 1742.70996, -1113.82996, 43.62000,   0.00000, 0.00000, 90.54000);
    CreateDynamicObject(1649, 1748.06006, -1094.81995, 24.70000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1752.37000, -1094.81006, 24.68000,   0.00000, 0.00000, 179.95000);
    CreateDynamicObject(1649, 1748.04004, -1094.80005, 24.68000,   0.00000, 0.00000, 179.95000);
    CreateDynamicObject(1536, 1752.80005, -1122.04004, 45.53000,   0.00000, 0.00000, 269.98001);
    CreateDynamicObject(19486, -755.09998, 1637.62000, 28.51000,   0.00000, 0.00000, -179.52000);
    CreateDynamicObject(19330, 1773.79797, -1114.10522, 25.07000,   -4.00000, -91.00000, -76.00000);
    CreateDynamicObject(19171, 1748.63000, -1108.31006, 25.71000,   -90.00000, 0.00000, 0.00000);
    CreateDynamicObject(19169, 1748.63000, -1108.31006, 24.22000,   -90.00000, 0.00000, 0.00000);
    CreateDynamicObject(19170, 1747.14001, -1108.31006, 25.71000,   -90.00000, 0.00000, 0.00000);
    CreateDynamicObject(19168, 1747.13000, -1108.31006, 24.22000,   -90.00000, 0.00000, 0.00000);
    CreateDynamicObject(19172, 1756.23999, -1101.45996, 25.05000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(18870, 1740.82996, -1097.39001, 23.61000,   0.00000, 0.00000, 23.40000);
    CreateDynamicObject(2690, 1742.15002, -1130.68994, 23.57000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2690, 1740.47998, -1130.18005, 23.57000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2690, 1741.50000, -1130.60999, 23.57000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2690, 1740.96997, -1130.64001, 23.57000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2690, 1736.84998, -1125.85999, 23.41000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1368, 1702.41003, -1102.06995, 23.78000,   0.00000, 0.00000, -89.88000);
    CreateDynamicObject(1368, 1702.41003, -1104.59998, 23.78000,   0.00000, 0.00000, -89.88000);
    CreateDynamicObject(18075, 1728.70996, -1117.10999, 29.08000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(18075, 1716.81006, -1135.50000, 29.08000,   0.00000, 0.00000, -90.18000);
    CreateDynamicObject(18075, 1742.42004, -1135.51001, 29.08000,   0.00000, 0.00000, -90.18000);
    CreateDynamicObject(18075, 1716.77002, -1103.60999, 29.08000,   0.00000, 0.00000, -90.18000);
    CreateDynamicObject(18075, 1742.64001, -1102.77002, 29.08000,   0.00000, 0.00000, -90.18000);
    CreateDynamicObject(1215, 1752.56995, -1141.26001, 45.87000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1215, 1704.16003, -1141.27002, 45.87000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1215, 1704.18005, -1096.01001, 45.87000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1215, 1752.56006, -1096.07996, 45.87000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1432, 819.85999, -946.59998, 49.75000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1790.56006, -1111.21997, 24.81000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19415, 1779.42004, -1094.87000, 24.82000,   0.00000, 0.00000, -90.12000);
    CreateDynamicObject(19461, 1783.62000, -1094.87000, 28.32000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1773.00000, -1094.87000, 24.83000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1764.38000, -1094.87000, 28.32000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19415, 1766.66003, -1094.87000, 24.82000,   0.00000, 0.00000, -90.12000);
    CreateDynamicObject(19461, 1760.23999, -1094.87000, 28.33000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19397, 1756.29004, -1098.51001, 24.83000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1790.56006, -1099.60010, 24.81000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1790.52002, -1111.19995, 28.30000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1787.89001, -1117.12000, 28.31000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1778.28003, -1116.10999, 28.31000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1787.89001, -1117.12000, 24.83000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1778.28015, -1116.10999, 24.83000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19331, 1782.14478, -1115.72253, 25.07000,   0.00000, 265.00000, -25.00000);
    CreateDynamicObject(19461, 1774.00000, -1094.87000, 28.32000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1760.23999, -1094.87000, 24.83000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1785.79004, -1094.87000, 24.83000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1785.63000, -1108.41003, 24.81000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1773.12000, -1108.41003, 28.31000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19397, 1779.20996, -1108.41003, 24.81000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1502, 1778.43005, -1108.41003, 23.06000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1773.12000, -1108.41003, 24.81000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1782.75000, -1108.41003, 28.31000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1792.39001, -1108.41003, 28.31000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(941, 1774.47998, -1107.72998, 23.53000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(937, 1776.84998, -1107.75000, 23.53000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(936, 1780.97998, -1107.70996, 23.55000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2135, 1787.87000, -1095.43994, 23.07000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2136, 1785.93994, -1095.43994, 23.07000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2139, 1784.96997, -1095.44995, 23.06000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2149, 1785.10999, -1095.28003, 24.28000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2529, 1783.96997, -1095.43994, 23.07000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2139, 1782.96997, -1095.44995, 23.06000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2140, 1788.56995, -1096.38000, 22.93000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(2139, 1781.98999, -1095.44995, 23.06000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2867, 1782.64001, -1095.27002, 24.12000,   0.00000, 0.00000, -32.46000);
    CreateDynamicObject(2219, 1786.15002, -1095.43005, 24.18000,   -25.00000, 25.00000, 47.00000);
    CreateDynamicObject(18075, 1766.96997, -1101.21997, 29.08000,   0.00000, 0.00000, -90.18000);
    CreateDynamicObject(18075, 1782.82996, -1107.08997, 29.08000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1968, 1786.25000, -1098.68005, 23.59000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1968, 1786.25000, -1100.67004, 23.59000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1968, 1786.25000, -1102.64001, 23.59000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1968, 1783.16003, -1102.64001, 23.59000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1968, 1783.16003, -1100.67004, 23.59000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1968, 1783.16003, -1098.68005, 23.59000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1969, 1783.16003, -1104.00000, 23.59000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1969, 1786.25000, -1104.00000, 23.59000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1764.50000, -1107.96997, 24.81000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1764.50000, -1107.96997, 28.30000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1671, 1758.31006, -1107.78003, 23.52000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1671, 1768.80005, -1105.14001, 23.52000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1766.44995, -1094.80005, 24.68000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1779.47998, -1094.85999, 24.68000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1779.60999, -1094.82996, 24.68000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(3578, 1729.60999, -1101.35999, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1255, 816.98999, -943.64001, 50.30000,   0.00000, 0.00000, -85.74000);
    CreateDynamicObject(19461, 1764.27002, -1103.18994, 24.83000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19397, 1757.84998, -1103.18005, 24.83000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19397, 1770.68994, -1103.18994, 24.83000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19461, 1772.20996, -1108.04004, 24.83000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1772.20996, -1108.04004, 28.33000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1767.48999, -1103.20996, 28.33000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1761.19995, -1103.19995, 28.33000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1764.29004, -1103.18994, 28.33000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(1502, 1769.92004, -1103.19995, 23.06000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1502, 1757.06006, -1103.18994, 23.06000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1546, 1787.18994, -1095.23999, 24.21000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2342, 1783.16003, -1100.62000, 23.98000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2342, 1786.27002, -1104.04004, 23.98000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2223, 1786.21997, -1098.59998, 23.92000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2223, 1783.06006, -1102.64001, 23.92000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1459, 1744.47998, -1130.51001, 23.69000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1423, 1744.47998, -1129.46997, 23.77000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1424, 1748.28003, -1130.15002, 23.60000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1425, 1746.46997, -1129.51001, 23.49000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1422, 1748.42004, -1129.47998, 23.47000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1282, 1746.40002, -1130.34998, 23.58000,   0.00000, 0.00000, -89.94000);
    CreateDynamicObject(2605, 1758.29004, -1106.38000, 23.46000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1794, 1763.89001, -1104.80005, 23.07000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1794, 1766.04004, -1104.80005, 23.07000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2605, 1768.78003, -1103.82996, 23.46000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1235, 1781.09998, -1095.32996, 23.58000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1742, 1763.44995, -1103.16003, 23.07000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1742, 1765.08997, -1103.15002, 23.07000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1997, 1720.56995, -1126.44995, 23.06000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2007, 1756.94995, -1107.78003, 23.06000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2007, 1771.59998, -1105.64001, 23.06000,   0.00000, 0.00000, -90.90000);
    CreateDynamicObject(2425, 1782.05005, -1095.04004, 24.12000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1722.87000, -1142.39001, 28.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1731.90002, -1142.40002, 28.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1749.12000, -1142.38000, 28.10000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1744.57996, -1142.38000, 28.20000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(7092, 1752.81006, -1134.68994, 81.86000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1663, 1753.37000, -1103.12000, 23.54000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1663, 1751.51001, -1103.12000, 23.54000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(11665, 1775.58997, -1096.62000, 23.76000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1704, 1777.53003, -1097.71997, 23.07000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1704, 1774.69995, -1097.69995, 23.07000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2700, 1775.56995, -1095.23999, 25.03000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(2108, 1762.59998, -1103.52002, 23.06000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2108, 1766.37000, -1103.56995, 23.06000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19379, 1742.34998, -1099.65002, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1742.34998, -1109.26001, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1752.84998, -1109.26001, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1752.84998, -1099.65002, 23.03000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1763.34998, -1099.65002, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1773.82996, -1099.65002, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1784.30005, -1099.65002, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1784.30005, -1109.25000, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1773.82996, -1109.25000, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1763.34998, -1109.25000, 22.99000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1788.68005, -1106.73999, 22.99000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1788.69995, -1103.55005, 22.99000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1788.70996, -1100.37000, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1788.68005, -1097.22998, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1791.21997, -1110.05005, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1791.20996, -1113.19995, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1789.25000, -1115.56995, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1785.76001, -1115.54004, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1782.29004, -1115.56006, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1778.81006, -1114.57996, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1775.32996, -1114.57996, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1771.84998, -1114.57996, 22.99000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(2835, 1765.06995, -1105.68994, 23.08000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2836, 1757.30005, -1104.31995, 23.08000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1807.62122, -1099.60059, 24.81000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19415, 1807.62122, -1105.47998, 24.81000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1807.62122, -1111.21997, 24.81000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1807.62122, -1105.76001, 24.68000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19461, 1807.62122, -1101.58997, 28.30000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1807.62122, -1111.19995, 28.30000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1795.09143, -1094.87000, 28.32000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1760.23999, -1094.87000, 28.33000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19415, 1803.93176, -1094.87000, 24.82000,   0.00000, 0.00000, -90.12000);
    CreateDynamicObject(19461, 1798.12207, -1094.87000, 24.83000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1801.95825, -1094.87000, 28.32000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(1649, 1803.07300, -1094.87000, 24.68000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1803.07300, -1094.87000, 24.68000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1807.62122, -1105.76001, 24.68000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(19397, 1790.56006, -1105.46411, 24.81000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19379, 1795.51477, -1104.55017, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1795.51477, -1099.67505, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1802.34436, -1104.48071, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1802.39673, -1099.67505, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(1502, 1790.53430, -1106.21399, 23.06000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19369, 1792.19299, -1103.87488, 22.50000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1796, 1794.13123, -1103.24817, 23.07000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1796, 1794.13123, -1099.53174, 23.07000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2087, 1790.83545, -1101.83203, 23.07000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2087, 1790.83545, -1098.07202, 23.07000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1796, 1794.13123, -1095.70630, 23.07000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19461, 1790.56006, -1108.24719, 28.30000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1797.53296, -1103.87488, 22.50000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19369, 1799.13416, -1102.34753, 22.76000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1800.73315, -1103.87488, 22.50000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19369, 1805.95313, -1103.87488, 22.50000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19369, 1799.13416, -1099.17432, 22.76000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1799.13416, -1096.54956, 22.76000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1796, 1802.69116, -1103.24817, 23.07000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1796, 1802.69116, -1099.53174, 23.07000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1796, 1802.69116, -1095.70630, 23.07000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2087, 1799.39539, -1101.83203, 23.07000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2087, 1799.39539, -1098.07202, 23.07000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1796, 1795.57117, -1103.02820, 23.07000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1796, 1795.57117, -1099.31165, 23.07000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1796, 1795.57190, -1095.48389, 23.07000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2087, 1798.87354, -1100.77197, 23.07000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2087, 1798.87756, -1097.01599, 23.07000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1796, 1804.05115, -1103.02820, 23.07000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1796, 1804.05115, -1099.31165, 23.07000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2087, 1807.37354, -1100.77197, 23.07000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(18075, 1798.90942, -1101.48120, 29.08000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3578, 1721.18005, -1135.05005, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19415, 1791.93530, -1094.87000, 24.82000,   0.00000, 0.00000, -90.12000);
    CreateDynamicObject(1649, 1792.76953, -1094.87000, 24.68000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1792.76953, -1094.87000, 24.68000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1498, 1703.01855, -1099.90955, 23.05900,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1498, 1702.99060, -1096.89185, 23.05900,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1498, 1750.65540, -1094.84595, 23.04510,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1498, 1753.67786, -1094.81897, 23.04510,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2200, 1775.28821, -1115.87366, 23.07780,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2200, 1777.51404, -1115.87366, 23.07780,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2200, 1779.73682, -1115.87366, 23.07780,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2200, 1781.96082, -1115.87366, 23.07780,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2200, 1781.25183, -1112.36035, 23.07780,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2200, 1779.02954, -1112.36035, 23.07780,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2200, 1776.80957, -1112.36035, 23.07780,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2200, 1782.51294, -1112.05347, 23.07780,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2200, 1780.28796, -1112.05347, 23.07780,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2200, 1778.07104, -1112.05347, 23.07780,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2200, 1773.64246, -1113.97485, 23.07780,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2200, 1773.64246, -1111.74939, 23.07780,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1208, 1777.53979, -1108.78809, 23.08890,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1208, 1776.83984, -1108.78809, 23.08890,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1208, 1776.13977, -1108.78809, 23.08890,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1208, 1775.41980, -1108.78809, 23.08890,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1208, 1774.71985, -1108.78809, 23.08890,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(19331, 1781.52966, -1115.71790, 25.07000,   0.00000, 265.00000, -4.00000);
    CreateDynamicObject(19331, 1781.00073, -1115.69910, 25.07000,   0.00000, 265.00000, -33.00000);
    CreateDynamicObject(19331, 1780.49707, -1115.77954, 25.07000,   0.00000, 265.00000, -4.00000);
    CreateDynamicObject(19331, 1779.88684, -1115.64880, 25.07000,   0.00000, 265.00000, -40.00000);
    CreateDynamicObject(19331, 1779.37720, -1115.62659, 25.07000,   0.00000, 265.00000, 40.00000);
    CreateDynamicObject(19331, 1778.76819, -1115.71338, 25.07000,   0.00000, 265.00000, -6.00000);
    CreateDynamicObject(19331, 1778.26331, -1115.70239, 25.07000,   0.00000, 265.00000, 4.00000);
    CreateDynamicObject(19331, 1777.65649, -1115.68921, 25.07000,   0.00000, 265.00000, -25.00000);
    CreateDynamicObject(19331, 1777.14661, -1115.70398, 25.07000,   0.00000, 265.00000, 47.00000);
    CreateDynamicObject(19331, 1776.52551, -1115.72192, 25.07000,   0.00000, 265.00000, -11.00000);
    CreateDynamicObject(19331, 1776.01550, -1115.72620, 25.07000,   0.00000, 265.00000, 4.00000);
    CreateDynamicObject(19331, 1775.50549, -1115.73047, 25.07000,   0.00000, 265.00000, -55.00000);
    CreateDynamicObject(19331, 1774.97852, -1115.63733, 25.07000,   0.00000, 265.00000, -25.00000);
    CreateDynamicObject(19331, 1774.36487, -1115.74731, 25.07000,   0.00000, 265.00000, -55.00000);
    CreateDynamicObject(19330, 1773.77942, -1113.69958, 25.07000,   -4.00000, -91.00000, -113.00000);
    CreateDynamicObject(19330, 1773.85120, -1113.08044, 25.07000,   -4.00000, -91.00000, -55.00000);
    CreateDynamicObject(19330, 1773.80261, -1112.64807, 25.07000,   -4.00000, -91.00000, -85.00000);
    CreateDynamicObject(19330, 1773.81299, -1111.98816, 25.07000,   -4.00000, -91.00000, -53.00000);
    CreateDynamicObject(19330, 1773.81091, -1111.32727, 25.07000,   -4.00000, -91.00000, -127.00000);
    CreateDynamicObject(19330, 1773.87378, -1110.18103, 25.07000,   -4.00000, -91.00000, -62.00000);
    CreateDynamicObject(19330, 1773.91455, -1110.68677, 25.07000,   -4.00000, -91.00000, -125.00000);
    CreateDynamicObject(19331, 1773.86304, -1115.73877, 25.07000,   0.00000, 265.00000, 11.00000);
    CreateDynamicObject(19330, 1782.68787, -1111.86804, 25.07000,   -4.00000, -91.00000, 10.00000);
    CreateDynamicObject(19330, 1782.23010, -1111.83459, 25.07000,   -4.00000, -91.00000, 18.00000);
    CreateDynamicObject(19330, 1781.61719, -1111.82056, 25.07000,   -4.00000, -91.00000, -40.00000);
    CreateDynamicObject(19330, 1781.08679, -1111.93933, 25.07000,   -4.00000, -91.00000, -16.00000);
    CreateDynamicObject(19330, 1780.49768, -1111.90503, 25.07000,   -4.00000, -91.00000, 25.00000);
    CreateDynamicObject(19330, 1779.99109, -1111.83813, 25.07000,   -4.00000, -91.00000, -40.00000);
    CreateDynamicObject(19330, 1779.38184, -1111.77942, 25.07000,   -4.00000, -91.00000, 47.00000);
    CreateDynamicObject(19330, 1778.78003, -1111.78455, 25.07000,   -4.00000, -91.00000, -40.00000);
    CreateDynamicObject(19330, 1778.15027, -1111.89075, 25.07000,   -4.00000, -91.00000, -12.00000);
    CreateDynamicObject(19330, 1777.64539, -1111.88013, 25.07000,   -4.00000, -91.00000, -25.00000);
    CreateDynamicObject(19330, 1777.14551, -1111.87158, 25.07000,   -4.00000, -91.00000, 9.00000);
    CreateDynamicObject(19330, 1776.63965, -1111.85986, 25.07000,   -4.00000, -91.00000, 47.00000);
    CreateDynamicObject(19330, 1776.53137, -1112.47644, 25.07000,   -4.00000, -91.00000, 178.00000);
    CreateDynamicObject(19330, 1777.14514, -1112.58252, 25.07000,   -4.00000, -91.00000, 149.00000);
    CreateDynamicObject(19330, 1777.56812, -1112.50891, 25.07000,   -4.00000, -91.00000, -178.00000);
    CreateDynamicObject(19330, 1778.16846, -1112.60168, 25.07000,   -4.00000, -91.00000, -193.00000);
    CreateDynamicObject(19369, 1783.08862, -1113.25757, 24.81000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19397, 1783.08862, -1110.05676, 24.81000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1783.08862, -1116.44299, 24.81000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1783.08862, -1116.44495, 28.31000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1783.08862, -1113.25757, 28.31000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1783.08862, -1110.05676, 28.31000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1502, 1783.10864, -1110.81006, 23.04000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19461, 1786.61902, -1119.57288, 24.83000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1777.52209, -1119.56335, 24.83000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1777.52209, -1119.56335, 28.31000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1786.61902, -1119.57288, 28.31000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19369, 1786.79395, -1111.62354, 24.81000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2527, 1784.63379, -1113.18726, 23.08350,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2527, 1785.65552, -1113.18616, 23.08350,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2527, 1786.68213, -1113.18616, 23.08350,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2523, 1788.06995, -1108.98718, 23.10110,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2523, 1787.06995, -1108.98718, 23.10110,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2523, 1786.06995, -1108.98718, 23.10110,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2523, 1785.06995, -1108.98718, 23.10110,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2523, 1789.06995, -1108.98718, 23.10110,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1784.76855, -1115.98303, 24.07000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1502, 1783.15796, -1114.48438, 23.04000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1502, 1784.83777, -1114.48438, 23.04000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1786.44861, -1115.98303, 24.07000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1502, 1786.51782, -1114.48438, 23.04000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1788.10864, -1115.98303, 24.07000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1791.33118, -1114.46082, 24.83000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19369, 1791.33118, -1114.46082, 28.31000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2525, 1787.29626, -1116.51965, 23.09340,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2525, 1785.65625, -1116.51965, 23.09340,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2525, 1783.95630, -1116.51965, 23.09340,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2523, 1784.06995, -1108.98718, 23.10110,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1784.75403, -1111.62354, 24.81000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2527, 1783.61401, -1113.18726, 23.08350,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2527, 1787.70215, -1113.18616, 23.08350,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1502, 1788.17786, -1114.48438, 23.04000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1789.80859, -1115.98303, 24.83000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1789.80859, -1115.98303, 28.31000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2525, 1788.95630, -1116.51965, 23.09340,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(19330, 1778.75940, -1112.54224, 25.07000,   -4.00000, -91.00000, -156.00000);
    CreateDynamicObject(19330, 1779.34583, -1112.48743, 25.07000,   -4.00000, -91.00000, -193.00000);
    CreateDynamicObject(19330, 1779.88721, -1112.52405, 25.07000,   -4.00000, -91.00000, -178.00000);
    CreateDynamicObject(19330, 1780.56470, -1112.51501, 25.07000,   -4.00000, -91.00000, -229.00000);
    CreateDynamicObject(19330, 1781.07898, -1112.59021, 25.07000,   -4.00000, -91.00000, -120.00000);
    CreateDynamicObject(19330, 1781.59680, -1112.56604, 25.07000,   -4.00000, -91.00000, -185.00000);
    CreateDynamicObject(19330, 1782.11133, -1112.54016, 25.07000,   -4.00000, -91.00000, -135.00000);
    CreateDynamicObject(19330, 1782.72241, -1112.61157, 25.07000,   -4.00000, -91.00000, -200.00000);

	// Hospital
	CreateDynamicObject(19377, 1157.29980, -1308.36670, 20.06240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1157.54773, -1315.97327, 20.06240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1157.70825, -1315.02148, 16.82640,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1167.73950, -1297.10168, 13.33970,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1158.10486, -1297.08179, 13.33970,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19404, 1161.18738, -1292.06238, 15.08640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1167.59949, -1292.07043, 15.08640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1158.01245, -1292.06238, 15.08640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1154.87854, -1292.06238, 15.08640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1174.43445, -1297.08179, 13.33920,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19450, 1174.24573, -1292.06238, 15.08640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1158.10486, -1307.58105, 13.33970,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19450, 1174.24573, -1297.17627, 15.08640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19404, 1179.03198, -1293.66663, 15.08640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1179.03198, -1296.84521, 15.08640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, 1179.03198, -1300.05176, 15.08640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 1179.03198, -1302.45190, 15.08640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1174.16431, -1302.05933, 15.08640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1167.31860, -1302.05933, 15.08640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1153.54407, -1296.82104, 15.08640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1153.54407, -1306.43359, 15.08640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1158.32813, -1312.66370, 15.08640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 1169.47827, -1300.40271, 15.08640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1169.47827, -1297.21277, 15.08640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1169.47827, -1293.72864, 15.08640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1169.47803, -1296.65320, 15.08640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1153.52417, -1316.03308, 15.08640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1162.58655, -1306.92920, 15.08640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1162.58655, -1316.49097, 15.08640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1154.37671, -1302.40210, 13.68520,   180.00000, 90.00000, 90.00000);
	CreateDynamicObject(19370, 1154.38049, -1304.07031, 12.02340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 1154.38049, -1303.54834, 12.37140,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 1154.38049, -1303.02625, 12.71940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 1154.38049, -1302.50415, 13.06740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 1154.38049, -1301.98218, 13.41540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 1154.38049, -1301.46021, 13.76340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 1154.38049, -1300.93823, 14.11140,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 1154.38049, -1300.41626, 14.45940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 1154.38049, -1299.89429, 14.80740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 1154.38049, -1299.37231, 15.15540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1153.54407, -1296.82104, 18.51040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1153.38147, -1306.00415, 18.51040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1158.28809, -1320.82874, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1162.58655, -1306.92920, 18.51040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1162.58655, -1316.49097, 18.51040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1167.31860, -1302.06128, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1174.16431, -1302.05933, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19404, 1179.03198, -1300.05176, 18.51040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 1179.03198, -1302.45190, 18.51040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, 1179.03198, -1293.66663, 18.51040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, 1161.18738, -1292.06238, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1154.87854, -1292.06238, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1167.73950, -1297.10168, 16.81840,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1174.43445, -1297.08179, 16.82600,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19370, 1154.37671, -1301.88013, 14.03320,   180.00000, 90.00000, 90.00000);
	CreateDynamicObject(19370, 1154.37671, -1301.35815, 14.38120,   180.00000, 90.00000, 90.00000);
	CreateDynamicObject(19370, 1154.37671, -1300.83618, 14.72920,   180.00000, 90.00000, 90.00000);
	CreateDynamicObject(19370, 1154.37671, -1300.31421, 15.07720,   180.00000, 90.00000, 90.00000);
	CreateDynamicObject(19370, 1154.37671, -1299.79224, 15.42520,   180.00000, 90.00000, 90.00000);
	CreateDynamicObject(19370, 1154.37671, -1299.27014, 15.77320,   180.00000, 90.00000, 90.00000);
	CreateDynamicObject(19370, 1154.37671, -1298.74805, 16.12120,   180.00000, 90.00000, 90.00000);
	CreateDynamicObject(19370, 1154.37671, -1298.22595, 16.46920,   180.00000, 90.00000, 90.00000);
	CreateDynamicObject(19370, 1154.37671, -1297.70398, 16.81720,   180.00000, 90.00000, 90.00000);
	CreateDynamicObject(19370, 1154.37988, -1296.04028, 15.15520,   180.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, 1155.91638, -1297.57983, 15.15520,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1155.90845, -1297.85181, 15.15520,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1155.92444, -1298.37378, 14.80620,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1155.91638, -1298.89380, 14.45420,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1155.90845, -1299.41174, 14.10820,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1155.93237, -1299.93567, 13.76020,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1155.92444, -1300.45959, 13.41620,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1155.92981, -1300.97986, 13.06420,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1155.93774, -1301.49988, 12.71520,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1155.92969, -1302.02393, 12.37120,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, 1155.90820, -1302.54871, 12.02320,   180.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1158.10486, -1309.17114, 16.82640,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1160.79565, -1297.10168, 16.82640,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19370, 1154.37671, -1294.21375, 16.81720,   180.00000, 90.00000, 90.00000);
	CreateDynamicObject(19370, 1154.37671, -1293.73767, 16.80920,   180.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1160.79565, -1307.59387, 16.81840,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19404, 1179.03198, -1296.86084, 18.51040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1167.73950, -1296.94165, 16.81040,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1173.81311, -1296.94104, 16.80240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1161.22424, -1296.94165, 16.80840,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1161.22424, -1306.57410, 16.81040,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1157.27283, -1308.72925, 16.80740,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 1154.37671, -1293.73767, 16.80520,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19362, 1154.37671, -1294.23169, 16.79720,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1533, 1162.45898, -1309.19360, 13.35200,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1533, 1162.45898, -1307.70959, 13.35200,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3657, 1163.96899, -1297.08337, 13.90240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3657, 1162.37598, -1297.08337, 13.90240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3657, 1165.44397, -1297.08337, 13.90240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3657, 1160.95996, -1297.08337, 13.90240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2596, 1169.09680, -1296.96350, 15.96280,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1523, 1169.49731, -1301.16138, 13.42160,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1173.81311, -1297.25696, 16.80040,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1167.73950, -1297.20569, 16.80240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1523, 1169.47595, -1292.93298, 13.42160,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2185, 1156.59839, -1312.54639, 13.42390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2185, 1156.58716, -1310.69226, 13.42190,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2185, 1156.91064, -1308.38184, 13.42190,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11711, 1162.54236, -1309.19238, 16.10790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2007, 1154.14001, -1312.03357, 13.43400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2007, 1154.14746, -1311.02148, 13.43400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2011, 1154.03760, -1310.10669, 13.42575,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 1155.06555, -1311.50281, 13.42620,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1155.22119, -1309.77979, 13.42620,   0.00000, 0.00000, 110.00000);
	CreateDynamicObject(2614, 1153.67200, -1311.38416, 15.72270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1997, 1161.32507, -1311.67407, 13.42410,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1997, 1158.91479, -1311.66785, 13.42410,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19325, 1160.27991, -1292.05139, 15.14180,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1168.70679, -1292.02466, 18.10280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1179.04272, -1294.42566, 18.10280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1162.29492, -1322.84851, 16.82640,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19450, 1157.88452, -1315.59595, 18.51040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1156.35999, -1310.73743, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 1159.50037, -1310.73743, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 1152.52478, -1310.72229, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 1161.79102, -1310.73743, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19404, 1158.02100, -1292.02454, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1157.27283, -1299.08521, 20.06240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1157.27283, -1296.85925, 20.07040,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1167.76685, -1296.85925, 20.06240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1173.80676, -1296.85925, 20.06040,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1167.76685, -1297.34631, 20.06640,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1173.80676, -1297.34631, 20.05640,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(970, 1156.01160, -1301.82471, 17.43200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1153.92676, -1303.93945, 17.43200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 1154.89807, -1304.90344, 16.91280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, 1154.90930, -1306.65833, 16.91280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1160.58667, -1303.32031, 13.92790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1160.58777, -1305.23352, 13.92590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(932, 1161.79285, -1306.05249, 13.42620,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(932, 1161.81006, -1305.17773, 13.42620,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(932, 1161.80383, -1304.28735, 13.42620,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(932, 1161.77185, -1303.34998, 13.42620,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(932, 1161.72717, -1302.49194, 13.42620,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1808, 1163.63477, -1301.79077, 13.42560,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19866, 1169.42151, -1297.05981, 13.39050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 1169.42224, -1297.06116, 14.13450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 1169.43433, -1297.06323, 14.87250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, 1164.36804, -1301.69482, 13.42666,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1886, 1154.35596, -1312.09827, 16.71360,   20.00000, 0.00000, 120.00000);
	CreateDynamicObject(1886, 1154.46606, -1292.94788, 16.71360,   20.00000, 0.00000, 45.00000);
	CreateDynamicObject(1886, 1168.30664, -1292.80164, 16.71360,   20.00000, 0.00000, 310.00000);
	CreateDynamicObject(2606, 1153.67847, -1305.69946, 19.80290,   15.00000, 0.00000, 90.00000);
	CreateDynamicObject(2167, 1153.65295, -1307.35278, 16.84200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2167, 1153.65295, -1306.41675, 16.84200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2167, 1153.65295, -1305.48071, 16.84200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2167, 1153.65295, -1304.54468, 16.84200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1997, 1156.73450, -1300.89294, 16.91270,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1997, 1161.87915, -1299.53394, 16.91270,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1808, 1158.21191, -1310.37158, 16.91260,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2011, 1157.57178, -1310.26160, 16.91279,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1155.57275, -1310.75244, 16.88210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1160.25183, -1310.72241, 16.89510,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19388, 1177.35059, -1298.47961, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1174.25806, -1300.09692, 18.51040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 1174.99719, -1298.48584, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1174.26111, -1300.61951, 18.51040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1177.51880, -1295.28638, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 1175.14990, -1295.28638, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1174.44897, -1293.68384, 18.51040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1172.61475, -1298.47961, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 1172.79944, -1295.28638, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 1170.20984, -1298.47961, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19431, 1170.41113, -1295.28638, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1169.66382, -1293.68384, 18.51040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1168.00635, -1295.28638, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1169.44775, -1300.12085, 18.51040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1169.49109, -1300.67285, 18.51040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1167.83032, -1298.47961, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1164.61243, -1298.47961, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1162.58655, -1300.50867, 18.51040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1164.10242, -1298.49463, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1162.60144, -1300.01367, 18.51040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1164.79968, -1295.28638, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1163.27075, -1293.76721, 18.51040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1179.06250, -1301.93445, 18.10280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, 1167.86194, -1292.06238, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1164.67529, -1292.06238, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1164.06335, -1292.06445, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19404, 1171.04895, -1292.06238, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1174.26245, -1292.06238, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1177.46216, -1292.06238, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2008, 1156.16443, -1304.38818, 16.91270,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2008, 1156.16235, -1306.34045, 16.91070,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1997, 1161.82910, -1301.86926, 16.91270,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1997, 1161.83765, -1304.19714, 16.91270,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19450, 1157.88452, -1325.24512, 18.51040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2184, 1161.31738, -1317.06726, 16.91190,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 1159.31165, -1320.72754, 16.91180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, 1161.04358, -1320.72754, 16.91180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1808, 1162.11011, -1320.19910, 16.91200,   0.00000, 0.00000, 225.00000);
	CreateDynamicObject(2190, 1159.28564, -1316.86414, 17.68570,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1714, 1160.26135, -1319.17004, 16.91390,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1964, 1160.18469, -1317.33740, 17.79240,   0.00000, 0.00000, 160.00000);
	CreateDynamicObject(2011, 1158.40869, -1311.37817, 16.91273,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2606, 1160.04236, -1320.77136, 19.58120,   20.00000, 0.00000, 180.00000);
	CreateDynamicObject(2610, 1162.26892, -1311.15491, 17.70750,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2610, 1162.26892, -1311.60669, 17.70750,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2610, 1162.26892, -1312.08374, 17.70750,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2610, 1162.26892, -1312.56067, 17.70750,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2596, 1160.90710, -1311.14624, 19.53400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1162.53345, -1293.03723, 17.63980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1154.32800, -1292.81885, 17.63980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, 1162.04260, -1310.08704, 16.91279,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, 1156.15857, -1309.13354, 16.91279,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2171, 1174.01733, -1301.35840, 13.49800,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2186, 1162.09009, -1313.31445, 16.91300,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2146, 1176.78821, -1298.00586, 13.91710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1174.55371, -1297.12122, 15.08640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2994, 1178.48816, -1300.29358, 13.92790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2146, 1171.20215, -1297.91064, 13.91710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2994, 1174.00037, -1297.94653, 13.92790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2171, 1175.42871, -1301.33154, 13.49800,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2146, 1171.15833, -1296.42383, 13.91710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2994, 1173.99341, -1296.21643, 13.92790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2171, 1174.83630, -1292.79529, 13.49800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2171, 1173.43848, -1292.82788, 13.49800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2994, 1178.27856, -1296.21716, 13.92790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2146, 1176.13293, -1296.52417, 13.91710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2603, 1163.89429, -1294.03625, 17.29070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2596, 1169.26270, -1292.73926, 19.46280,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2011, 1169.04053, -1294.74829, 16.90460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, 1173.86206, -1294.78735, 16.90460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2596, 1174.04065, -1292.93958, 19.46280,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2603, 1170.45374, -1293.69812, 17.29070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2596, 1178.64856, -1292.60828, 19.46280,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2011, 1178.64917, -1294.88831, 16.90460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 1175.14917, -1293.61499, 17.29070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 1174.98584, -1300.76196, 17.29070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, 1178.43213, -1298.99780, 16.90460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2596, 1178.65076, -1298.90186, 19.46280,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2603, 1170.16028, -1300.58948, 17.29070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, 1173.72058, -1301.58264, 16.90460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19305, 1173.70740, -1298.54749, 18.36970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 1163.31384, -1300.75098, 17.29070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2011, 1168.81921, -1301.44739, 16.90460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2596, 1169.03857, -1299.17480, 19.46280,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1523, 1171.83728, -1298.52600, 16.90550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1167.21204, -1295.32910, 16.90550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1172.01550, -1295.32495, 16.90550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1176.71826, -1295.32117, 16.90550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1176.55249, -1298.50220, 16.90550,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19431, 1154.25659, -1310.73743, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1154.93494, -1309.56470, 16.82640,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19325, 1160.27991, -1292.05139, 18.10280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1154.95007, -1319.82568, 16.82640,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19431, 1150.90857, -1310.72046, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19404, 1150.08521, -1318.83691, 18.50518,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 1150.09070, -1321.81604, 18.50790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, 1150.11926, -1312.42053, 18.50518,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1150.10791, -1314.68372, 18.06471,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1150.07300, -1316.46680, 18.06471,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1154.94507, -1320.84265, 18.51040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, 1150.10486, -1315.63037, 18.50790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1155.48425, -1315.61255, 20.06240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1155.33521, -1315.99707, 20.06240,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2357, 1153.85291, -1314.99329, 17.21640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1151.07410, -1316.82800, 17.34500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2357, 1152.82349, -1314.99963, 17.21740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1153.46375, -1318.01660, 17.34500,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1671, 1151.05090, -1315.46729, 17.34500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1151.06421, -1314.13281, 17.34500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1671, 1155.50879, -1314.51599, 17.34500,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1671, 1155.54761, -1315.68079, 17.34500,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1671, 1155.56311, -1316.85876, 17.34500,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1671, 1155.51001, -1313.23303, 17.34500,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1671, 1151.06470, -1313.00110, 17.34500,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 1167.04102, -1298.56299, 16.90550,   0.00000, 0.00000, 0.00000);

    // Bank interior
    CreateDynamicObject(14602, 1443.33521, -985.86328, 1000.47083, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1420.34436, -987.59058, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1420.34436, -997.22662, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1420.34436, -977.94659, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1420.34436, -968.31262, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1425.39563, -997.23810, 998.69531, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1425.52917, -996.80780, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1425.39563, -987.59912, 998.69928, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1425.39563, -977.97009, 998.69531, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1425.39563, -968.33612, 998.69531, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19450, 1425.15210, -1001.58301, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1444.42175, -992.99921, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1425.24097, -1001.64844, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1435.60022, -997.79559, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1430.77246, -1001.59528, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(1569, 1432.61536, -1001.55011, 995.10773, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1438.83838, -993.01642, 996.85449, 0.00000, 0.00000, 90.90000);
	CreateDynamicObject(19431, 1436.57031, -993.03369, 996.85193, 0.00000, 0.00000, 89.95040);
	CreateDynamicObject(19431, 1436.32031, -993.03369, 996.85388, 0.00000, 0.00000, 89.95040);
	CreateDynamicObject(19450, 1425.15210, -970.08197, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1427.71814, -970.08197, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1439.00610, -970.08197, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1448.52612, -970.08197, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19388, 1433.38245, -970.08441, 996.86249, 0.00000, 0.00000, 89.78290);
	CreateDynamicObject(19450, 1444.40637, -976.56262, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1444.40637, -966.93060, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1444.40637, -994.98560, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1435.89355, -997.23810, 998.69531, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1435.89355, -987.59912, 998.70532, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1435.89355, -977.97009, 998.70532, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1435.89355, -968.33612, 998.69531, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1446.39160, -968.33612, 998.69531, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1446.39160, -977.97009, 998.69733, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1446.39160, -987.59912, 998.69733, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19450, 1444.40637, -986.19659, 1000.16260, -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 1457.74744, -985.02881, 995.10431, 0.00000, 0.00000, -90.06000);
	CreateDynamicObject(19377, 1446.35864, -997.23810, 998.69531, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -988.71008, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -990.89410, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -993.07813, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -995.26208, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -997.44611, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -999.63013, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -983.33411, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -981.15009, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -978.96613, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -976.78210, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -974.59808, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -972.41412, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1424.51428, -991.97479, 999.00391, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1424.51428, -998.45477, 999.00391, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1424.51428, -980.05078, 999.00391, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1424.51428, -973.42279, 999.00391, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2190, 1426.35876, -983.58972, 995.82874, 0.00000, 0.00000, -39.84000);
	CreateDynamicObject(2190, 1427.57007, -986.54395, 995.82874, 0.00000, 0.00000, -102.06001);
	CreateDynamicObject(2190, 1425.72351, -988.86444, 995.82874, 0.00000, 0.00000, -154.73996);
	CreateDynamicObject(1715, 1425.98022, -986.25348, 995.10559, 0.00000, 0.00000, 81.60000);
	CreateDynamicObject(1715, 1425.09607, -984.83795, 995.10559, 0.00000, 0.00000, 148.67998);
	CreateDynamicObject(1715, 1424.76306, -987.25067, 995.10559, 0.00000, 0.00000, 29.09999);
	CreateDynamicObject(2244, 1427.16125, -984.70050, 996.06403, 0.00000, 0.00000, 27.72000);
	CreateDynamicObject(2244, 1426.93335, -987.59070, 996.06403, 0.00000, 0.00000, -24.42000);
	CreateDynamicObject(2165, 1420.89612, -986.00458, 995.10638, 0.00000, 0.00000, 89.57999);
	CreateDynamicObject(1715, 1422.16272, -985.46423, 995.10559, 0.00000, 0.00000, -105.06001);
	CreateDynamicObject(2164, 1420.47449, -980.71246, 995.10602, 0.00000, 0.00000, 87.65998);
	CreateDynamicObject(2773, 1426.07617, -993.09894, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07690, -990.98590, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07617, -995.23187, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07617, -997.52289, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07617, -999.65588, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07690, -981.18988, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07690, -979.05688, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07690, -976.84491, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07690, -974.63287, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07690, -972.42090, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateDynamicObject(1514, 1424.18726, -992.59534, 996.20605, 0.00000, 0.00000, 89.58002);
	CreateDynamicObject(1514, 1424.18726, -994.72827, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -996.94031, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -999.23132, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -980.66632, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -978.53333, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -976.32129, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -974.18829, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -971.97632, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -1001.12732, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateDynamicObject(2599, 1426.01086, -1000.61847, 995.50098, 0.00000, 0.00000, -90.78001);
	CreateDynamicObject(2599, 1425.84473, -973.51959, 995.50061, 0.00000, 0.00000, -89.88000);
	CreateDynamicObject(2007, 1420.94165, -999.54968, 995.10248, 0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -998.60168, 995.10248, 0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -997.65369, 995.10248, 0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -996.70569, 995.10248, 0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -995.75769, 995.10248, 0.00000, 0.00000, 89.76000);
	CreateDynamicObject(1806, 1422.44788, -971.87213, 995.10742, 0.00000, 0.00000, -78.18002);
	CreateDynamicObject(1806, 1422.44788, -973.37311, 995.10742, 0.00000, 0.00000, -86.22002);
	CreateDynamicObject(1806, 1422.44788, -975.50610, 995.10742, 0.00000, 0.00000, -94.20003);
	CreateDynamicObject(1806, 1422.44788, -977.63910, 995.10742, 0.00000, 0.00000, -93.60002);
	CreateDynamicObject(1806, 1422.44788, -979.93011, 995.10742, 0.00000, 0.00000, -83.64001);
	CreateDynamicObject(1806, 1422.44788, -991.78009, 995.10742, 0.00000, 0.00000, -87.24001);
	CreateDynamicObject(1806, 1422.44788, -993.75513, 995.10742, 0.00000, 0.00000, -101.16003);
	CreateDynamicObject(1806, 1422.44788, -996.04608, 995.10742, 0.00000, 0.00000, -91.26003);
	CreateDynamicObject(1806, 1422.44788, -998.33710, 995.10742, 0.00000, 0.00000, -89.94003);
	CreateDynamicObject(1806, 1422.44788, -1000.23309, 995.10742, 0.00000, 0.00000, -78.18000);
	CreateDynamicObject(19379, 1425.52917, -987.17383, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1425.52917, -977.54077, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1425.52917, -967.90881, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1436.03015, -996.80780, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1436.03015, -987.17383, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1436.03015, -977.53979, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1436.03015, -967.90778, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1446.53076, -987.19177, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1457.03186, -987.19177, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1457.03186, -977.55780, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1446.53186, -977.55780, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1446.53186, -967.92480, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1446.53223, -996.81183, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19450, 1449.15112, -981.53003, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1458.76709, -981.53003, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1449.15210, -990.17499, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1458.78308, -990.17499, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19377, 1449.57959, -985.77112, 998.29529, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1459.64563, -985.73309, 998.27332, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19450, 1457.40637, -985.67657, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 1457.37061, -982.48169, 995.10571, 0.00000, 0.00000, 269.37631);
	CreateDynamicObject(1569, 1457.37549, -985.46259, 995.10571, 0.00000, 0.00000, 89.99800);
	CreateDynamicObject(1569, 1457.36865, -986.57483, 995.10571, 0.00000, 0.00000, 269.37631);
	CreateDynamicObject(1569, 1457.37585, -989.57758, 995.10571, 0.00000, 0.00000, 89.99800);
	CreateDynamicObject(19431, 1440.70752, -982.46478, 996.86212, 0.00000, 0.00000, -91.56000);
	CreateDynamicObject(19431, 1440.70752, -981.04077, 996.86212, 0.00000, 0.00000, -91.14001);
	CreateDynamicObject(19431, 1439.91956, -981.72931, 996.86212, 0.00000, 0.00000, -183.05991);
	CreateDynamicObject(19431, 1441.44763, -981.76929, 996.86212, 0.00000, 0.00000, -181.92000);
	CreateDynamicObject(19431, 1441.44763, -989.43732, 996.86212, 0.00000, 0.00000, -181.92000);
	CreateDynamicObject(19431, 1440.70752, -988.71283, 996.86212, 0.00000, 0.00000, -91.56000);
	CreateDynamicObject(19431, 1440.70752, -990.13281, 996.86212, 0.00000, 0.00000, -91.56000);
	CreateDynamicObject(19431, 1439.88562, -989.40332, 996.86212, 0.00000, 0.00000, -181.92000);
	CreateDynamicObject(19431, 1431.84351, -988.67279, 996.86212, 0.00000, 0.00000, -91.56000);
	CreateDynamicObject(19431, 1431.10046, -989.40332, 996.86212, 0.00000, 0.00000, -181.92000);
	CreateDynamicObject(19431, 1431.84351, -990.13580, 996.86212, 0.00000, 0.00000, -91.56000);
	CreateDynamicObject(19431, 1432.58154, -989.40332, 996.86212, 0.00000, 0.00000, -181.92000);
	CreateDynamicObject(19431, 1432.58154, -982.06531, 996.86212, 0.00000, 0.00000, -181.92000);
	CreateDynamicObject(19431, 1431.02148, -982.01929, 996.86212, 0.00000, 0.00000, -181.92000);
	CreateDynamicObject(19431, 1431.84351, -982.75677, 996.86212, 0.00000, 0.00000, -91.56000);
	CreateDynamicObject(19431, 1431.84351, -981.32483, 996.86212, 0.00000, 0.00000, -91.56000);
	CreateDynamicObject(1569, 1432.61133, -970.15210, 995.10773, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14576, 1435.29407, -987.92871, 990.71588, 0.00000, 0.00000, -0.36000);
	CreateDynamicObject(19379, 1436.03015, -1001.03583, 995.02307, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19388, 1438.86841, -1002.63641, 996.85449, 0.00000, 0.00000, 90.90000);
	CreateDynamicObject(19450, 1440.54065, -997.84619, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1437.23877, -997.84979, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1440.83362, -1004.66913, 998.26831, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(2634, 1441.06909, -1004.53168, 992.32001, 0.00000, 0.00000, 270.07040);
	CreateDynamicObject(2198, 1433.27332, -996.86798, 989.92047, 0.00000, 0.00000, 178.63960);
	CreateDynamicObject(2198, 1433.27332, -994.02600, 989.92047, 0.00000, 0.00000, 178.63960);
	CreateDynamicObject(2198, 1433.27332, -990.89001, 989.92047, 0.00000, 0.00000, 178.63960);
	CreateDynamicObject(2198, 1433.27332, -1000.00403, 989.92047, 0.00000, 0.00000, 178.63960);
	CreateDynamicObject(1806, 1432.72278, -998.97363, 989.91901, 0.00000, 0.00000, -167.28003);
	CreateDynamicObject(1806, 1432.60571, -995.73785, 989.91901, 0.00000, 0.00000, 175.12816);
	CreateDynamicObject(1806, 1432.60571, -992.79791, 989.91901, 0.00000, 0.00000, 194.12750);
	CreateDynamicObject(1806, 1432.60571, -989.75989, 989.91901, 0.00000, 0.00000, 186.49478);
	CreateDynamicObject(16782, 1443.08545, -993.57495, 992.76324, 0.00000, 0.00000, 179.01819);
	CreateDynamicObject(3397, 1442.95642, -993.62469, 989.94727, 0.00000, 0.00000, 357.18283);
	CreateDynamicObject(3386, 1442.72241, -996.43250, 989.89600, 0.00000, 0.00000, 176.06250);
	CreateDynamicObject(3386, 1442.72241, -997.60852, 989.91400, 0.00000, 0.00000, 176.06250);
	CreateDynamicObject(3386, 1442.87439, -990.38049, 989.91400, 0.00000, 0.00000, 356.84091);
	CreateDynamicObject(3386, 1442.87439, -989.24652, 989.91400, 0.00000, 0.00000, 356.84091);
	CreateDynamicObject(18643, 1427.60217, -995.31152, 984.01813, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1418.20618, -995.31152, 984.01813, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1418.20618, -990.12750, 984.01813, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1427.60217, -990.12750, 984.01813, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1427.60217, -984.45752, 984.45007, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1418.04419, -984.45752, 984.45007, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14598, 1431.54688, -985.73328, 1010.65839, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1439.22668, -972.44214, 995.05151, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1442.60986, -973.58191, 995.05151, 0.00000, 0.00000, 269.47330);
	CreateDynamicObject(1723, 1441.65991, -976.88171, 995.05151, 0.00000, 0.00000, 179.19260);
	CreateDynamicObject(1723, 1438.09546, -975.58490, 995.05151, 0.00000, 0.00000, 86.82700);
	CreateDynamicObject(1817, 1439.95251, -975.20856, 995.11218, 0.00000, 0.00000, -0.36000);
	CreateDynamicObject(2011, 1437.90637, -970.72211, 995.11951, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2002, 1439.03247, -970.70801, 995.11951, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1776, 1440.21924, -970.60382, 996.18219, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2816, 1439.91479, -974.76520, 995.62378, 0.00000, 0.00000, -66.18000);
	CreateDynamicObject(2245, 1440.35779, -974.71698, 995.85413, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1549, 1441.38904, -970.58020, 995.07281, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2961, 1436.19360, -992.91449, 996.43372, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 1436.22546, -992.86798, 996.92572, 0.00000, 0.00000, 169.80000);
	CreateDynamicObject(1999, 1435.73157, -1005.59863, 995.12238, 0.00000, 0.00000, 177.89998);
	CreateDynamicObject(1806, 1435.42896, -1003.91840, 995.12079, 0.00000, 0.00000, 146.81998);
	CreateDynamicObject(2606, 1433.61072, -1004.31232, 996.30280, 0.00000, 0.00000, 89.94000);
	CreateDynamicObject(2606, 1433.61072, -1004.31232, 996.73480, 0.00000, 0.00000, 89.94000);
	CreateDynamicObject(2606, 1433.61072, -1004.31232, 997.16681, 0.00000, 0.00000, 89.94000);
	CreateDynamicObject(2894, 1435.51477, -1005.65875, 995.93512, 0.00000, 0.00000, -156.29988);
	CreateDynamicObject(348, 1435.81042, -1005.49841, 995.93518, 91.00000, 0.00000, 38.22002);
	CreateDynamicObject(2839, 1434.89624, -1005.61493, 995.12347, 0.00000, 0.00000, 28.74000);
	CreateDynamicObject(1235, 1436.75586, -1005.67822, 995.63458, 0.00000, 0.00000, 4.14000);
	CreateDynamicObject(2881, 1436.83350, -1005.81738, 995.13568, -2.00000, -69.00000, 28.00000);
	CreateDynamicObject(2881, 1436.72742, -1005.73517, 995.13568, -2.00000, -69.00000, -15.20001);
	CreateDynamicObject(2007, 1420.94165, -995.75769, 996.49847, 0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -996.70569, 996.50250, 0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -997.65369, 996.50250, 0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -998.60168, 996.50250, 0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -999.54968, 996.50250, 0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2942, 1446.68677, -989.58667, 995.71686, 0.00000, 0.00000, 179.99986);
	CreateDynamicObject(2942, 1448.42285, -989.58667, 995.71692, 0.00000, 0.00000, 179.99989);
	CreateDynamicObject(2942, 1450.13086, -989.58667, 995.71692, 0.00000, 0.00000, 179.99989);
	CreateDynamicObject(2690, 1434.28040, -1002.78546, 996.38782, 0.00000, 0.00000, -4.26000);
	CreateDynamicObject(1892, 1456.52942, -986.43781, 995.14093, 0.00000, 0.00000, 86.76000);
	CreateDynamicObject(1892, 1456.52942, -990.61377, 995.14093, 0.00000, 0.00000, 86.76000);
	CreateDynamicObject(1892, 1456.52942, -982.26178, 995.14093, 0.00000, 0.00000, 86.76000);
	CreateDynamicObject(14633, 1426.06604, -979.43066, 996.56683, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1456.85181, -986.05109, 995.10602, 0.00000, 0.00000, 78.96002);
	CreateDynamicObject(3386, 1442.87439, -988.14252, 989.91400, 0.00000, 0.00000, 356.84091);
	CreateDynamicObject(3386, 1442.87439, -987.03851, 989.91400, 0.00000, 0.00000, 356.84091);
	CreateDynamicObject(3386, 1442.72241, -998.80847, 989.91400, 0.00000, 0.00000, 176.06250);
	CreateDynamicObject(3386, 1442.72241, -1000.00848, 989.91400, 0.00000, 0.00000, 176.06250);
	CreateDynamicObject(3391, 1440.51379, -987.03638, 989.89600, 0.00000, 0.00000, 89.76003);
	CreateDynamicObject(3392, 1436.92480, -987.02655, 989.89398, 0.00000, 0.00000, 89.81998);
	CreateDynamicObject(1806, 1441.29553, -993.01025, 989.92133, 0.00000, 0.00000, -119.94001);
	CreateDynamicObject(2634, 1435.35193, -980.29688, 984.21887, 0.00000, 0.00000, 179.04001);
	CreateDynamicObject(1502, 1438.05847, -992.99011, 995.10675, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1499, 1438.53723, -1002.59253, 990.92316, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 1440.72217, -1010.17639, 994.91425, 0.00000, 0.00000, -90.41999);
	CreateDynamicObject(2690, 1433.67712, -1004.35260, 992.91760, 0.00000, 0.00000, 83.58002);
	CreateDynamicObject(2690, 1440.74304, -1010.16492, 991.04169, 0.00000, 0.00000, -88.08002);
	CreateDynamicObject(2690, 1433.68909, -1004.27728, 988.57770, 0.00000, 0.00000, 83.94003);
	CreateDynamicObject(2690, 1433.56665, -1009.76007, 986.42206, 0.00000, 0.00000, 83.70004);
	CreateDynamicObject(18643, 1441.46216, -995.31152, 984.01813, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1441.64221, -990.12750, 984.01813, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1441.54224, -984.45752, 984.45007, 0.00000, 0.00000, 0.00000);
	// Warehouse crates
	CreateDynamicObject(3798, 1260.306274, -25.321689, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1260.306274, -25.321689, 1001.883361, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1258.317016, -25.365781, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1262.315673, -25.277160, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1262.316040, -25.307142, 1001.883483, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1258.397460, -25.393985, 1001.883483, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1260.306274, -25.321689, 1003.853515, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1260.261474, -23.312185, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1262.250976, -23.268102, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1258.312622, -23.355394, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1262.358764, -27.226678, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1260.418823, -27.269641, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1258.428833, -27.313713, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1262.285766, -25.277828, 1003.853515, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1258.396728, -25.364007, 1003.853515, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1260.306274, -25.321689, 1005.823486, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1262.271484, -23.297637, 1001.883483, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1260.281860, -23.341718, 1001.883483, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1258.332275, -23.384920, 1001.883483, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1264.190185, -23.225122, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1256.502685, -23.395494, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1264.233398, -25.184640, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1264.276489, -27.134164, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1256.546875, -25.385005, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1256.591430, -27.384523, 999.883422, 0.000000, 0.000000, -178.730514);

    // Driving test
    for (new i = 0; i < MAX_PLAYERS; i ++) {
	    arrVirtualWorlds[i] = i + 2000;
	}
	CreateDynamicObjectEx(1319, -2058.461425, -65.593460, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2058.981201, -69.791046, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2059.461425, -65.588729, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2059.981201, -69.786315, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2060.461425, -65.583999, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2060.981201, -69.781585, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2061.461425, -65.579269, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2061.981201, -69.776855, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2062.461425, -65.574539, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2062.981201, -69.772125, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2063.461425, -65.569808, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2063.981201, -69.767395, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2064.461425, -65.565078, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2064.981201, -69.762664, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2065.461425, -65.560348, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2065.981201, -69.757934, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2066.461425, -65.555618, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2066.981201, -69.753204, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2067.461425, -65.550888, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2067.981201, -69.748474, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2068.461425, -65.546157, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2068.981201, -69.743743, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2069.461425, -65.541427, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2069.981201, -69.739013, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2070.461425, -65.536697, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2070.981201, -69.734283, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2071.461425, -65.531967, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2071.981201, -69.729553, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2072.461425, -65.527236, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2072.981201, -69.724822, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2073.461425, -65.522506, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2073.981201, -69.720092, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2074.461425, -65.517776, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2074.981201, -69.715362, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2075.461425, -65.513046, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2075.981201, -69.710632, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2076.461425, -65.508316, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2076.981201, -69.705902, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2077.461425, -65.503585, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2077.981201, -69.701171, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2104.345214, -70.363998, 34.751861, 0.000000, 0.000000, -0.036066, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2104.343017, -65.663986, 34.751861, 0.000000, 0.000000, -0.036066, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2114.251708, -65.657752, 34.751861, 0.000000, 0.000000, -0.036066, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2114.253662, -70.347732, 34.751861, 0.000000, 0.000000, -0.036066, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2123.241943, -65.652107, 34.751861, 0.000000, 0.000000, -0.036066, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2122.997802, -70.342224, 34.751861, 0.000000, 0.000000, -0.036066, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.885742, -106.985626, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.690429, -107.523513, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.894531, -107.985580, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.699218, -108.523468, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.903320, -108.985534, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.708007, -109.523422, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.912109, -109.985488, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.716796, -110.523376, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.920898, -110.985443, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.725585, -111.523330, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.929687, -111.985397, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.734375, -112.523284, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.938476, -112.985351, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.743164, -113.523239, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.947265, -113.985305, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.751953, -114.523193, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.956054, -114.985260, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.760742, -115.523147, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.964843, -115.985214, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.769531, -116.523101, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.973632, -116.985168, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.778320, -117.523056, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.982421, -117.985122, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.787109, -118.523010, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.991210, -118.985076, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.795898, -119.522964, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2172.000000, -119.985031, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.804687, -120.522918, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2172.008789, -120.984985, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.813476, -121.522872, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2172.017578, -121.984939, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.822265, -122.522827, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2172.026367, -122.984893, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.831054, -123.522781, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2172.035156, -123.984848, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.839843, -124.522735, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2172.043945, -124.984802, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.848632, -125.522689, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2172.052734, -125.984756, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.857421, -126.522644, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2167.459716, -160.511413, 34.921886, 0.000000, 0.000000, 84.243225, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2169.737548, -170.268875, 34.921886, 0.000000, 0.000000, 69.943244, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2174.539306, -179.056747, 34.921901, 0.000000, 0.000000, 53.343246, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2211.481933, -190.448471, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2209.643066, -190.492553, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2207.663574, -190.539978, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2213.440673, -190.401504, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2215.380615, -190.355041, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2217.260009, -190.309997, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2219.270019, -190.261825, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2221.260253, -190.214187, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2223.209716, -190.167465, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2225.157226, -190.120697, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2207.529052, -184.941589, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2209.478027, -184.894882, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2211.367919, -184.849639, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2213.207031, -184.805572, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2215.197509, -184.757934, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2217.137207, -184.711456, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2219.076171, -184.665054, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2221.026367, -184.618377, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2223.036132, -184.570236, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2225.006835, -184.523101, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.793457, -333.091308, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.583496, -333.497985, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.771484, -334.091064, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.561523, -334.497741, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.749511, -335.090820, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.539550, -335.497497, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.727539, -336.090576, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.517578, -336.497253, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.705566, -337.090332, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.495605, -337.497009, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.683593, -338.090087, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.473632, -338.496765, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.661621, -339.089843, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.451660, -339.496520, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.639648, -340.089599, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.429687, -340.496276, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.617675, -341.089355, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.407714, -341.496032, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.595703, -342.089111, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.385742, -342.495788, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.573730, -343.088867, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.363769, -343.495544, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.551757, -344.088623, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.341796, -344.495300, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.529785, -345.088378, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.319824, -345.495056, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.507812, -346.088134, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.297851, -346.494812, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.485839, -347.087890, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.275878, -347.494567, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.463867, -348.087646, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.253906, -348.494323, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.441894, -349.087402, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.231933, -349.494079, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.419921, -350.087158, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.209960, -350.493835, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.397949, -351.086914, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.187988, -351.493591, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.375976, -352.086669, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.166015, -352.493347, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2255.888671, -364.424621, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2261.308349, -364.544982, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2255.847656, -366.413604, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2261.265625, -366.574279, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2261.222656, -368.523773, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2255.805664, -368.342956, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2255.761474, -370.342437, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2261.178710, -370.483459, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2255.652832, -372.276641, 49.707180, 0.000000, 0.000000, -174.028427, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2255.448486, -374.236053, 49.707180, 0.000000, 0.000000, -174.028427, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2255.246582, -376.165496, 49.707180, 0.000000, 0.000000, -174.028427, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2261.135742, -372.442932, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2260.973144, -374.508941, 49.707180, 0.000000, 0.000000, -171.828445, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2260.690917, -376.468688, 49.707180, -0.199999, 0.000000, -170.928451, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2255.042480, -378.114776, 49.707180, 0.000000, 0.000000, -173.328414, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2260.379882, -378.424011, 49.700256, -0.199999, 0.000000, -170.928451, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2259.898437, -380.432464, 49.693000, -0.199999, 0.000000, -162.728393, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2254.801025, -379.927886, 49.707180, 0.000000, 0.000000, -171.228393, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2157.626953, -491.636016, 42.115673, -0.299999, -10.099996, 135.658142, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2161.156738, -495.247619, 42.089233, -0.299999, -10.099996, 135.658142, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2154.130126, -502.101440, 40.340858, -0.299999, -10.099996, 135.658142, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2150.607177, -498.496948, 40.367244, -0.299999, -10.099996, 135.658142, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2147.131591, -508.927734, 38.599498, -0.299999, -10.099996, 135.658142, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2143.607666, -505.323272, 38.625873, -0.299999, -10.099996, 135.658142, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1993.557861, -584.265991, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1993.054809, -580.066345, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1992.557861, -584.266723, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1992.054809, -580.067077, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1991.557861, -584.267456, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1991.054809, -580.067810, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1990.557861, -584.268188, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1990.054809, -580.068542, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1989.557861, -584.268920, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1989.054809, -580.069274, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1988.557861, -584.269653, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1988.054809, -580.070007, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1987.557861, -584.270385, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1987.054809, -580.070739, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1986.557861, -584.271118, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1986.054809, -580.071472, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1985.557861, -584.271850, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1985.054809, -580.072204, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1984.557861, -584.272583, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1984.054809, -580.072937, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1983.557861, -584.273315, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1983.054809, -580.073669, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1982.557861, -584.274047, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1982.054809, -580.074401, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1981.557861, -584.274780, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1981.054809, -580.075134, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1980.557861, -584.275512, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1980.054809, -580.075866, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1979.557861, -584.276245, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1979.054809, -580.076599, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1978.557861, -584.276977, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1978.054809, -580.077331, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1977.557861, -584.277709, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1977.054809, -580.078063, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1976.557861, -584.278442, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1976.054809, -580.078796, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1975.557861, -584.279174, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1975.054809, -580.079528, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1974.557861, -584.279907, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1974.054809, -580.080261, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -1892.133300, -580.598632, 24.120117, 0.000000, 0.000000, 179.165649, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -1892.216186, -586.277770, 24.120117, 0.000000, 0.000000, 179.165649, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -1882.247802, -586.422790, 24.120117, 0.000000, 0.000000, 179.165649, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -1882.165039, -580.753356, 24.120117, 0.000000, 0.000000, 179.165649, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -1872.083618, -586.570312, 23.821083, -0.699999, -3.400000, 179.265609, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -1872.015136, -580.890136, 23.820604, -0.699999, -3.400000, 179.265609, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1813.607299, -567.501098, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1817.835815, -567.405700, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1813.703002, -566.505737, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1817.931518, -566.410339, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1813.798706, -565.510375, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.027221, -565.414978, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1813.894409, -564.515014, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.122924, -564.419616, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1813.990112, -563.519653, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.218627, -563.424255, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1814.085815, -562.524291, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.314331, -562.428894, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1814.181518, -561.528930, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.410034, -561.433532, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1814.277221, -560.533569, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.505737, -560.438171, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1814.372924, -559.538208, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.601440, -559.442810, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1814.468627, -558.542846, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.697143, -558.447448, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1814.564331, -557.547485, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.792846, -557.452087, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1814.660034, -556.552124, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.888549, -556.456726, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1814.755737, -555.556762, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.984252, -555.461364, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1814.851440, -554.561401, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1819.079956, -554.466003, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1814.947143, -553.566040, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1819.175659, -553.470642, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1815.042846, -552.570678, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1819.271362, -552.475280, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1815.138549, -551.575317, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1819.367065, -551.479919, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1815.234252, -550.579956, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1819.462768, -550.484558, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1815.329956, -549.584594, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1819.558471, -549.489196, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1815.425659, -548.589233, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1819.654174, -548.493835, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);

	// Main mall mesh, interior areas
	CreateDynamicObject(19322, 1117.580, -1490.01, 32.72,   0.00, 0.00, 0.00, -1, -1, -1, 200.0);
	CreateDynamicObject(19323, 1117.580, -1490.01, 32.72,   0.00, 0.00, 0.00, -1, -1, -1, 200.0);

	// Mall windows
    CreateDynamicObject(19325, 1155.40, -1434.89, 16.49,   0.00, 0.00, 0.30, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1155.37, -1445.41, 16.31,   0.00, 0.00, 0.00, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1155.29, -1452.38, 16.31,   0.00, 0.00, 0.00, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1157.36, -1468.35, 16.31,   0.00, 0.00, 18.66, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1160.64, -1478.37, 16.31,   0.00, 0.00, 17.76, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1159.84, -1502.06, 16.31,   0.00, 0.00, -19.92, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1139.28, -1523.71, 16.31,   0.00, 0.00, -69.36, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1117.06, -1523.43, 16.51,   0.00, 0.00, -109.44, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1097.18, -1502.43, 16.51,   0.00, 0.00, -158.58, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1096.47, -1478.29, 16.51,   0.00, 0.00, -197.94, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1099.70, -1468.27, 16.51,   0.00, 0.00, -197.94, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1101.81, -1445.45, 16.22,   0.00, 0.00, -180.24, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1101.76, -1452.47, 16.22,   0.00, 0.00, -181.62, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1101.77, -1434.88, 16.22,   0.00, 0.00, -180.24, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1094.31, -1444.92, 23.47,   0.00, 0.00, -180.24, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1094.37, -1458.37, 23.47,   0.00, 0.00, -179.46, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1093.01, -1517.44, 23.44,   0.00, 0.00, -138.72, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1101.08, -1526.64, 23.42,   0.00, 0.00, -137.34, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1155.12, -1526.38, 23.46,   0.00, 0.00, -42.12, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1163.09, -1517.25, 23.46,   0.00, 0.00, -40.74, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1163.04, -1442.06, 23.40,   0.00, 0.00, -0.12, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1163.09, -1428.47, 23.50,   0.00, 0.00, 0.54, -1, -1, -1, 100.0);

	// Mall signs
	CreateDynamicObject(19326, 1155.34, -1446.73, 16.38,   0.00, 0.00, -89.82, -1, -1, -1, 30.0);
	CreateDynamicObject(19326, 1155.25, -1443.85, 16.36,   0.00, 0.00, -89.82, -1, -1, -1, 30.0);
	CreateDynamicObject(19326, 1155.37, -1436.32, 16.36,   0.00, 0.00, -89.82, -1, -1, -1, 30.0);
	CreateDynamicObject(19326, 1155.35, -1433.51, 16.36,   0.00, 0.00, -89.70, -1, -1, -1, 30.0);
	CreateDynamicObject(19329, 1155.18, -1440.22, 18.70,   0.00, 0.00, 89.04, -1, -1, -1, 30.0);
	CreateDynamicObject(19329, 1161.59, -1431.50, 17.93,   0.00, 0.00, 0.00, -1, -1, -1, 30.0);
	CreateDynamicObject(19329, 1160.40, -1448.79, 17.96,   0.00, 0.00, 0.00, -1, -1, -1, 30.0);

	// Mall 24/7 food aisles
	CreateDynamicObject(2543, 1168.18, -1436.39, 14.79,   0.00, 0.00, 0.30, -1, -1, -1, 30.0);
	CreateDynamicObject(2535, 1182.74, -1448.30, 14.70,   0.00, 0.00, -90.96, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1167.10, -1436.40, 14.79,   0.00, 0.00, 0.31, -1, -1, -1, 30.0);
	CreateDynamicObject(2538, 1172.31, -1435.32, 14.79,   0.00, 0.00, 180.34, -1, -1, -1, 30.0);
	CreateDynamicObject(2539, 1171.38, -1435.31, 14.79,   0.00, 0.00, 180.19, -1, -1, -1, 30.0);
	CreateDynamicObject(2540, 1169.56, -1435.36, 14.79,   0.00, 0.00, 180.17, -1, -1, -1, 30.0);
	CreateDynamicObject(1984, 1157.37, -1442.59, 14.79,   0.00, 0.00, -450.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2012, 1163.25, -1448.31, 14.75,   0.00, 0.00, -179.16, -1, -1, -1, 30.0);
	CreateDynamicObject(2012, 1169.29, -1431.92, 14.75,   0.00, 0.00, 359.80, -1, -1, -1, 30.0);
	CreateDynamicObject(1987, 1163.13, -1436.34, 14.79,   0.00, 0.00, 361.06, -1, -1, -1, 30.0);
	CreateDynamicObject(1988, 1164.13, -1436.33, 14.79,   0.00, 0.00, 360.80, -1, -1, -1, 30.0);
	CreateDynamicObject(2871, 1164.79, -1443.96, 14.79,   0.00, 0.00, 177.73, -1, -1, -1, 30.0);
	CreateDynamicObject(2871, 1164.70, -1444.98, 14.79,   0.00, 0.00, 358.07, -1, -1, -1, 30.0);
	CreateDynamicObject(2942, 1155.52, -1464.68, 15.43,   0.00, 0.00, -71.22, -1, -1, -1, 30.0);
	CreateDynamicObject(1987, 1164.12, -1435.32, 14.77,   0.00, 0.00, 180.96, -1, -1, -1, 30.0);
	CreateDynamicObject(2530, 1171.13, -1443.79, 14.79,   0.00, 0.00, -182.16, -1, -1, -1, 30.0);
	CreateDynamicObject(1991, 1173.75, -1439.56, 14.79,   0.00, 0.00, 179.47, -1, -1, -1, 30.0);
	CreateDynamicObject(1996, 1169.82, -1439.50, 14.79,   0.00, 0.00, 179.10, -1, -1, -1, 30.0);
	CreateDynamicObject(1996, 1174.24, -1435.38, 14.79,   0.00, 0.00, 179.24, -1, -1, -1, 30.0);
	CreateDynamicObject(1991, 1175.23, -1435.39, 14.79,   0.00, 0.00, 179.57, -1, -1, -1, 30.0);
	CreateDynamicObject(1995, 1182.65, -1435.10, 14.79,   0.00, 0.00, 90.00, -1, -1, -1, 30.0);
	CreateDynamicObject(1994, 1182.66, -1438.07, 14.79,   0.00, 0.00, 90.00, -1, -1, -1, 30.0);
	CreateDynamicObject(1993, 1182.66, -1437.08, 14.79,   0.00, 0.00, 90.00, -1, -1, -1, 30.0);
	CreateDynamicObject(2542, 1163.78, -1443.92, 14.76,   0.00, 0.00, 178.77, -1, -1, -1, 30.0);
	CreateDynamicObject(2536, 1166.88, -1445.07, 14.70,   0.00, 0.00, -0.42, -1, -1, -1, 30.0);
	CreateDynamicObject(2542, 1163.70, -1444.93, 14.78,   0.00, 0.00, -1.74, -1, -1, -1, 30.0);
	CreateDynamicObject(1984, 1157.34, -1435.71, 14.79,   0.00, 0.00, -450.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2012, 1166.31, -1448.28, 14.75,   0.00, 0.00, -180.12, -1, -1, -1, 30.0);
	CreateDynamicObject(2530, 1172.14, -1443.83, 14.79,   0.00, 0.00, -181.38, -1, -1, -1, 30.0);
	CreateDynamicObject(2530, 1173.14, -1443.85, 14.79,   0.00, 0.00, -180.96, -1, -1, -1, 30.0);
	CreateDynamicObject(2530, 1174.13, -1443.88, 14.79,   0.00, 0.00, -181.50, -1, -1, -1, 30.0);
	CreateDynamicObject(1981, 1170.76, -1439.52, 14.79,   0.00, 0.00, -181.74, -1, -1, -1, 30.0);
	CreateDynamicObject(1981, 1171.76, -1439.54, 14.79,   0.00, 0.00, -180.80, -1, -1, -1, 30.0);
	CreateDynamicObject(1981, 1172.75, -1439.55, 14.79,   0.00, 0.00, -180.84, -1, -1, -1, 30.0);
	CreateDynamicObject(2535, 1182.75, -1447.28, 14.70,   0.00, 0.00, -90.78, -1, -1, -1, 30.0);
	CreateDynamicObject(2535, 1182.74, -1446.28, 14.70,   0.00, 0.00, -90.78, -1, -1, -1, 30.0);
	CreateDynamicObject(2535, 1182.74, -1445.26, 14.70,   0.00, 0.00, -90.00, -1, -1, -1, 30.0);
	CreateDynamicObject(2541, 1182.75, -1444.22, 14.79,   0.00, 0.00, -90.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2541, 1182.75, -1443.20, 14.79,   0.00, 0.00, -90.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2541, 1182.74, -1442.16, 14.79,   0.00, 0.00, -90.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1182.76, -1441.18, 14.79,   0.00, 0.00, -90.84, -1, -1, -1, 30.0);
	CreateDynamicObject(2541, 1182.79, -1440.17, 14.79,   0.00, 0.00, -90.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1182.72, -1439.15, 14.79,   0.00, 0.00, -90.84, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1182.66, -1431.67, 14.79,   0.00, 0.00, 3.30, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1181.63, -1431.73, 14.79,   0.00, 0.00, 3.30, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1180.61, -1431.81, 14.79,   0.00, 0.00, 3.30, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1179.61, -1431.83, 14.79,   0.00, 0.00, 3.30, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1178.61, -1431.89, 14.79,   0.00, 0.00, 3.30, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1177.59, -1431.86, 14.79,   0.00, 0.00, 3.30, -1, -1, -1, 30.0);
	CreateDynamicObject(1993, 1182.66, -1436.09, 14.79,   0.00, 0.00, 90.00, -1, -1, -1, 30.0);
	CreateDynamicObject(2012, 1175.50, -1431.82, 14.75,   0.00, 0.00, 361.17, -1, -1, -1, 30.0);
	CreateDynamicObject(2012, 1172.42, -1431.87, 14.75,   0.00, 0.00, 359.93, -1, -1, -1, 30.0);
	CreateDynamicObject(2012, 1160.10, -1448.35, 14.75,   0.00, 0.00, -179.94, -1, -1, -1, 30.0);
	CreateDynamicObject(2539, 1170.45, -1435.33, 14.79,   0.00, 0.00, 181.26, -1, -1, -1, 30.0);
	CreateDynamicObject(2545, 1161.82, -1431.84, 14.91,   0.00, 0.00, -90.54, -1, -1, -1, 30.0);
	CreateDynamicObject(2545, 1160.82, -1431.83, 14.91,   0.00, 0.00, -90.54, -1, -1, -1, 30.0);
	CreateDynamicObject(2545, 1159.81, -1431.86, 14.91,   0.00, 0.00, -90.54, -1, -1, -1, 30.0);
	CreateDynamicObject(2545, 1162.82, -1431.87, 14.91,   0.00, 0.00, -90.54, -1, -1, -1, 30.0);
	CreateDynamicObject(1988, 1163.13, -1435.34, 14.79,   0.00, 0.00, 541.46, -1, -1, -1, 30.0);
	CreateDynamicObject(1988, 1166.07, -1436.32, 14.79,   0.00, 0.00, 360.80, -1, -1, -1, 30.0);
	CreateDynamicObject(1987, 1165.07, -1436.33, 14.79,   0.00, 0.00, 361.06, -1, -1, -1, 30.0);
	CreateDynamicObject(1987, 1166.11, -1435.30, 14.77,   0.00, 0.00, 180.96, -1, -1, -1, 30.0);
	CreateDynamicObject(1988, 1165.07, -1435.31, 14.79,   0.00, 0.00, 540.44, -1, -1, -1, 30.0);
	CreateDynamicObject(2536, 1165.79, -1445.07, 14.70,   0.00, 0.00, -1.20, -1, -1, -1, 30.0);
	CreateDynamicObject(2536, 1167.83, -1445.07, 14.70,   0.00, 0.00, -0.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2871, 1165.79, -1444.00, 14.79,   0.00, 0.00, 178.27, -1, -1, -1, 30.0);
	CreateDynamicObject(2871, 1166.81, -1444.03, 14.79,   0.00, 0.00, 179.35, -1, -1, -1, 30.0);
	CreateDynamicObject(2871, 1167.79, -1444.04, 14.79,   0.00, 0.00, 179.89, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1168.13, -1435.36, 14.79,   0.00, 0.00, 180.05, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1167.10, -1435.37, 14.79,   0.00, 0.00, 180.35, -1, -1, -1, 30.0);
	CreateDynamicObject(2012, 1170.63, -1440.67, 14.75,   0.00, 0.00, 359.50, -1, -1, -1, 30.0);
	CreateDynamicObject(2012, 1173.77, -1440.72, 14.75,   0.00, 0.00, 359.82, -1, -1, -1, 30.0);
	CreateDynamicObject(2012, 1177.30, -1445.31, 14.75,   0.00, 0.00, 359.93, -1, -1, -1, 30.0);
	CreateDynamicObject(1996, 1173.36, -1448.30, 14.79,   0.00, 0.00, 179.10, -1, -1, -1, 30.0);
	CreateDynamicObject(1981, 1174.33, -1448.32, 14.79,   0.00, 0.00, -181.74, -1, -1, -1, 30.0);
	CreateDynamicObject(1981, 1175.32, -1448.35, 14.79,   0.00, 0.00, -180.84, -1, -1, -1, 30.0);
	CreateDynamicObject(1981, 1176.30, -1448.37, 14.79,   0.00, 0.00, -180.84, -1, -1, -1, 30.0);
	CreateDynamicObject(1991, 1177.28, -1448.37, 14.79,   0.00, 0.00, 179.47, -1, -1, -1, 30.0);
	CreateDynamicObject(1996, 1178.33, -1448.36, 14.79,   0.00, 0.00, 179.24, -1, -1, -1, 30.0);
	CreateDynamicObject(1991, 1179.33, -1448.37, 14.79,   0.00, 0.00, 179.57, -1, -1, -1, 30.0);
	CreateDynamicObject(1994, 1176.82, -1444.16, 14.79,   0.00, 0.00, -0.84, -1, -1, -1, 30.0);
	CreateDynamicObject(1995, 1178.81, -1444.20, 14.79,   0.00, 0.00, -1.26, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1168.89, -1444.06, 14.79,   0.00, 0.00, 178.97, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1169.91, -1444.07, 14.79,   0.00, 0.00, 179.69, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1169.87, -1445.12, 14.79,   0.00, 0.00, -0.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1168.86, -1445.11, 14.79,   0.00, 0.00, 0.31, -1, -1, -1, 30.0);
	CreateDynamicObject(2538, 1167.02, -1431.87, 14.79,   0.00, 0.00, 0.42, -1, -1, -1, 30.0);
	CreateDynamicObject(2539, 1166.03, -1431.89, 14.79,   0.00, 0.00, 0.70, -1, -1, -1, 30.0);
	CreateDynamicObject(2540, 1164.04, -1431.91, 14.79,   0.00, 0.00, 0.60, -1, -1, -1, 30.0);
	CreateDynamicObject(2539, 1165.03, -1431.91, 14.79,   0.00, 0.00, 1.02, -1, -1, -1, 30.0);
	CreateDynamicObject(2538, 1176.17, -1436.38, 14.79,   0.00, 0.00, 0.24, -1, -1, -1, 30.0);
	CreateDynamicObject(2539, 1174.22, -1436.37, 14.79,   0.00, 0.00, -0.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2540, 1173.22, -1436.36, 14.79,   0.00, 0.00, 0.18, -1, -1, -1, 30.0);
	CreateDynamicObject(2539, 1175.20, -1436.38, 14.79,   0.00, 0.00, -2.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2540, 1173.26, -1435.31, 14.79,   0.00, 0.00, 180.17, -1, -1, -1, 30.0);
	CreateDynamicObject(1991, 1175.74, -1439.58, 14.79,   0.00, 0.00, 179.57, -1, -1, -1, 30.0);
	CreateDynamicObject(1996, 1174.74, -1439.57, 14.79,   0.00, 0.00, 179.24, -1, -1, -1, 30.0);
	CreateDynamicObject(1996, 1176.17, -1435.37, 14.79,   0.00, 0.00, 179.24, -1, -1, -1, 30.0);
	CreateDynamicObject(1991, 1177.16, -1435.38, 14.79,   0.00, 0.00, 179.57, -1, -1, -1, 30.0);
	CreateDynamicObject(2540, 1169.44, -1436.35, 14.79,   0.00, 0.00, 0.18, -1, -1, -1, 30.0);
	CreateDynamicObject(2539, 1170.43, -1436.35, 14.79,   0.00, 0.00, 0.90, -1, -1, -1, 30.0);
	CreateDynamicObject(2539, 1171.34, -1436.33, 14.79,   0.00, 0.00, 0.58, -1, -1, -1, 30.0);
	CreateDynamicObject(2538, 1172.22, -1436.32, 14.79,   0.00, 0.00, 0.30, -1, -1, -1, 30.0);
	CreateDynamicObject(2871, 1163.40, -1440.68, 14.79,   0.00, 0.00, 360.41, -1, -1, -1, 30.0);
	CreateDynamicObject(2536, 1164.49, -1440.73, 14.70,   0.00, 0.00, -1.20, -1, -1, -1, 30.0);
	CreateDynamicObject(2536, 1165.49, -1440.75, 14.70,   0.00, 0.00, -0.42, -1, -1, -1, 30.0);
	CreateDynamicObject(2536, 1166.50, -1440.75, 14.70,   0.00, 0.00, -0.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1167.61, -1440.64, 14.79,   0.00, 0.00, 0.31, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1168.62, -1440.64, 14.79,   0.00, 0.00, 0.30, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1168.64, -1439.60, 14.79,   0.00, 0.00, 180.05, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1167.67, -1439.61, 14.79,   0.00, 0.00, 180.35, -1, -1, -1, 30.0);
	CreateDynamicObject(2871, 1163.65, -1439.67, 14.79,   0.00, 0.00, 180.61, -1, -1, -1, 30.0);
	CreateDynamicObject(2871, 1164.68, -1439.67, 14.79,   0.00, 0.00, 179.77, -1, -1, -1, 30.0);
	CreateDynamicObject(2871, 1165.68, -1439.68, 14.79,   0.00, 0.00, 180.61, -1, -1, -1, 30.0);
	CreateDynamicObject(2871, 1166.68, -1439.66, 14.79,   0.00, 0.00, 180.61, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1175.09, -1444.97, 14.79,   0.00, 0.00, -2.46, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1181.63, -1431.73, 14.79,   0.00, 0.00, 3.30, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1174.07, -1444.94, 14.79,   0.00, 0.00, 0.48, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1173.09, -1444.94, 14.79,   0.00, 0.00, -1.20, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1172.11, -1444.92, 14.79,   0.00, 0.00, -1.14, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1171.12, -1444.91, 14.79,   0.00, 0.00, -0.72, -1, -1, -1, 30.0);
	CreateDynamicObject(2530, 1168.54, -1448.31, 14.79,   0.00, 0.00, -178.98, -1, -1, -1, 30.0);
	CreateDynamicObject(2530, 1169.60, -1448.29, 14.79,   0.00, 0.00, -178.98, -1, -1, -1, 30.0);
	CreateDynamicObject(2530, 1170.67, -1448.30, 14.79,   0.00, 0.00, -178.98, -1, -1, -1, 30.0);
	CreateDynamicObject(2530, 1171.72, -1448.32, 14.79,   0.00, 0.00, -181.50, -1, -1, -1, 30.0);
	CreateDynamicObject(2530, 1175.13, -1443.91, 14.79,   0.00, 0.00, -181.50, -1, -1, -1, 30.0);
	CreateDynamicObject(2012, 1176.82, -1440.75, 14.75,   0.00, 0.00, 359.93, -1, -1, -1, 30.0);
	CreateDynamicObject(1995, 1177.71, -1439.63, 14.79,   0.00, 0.00, 0.00, -1, -1, -1, 30.0);
	CreateDynamicObject(1994, 1176.73, -1439.63, 14.79,   0.00, 0.00, 0.06, -1, -1, -1, 30.0);
	CreateDynamicObject(1993, 1177.83, -1444.15, 14.79,   0.00, 0.00, 179.46, -1, -1, -1, 30.0);
	// Prison Exterior
	CreateDynamicObject(1278, 229.90096, 1368.96594, 23.32740,   0.00000, 0.00000, 220.00000);
	CreateDynamicObject(1278, 200.74687, 1368.64319, 23.32740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1278, 165.18126, 1376.34033, 23.32740,   0.00000, 0.00000, 150.00000);
	CreateDynamicObject(1278, 177.82100, 1440.04126, 23.32740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1278, 224.96089, 1439.91064, 23.32740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1278, 274.66998, 1421.92847, 23.32740,   0.00000, 0.00000, 300.00000);
	CreateDynamicObject(1278, 122.27402, 1401.62268, 23.32740,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(1278, 121.71516, 1440.38428, 23.32740,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(3934, 263.38199, 1382.63379, 23.58800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3109, 250.77750, 1383.13220, 24.77640,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19124, 274.09549, 1371.32324, 24.19493,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 253.04935, 1371.26794, 24.19493,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 252.99965, 1392.70959, 24.19493,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 274.11551, 1392.69324, 24.19493,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3636, 401.63470, 1430.83179, 13.91010,   -2.44900, 0.79400, 0.00000);
	CreateDynamicObject(2774, 288.42181, 1420.14966, 8.99200,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19313, 280.73251, 1420.65112, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 273.66440, 1427.60815, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 273.66440, 1441.59253, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 232.71010, 1439.51099, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 218.71750, 1439.51099, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 184.82860, 1439.51099, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 170.84010, 1439.51099, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 136.91161, 1439.51099, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 127.59380, 1439.50647, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 120.60090, 1432.50391, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 120.61320, 1418.53784, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 120.61320, 1404.55750, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 120.61320, 1390.57666, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 120.61320, 1376.60352, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 120.61320, 1362.59875, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2774, 288.42181, 1400.35864, 8.99200,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(2774, 273.68338, 1413.10034, 8.40500,   44.32500, 90.00000, 90.00000);
	CreateDynamicObject(19313, 273.66440, 1413.58960, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 273.66241, 1399.62964, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3998, 250.5902, 1383.93469, 15.86240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 231.12820, 1348.60974, 11.45120,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 231.12820, 1373.50317, 11.45119,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 266.45618, 1392.07166, 12.91330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 264.77591, 1392.09949, 12.91330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 120.61320, 1362.59875, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 120.61320, 1376.60352, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 120.61320, 1390.57666, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 120.61320, 1404.55750, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 120.61320, 1418.53784, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 120.60090, 1432.50391, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 127.59380, 1439.50647, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 136.91161, 1439.51099, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 170.84010, 1439.51099, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 184.82860, 1439.51099, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 184.82860, 1439.51099, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 218.71750, 1439.51099, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 232.71010, 1439.51099, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 273.66440, 1441.59253, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 273.66440, 1427.60815, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 273.66440, 1413.58960, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 273.66241, 1399.62964, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 280.73251, 1420.65112, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 127.63920, 1402.47144, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 141.68280, 1402.47485, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 127.63920, 1402.47144, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 141.68280, 1402.47485, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 152.80748, 1402.46436, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 152.80750, 1402.46436, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 224.08275, 1341.65161, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 210.08070, 1341.64966, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 196.03830, 1341.64966, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 189.04291, 1348.67053, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 181.95216, 1369.68909, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 167.93201, 1369.68713, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 167.93201, 1369.68713, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 181.95219, 1369.68909, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 189.04289, 1348.67053, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 196.03830, 1341.64966, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 210.08070, 1341.64966, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 224.08270, 1341.65161, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 266.65228, 1448.68750, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 266.65231, 1448.68750, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 253.24706, 1448.69482, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 253.24710, 1448.69482, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 166.33110, 1369.70410, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 166.33110, 1369.70410, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 231.15221, 1378.30518, 11.45120,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 231.12820, 1348.60974, 18.01870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 231.18027, 1362.62976, 18.01870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 231.12820, 1376.63184, 18.01870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 231.15221, 1378.30518, 18.01870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 249.09987, 1395.66016, 10.81643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 144.01550, 1433.23865, 7.84330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 144.01550, 1423.60559, 7.84330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 144.01550, 1413.97095, 7.84330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 144.01550, 1407.29395, 7.84530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(946, 133.94099, 1405.53662, 11.74820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(946, 133.94099, 1436.98035, 11.75420,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(946, 192.15331, 1394.54370, 11.75420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(946, 192.15327, 1415.97351, 11.75420,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(16101, 124.67510, 1430.52795, 2.66450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 121.50750, 1430.53333, 2.04530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 124.69012, 1411.44495, 2.66450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 121.52267, 1411.42480, 2.01386,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 124.80370, 1422.46643, 2.66450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 124.80370, 1425.06714, 2.66450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 124.80370, 1417.00623, 2.66450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 124.80370, 1419.72461, 2.66450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 124.80369, 1414.12524, 2.66450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 124.80370, 1427.62610, 2.66450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 121.81980, 1429.13477, 10.24290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 121.81980, 1426.59399, 10.24290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 121.81980, 1424.05383, 10.24290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 121.81980, 1421.51306, 10.24290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 121.81980, 1418.97241, 10.24290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 121.81980, 1416.43298, 10.24290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 121.81980, 1413.89294, 10.24290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 121.81980, 1412.79272, 10.24090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3819, 148.02538, 1430.57410, 10.56690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3819, 148.02541, 1412.24792, 10.56690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 133.75110, 1421.10522, 7.84730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 256.09412, 1416.68701, 10.81640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 256.09021, 1402.67493, 10.81640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 259.53851, 1416.68701, 10.81640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 259.53851, 1402.67493, 10.81640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 259.53851, 1388.71472, 10.81640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 259.53134, 1385.30688, 10.81640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19304, 257.82379, 1423.68518, 12.65040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19303, 258.70190, 1423.68518, 10.82450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 256.96381, 1423.68518, 10.82450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19304, 257.82181, 1423.68604, 13.45540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19087, 243.86713, 1409.75989, 11.82390,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(16101, 241.42200, 1409.74902, 1.03310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 243.83760, 1409.74902, 1.55447,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19087, 241.42929, 1412.25928, 11.51171,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16101, 241.41301, 1412.28894, 0.71990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 238.44328, 1409.49829, 4.53515,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 233.55949, 1409.49829, 4.53520,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(19087, 238.47841, 1409.50061, 15.41054,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19087, 236.02180, 1409.49976, 15.41050,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19087, 235.13200, 1409.49976, 15.41050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19088, 235.13200, 1409.49976, 12.56050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19087, 235.13300, 1409.49988, 14.97250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19087, 236.88100, 1409.49976, 15.41050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19087, 236.88200, 1409.49988, 14.97250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19088, 236.88100, 1409.49976, 12.56050,   0.00000, 0.00000, 100.00000);
	CreateDynamicObject(2629, 232.45370, 1396.74707, 9.56030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2629, 235.83270, 1396.74707, 9.56030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2628, 239.51656, 1396.91650, 9.56030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2628, 242.37840, 1396.91650, 9.56030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2628, 246.40311, 1396.91650, 9.56030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19087, 243.85231, 1409.78259, 12.43094,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16101, 243.83659, 1407.32373, 1.55450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14791, 221.89018, 1409.56616, 10.71730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3819, 222.00067, 1416.85522, 10.56690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3819, 222.00070, 1401.17529, 10.56690,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14401, 158.21140, 1389.36743, 9.85860,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14401, 158.21140, 1382.26062, 9.85860,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14401, 199.27879, 1451.74060, 9.85860,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19313, 196.08022, 1369.65076, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 210.08054, 1369.65601, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 224.14120, 1369.71680, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 196.08020, 1369.65076, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 210.08051, 1369.65601, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 224.14120, 1369.71680, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 259.54727, 1430.67126, 10.81640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 259.54489, 1444.65137, 10.81640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 259.52869, 1444.99170, 10.81640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3279, 225.11710, 1453.37585, 9.57495,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3279, 177.97411, 1453.37585, 9.57490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3279, 131.18930, 1453.37585, 9.57490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3279, 196.86661, 1362.67029, 9.57490,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3819, 192.97433, 1384.39124, 10.56690,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3279, 277.74667, 1462.05188, 9.57495,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3881, 290.71954, 1403.95178, 7.91466,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3881, 290.71951, 1403.95178, 11.62820,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(966, 287.82001, 1406.73767, 9.38020,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(995, 288.36459, 1414.8303, 10.02890,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19357, 230.36552, 1344.86133, 7.83630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 227.24139, 1344.86133, 7.83630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 224.30040, 1344.86133, 7.83630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 221.12010, 1344.86133, 7.83630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 217.97820, 1344.86133, 7.83630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 214.87869, 1344.86133, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 211.89880, 1344.86133, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 208.79820, 1344.86133, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 205.73801, 1344.86133, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 202.65770, 1344.86133, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 199.62410, 1344.86133, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19445, 205.85971, 1365.02515, 7.84330,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(19445, 210.96640, 1365.02515, 7.84330,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(19445, 216.35660, 1365.02515, 7.84330,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(19445, 194.27516, 1355.55566, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 194.25998, 1351.51111, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 182.06242, 1355.64258, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 168.05917, 1355.65137, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 166.29829, 1355.63013, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 182.06239, 1355.64258, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 168.05920, 1355.65137, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 166.29829, 1355.63013, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 209.59576, 1416.09485, 2.11692,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(16101, 206.47256, 1416.10486, 2.63112,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(16101, 206.48151, 1396.98914, 2.63112,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(16101, 209.60202, 1396.99182, 2.02408,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(16101, 206.36301, 1400.21082, 2.63110,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(16101, 206.36301, 1403.31189, 2.63110,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(16101, 206.36301, 1406.55176, 2.63110,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(16101, 206.36298, 1409.67273, 2.63112,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(16101, 206.36301, 1412.97266, 2.63110,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(1368, 209.32401, 1414.75415, 10.22490,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1368, 209.32401, 1412.21338, 10.22490,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1368, 209.32401, 1409.67358, 10.22490,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1368, 209.32401, 1407.13293, 10.22490,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1368, 209.32401, 1404.59229, 10.22490,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1368, 209.32401, 1402.05164, 10.22490,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1368, 209.32401, 1399.51184, 10.22490,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1368, 209.32600, 1398.23071, 10.22290,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1344, 144.56853, 1379.93787, 10.38110,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1344, 144.56850, 1382.72021, 10.38110,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1344, 144.57619, 1385.46326, 10.38110,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1448, 143.55380, 1376.95752, 9.65270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1448, 143.55380, 1376.95752, 9.79170,   0.00000, 0.00000, 342.68130);
	CreateDynamicObject(1448, 143.55380, 1376.95752, 9.93170,   0.00000, 0.00000, 14.36257);
	CreateDynamicObject(1438, 143.05623, 1386.77234, 9.58368,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 152.35753, 1402.46692, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 152.35750, 1402.46692, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 249.71919, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 246.57690, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 243.57091, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 240.60989, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 237.58971, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 255.62720, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 258.84741, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 261.94739, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 265.06699, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 268.22720, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 271.58710, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19445, 231.60339, 1348.26526, 8.14430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19381, 236.77890, 1348.25146, 9.81440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19445, 236.50990, 1352.99475, 8.14430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 246.13570, 1352.99475, 8.14430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19381, 247.27850, 1348.25146, 9.81440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19445, 236.33180, 1343.50916, 8.14330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 245.96671, 1343.50916, 8.14330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19381, 257.77829, 1348.25146, 9.81440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 268.27979, 1348.25146, 9.81440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19445, 255.60130, 1343.50916, 8.14330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 265.23401, 1343.50916, 8.14330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 268.72629, 1343.51025, 8.14430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 273.45529, 1348.26318, 8.14330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 255.76910, 1352.99475, 8.14430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 265.40240, 1352.99475, 8.14430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 268.60251, 1352.99585, 8.14530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 174.64439, 1397.55090, 7.84830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 174.64540, 1391.74231, 7.84730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 179.55141, 1387.01550, 7.84730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 189.18491, 1387.01550, 7.84730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 198.81950, 1387.01550, 7.84730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 203.72580, 1391.74316, 7.84730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 203.72580, 1401.37756, 7.84730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 203.72580, 1411.01184, 7.84930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 203.72580, 1414.61157, 7.84330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 200.05220, 1414.51978, 7.84330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 200.05220, 1404.88550, 7.84330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 200.05220, 1395.25098, 7.84330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 195.14500, 1390.67908, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 185.51089, 1390.67908, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 183.03030, 1390.67810, 7.84230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 178.32050, 1395.58594, 7.84230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 178.32150, 1397.62573, 7.84130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, 240.74400, 1347.65723, 9.58400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(615, 267.28683, 1347.63049, 9.58400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8623, 237.49951, 1348.04504, 10.50238,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8623, 248.02049, 1348.10803, 10.50238,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8623, 258.78787, 1347.87732, 10.50238,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8623, 267.66467, 1348.14111, 10.50238,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8990, 265.79184, 1347.00977, 10.40348,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8990, 253.82431, 1346.98291, 10.40348,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8990, 239.91698, 1346.90771, 10.40348,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8990, 239.52455, 1348.38513, 10.40348,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8990, 252.48409, 1348.48730, 10.40348,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8990, 265.10614, 1348.68286, 10.40348,   0.00000, 0.00000, 0.72000);

	id2 = CreateDynamicObject(5738, 250.59111, 1457.35632, 13.04880,   0.00000, 0.00000, 90.65300);
    SetDynamicObjectMaterial(id2, 4, 4079, "civic04_lan", "twintWin1_LAn"); //Windows
	SetDynamicObjectMaterial(id2, 3, 4079, "civic04_lan", "twintWall2_LAn"); //Roof corner
	id2 = CreateDynamicObject(5738, 202.69530, 1457.38159, 13.04880,   0.00000, 0.00000, 90.65300);
	SetDynamicObjectMaterial(id2, 4, 4079, "civic04_lan", "twintWin1_LAn" ); //Windows
	SetDynamicObjectMaterial(id2, 3, 4079, "civic04_lan", "twintWall2_LAn"); //Roof corner
	id2 = CreateDynamicObject(5738, 154.79713, 1457.36853, 13.04880,   0.00000, 0.00000, 90.65300);
	SetDynamicObjectMaterial(id2, 4, 4079, "civic04_lan", "twintWin1_LAn" ); //Windows
	SetDynamicObjectMaterial(id2, 3, 4079, "civic04_lan", "twintWall2_LAn"); //Roof corner

	id2 = CreateDynamicObject(5738, 153.92700, 1364.09631, 13.04880,   0.00000, 0.00000, 0.65300);
	SetDynamicObjectMaterial(id2, 4, 3998, "civic04_lan", "twintWin2_LAn" ); //Windows
	SetDynamicObjectMaterial(id2, 3, 3998, "civic04_lan", "twintconc_LAn"); //Roof corner
	id2 = CreateDynamicObject(5738, 156.25397, 1383.78210, 5.84841,   0.00000, 0.00000, 90.65300);
	SetDynamicObjectMaterial(id2, 4, 4079, "civic04_lan", "twintWin1_LAn" ); //Windows
	SetDynamicObjectMaterial(id2, 3, 4079, "civic04_lan", "twintWall2_LAn"); //Roof corner

	id2 = CreateDynamicObject(8661, 239.54919, 1429.49438, 9.58680,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 17877, "landhub", "dirtKB_64HV");
	id2 = CreateDynamicObject(8661, 199.54930, 1429.49438, 9.58680,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 17877, "landhub", "dirtKB_64HV");
	id2 = CreateDynamicObject(8661, 163.92641, 1429.49438, 9.58880,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 17877, "landhub", "dirtKB_64HV");
	id2 = CreateDynamicObject(8661, 163.92641, 1412.45239, 9.59080,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 17877, "landhub", "dirtKB_64HV");
	id2 = CreateDynamicObject(8661, 246.07111, 1419.51489, -10.39270,   -0.09000, 90.00000, 270.00000);
	SetDynamicObjectMaterial(id2, 0, 17877, "landhub", "dirtKB_64HV");
	id2 = CreateDynamicObject(19381, 225.75252, 1378.60693, 9.81440,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 17877, "landhub", "dirtKB_64HV");
	id2 = CreateDynamicObject(19381, 225.75369, 1388.24182, 9.81440,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 17877, "landhub", "dirtKB_64HV");
	id2 = CreateDynamicObject(19381, 215.25240, 1388.24182, 9.81440,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 17877, "landhub", "dirtKB_64HV");
	id2 = CreateDynamicObject(19381, 215.25240, 1378.60693, 9.81440,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 17877, "landhub", "dirtKB_64HV");

	id2 = CreateDynamicObject(19447, 153.82552, 1433.24878, 9.50910,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 153.82550, 1423.61450, 9.50910,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 153.82550, 1413.98083, 9.50910,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 153.82550, 1404.34619, 9.50910,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 201.88910, 1433.24878, 9.50910,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 249.70700, 1433.24475, 9.50310,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 160.39301, 1426.67969, 9.50910,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 170.02370, 1426.67969, 9.50910,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 179.65800, 1426.67969, 9.50910,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 189.29311, 1426.67969, 9.50910,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 198.92720, 1426.67969, 9.50910,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 208.56310, 1426.67969, 9.50910,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 218.19791, 1426.67969, 9.50910,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 227.83200, 1426.67969, 9.50910,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 237.46550, 1426.67969, 9.50910,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 246.64120, 1426.67773, 9.50710,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 257.82697, 1396.96594, 9.50910,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 257.82700, 1406.60217, 9.50910,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 257.82700, 1416.23669, 9.50910,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 251.65305, 1422.43433, 9.40710,   0.00000, 90.00000, 51.63934);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 254.75819, 1426.67773, 9.50510,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 257.82700, 1422.33044, 9.50710,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 206.90739, 1436.32495, 9.50710,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 160.39191, 1404.88257, 9.50910,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 249.70700, 1424.24158, 9.50510,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 201.88910, 1424.30957, 9.50710,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 148.91389, 1421.23462, 9.50710,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 201.88910, 1414.67603, 9.50710,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 201.88910, 1405.04333, 9.50710,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 201.88910, 1395.40613, 9.50710,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 198.82060, 1388.83875, 9.50710,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 189.18770, 1388.83875, 9.50710,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 179.55310, 1388.83875, 9.50710,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 176.48511, 1395.40625, 9.50710,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 170.02319, 1404.88257, 9.50910,   0.00000, 90.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 176.48309, 1401.81384, 9.50810,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");

	CreateDynamicObject(19445, 170.10970, 1402.45764, 7.84630,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 179.25240, 1402.45764, 7.84530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 183.98109, 1407.36255, 7.84530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 183.97910, 1414.69836, 7.84330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 188.88429, 1419.42615, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 198.51880, 1419.42615, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 208.15269, 1419.42615, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 217.78529, 1419.42615, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 227.41811, 1419.42615, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 237.05209, 1419.42615, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 246.68600, 1419.42615, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 251.54640, 1419.42712, 7.84130,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2913, 235.35320, 1396.20483, 10.53980,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2913, 231.97060, 1396.22119, 10.53980,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2915, 234.32182, 1400.07874, 9.70230,   0.00000, 0.00000, 5.00000);
	CreateDynamicObject(2916, 237.37637, 1399.65674, 9.70230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2915, 236.32271, 1400.50977, 9.70230,   0.00000, 0.00000, 10.00000);
	CreateDynamicObject(19445, 259.48611, 1433.24548, 7.84330,   0.00000, 0.00000, 0.00000);

	id2 = CreateDynamicObject(19447, 121.50720, 1416.17822, 11.00700,   0.00000, 0.00000, 0.00000);
    SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id2 = CreateDynamicObject(19447, 121.50717, 1425.81262, 11.00700,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id2 = CreateDynamicObject(19447, 123.18810, 1425.81262, 13.31820,   0.00000, -100.00000, 0.00000); //Roof
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 123.18810, 1416.17822, 13.31820,   0.00000, -100.00000, 0.00000); //Roof
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 257.81140, 1418.93103, 14.04940,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id2 = CreateDynamicObject(19447, 257.81140, 1409.29639, 14.04940,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id2 = CreateDynamicObject(19447, 257.81140, 1399.66150, 14.04940,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id2 = CreateDynamicObject(19447, 257.81140, 1390.02795, 14.04940,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id2 = CreateDynamicObject(19447, 254.31754, 1390.86194, 14.04940,   0.00000, 90.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id2 = CreateDynamicObject(19447, 209.63820, 1411.35950, 11.00700,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id2 = CreateDynamicObject(19447, 209.63820, 1401.72534, 11.00700,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id2 = CreateDynamicObject(19447, 208.03281, 1401.72534, 13.27660,   0.00000, 100.00000, 0.00000); //Roof
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19447, 208.03191, 1411.35950, 13.27660,   0.00000, 100.00000, 0.00000); //Roof
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "plaintarmac1");
	id2 = CreateDynamicObject(19355, 123.20170, 1411.45129, 11.00700,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id2 = CreateDynamicObject(19355, 123.20320, 1430.54175, 11.00700,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id2 = CreateDynamicObject(19355, 207.94400, 1416.08618, 11.00700,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id2 = CreateDynamicObject(19355, 207.94400, 1396.99658, 11.00700,   0.00000, 0.00000, 90.00000);
	SetDynamicObjectMaterial(id2, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id2 = CreateDynamicObject(19447, 288.09763, 1415.01477, 19.62394,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 2774, "airp_prop", "cj_white_wall2");
	id2 = CreateDynamicObject(19447, 288.09830, 1405.38281, 19.62390,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 2774, "airp_prop", "cj_white_wall2");
	id2 = CreateDynamicObject(19447, 287.9496, 1415.01477, 19.62394,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 2774, "airp_prop", "cj_white_wall2");
	id2 = CreateDynamicObject(19447, 287.9496, 1405.38281, 19.62390,   0.00000, 0.00000, 0.00000);
	SetDynamicObjectMaterial(id2, 0, 2774, "airp_prop", "cj_white_wall2");
	// Prison gates
	CreateDynamicObject(988, 231.21869, 1358.35840, 10.61700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(988, 231.21870, 1363.84888, 10.61700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(968, 287.81442, 1406.71497, 10.02230,   0.00000, 0.00000, 90.00000); //Barrier

	// Prison doors
	CreateDynamicObject(3109, 154.61871, 1438.06323, 10.77020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3109, 202.56454, 1438.04517, 10.77020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3109, 250.45157, 1438.03906, 10.77020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3109, 153.9786, 1403.04712, 10.77020,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3109, 173.22977, 1366.2065, 10.77020,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3109, 139.8456, 1374.94885, 10.77020,   0.00000, 0.00000, 270.00000);

	// Grass area
	CreateDynamicObject(19445, 216.55380, 1373.85425, 8.14430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 214.81371, 1373.85315, 8.14530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 210.06380, 1378.58154, 8.14630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 210.06380, 1388.20105, 8.14630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 214.79179, 1393.00476, 8.14530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 224.42570, 1393.00476, 8.14530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 234.05949, 1393.00476, 8.14530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3694, 226.09680, 1382.20959, 10.23200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, 211.71286, 1383.07922, 9.58400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(337, 221.29813, 1387.08557, 10.63570,   180.00000, -20.00000, 180.00000);
	CreateDynamicObject(337, 218.26199, 1386.34912, 9.98550,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(617, 226.17700, 1383.07922, 9.58400,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(19445, 226.18690, 1373.85425, 8.14430,   0.00000, 0.00000, 90.00000);

	// Prison Interior
	CreateDynamicObject(1498,1211.8632,-1355.2440,795.7056,0.0000,0.0000,178.9346, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(8419,1219.29980469,-1342.50000000,784.02398682,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.89941406,-1331.29980469,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1328.09997559,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.89941406,-1326.50000000,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1329.69995117,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1332.90002441,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(8419,1219.39941406,-1342.50000000,814.40002441,179.99450684,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1200.59997559,-1331.40002441,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1329.00000000,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1330.59997559,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1332.19995117,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1333.80004883,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1332.90002441,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1331.30004883,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1328.09997559,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1329.69995117,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1326.50000000,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1331.30004883,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09960938,-1326.50000000,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1326.50000000,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1220.40002441,-1331.40002441,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.30004883,-1328.09997559,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.29980469,-1328.09960938,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.30004883,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.30004883,-1331.30004883,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1329.69995117,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1329.69995117,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.19921875,-1331.29980469,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.30004883,-1334.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.30004883,-1337.69995117,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.30004883,-1340.90002441,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1220.39941406,-1341.00000000,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.30004883,-1334.50000000,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.30004883,-1337.69995117,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.30004883,-1340.90002441,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1332.90002441,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1336.09997559,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1339.19995117,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1342.50000000,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1342.50000000,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1339.19995117,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1336.09997559,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1332.90002441,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.19921875,-1340.89941406,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.19921875,-1340.89941406,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1334.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1336.09997559,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69921875,-1337.69921875,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1339.30004883,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1340.90002441,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1342.50000000,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1200.59960938,-1341.00000000,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.89941406,-1340.89941406,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1340.90002441,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1334.50000000,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1337.69995117,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1340.90002441,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1342.50000000,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1339.30004883,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1336.09997559,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1335.40002441,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1337.00000000,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1338.59997559,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1340.19995117,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1341.80004883,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1329.00000000,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1330.59997559,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1332.19995117,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1333.80004883,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1335.40002441,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1337.00000000,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1338.59997559,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1340.19995117,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1341.80004883,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1212.80004883,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1211.19995117,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1209.59997559,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1208.09997559,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1210.50000000,-1326.50000000,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.19995117,-1331.30004883,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1209.89941406,-1321.89941406,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1210.50000000,-1326.59997559,807.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1215.19995117,-1331.40002441,807.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1215.19995117,-1341.00000000,807.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1205.80004883,-1331.40002441,807.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1205.79980469,-1341.00000000,807.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1343.40002441,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1345.00000000,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1343.40002441,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1345.00000000,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.30004883,-1344.09997559,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09960938,-1345.69921875,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09960938,-1345.69921875,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.29980469,-1344.09960938,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1344.09997559,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.89941406,-1345.69921875,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1210.50000000,-1326.59997559,790.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1205.80004883,-1331.40002441,790.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1205.79980469,-1341.00000000,790.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1215.19995117,-1331.40002441,790.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1215.19995117,-1341.00000000,790.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.89941406,-1345.69921875,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1344.09997559,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(8572,1204.50000000,-1346.69995117,798.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1199.19921875,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.19921875,-1350.50000000,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1195.09960938,-1350.59960938,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09997559,-1328.40002441,799.09997559,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09997559,-1331.69995117,799.09997559,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09997559,-1334.90002441,799.09997559,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09997559,-1338.09997559,799.09997559,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09997559,-1341.30004883,799.09997559,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09997559,-1344.50000000,799.09997559,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09997559,-1344.50000000,802.70001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09960938,-1341.29980469,802.70001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09997559,-1338.09997559,802.70001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09997559,-1334.90002441,802.70001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09997559,-1331.69995117,802.70001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09960938,-1328.50000000,802.70001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.90002441,-1343.80004883,802.67999268,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.90002441,-1340.50000000,799.09997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.90002441,-1337.30004883,799.09997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.90002441,-1334.19995117,802.67999268,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.90002441,-1331.00000000,799.09997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.90002441,-1327.80004883,799.09997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.89941406,-1331.00000000,799.09997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.90002441,-1327.80004883,802.67999268,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.90002441,-1331.00000000,802.67999268,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.89941406,-1334.19921875,799.09997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.90002441,-1337.30004883,802.67999268,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.90002441,-1340.50000000,802.67999268,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.89941406,-1343.79980469,799.09997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1205.69995117,-1321.59997559,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1215.30004883,-1321.80004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1215.19921875,-1316.00000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1209.89941406,-1312.29980469,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1205.00000000,-1355.30004883,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1214.59960938,-1355.29980469,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1219.39941406,-1353.69921875,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1219.39941406,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1219.40002441,-1347.30004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1218.40002441,-1350.50000000,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1195.39941406,-1355.29980469,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1205.59960938,-1359.09960938,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1216.09997559,-1359.09997559,799.20300293,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1223.50000000,-1350.59960938,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1221.00000000,-1355.30004883,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1224.19921875,-1355.29980469,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1227.39941406,-1355.29980469,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1229.00000000,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1229.09960938,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1230.89941406,-1341.00000000,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1230.89941406,-1331.39941406,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1224.89941406,-1340.89941406,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1215.19921875,-1310.00000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1230.59960938,-1355.19921875,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1230.56250000,-1355.29980469,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1233.69995117,-1355.30004883,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1235.19995117,-1360.09997559,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1227.59997559,-1360.09997559,795.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1227.59960938,-1360.09960938,799.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1226.59960938,-1360.19921875,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1227.50000000,-1345.69995117,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1224.30004883,-1345.70104980,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1232.19921875,-1344.09960938,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1237.09960938,-1350.39941406,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1241.89941406,-1345.59960938,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1237.59997559,-1347.30004883,799.09997559,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1237.59960938,-1337.69921875,799.09997559,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1232.19995117,-1337.69995117,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1229.09997559,-1340.90002441,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1230.59997559,-1345.40002441,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1216.79980469,-1312.91210938,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1220.00000000,-1312.91210938,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1223.20104980,-1312.91296387,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1229.00000000,-1340.90002441,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1229.00000000,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1215.40002441,-1314.59997559,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1215.40002441,-1317.80004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1224.79980469,-1314.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1224.79980469,-1317.69921875,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1229.00000000,-1321.69995117,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1227.39941406,-1326.50000000,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1224.19995117,-1326.50097656,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1224.90002441,-1318.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1227.40002441,-1316.90002441,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19428,1225.59997559,-1316.90100098,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19401,1216.89941406,-1319.59960938,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19401,1220.09960938,-1319.59960938,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19401,1223.30004883,-1319.59997559,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19404,1216.90100098,-1319.40100098,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19404,1220.10095215,-1319.40100098,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19404,1223.30102539,-1319.40100098,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1227.43652344,-1316.80078125,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19431,1225.59997559,-1316.80004883,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1229.09960938,-1331.29980469,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1229.09997559,-1321.69995117,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1232.19995117,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1232.19921875,-1324.89941406,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1232.19921875,-1312.09960938,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1232.19995117,-1318.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1229.09960938,-1316.79980469,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1220.09960938,-1308.00000000,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1229.69921875,-1308.00000000,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1230.59960938,-1326.79980469,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1224.90002441,-1321.69995117,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1224.90002441,-1324.90002441,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1230.90002441,-1321.80004883,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1230.89941406,-1312.19921875,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1220.40002441,-1321.80004883,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1220.40002441,-1312.19995117,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1237.09997559,-1360.09997559,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.89941406,-1364.89941406,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1211.30004883,-1364.90002441,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1201.69921875,-1364.89941406,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1204.59997559,-1360.09997559,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1195.09997559,-1360.19995117,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1205.59997559,-1368.69995117,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1216.09960938,-1368.69921875,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1210.40002441,-1326.50000000,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1210.50000000,-1320.79980469,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1233.90002441,-1355.19995117,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1232.19995117,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1237.00000000,-1355.19995117,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1237.00000000,-1352.09997559,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1227.09997559,-1350.59997559,799.20098877,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(14877,1236.30004883,-1353.59997559,797.09997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1242.40002441,-1356.90002441,799.20098877,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1237.00000000,-1352.09997559,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1232.19921875,-1347.29980469,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1237.09997559,-1355.19995117,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1240.30004883,-1355.19995117,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1241.80004883,-1356.90002441,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1237.00000000,-1361.69921875,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1227.40002441,-1361.69995117,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1232.30004883,-1350.40002441,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1230.69995117,-1355.19995117,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1229.09997559,-1360.00000000,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1227.50000000,-1355.19995117,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1224.30004883,-1355.19995117,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1227.40002441,-1352.09997559,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1222.69995117,-1349.59997559,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19401,1208.09997559,-1354.40100098,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19401,1213.09997559,-1354.40100098,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19401,1210.59997559,-1354.40002441,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1216.30004883,-1354.40002441,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1219.50000000,-1354.40002441,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1201.69995117,-1354.40002441,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1221.09997559,-1357.59997559,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1217.90002441,-1357.59997559,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1216.30004883,-1356.00000000,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1222.69995117,-1356.00000000,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1217.80004883,-1361.69995117,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1208.19995117,-1361.69995117,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1198.59960938,-1361.69921875,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1225.90002441,-1360.00000000,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1200.30004883,-1359.19995117,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19404,1213.09960938,-1354.60058594,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19404,1210.59960938,-1354.59960938,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19404,1208.09997559,-1354.60095215,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1216.30004883,-1354.59997559,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1201.69995117,-1354.59997559,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19428,1205.69995117,-1346.80004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 10.0);
    CreateDynamicObject(19428,1207.29980469,-1346.79980469,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19428,1206.50000000,-1345.69995117,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19428,1206.50000000,-1347.59997559,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19428,1205.70104980,-1346.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19428,1207.30102539,-1346.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1234.39941406,-1350.39941406,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1234.40002441,-1340.80004883,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1234.39941406,-1331.19921875,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1234.40002441,-1321.59997559,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1244.90002441,-1350.40002441,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1244.90002441,-1340.80004883,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1244.90002441,-1331.19995117,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1244.89941406,-1321.59960938,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1244.90002441,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1234.40002441,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1223.90002441,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1213.40002441,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1202.89941406,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1219.59997559,-1314.50000000,795.70098877,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.00000000,-1316.00000000,795.70202637,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1239.29980469,-1308.00000000,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1241.90002441,-1336.00000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1241.90002441,-1326.40002441,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1241.89941406,-1316.79980469,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1241.90002441,-1307.19995117,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1237.59997559,-1328.09997559,799.09997559,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1237.59997559,-1318.50000000,799.09997559,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1237.59997559,-1308.90002441,799.09997559,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1242.40100098,-1357.00000000,799.29998779,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1227.09997559,-1357.00000000,799.29998779,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1223.59997559,-1357.00000000,799.30102539,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1213.09960938,-1359.50000000,799.29998779,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1202.59960938,-1359.50000000,799.29998779,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1235.40002441,-1360.09997559,799.30200195,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1205.79980469,-1315.89941406,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1210.50000000,-1308.00000000,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1205.79980469,-1306.29980469,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19466,1210.69995117,-1354.59997559,801.40002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19466,1213.09960938,-1354.59960938,801.40002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19466,1208.09997559,-1354.59997559,801.40002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16644,1207.69921875,-1354.50000000,809.79998779,0.00000000,90.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16644,1210.19995117,-1354.50000000,809.79998779,0.00000000,90.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1892,1212.59997559,-1310.50000000,795.76000977,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1569,1205.83996582,-1315.80004883,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1569,1205.83996582,-1312.80004883,795.79998779,0.00000000,0.00000000,269.79992676, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1308.09997559,804.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1309.90002441,804.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1311.50000000,804.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1313.30004883,804.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1314.80004883,804.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1316.30004883,804.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1317.80004883,804.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1319.30004883,804.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1320.69995117,804.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1205.80395508,-1315.90002441,804.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1205.80297852,-1306.30004883,804.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1215.09997559,-1315.80004883,804.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1215.09997559,-1306.19995117,804.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1308.02001953,790.65002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1205.80297852,-1308.00000000,790.65002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1205.80297852,-1316.00000000,790.65002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1320.79003906,790.65002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1215.18994141,-1315.90002441,790.65100098,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1215.19201660,-1315.54199219,790.65002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1215.18994141,-1304.42004395,790.65002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1209.59997559,-1308.69995117,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3657,1228.50000000,-1330.19995117,796.20001221,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3657,1228.50000000,-1335.80004883,796.20001221,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3657,1228.50000000,-1341.39941406,796.20001221,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1212.09997559,-1316.90002441,794.00097656,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1212.10058594,-1314.89941406,794.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1212.09997559,-1305.09997559,794.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59997559,-1312.50000000,796.04998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59997559,-1314.50000000,796.04998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59960938,-1316.50000000,796.04998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59997559,-1318.50000000,796.04998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59997559,-1320.50000000,796.04998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1213.00000000,-1314.90002441,794.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1213.00097656,-1317.00000000,794.00097656,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59997559,-1308.50000000,796.04998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1213.00000000,-1305.09997559,794.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59997559,-1308.18005371,795.40002441,0.00000000,270.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59997559,-1311.77502441,796.40002441,0.00000000,90.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1215.19995117,-1306.80004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1212.17004395,-1315.90002441,790.65002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1212.17199707,-1315.79003906,790.65002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1212.17004395,-1304.16894531,790.65002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59997559,-1313.79003906,796.40002441,0.00000000,90.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59997559,-1315.79003906,796.40002441,0.00000000,90.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59960938,-1317.79003906,796.40002441,0.00000000,90.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59960938,-1319.79003906,796.40002441,0.00000000,90.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1212.61914062,-1314.59960938,796.05999756,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1212.59997559,-1318.50000000,796.05999756,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1208.90002441,-1308.69995117,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1208.19995117,-1308.69995117,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1206.40002441,-1318.19995117,796.29998779,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2111,1206.80004883,-1319.69995117,796.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1206.40002441,-1317.50000000,796.29998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1206.40002441,-1316.80004883,796.29998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1208.69995117,-1320.30004883,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1209.39941406,-1320.29980469,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1210.09997559,-1320.30004883,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2186,1214.69995117,-1319.30004883,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2197,1214.00000000,-1315.69995117,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2197,1214.00000000,-1314.30004883,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2197,1214.00000000,-1315.00000000,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(948,1206.19995117,-1316.09997559,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(948,1206.19921875,-1312.50000000,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2852,1207.00000000,-1319.59997559,796.59997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1201.09997559,-1315.80004883,793.09997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1201.09997559,-1312.80004883,793.09997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(18613,1204.19995117,-1315.09997559,798.29998779,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(18613,1204.19995117,-1313.50000000,798.29998779,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19466,1223.50000000,-1319.50000000,797.90002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19466,1220.19995117,-1319.50000000,797.90002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19466,1217.00000000,-1319.50000000,797.90002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1223.40002441,-1319.90002441,795.70098877,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1221.50000000,-1319.90002441,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1219.59997559,-1319.90002441,795.70098877,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1217.69995117,-1319.90002441,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1219.20104980,-1320.30004883,793.64001465,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1215.80004883,-1319.90002441,795.70098877,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1220.90002441,-1320.30102539,793.64001465,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1216.80004883,-1321.00000000,796.20001221,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1220.09997559,-1321.00000000,796.20001221,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1223.40002441,-1321.00000000,796.20001221,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19428,1218.50000000,-1320.19995117,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19428,1221.69921875,-1320.19921875,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1215.80004883,-1319.00000000,795.70098877,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1217.69995117,-1319.00000000,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1219.59997559,-1319.00000000,795.70098877,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1221.50000000,-1319.00000000,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1223.40002441,-1319.00000000,795.70098877,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1220.90002441,-1318.50097656,793.64001465,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1219.30004883,-1318.50000000,793.64001465,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19431,1221.69995117,-1318.80004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19431,1218.50000000,-1318.80004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1223.40002441,-1317.90002441,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1220.09997559,-1317.90002441,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1216.90002441,-1317.90002441,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1269,1220.09997559,-1318.90002441,796.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1269,1220.09997559,-1320.00000000,796.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1269,1223.30004883,-1318.90002441,796.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1269,1216.90002441,-1318.90002441,796.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1269,1216.90002441,-1320.00000000,796.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1269,1223.30004883,-1320.00000000,796.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2230,1220.95996094,-1318.40002441,796.02001953,270.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2230,1217.76000977,-1318.40002441,796.02001953,270.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2230,1224.16003418,-1318.40002441,796.02001953,270.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2230,1224.15917969,-1319.90002441,796.02001953,270.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2230,1220.95996094,-1319.90002441,796.02001953,270.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2230,1217.75976562,-1319.90002441,796.02001953,270.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1216,1225.30004883,-1319.69995117,796.40002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1216,1225.30004883,-1322.19995117,796.40002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1216.40002441,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1217.09997559,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1217.80004883,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1222.90002441,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1222.19995117,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1223.59997559,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(948,1218.59997559,-1313.40002441,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(948,1221.30004883,-1313.40002441,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2007,1231.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1228.19995117,-1310.19995117,793.84997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2007,1230.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2007,1229.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2007,1228.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1224.80004883,-1310.69995117,795.90002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1226.80004883,-1310.69995117,795.90002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1228.80004883,-1310.69995117,795.90002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1230.69995117,-1310.69995117,795.90002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1228.19995117,-1311.09997559,793.84997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1225.09997559,-1310.69995117,795.29998779,0.00000000,270.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2007,1228.59960938,-1308.59960938,797.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2007,1229.59997559,-1308.59997559,797.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2007,1230.59997559,-1308.59997559,797.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2007,1231.59997559,-1308.59997559,797.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2186,1225.00000000,-1308.59960938,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1231.59997559,-1310.69995117,795.90002441,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1227.79980469,-1310.69921875,795.90002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1227.09960938,-1310.69921875,795.29998779,0.00000000,270.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1229.09997559,-1310.69995117,795.29998779,0.00000000,270.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1231.09997559,-1310.69995117,795.29998779,0.00000000,270.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1224.80004883,-1312.90002441,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1215.19921875,-1345.79980469,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1215.19995117,-1345.80004883,800.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1207.29980469,-1347.59960938,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1207.30004883,-1347.59997559,800.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1207.29980469,-1345.69921875,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1207.30004883,-1345.69995117,800.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1207.40002441,-1328.09997559,799.20001221,0.00000000,180.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1213.59997559,-1328.09997559,799.20001221,0.00000000,179.99450684,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1213.69995117,-1345.59997559,799.20001221,0.00000000,179.99450684,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1205.79980469,-1345.79980469,797.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1221.09960938,-1309.09960938,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1219.00000000,-1309.30004883,796.29998779,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1220.09997559,-1309.69995117,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2137,1233.69995117,-1340.19995117,795.79998779,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2138,1239.52929688,-1340.19921875,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2140,1232.80004883,-1338.30004883,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2303,1229.50000000,-1323.09997559,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2305,1234.69995117,-1355.80004883,795.80102539,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2135,1238.56933594,-1340.20605469,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2136,1234.60803223,-1362.31396484,795.79998779,0.00000000,0.00000000,269.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2137,1232.79980469,-1339.29980469,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2137,1234.67968750,-1340.19921875,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1236.03198242,-1337.30004883,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2140,1232.80004883,-1337.32995605,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2138,1240.50000000,-1340.19995117,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1237.02197266,-1337.30004883,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1238.00000000,-1337.30004883,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1238.02734375,-1336.27636719,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1237.05004883,-1336.27636719,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1236.05859375,-1336.27539062,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3383,1236.69995117,-1335.30004883,800.40002441,320.00000000,179.99450684,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3383,1237.30004883,-1338.40002441,800.40002441,319.99877930,179.99450684,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1723,1241.19995117,-1324.09997559,795.79998779,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1724,1237.80004883,-1323.09997559,795.79998779,0.00000000,0.00000000,89.99572754, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2357,1237.90002441,-1332.30004883,796.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2357,1237.90002441,-1328.69995117,796.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1239.30004883,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1238.59997559,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1237.19995117,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1236.50000000,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1237.90002441,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1239.30004883,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1238.59997559,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1237.90002441,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1237.19995117,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1236.50000000,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1236.50000000,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1237.19995117,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1237.90002441,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1238.59997559,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1239.30004883,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1239.30004883,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1238.59997559,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1237.90002441,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1237.19995117,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1236.50000000,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1233.80004883,-1324.80004883,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1240.19995117,-1324.80004883,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1243.40002441,-1324.80004883,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2964,1236.79980469,-1311.59960938,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1723,1239.19995117,-1320.90002441,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1737,1239.69995117,-1322.59997559,795.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2297,1241.50000000,-1315.50000000,795.79998779,0.00000000,0.00000000,225.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1723,1237.90002441,-1317.30004883,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1737,1239.59997559,-1316.80004883,795.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2303,1229.50000000,-1324.09997559,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2303,1229.50000000,-1322.09997559,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2303,1229.50000000,-1322.09997559,796.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2303,1229.50000000,-1323.09997559,796.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2303,1229.50000000,-1324.09997559,796.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2303,1229.50000000,-1325.09997559,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1237.09997559,-1340.80004883,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2138,1237.59960938,-1340.19921875,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1502,1229.81494141,-1345.43005371,795.73999023,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1502,1229.81640625,-1326.81933594,795.73999023,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2007,1227.59997559,-1308.59997559,797.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2007,1227.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1502,1226.65002441,-1316.88000488,795.73999023,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1232.80004883,-1346.00000000,795.79998779,0.00000000,0.00000000,359.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1236.69995117,-1346.00000000,795.79998779,0.00000000,0.00000000,359.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1240.30004883,-1346.00000000,795.79998779,0.00000000,0.00000000,359.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1236.69995117,-1348.69995117,795.79998779,0.00000000,0.00000000,359.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1232.80004883,-1348.69995117,795.79998779,0.00000000,0.00000000,359.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1240.30004883,-1348.69995117,795.79998779,0.00000000,0.00000000,359.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2166,1241.30004883,-1341.90002441,795.79998779,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1239.30004883,-1342.90002441,795.79998779,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2186,1234.90002441,-1341.50000000,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1233.30004883,-1349.69995117,796.20001221,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1237.30004883,-1349.69995117,796.20001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1240.80004883,-1349.80004883,796.20001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1240.80004883,-1346.90002441,796.20001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1237.30004883,-1346.90002441,796.20001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1233.30004883,-1346.90002441,796.20001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1238.80004883,-1341.80004883,796.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2612,1237.30004883,-1341.00000000,797.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2611,1241.69995117,-1344.50000000,797.70001221,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2616,1235.09997559,-1350.19995117,797.70001221,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2400,1232.30004883,-1355.30004883,799.59997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2400,1236.00000000,-1355.30004883,799.59997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(14401,1240.09997559,-1373.19995117,799.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(14401,1247.50000000,-1373.19921875,799.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(14782,1232.29980469,-1361.19921875,800.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(14782,1238.50000000,-1361.19995117,800.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2689,1238.90002441,-1355.69995117,800.09997559,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2704,1238.26000977,-1355.59997559,800.92999268,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2843,1236.50000000,-1360.69995117,799.40002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2846,1233.00000000,-1360.50000000,799.40002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2705,1236.50000000,-1355.80004883,800.09997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2706,1237.09997559,-1355.80004883,800.09997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2844,1235.59997559,-1355.30004883,799.40002441,0.00000000,0.00000000,250.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1220.19995117,-1358.30004883,799.40002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2166,1215.69995117,-1356.19995117,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1202.50000000,-1360.09997559,799.79998779,0.00000000,0.00000000,359.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2166,1210.30004883,-1356.19995117,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1208.30004883,-1357.19995117,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2166,1205.00000000,-1356.19995117,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1203.00000000,-1357.19995117,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2166,1215.69995117,-1360.09997559,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1213.69995117,-1361.09997559,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2166,1210.30004883,-1360.09997559,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2166,1205.00000000,-1360.09997559,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1203.00000000,-1361.09997559,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1202.50000000,-1356.19995117,799.79998779,0.00000000,0.00000000,359.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1207.69995117,-1356.19995117,799.79998779,0.00000000,0.00000000,359.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1213.09997559,-1356.19995117,799.79998779,0.00000000,0.00000000,359.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1213.09997559,-1360.19995117,799.79998779,0.00000000,0.00000000,359.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1208.30004883,-1361.09997559,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1207.80004883,-1360.19995117,799.79998779,0.00000000,0.00000000,359.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2186,1217.40002441,-1358.19995117,799.40002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1213.69921875,-1357.19921875,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1969,1220.80004883,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1968,1220.80004883,-1358.59997559,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1968,1220.80004883,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1969,1220.80004883,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1968,1217.00000000,-1358.59997559,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1968,1209.69995117,-1358.59997559,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1968,1205.90002441,-1358.59997559,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1968,1217.00000000,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1968,1213.40002441,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1968,1209.69995117,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1968,1205.90002441,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1969,1217.00000000,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1969,1213.40002441,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1969,1209.69995117,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1969,1205.90002441,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1969,1217.00000000,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1969,1213.30004883,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1969,1209.69995117,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1969,1205.90002441,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2441,1228.00000000,-1355.90002441,795.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2441,1228.00000000,-1356.90002441,795.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2441,1228.00000000,-1357.90002441,795.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2441,1228.00000000,-1358.90002441,795.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2441,1228.00000000,-1359.90002441,795.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2441,1228.00000000,-1360.90002441,795.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2441,1228.00000000,-1361.90002441,795.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2441,1228.00000000,-1362.90002441,795.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2441,1228.00000000,-1363.90002441,795.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2441,1228.00000000,-1364.90002441,795.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16644,1212.69921875,-1354.50000000,809.79998779,0.00000000,90.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16644,1227.59997559,-1365.30004883,798.79998779,90.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2136,1236.63964844,-1340.20703125,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2135,1234.60900879,-1358.35705566,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2137,1234.59997559,-1364.30004883,795.79998779,0.00000000,0.00000000,269.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2137,1234.59997559,-1361.32702637,795.79998779,0.00000000,0.00000000,269.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2137,1234.59997559,-1360.33801270,795.79998779,0.00000000,0.00000000,269.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2137,1234.59997559,-1359.33801270,795.79998779,0.00000000,0.00000000,269.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2135,1234.60900879,-1357.36999512,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2137,1234.59997559,-1356.40002441,795.79998779,0.00000000,0.00000000,269.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2305,1232.79980469,-1340.19921875,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1227.59997559,-1369.69995117,797.59997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1227.30004883,-1364.90002441,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1230.50000000,-1364.90002441,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1233.69995117,-1364.90002441,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1228.40002441,-1369.80004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1232.90002441,-1369.80004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1227.90002441,-1369.69995117,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1230.09997559,-1372.09997559,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1847,1228.80004883,-1367.50000000,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1983,1229.00000000,-1370.50000000,795.90002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1983,1229.00000000,-1371.50000000,795.90002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2012,1232.19995117,-1366.50000000,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2012,1232.19995117,-1369.50000000,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1983,1232.30004883,-1371.50000000,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1983,1229.00000000,-1370.50000000,797.40002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1983,1229.00000000,-1371.50000000,797.40002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1523,1229.73999023,-1364.93005371,795.72998047,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1232.02404785,-1361.62902832,795.79998779,0.00000000,0.00000000,89.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1232.02404785,-1360.66003418,795.80102539,0.00000000,0.00000000,89.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1232.02404785,-1359.68505859,795.79998779,0.00000000,0.00000000,89.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1232.02404785,-1358.72998047,795.80102539,0.00000000,0.00000000,89.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1231.00000000,-1361.59997559,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1231.00000000,-1360.64001465,795.80102539,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1231.00000000,-1359.67004395,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1231.00000000,-1358.69995117,795.80102539,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2149,1231.19995117,-1361.80004883,797.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2149,1231.09997559,-1361.19995117,797.00000000,0.00000000,0.00000000,287.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2866,1231.40002441,-1359.80004883,796.85998535,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2867,1234.69995117,-1362.19995117,796.84997559,0.00000000,0.00000000,60.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1224.90002441,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1968,1213.39941406,-1358.59960938,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3657,1210.09997559,-1343.00000000,796.20001221,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3657,1210.90002441,-1343.00000000,796.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3657,1210.09997559,-1331.90002441,796.20001221,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3657,1210.90002441,-1331.90002441,796.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1345.09997559,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1341.90002441,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1338.69995117,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1335.50000000,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1332.30004883,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1329.09997559,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1329.09997559,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1345.09997559,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1341.90002441,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1338.69995117,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1335.50000000,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1332.30004883,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1327.40002441,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1330.59997559,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1333.80004883,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1337.00000000,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1340.09997559,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1343.40002441,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1343.40002441,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1340.09997559,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1337.00000000,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1333.80004883,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1330.59997559,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1327.40002441,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);

	PrisonData[prisonDoors][0] = CreateDynamicObject(1495,1226.66210938,-1326.52929688,795.75000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0); // Prison door 1
   	PrisonData[prisonDoors][1] = CreateDynamicObject(1495,1215.21997070,-1310.73999023,795.75000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0); // Prison door 2
    PrisonData[prisonDoors][2] = CreateDynamicObject(1495,1226.76501465,-1345.71997070,795.73999023,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0); // Prison door 3

	PrisonData[prisonCells][0] = CreateDynamicObject(19302,1205.69995117,-1328.09997559,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][1] = CreateDynamicObject(19302,1205.69995117,-1331.30004883,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][2] = CreateDynamicObject(19302,1205.69995117,-1331.30004883,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][3] = CreateDynamicObject(19302,1205.69995117,-1328.09997559,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][4] = CreateDynamicObject(19302,1215.30004883,-1328.09997559,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][5] = CreateDynamicObject(19302,1215.30004883,-1331.30004883,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][6] = CreateDynamicObject(19302,1215.30004883,-1331.30004883,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][7] = CreateDynamicObject(19302,1215.30004883,-1328.09997559,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][8] = CreateDynamicObject(19302,1215.30004883,-1334.50000000,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][9] = CreateDynamicObject(19302,1215.29980469,-1337.69921875,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][10] = CreateDynamicObject(19302,1215.30004883,-1340.90002441,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][11] = CreateDynamicObject(19302,1215.30004883,-1340.90002441,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][12] = CreateDynamicObject(19302,1215.30004883,-1337.69995117,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][13] = CreateDynamicObject(19302,1215.30004883,-1334.50000000,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][14] = CreateDynamicObject(19302,1205.69995117,-1334.50000000,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][15] = CreateDynamicObject(19302,1205.69995117,-1337.69995117,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][16] = CreateDynamicObject(19302,1205.69995117,-1340.90002441,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][17] = CreateDynamicObject(19302,1205.69995117,-1334.50000000,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][18] = CreateDynamicObject(19302,1205.69995117,-1337.69995117,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][19] = CreateDynamicObject(19302,1205.69995117,-1340.90002441,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][20] = CreateDynamicObject(19302,1215.30004883,-1344.09997559,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][21] = CreateDynamicObject(19302,1215.30004883,-1344.09997559,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][22] = CreateDynamicObject(19302,1205.69995117,-1344.09997559,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][23] = CreateDynamicObject(19302,1205.69995117,-1344.09997559,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);

	SetDynamicObjectMaterial(CreateDynamicObject(19304,1213.59997559,-1329.90002441,799.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1213.59997559,-1333.40002441,799.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1213.59997559,-1336.90002441,799.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1213.59997559,-1340.40002441,799.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	SetDynamicObjectMaterial(CreateDynamicObject(19304,1213.59997559,-1343.90002441,799.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1211.90002441,-1328.09997559,799.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1209.09997559,-1328.09997559,799.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1207.40002441,-1329.90002441,799.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1207.40002441,-1333.40002441,799.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1207.40002441,-1336.90002441,799.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1207.40002441,-1340.40002441,799.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1207.40002441,-1343.90002441,799.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1215.30004883,-1345.69995117,799.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);

	for (new i = 0; i < 24; i ++) {
	    SetDynamicObjectMaterial(PrisonData[prisonCells][i], 0, 19302, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
	    GetDynamicObjectPos(PrisonData[prisonCells][i], PrisonCells[i][0], PrisonCells[i][1], PrisonCells[i][2]);
	}
	//Bank Modern
	new 	tmpobjid;
	tmpobjid = CreateDynamicObject(19377, 1462.219970, -1020.567443, 22.816400, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1467.124877, -1016.994018, 22.816400, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1457.355834, -1016.984558, 22.816400, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1471.856323, -1021.724121, 22.816400, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1481.488525, -1021.725585, 22.816400, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1487.251586, -1021.724487, 22.816400, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1452.626098, -1021.713684, 22.816400, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1436.783325, -1021.711120, 25.482889, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1443.001464, -1021.713439, 22.816400, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 1464.905639, -1020.167175, 18.222129, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10806, "airfence_sfse", "ws_oldpainted", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1461.359497, -1020.608032, 24.484289, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10023, "bigwhitesfe", "bigwhite_2", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1462.959106, -1020.609252, 24.484289, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10023, "bigwhitesfe", "bigwhite_2", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1463.674316, -1019.897705, 24.484300, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10806, "airfence_sfse", "ws_oldpainted", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1460.643188, -1019.897277, 24.484300, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10806, "airfence_sfse", "ws_oldpainted", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1462.167358, -1019.899230, 24.484300, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10806, "airfence_sfse", "ws_oldpainted", 0x00000000);
	tmpobjid = CreateDynamicObject(19433, 1462.146850, -1019.902893, 26.220710, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10806, "airfence_sfse", "ws_oldpainted", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1436.783203, -1021.713134, 22.816400, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1443.001342, -1021.711364, 25.482900, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1452.626098, -1021.711669, 25.482900, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1457.353881, -1016.984558, 25.482900, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1462.202270, -1020.565795, 25.482900, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1467.126831, -1016.993835, 25.482900, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1471.856201, -1021.722106, 25.482900, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1481.488525, -1021.723571, 25.482900, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1487.251586, -1021.722473, 25.482900, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "ferry_build14", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1452.646362, -1016.564086, 30.649789, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1443.024536, -1016.564514, 30.649789, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1436.780395, -1016.563598, 30.649789, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1462.211547, -1015.423217, 30.649789, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1471.849731, -1016.570007, 30.828800, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1481.481567, -1016.563110, 30.649789, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1487.250732, -1016.568298, 30.649789, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1464.317871, -1015.847595, 25.469020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1465.493041, -1015.846923, 25.469020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1465.137329, -1018.729797, 19.328300, 45.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1464.789184, -1018.730102, 19.328300, 45.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1459.578979, -1018.778808, 19.328300, 45.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1459.224365, -1018.775695, 19.328300, 45.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 1467.719238, -1021.316955, 18.163629, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10806, "airfence_sfse", "ws_oldpainted", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 1491.395507, -1021.315307, 18.163629, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10806, "airfence_sfse", "ws_oldpainted", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1467.131469, -1016.999206, 25.469020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1468.306762, -1016.998657, 25.469020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 1459.422729, -1020.168151, 18.163629, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10806, "airfence_sfse", "ws_oldpainted", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1458.835449, -1015.852905, 25.469020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1459.996582, -1015.851440, 25.469020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19370, 1481.907714, -1021.760681, 27.496610, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
	tmpobjid = CreateDynamicObject(19370, 1485.116088, -1021.760437, 27.496610, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
	tmpobjid = CreateDynamicObject(19370, 1488.324462, -1021.760131, 27.496610, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
	tmpobjid = CreateDynamicObject(19370, 1442.196533, -1021.726379, 27.496610, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
	tmpobjid = CreateDynamicObject(19370, 1438.988159, -1021.726684, 27.496610, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
	tmpobjid = CreateDynamicObject(19370, 1435.779785, -1021.726928, 27.496610, 0.000000, 0.000000, 90.059997, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1433.224853, -1016.988952, 25.469020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1432.049438, -1016.987487, 25.469020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 1432.637207, -1021.307250, 18.163629, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10806, "airfence_sfse", "ws_oldpainted", 0x00000000);
	tmpobjid = CreateDynamicObject(18980, 1456.719970, -1021.311706, 18.163629, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10806, "airfence_sfse", "ws_oldpainted", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1457.307495, -1016.993408, 25.469020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1456.132202, -1016.993957, 25.469020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19370, 1447.164062, -1021.729980, 27.496610, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
	tmpobjid = CreateDynamicObject(19370, 1450.372436, -1021.729736, 27.496610, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
	tmpobjid = CreateDynamicObject(19370, 1453.580810, -1021.729431, 27.496610, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
	tmpobjid = CreateDynamicObject(19370, 1470.847778, -1021.734741, 27.496610, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
	tmpobjid = CreateDynamicObject(19370, 1474.056152, -1021.734497, 27.496610, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
	tmpobjid = CreateDynamicObject(19370, 1477.264526, -1021.734191, 27.496610, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1434.258056, -1020.227416, 27.503400, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1443.713867, -1020.217041, 27.503400, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1445.645507, -1020.219421, 27.503400, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1455.100708, -1020.216247, 27.503400, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1469.326782, -1020.221496, 27.503400, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1478.778686, -1020.224975, 27.503400, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1480.391235, -1020.245605, 27.503400, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1489.846069, -1020.245910, 27.503400, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1447.483886, -1020.215454, 29.162500, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1450.982055, -1020.213745, 29.162500, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1488.186767, -1020.247436, 25.832799, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1453.269287, -1020.214782, 29.162500, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1484.687011, -1020.246337, 25.832799, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1482.056030, -1020.244934, 25.832799, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1453.437622, -1020.216613, 25.832799, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1449.937377, -1020.215515, 25.832799, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1447.306884, -1020.220153, 25.832799, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1442.052001, -1020.215209, 25.832799, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1438.551757, -1020.214111, 25.832799, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1435.921264, -1020.218750, 25.832799, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1477.117309, -1020.225097, 25.832799, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1473.617065, -1020.223999, 25.832799, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1470.986572, -1020.228637, 25.832799, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1442.052001, -1020.215209, 29.162500, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1438.551757, -1020.214111, 29.162500, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1435.921264, -1020.218811, 29.162500, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1470.986572, -1020.228576, 29.162500, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1473.617065, -1020.223999, 29.162500, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1477.117309, -1020.225097, 29.162500, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1482.056030, -1020.244873, 29.162500, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1484.687011, -1020.246276, 29.162500, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1488.186767, -1020.247375, 29.162500, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1436.789428, -1023.312194, 22.747499, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1446.422241, -1023.311584, 22.747499, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1456.053222, -1023.311340, 22.747499, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1475.317260, -1023.312316, 22.747499, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1484.948608, -1023.312072, 22.747499, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1487.255249, -1023.314880, 22.745500, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0x00000000);
	tmpobjid = CreateDynamicObject(19370, 1462.162719, -1020.577880, 28.453300, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 16639, "a51_labs", "ws_trainstationwin1", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1462.161010, -1018.919128, 26.791000, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1460.646240, -1019.062255, 28.453399, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1462.161010, -1018.919067, 30.115600, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19357, 1463.679199, -1019.062744, 28.453399, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1450.799072, -1016.991455, 24.011310, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1440.301025, -1016.988708, 24.011310, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1438.559936, -1016.986633, 24.011310, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1461.979736, -1015.843505, 24.011310, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1452.199462, -1016.986572, 24.011310, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1473.645019, -1016.998535, 24.011310, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1472.275268, -1016.995971, 24.011310, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1484.141723, -1016.998046, 24.011310, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19381, 1485.467285, -1016.997070, 24.011310, 0.000000, 90.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1471.849731, -1016.570007, 30.649789, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1462.211547, -1015.423217, 30.828800, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1481.481567, -1016.563110, 30.828800, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1487.250732, -1016.568298, 30.828800, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1452.646362, -1016.564086, 30.828800, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1443.024536, -1016.564514, 30.828800, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1436.780395, -1016.563598, 30.828800, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 3096, "bbpcpx", "blugrad32", 0x00000000);
	tmpobjid = CreateDynamicObject(700, 1488.776367, -1026.140991, 23.227769, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, -1, "none", "none", 0xFF66FF66);
	tmpobjid = CreateDynamicObject(18770, 1488.963256, -1026.074340, -77.028060, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_church_grass_alt", 0x00000000);
	tmpobjid = CreateDynamicObject(700, 1434.892089, -1026.081542, 23.227769, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, -1, "none", "none", 0xFF66FF66);
	tmpobjid = CreateDynamicObject(18770, 1434.997436, -1026.104003, -77.028060, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_church_grass_alt", 0x00000000);
	tmpobjid = CreateDynamicObject(700, 1453.899169, -1026.008178, 23.227769, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, -1, "none", "none", 0xFF66FF66);
	tmpobjid = CreateDynamicObject(18770, 1454.070434, -1026.031372, -77.028060, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_church_grass_alt", 0x00000000);
	tmpobjid = CreateDynamicObject(700, 1470.378540, -1026.149047, 23.227769, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, -1, "none", "none", 0xFF66FF66);
	tmpobjid = CreateDynamicObject(18770, 1470.547729, -1026.057006, -77.028060, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10101, "2notherbuildsfe", "Bow_church_grass_alt", 0x00000000);
	tmpobjid = CreateDynamicObject(1368, 1474.513061, -1022.360656, 23.531099, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
	tmpobjid = CreateDynamicObject(1368, 1484.741210, -1022.465454, 23.531099, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
	tmpobjid = CreateDynamicObject(638, 1479.697631, -1022.329467, 23.542400, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 4835, "airoads_las", "aarprt8LAS", 0x00000000);
	tmpobjid = CreateDynamicObject(638, 1444.842895, -1022.230041, 23.542400, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 4835, "airoads_las", "aarprt8LAS", 0x00000000);
	tmpobjid = CreateDynamicObject(1368, 1439.062011, -1022.278808, 23.531099, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
	tmpobjid = CreateDynamicObject(1368, 1450.273071, -1022.376953, 23.531099, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1488.764648, -1027.163208, 21.219100, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1489.192993, -1027.161621, 21.219100, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1490.043945, -1026.448852, 21.219100, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1487.875610, -1026.449829, 21.219100, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1487.876464, -1025.875610, 21.219100, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1488.588867, -1024.990478, 21.219100, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1489.168701, -1024.991333, 21.219100, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1490.043579, -1025.704101, 21.219100, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1434.800537, -1027.190063, 21.219100, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1433.911499, -1026.476684, 21.219100, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1433.912353, -1025.902465, 21.219100, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1434.624755, -1025.017333, 21.219100, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1435.204589, -1025.018188, 21.219100, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1436.079467, -1025.730957, 21.219100, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1436.079833, -1026.475708, 21.219100, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1435.228881, -1027.188476, 21.219100, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1453.870605, -1027.142089, 21.219100, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1452.981567, -1026.428710, 21.219100, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1452.982421, -1025.854492, 21.219100, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1453.694824, -1024.969360, 21.219100, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1454.274658, -1024.970214, 21.219100, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1455.149536, -1025.682983, 21.219100, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1455.149902, -1026.427734, 21.219100, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1454.298950, -1027.140502, 21.219100, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1470.353759, -1027.155517, 21.219100, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1469.464721, -1026.442138, 21.219100, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1469.465576, -1025.867919, 21.219100, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1470.177978, -1024.982788, 21.219100, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1470.757812, -1024.983642, 21.219100, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1471.632690, -1025.696411, 21.219100, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1471.633056, -1026.441162, 21.219100, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19430, 1470.782104, -1027.153930, 21.219100, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1432.059936, -1023.746704, 17.589599, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1436.964355, -1028.474731, 17.589599, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1446.598022, -1028.473510, 17.589599, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1456.229736, -1028.473388, 17.589599, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1465.687133, -1023.308410, 22.747499, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 13691, "bevcunto2_lahills", "adeta", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1465.861328, -1028.474121, 17.589599, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1475.493408, -1028.475830, 17.589599, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1485.123046, -1028.477416, 17.589599, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1491.984985, -1023.749694, 17.589599, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(19377, 1487.258056, -1028.478881, 17.589599, 0.000000, 0.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10765, "airportgnd_sfse", "white", 0x00000000);
	tmpobjid = CreateDynamicObject(2010, 1456.670776, -1022.426757, 22.832990, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 4830, "airport2", "kbplanter_plants1", 0xFF66FF66);
	tmpobjid = CreateDynamicObject(2010, 1467.724975, -1022.420532, 22.833240, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 4830, "airport2", "kbplanter_plants1", 0xFF66FF66);
	tmpobjid = CreateDynamicObject(2010, 1491.447753, -1022.267822, 22.831079, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 4830, "airport2", "kbplanter_plants1", 0xFF66FF66);
	tmpobjid = CreateDynamicObject(2010, 1432.642456, -1022.415344, 22.835699, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 4830, "airport2", "kbplanter_plants1", 0xFF66FF66);
	tmpobjid = CreateDynamicObject(19482, 1490.110351, -1021.833190, 23.371437, 7.999997, 0.000000, -90.000022, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10023, "bigwhitesfe", "bigwhite_2", 0x00000000);
	SetDynamicObjectMaterialText(	tmpobjid, 0, "{1a1aff} by  Kova", 120, "Ariel", 25, 1, 0x00000000, 0x00000000, 1);
	tmpobjid = CreateDynamicObject(19482, 1490.092407, -1021.823181, 23.348859, 7.999997, 0.000000, -90.000022, -1, -1, -1, 300.00, 300.00);
	SetDynamicObjectMaterial(	tmpobjid, 0, 10023, "bigwhitesfe", "bigwhite_2", 0x00000000);
	SetDynamicObjectMaterialText(	tmpobjid, 0, "{000000} by  Kova", 120, "Ariel", 25, 1, 0x00000000, 0x00000000, 1);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObject(19377, 1459.402465, -1018.774475, 19.328269, 45.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19377, 1464.963500, -1018.729614, 19.328269, 45.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1897, 1461.853027, -1019.590148, 24.621610, 0.000000, 90.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1897, 1462.492919, -1019.588378, 24.591600, 180.000000, 90.000000, 270.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19381, 1491.982788, -1017.001281, 25.469020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19381, 1490.806518, -1016.998718, 25.469020, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19377, 1465.687133, -1023.308410, 22.747499, 0.000000, 90.000000, 90.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19526, 1454.990600, -1022.258239, 22.835119, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(19526, 1469.451782, -1022.260559, 22.835119, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1215, 1460.317871, -1020.842773, 23.093442, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1215, 1460.317871, -1020.842773, 23.093442, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1215, 1463.988647, -1020.842773, 23.093442, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1215, 1463.988647, -1020.842773, 23.093442, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1215, 1472.889282, -1022.293029, 22.893438, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1215, 1476.078857, -1022.293029, 22.893438, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1215, 1483.119384, -1022.293029, 22.893438, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1215, 1486.339599, -1022.293029, 22.893438, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1215, 1451.879760, -1022.293029, 22.893438, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1215, 1448.658813, -1022.293029, 22.893438, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1215, 1440.677978, -1022.293029, 22.893438, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	tmpobjid = CreateDynamicObject(1215, 1437.376953, -1022.293029, 22.893438, 0.000000, 0.000000, 0.000000, -1, -1, -1, 300.00, 300.00);
	//Airport
	CreateDynamicObject(8661, 1527.85559, -2174.87744, 12.56350,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(8661, 1516.51953, -2175.01465, 12.56050,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(8673, 1526.69031, -2156.57837, 14.02737,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8673, 1507.22119, -2156.56494, 14.02737,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9583, 1496.73743, -2156.70239, 16.15531,   0.00000, 179.99451, 0.00000);
	CreateDynamicObject(8673, 1496.60156, -2174.91895, 14.02737,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9583, 1496.69238, -2185.15332, 16.15531,   0.00000, 179.99451, 0.00000);
	CreateDynamicObject(8673, 1537.71045, -2184.96289, 14.02737,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9583, 1547.70801, -2185.00879, 16.15531,   0.00000, 179.99451, 0.00000);
	CreateDynamicObject(638, 1538.32605, -2168.24902, 13.25749,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1538.31799, -2170.00659, 13.12478,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 1536.10413, -2166.74316, 13.25749,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1536.04773, -2169.17236, 13.12478,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1536.13159, -2184.56641, 13.12478,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1496.90063, -2165.73071, 13.12478,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1543.79102, -2276.42383, 13.11120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1559.64160, -2276.41113, 13.18355,   0.00000, 0.00000, 90.24170);
	CreateDynamicObject(968, 1544.75000, -2276.35938, 13.45826,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(966, 1544.82227, -2276.36328, 12.55051,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(1215, 1552.52344, -2276.35156, 13.11120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1451.61694, -2204.72192, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1425.99719, -2204.72412, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1400.38318, -2204.71875, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1374.76648, -2204.71973, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(984, 1360.11926, -2210.84351, 13.18355,   0.00000, 0.00000, 163.25000);
	CreateDynamicObject(984, 1357.71350, -2223.34863, 13.18355,   0.00000, 0.00000, 174.99585);
	CreateDynamicObject(984, 1357.11011, -2236.13403, 13.18355,   0.00000, 0.00000, 179.49573);
	CreateDynamicObject(984, 1357.03821, -2244.13403, 13.18355,   0.00000, 0.00000, 179.49463);
	CreateDynamicObject(983, 1357.32373, -2253.72095, 13.23043,   0.00000, 0.00000, 186.24719);
	CreateDynamicObject(983, 1358.84534, -2259.86743, 13.23043,   0.00000, 0.00000, 201.74573);
	CreateDynamicObject(983, 1361.91406, -2265.43042, 13.23043,   0.00000, 0.00000, 215.99194);
	CreateDynamicObject(983, 1366.21924, -2270.10571, 13.23043,   0.00000, 0.00000, 229.49022);
	CreateDynamicObject(983, 1371.53833, -2273.58789, 13.23043,   0.00000, 0.00000, 243.98792);
	CreateDynamicObject(983, 1377.56738, -2275.60962, 13.23043,   0.00000, 0.00000, 258.73438);
	CreateDynamicObject(982, 1393.48523, -2276.25562, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(983, 1464.69019, -2227.45850, 13.23043,   0.00000, 0.00000, 1.00000);
	CreateDynamicObject(983, 1464.38232, -2207.93457, 13.23043,   0.00000, 0.00000, 358.74756);
	CreateDynamicObject(4639, 1463.37854, -2221.87964, 14.24345,   0.00000, 0.00000, 269.74707);
	CreateDynamicObject(966, 1464.06091, -2219.24561, 12.55051,   0.00000, 0.00000, 267.99451);
	CreateDynamicObject(968, 1464.07800, -2219.25757, 13.45826,   0.00000, 358.75000, 88.00000);
	CreateDynamicObject(1215, 1464.35645, -2223.92163, 13.11120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1464.42114, -2211.73462, 13.11120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1559.66467, -2296.58862, 13.18355,   0.00000, 0.00000, 89.49170);
	CreateDynamicObject(984, 1536.78967, -2296.47168, 13.18355,   0.00000, 0.00000, 89.48914);
	CreateDynamicObject(983, 1529.98743, -2299.58203, 13.23043,   0.00000, 0.00000, 352.74756);
	CreateDynamicObject(983, 1529.36865, -2304.33447, 13.23043,   0.00000, 0.00000, 352.74353);
	CreateDynamicObject(983, 1527.85413, -2310.50659, 13.23043,   0.00000, 0.00000, 339.24353);
	CreateDynamicObject(983, 1526.15625, -2314.98535, 13.23043,   0.00000, 0.00000, 339.24133);
	CreateDynamicObject(983, 1523.19312, -2320.59790, 13.23043,   0.00000, 0.00000, 324.99133);
	CreateDynamicObject(983, 1520.44141, -2324.53174, 13.23043,   0.00000, 0.00000, 324.98657);
	CreateDynamicObject(983, 1516.18762, -2329.23755, 13.23043,   0.00000, 0.00000, 310.98657);
	CreateDynamicObject(983, 1512.56750, -2332.38013, 13.23043,   0.00000, 0.00000, 310.98450);
	CreateDynamicObject(983, 1507.27502, -2335.90308, 13.23043,   0.00000, 0.00000, 296.23450);
	CreateDynamicObject(983, 1501.52881, -2338.73389, 13.23043,   0.00000, 0.00000, 296.22986);
	CreateDynamicObject(984, 1492.33789, -2341.14331, 13.18355,   0.00000, 359.75000, 98.98914);
	CreateDynamicObject(984, 1490.73499, -2341.40942, 13.18355,   0.00000, 359.74731, 98.98685);
	CreateDynamicObject(982, 1484.40796, -2355.21118, 13.23821,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(982, 1497.21033, -2368.00488, 13.23821,   0.00000, 0.00000, 89.99475);
	CreateDynamicObject(982, 1522.82739, -2368.00586, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1548.43518, -2368.01245, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1574.05090, -2368.01855, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1599.65869, -2368.02612, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1602.06287, -2368.00806, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1566.07104, -2309.45947, 13.23821,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(982, 1566.07190, -2325.45557, 13.23821,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(982, 1566.07654, -2263.59424, 13.23821,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(982, 1566.07764, -2249.21143, 13.23821,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(984, 1536.77673, -2276.47290, 13.18355,   0.00000, 0.00000, 90.24170);
	CreateDynamicObject(983, 1529.89136, -2273.30762, 13.23043,   0.00000, 0.00000, 8.74353);
	CreateDynamicObject(983, 1528.90479, -2266.98438, 13.23043,   0.00000, 0.00000, 8.98962);
	CreateDynamicObject(983, 1528.65784, -2265.39478, 13.23043,   0.00000, 0.00000, 8.98682);
	CreateDynamicObject(984, 1525.31470, -2256.48413, 13.18355,   0.00000, 0.00000, 26.24170);
	CreateDynamicObject(984, 1518.18762, -2245.98511, 13.18355,   0.00000, 0.00000, 41.99084);
	CreateDynamicObject(983, 1511.26770, -2239.39771, 13.23043,   0.00000, 0.00000, 55.23682);
	CreateDynamicObject(983, 1508.62524, -2237.56592, 13.23043,   0.00000, 0.00000, 55.23376);
	CreateDynamicObject(983, 1503.00110, -2234.60425, 13.23043,   0.00000, 0.00000, 69.23376);
	CreateDynamicObject(983, 1498.50818, -2232.90088, 13.23043,   0.00000, 0.00000, 69.23035);
	CreateDynamicObject(983, 1492.32666, -2231.41284, 13.23043,   0.00000, 0.00000, 83.73035);
	CreateDynamicObject(983, 1487.55151, -2230.88721, 13.23043,   0.00000, 0.00000, 83.72681);
	CreateDynamicObject(982, 1484.37976, -2217.74268, 13.23821,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(982, 1497.16418, -2204.93823, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1522.77844, -2204.93579, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1548.39136, -2204.93506, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1574.00293, -2204.93555, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1599.62158, -2204.93921, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1602.06445, -2204.94067, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(983, 1464.38196, -2364.93408, 13.23043,   0.00000, 0.00000, 359.74756);
	CreateDynamicObject(983, 1464.39392, -2345.53320, 13.23043,   0.00000, 0.00000, 359.74731);
	CreateDynamicObject(983, 1461.22839, -2341.97729, 13.23043,   0.00000, 0.00000, 263.22986);
	CreateDynamicObject(983, 1456.47400, -2341.41870, 13.23043,   0.00000, 0.00000, 263.22693);
	CreateDynamicObject(983, 1450.29358, -2339.90845, 13.23043,   0.00000, 0.00000, 249.22693);
	CreateDynamicObject(983, 1445.80115, -2338.20337, 13.23043,   0.00000, 0.00000, 249.22485);
	CreateDynamicObject(983, 1440.17407, -2335.24072, 13.23043,   0.00000, 0.00000, 235.22487);
	CreateDynamicObject(983, 1436.23230, -2332.50391, 13.23043,   0.00000, 0.00000, 235.22278);
	CreateDynamicObject(983, 1431.51221, -2328.24194, 13.23043,   0.00000, 0.00000, 220.72278);
	CreateDynamicObject(983, 1428.37903, -2324.60962, 13.23043,   0.00000, 0.00000, 220.72083);
	CreateDynamicObject(983, 1424.87402, -2319.31226, 13.23043,   0.00000, 0.00000, 206.22083);
	CreateDynamicObject(983, 1422.04248, -2313.56543, 13.23043,   0.00000, 0.00000, 206.21887);
	CreateDynamicObject(984, 1419.63110, -2304.32422, 13.18355,   0.00000, 359.74731, 8.98682);
	CreateDynamicObject(984, 1419.37976, -2302.73706, 13.18355,   0.00000, 359.74731, 8.98132);
	CreateDynamicObject(982, 1405.57764, -2296.42749, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1394.37988, -2296.42310, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(983, 1378.44751, -2296.98242, 13.23043,   0.00000, 358.00000, 280.73352);
	CreateDynamicObject(983, 1372.39282, -2298.93335, 13.23043,   0.00000, 357.99500, 295.22815);
	CreateDynamicObject(983, 1370.95642, -2299.61157, 13.23043,   0.00000, 357.98950, 295.22461);
	CreateDynamicObject(983, 1365.79761, -2303.22900, 13.23043,   0.00000, 357.98950, 314.97461);
	CreateDynamicObject(983, 1361.58606, -2308.03418, 13.23043,   0.00000, 357.98950, 322.47256);
	CreateDynamicObject(983, 1358.57849, -2313.58057, 13.23043,   0.00000, 357.73950, 340.72070);
	CreateDynamicObject(983, 1357.18250, -2319.83350, 13.23043,   0.00000, 357.73682, 353.96899);
	CreateDynamicObject(984, 1356.88257, -2329.45996, 13.18355,   0.00000, 359.74731, 0.23132);
	CreateDynamicObject(984, 1356.90820, -2335.85742, 13.18355,   0.00000, 359.74731, 0.23071);
	CreateDynamicObject(982, 1357.77625, -2355.07153, 13.23821,   0.00000, 0.00000, 183.74457);
	CreateDynamicObject(982, 1451.53479, -2368.14258, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1425.91760, -2368.13745, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1400.30359, -2368.13745, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1374.60498, -2368.04614, 13.23821,   0.00000, 0.00000, 89.49451);
	CreateDynamicObject(982, 1371.40100, -2368.01172, 13.23821,   0.00000, 0.00000, 89.48914);
	CreateDynamicObject(982, 1406.28223, -2276.25952, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(984, 1419.81775, -2269.89941, 13.18355,   0.00000, 0.00000, 173.49463);
	CreateDynamicObject(983, 1421.69031, -2260.53027, 13.23043,   0.00000, 0.00000, 338.98441);
	CreateDynamicObject(983, 1422.84119, -2257.53345, 13.23043,   0.00000, 0.00000, 338.98315);
	CreateDynamicObject(983, 1425.82825, -2251.91382, 13.23043,   0.00000, 0.00000, 324.98318);
	CreateDynamicObject(983, 1428.58044, -2247.98584, 13.23043,   0.00000, 0.00000, 324.98108);
	CreateDynamicObject(983, 1432.82678, -2243.24976, 13.23043,   0.00000, 0.00000, 311.23111);
	CreateDynamicObject(983, 1436.43042, -2240.08887, 13.23043,   0.00000, 0.00000, 311.22620);
	CreateDynamicObject(983, 1441.72864, -2236.58252, 13.23043,   0.00000, 0.00000, 295.97623);
	CreateDynamicObject(983, 1447.53125, -2233.87769, 13.23043,   0.00000, 0.00000, 293.97168);
	CreateDynamicObject(983, 1453.63660, -2232.10645, 13.23043,   0.00000, 0.00000, 278.46667);
	CreateDynamicObject(983, 1459.98267, -2231.23145, 13.23043,   0.00000, 0.00000, 277.21497);
	CreateDynamicObject(983, 1461.56726, -2231.02979, 13.23043,   0.00000, 0.00000, 277.21252);
	CreateDynamicObject(4639, 1463.35535, -2359.42896, 14.24345,   0.00000, 0.00000, 269.74182);
	CreateDynamicObject(966, 1464.16260, -2356.70288, 12.55051,   0.00000, 0.00000, 268.98950);
	CreateDynamicObject(968, 1464.16040, -2356.75732, 13.45826,   0.00000, 1.74979, 88.74506);
	CreateDynamicObject(1215, 1464.38049, -2361.44019, 13.11120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1464.35681, -2349.17383, 13.11120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4639, 1540.73279, -2274.96411, 14.24345,   0.00000, 0.00000, 179.74182);
	CreateDynamicObject(4639, 1555.39539, -2297.71460, 14.24345,   0.00000, 0.00000, 359.48633);
	CreateDynamicObject(966, 1551.40527, -2296.77686, 12.55051,   0.00000, 0.00000, 359.49448);
	CreateDynamicObject(968, 1551.41980, -2296.77271, 13.45826,   0.00000, 356.99994, 359.25000);
	CreateDynamicObject(1215, 1552.63269, -2296.44238, 13.11120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1543.88184, -2296.49365, 13.11120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(973, 1550.51868, -2135.92017, 14.57033,   359.75015, 357.99997, 16.24127);
	CreateDynamicObject(973, 1541.61414, -2138.36963, 14.24551,   359.74731, 357.99500, 14.48779);
	CreateDynamicObject(973, 1532.42371, -2140.09009, 13.99610,   359.74719, 358.98950, 6.48987);
	CreateDynamicObject(973, 1523.15576, -2141.05347, 13.82790,   359.74182, 358.98926, 5.23743);
	CreateDynamicObject(973, 1513.87817, -2141.71631, 13.66549,   359.73633, 358.98376, 2.98499);
	CreateDynamicObject(973, 1504.61316, -2141.92700, 13.56108,   359.73633, 359.73376, 359.48621);
	CreateDynamicObject(973, 1495.31970, -2141.84766, 13.51468,   359.73083, 359.73083, 359.48364);
	CreateDynamicObject(973, 1486.23816, -2141.74438, 13.49454,   0.00000, 0.00000, 359.25000);
	CreateDynamicObject(973, 1477.02637, -2141.65991, 13.49454,   0.00000, 0.00000, 359.74744);
	CreateDynamicObject(973, 1467.85034, -2141.61719, 13.49454,   0.00000, 0.00000, 359.74731);
	CreateDynamicObject(973, 1458.79932, -2141.57788, 13.49454,   0.00000, 0.00000, 359.74731);
	CreateDynamicObject(973, 1449.43359, -2141.53564, 13.49454,   0.00000, 0.00000, 359.74731);
	CreateDynamicObject(973, 1440.23083, -2141.98291, 13.49454,   0.00000, 0.00000, 5.74731);
	CreateDynamicObject(973, 1431.29626, -2142.88159, 13.49454,   0.00000, 0.00000, 5.74585);
	CreateDynamicObject(973, 1422.26416, -2144.79810, 13.49454,   0.00000, 0.00000, 18.24585);
	CreateDynamicObject(973, 1413.72095, -2147.60742, 13.49454,   0.00000, 0.00000, 18.24280);
	CreateDynamicObject(973, 1405.26172, -2151.36694, 13.49454,   0.00000, 0.00000, 29.74280);
	CreateDynamicObject(973, 1397.13586, -2156.01514, 13.49454,   0.00000, 0.00000, 29.73999);
	CreateDynamicObject(973, 1389.55322, -2161.37329, 13.49454,   0.00000, 0.00000, 40.73999);
	CreateDynamicObject(973, 1382.73120, -2167.67310, 13.49454,   0.00000, 0.00000, 44.73730);
	CreateDynamicObject(973, 1376.50769, -2174.56030, 13.49454,   0.00000, 0.00000, 50.73633);
	CreateDynamicObject(973, 1371.02747, -2181.99219, 13.49454,   0.00000, 0.00000, 56.48486);
	CreateDynamicObject(973, 1364.30566, -2194.85132, 13.28573,   0.00000, 359.50000, 88.23071);
	CreateDynamicObject(3472, 1319.18237, -2286.82813, 12.54688,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6283, 806.92169, -2223.43140, 16.93356,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9824, 823.38995, -2150.88794, 14.82258,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10281, 1629.44861, -1863.52612, 17.76000,   3.97000, 0.00000, 1.98499);
	CreateDynamicObject(11292, 1632.83752, -1846.50085, 14.25000,   0.00000, 0.00000, 182.62006);
	CreateDynamicObject(11326, 1620.04858, -1784.29785, 14.94284,   0.00000, 0.00000, 179.32501);
	CreateDynamicObject(11393, 1653.87708, -1824.11133, 14.56404,   0.00000, 358.01501, 356.03000);
	CreateDynamicObject(17950, 1626.24744, -1787.17224, 14.83786,   0.00000, 0.00000, 176.66504);
	CreateDynamicObject(978, 1625.90991, -1857.31921, 13.20741,   0.00000, 0.00000, 271.26514);
	CreateDynamicObject(8042, 1620.16345, -1861.33081, 15.41459,   0.00000, 0.00000, 285.83984);
	CreateDynamicObject(9482, 817.71307, -2002.56677, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, 1628.67578, -1845.72046, 13.04398,   0.00000, 0.00000, 91.31003);
	CreateDynamicObject(1663, 1631.36450, -1848.08875, 13.59367,   0.00000, 1.98499, 194.53003);
	CreateDynamicObject(1670, 1630.54297, -1847.27478, 13.84887,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, 1629.32825, -1847.44385, 13.50420,   0.00000, 0.00000, 115.13004);
	CreateDynamicObject(2009, 1630.45642, -1847.19958, 13.04398,   0.00000, 0.00000, 180.63501);
	CreateDynamicObject(2802, 1636.78699, -1842.34131, 12.94744,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10281, 1613.73083, -1863.28210, 17.55704,   3.96606, 330.22501, 3.96802);
	CreateDynamicObject(4639, 1617.87842, -1861.19348, 13.99648,   0.00000, 0.00000, 179.19836);
	CreateDynamicObject(17950, 1633.56555, -1789.03455, 14.77355,   0.00000, 0.00000, 164.75012);
	CreateDynamicObject(17950, 1640.60059, -1790.79004, 14.78632,   0.00000, 0.00000, 164.74548);
	CreateDynamicObject(17950, 1648.36475, -1792.82764, 14.78558,   0.00000, 0.00000, 164.74548);
	CreateDynamicObject(17950, 1657.02930, -1794.96362, 14.79907,   0.00000, 0.00000, 164.74548);
	CreateDynamicObject(11326, 1656.44714, -1844.18750, 15.08204,   0.00000, 0.00000, 85.31317);
	CreateDynamicObject(2798, 1639.83728, -1832.55859, 18.82885,   0.00000, 0.00000, 83.37003);
	CreateDynamicObject(1193, 1647.91504, -1838.78113, 16.77222,   0.00000, 0.00000, 264.00500);
	CreateDynamicObject(1187, 1648.76172, -1837.30310, 16.02220,   0.00000, 0.00000, 258.76498);
	CreateDynamicObject(1173, 1648.79590, -1837.08850, 15.67172,   346.10501, 0.00000, 84.08508);
	CreateDynamicObject(1171, 1648.63818, -1837.00940, 15.05654,   342.13501, 0.00000, 80.11511);
	CreateDynamicObject(1169, 1649.10156, -1835.02490, 14.34895,   336.17999, 0.00000, 83.37003);
	CreateDynamicObject(1168, 1648.95703, -1837.40625, 15.59486,   11.91000, 0.00000, 262.02002);
	CreateDynamicObject(1164, 1648.83557, -1832.93054, 17.71306,   300.44998, 358.01501, 81.38501);
	CreateDynamicObject(1162, 1648.69421, -1835.35999, 17.71853,   304.41998, 0.00000, 79.40002);
	CreateDynamicObject(1158, 1648.69617, -1828.67871, 17.79482,   276.62994, 1.98499, 84.08508);
	CreateDynamicObject(1147, 1648.70532, -1826.63184, 17.66501,   298.46497, 0.00000, 84.08508);
	CreateDynamicObject(1146, 1649.44739, -1824.37512, 17.51102,   320.29999, 0.00000, 82.10010);
	CreateDynamicObject(1142, 1648.58496, -1835.14587, 16.79507,   0.00000, 280.59998, 0.00000);
	CreateDynamicObject(1138, 1648.35474, -1837.71912, 17.79742,   306.40500, 0.00000, 89.32501);
	CreateDynamicObject(1130, 1646.03455, -1842.40601, 16.42998,   302.43500, 0.00000, 1.98502);
	CreateDynamicObject(1131, 1643.82825, -1842.72021, 16.29337,   304.41998, 0.00000, 0.00000);
	CreateDynamicObject(1114, 1646.96411, -1842.54785, 14.79363,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1085, 1648.82092, -1834.10376, 16.67151,   0.00000, 0.00000, 179.36496);
	CreateDynamicObject(1084, 1648.82239, -1834.08606, 14.86751,   0.00000, 0.00000, 177.37996);
	CreateDynamicObject(1082, 1648.82544, -1834.04919, 15.76295,   0.00000, 0.00000, 181.34996);
	CreateDynamicObject(1081, 1649.48792, -1822.91541, 15.78066,   0.00000, 0.00000, 182.61865);
	CreateDynamicObject(1080, 1649.73022, -1823.01196, 16.77306,   0.00000, 0.00000, 182.62006);
	CreateDynamicObject(1079, 1649.73926, -1822.90210, 14.48866,   0.00000, 0.00000, 183.33496);
	CreateDynamicObject(1078, 1649.73560, -1822.94800, 13.45132,   0.00000, 0.00000, 181.34996);
	CreateDynamicObject(1073, 1648.36072, -1839.71704, 17.48889,   0.00000, 0.00000, 171.42496);
	CreateDynamicObject(1074, 1648.24207, -1840.98450, 17.57771,   0.00000, 0.00000, 160.78503);
	CreateDynamicObject(1065, 1645.81836, -1844.88574, 15.23515,   0.00000, 0.00000, 185.31996);
	CreateDynamicObject(1066, 1645.96448, -1845.11499, 14.54490,   0.00000, 0.00000, 178.65002);
	CreateDynamicObject(1064, 1646.53210, -1845.77942, 13.97422,   0.00000, 0.00000, 187.30496);
	CreateDynamicObject(1060, 1648.28296, -1841.37769, 16.54399,   294.49500, 0.00000, 88.05502);
	CreateDynamicObject(1058, 1648.04956, -1841.44849, 16.12557,   306.40497, 0.00000, 79.40002);
	CreateDynamicObject(1049, 1648.24219, -1841.44397, 15.59453,   310.37500, 0.00000, 83.37000);
	CreateDynamicObject(1045, 1643.77856, -1844.65564, 15.04437,   0.00000, 0.00000, 173.40996);
	CreateDynamicObject(1025, 1648.82080, -1834.10510, 13.85179,   0.00000, 0.00000, 178.65002);
	CreateDynamicObject(1023, 1648.33862, -1841.56360, 15.06690,   300.44995, 0.00000, 81.38501);
	CreateDynamicObject(1010, 1648.73169, -1836.76880, 16.18604,   182.62006, 272.65997, 352.05994);
	CreateDynamicObject(1009, 1648.72302, -1835.10291, 16.12863,   179.36496, 270.67499, 349.35938);
	CreateDynamicObject(1008, 1648.80481, -1835.87756, 16.19453,   179.14502, 259.21997, 0.00000);
	CreateDynamicObject(1003, 1648.33044, -1841.66418, 14.42998,   300.17999, 0.00000, 90.80997);
	CreateDynamicObject(1001, 1648.33093, -1841.65747, 13.90819,   318.31506, 0.00000, 91.03510);
	CreateDynamicObject(2798, 1648.02722, -1836.20459, 16.95666,   0.00000, 0.00000, 83.37003);
	CreateDynamicObject(1167, 1648.68469, -1837.34277, 14.85020,   0.00000, 0.00000, 268.68994);
	CreateDynamicObject(1163, 1648.30798, -1830.70313, 17.72926,   315.61462, 0.00000, 87.34003);
	CreateDynamicObject(1159, 1648.87244, -1839.68665, 14.04955,   0.00000, 0.00000, 264.00500);
	CreateDynamicObject(1337, 1649.19885, -1839.24402, 12.54487,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1337, 1649.19885, -1839.24402, 12.54487,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1085, 1650.64966, -1822.31812, 13.28038,   0.00000, 0.00000, 79.40002);
	CreateDynamicObject(1084, 1651.81775, -1822.41016, 13.28217,   0.00000, 0.00000, 87.34003);
	CreateDynamicObject(1083, 1653.16431, -1822.39600, 13.28448,   0.00000, 0.00000, 87.34003);
	CreateDynamicObject(1082, 1654.34375, -1822.40771, 13.28587,   0.00000, 0.00000, 87.34003);
	CreateDynamicObject(1081, 1655.64319, -1822.77930, 13.28750,   0.00000, 0.00000, 93.29501);
	CreateDynamicObject(1080, 1650.59460, -1822.46423, 14.28746,   0.00000, 0.00000, 83.37003);
	CreateDynamicObject(1079, 1651.76208, -1822.33203, 14.28251,   0.00000, 0.00000, 89.32501);
	CreateDynamicObject(1078, 1652.98828, -1822.54602, 14.28434,   0.00000, 0.00000, 91.31003);
	CreateDynamicObject(1077, 1654.25867, -1822.70581, 14.28558,   0.00000, 358.01501, 93.29501);
	CreateDynamicObject(1076, 1655.52612, -1822.82080, 14.28662,   0.00000, 0.00000, 89.32501);
	CreateDynamicObject(1075, 1650.64063, -1822.35742, 15.28643,   0.00000, 0.00000, 89.32501);
	CreateDynamicObject(1074, 1651.79065, -1822.37939, 15.28266,   0.00000, 0.00000, 85.35501);
	CreateDynamicObject(1073, 1652.88391, -1822.78430, 15.28354,   0.00000, 0.00000, 81.38501);
	CreateDynamicObject(1025, 1654.28638, -1822.95288, 15.28056,   0.00000, 0.00000, 85.35501);
	CreateDynamicObject(1164, 1650.86768, -1822.35205, 17.96070,   314.34500, 0.00000, 356.03000);
	CreateDynamicObject(1163, 1652.93115, -1822.52234, 17.86054,   324.26999, 0.00000, 0.00000);
	CreateDynamicObject(1162, 1655.10730, -1822.95081, 18.04319,   298.46500, 356.03000, 1.98499);
	CreateDynamicObject(1158, 1657.19165, -1823.12183, 17.86639,   320.29999, 0.00000, 0.00000);
	CreateDynamicObject(1147, 1651.04333, -1822.10205, 17.31801,   312.35999, 0.00000, 356.03000);
	CreateDynamicObject(1146, 1652.94080, -1822.52222, 17.31403,   316.32999, 0.00000, 358.01501);
	CreateDynamicObject(1139, 1655.12280, -1822.95203, 17.29698,   312.35999, 0.00000, 0.00000);
	CreateDynamicObject(1138, 1657.21838, -1823.12402, 17.29333,   320.29999, 0.00000, 0.00000);
	CreateDynamicObject(1060, 1650.91003, -1821.85229, 16.49652,   322.28500, 0.00000, 352.06000);
	CreateDynamicObject(1058, 1652.94385, -1822.27173, 16.64087,   316.32999, 0.00000, 0.00000);
	CreateDynamicObject(1050, 1655.00024, -1822.44043, 16.54906,   306.40500, 0.00000, 0.00000);
	CreateDynamicObject(1049, 1657.24280, -1822.87524, 16.52243,   322.28500, 0.00000, 356.03000);
	CreateDynamicObject(1016, 1650.69580, -1822.33643, 16.14213,   312.35999, 0.00000, 356.03000);
	CreateDynamicObject(1015, 1652.77234, -1822.50684, 16.14137,   316.32999, 0.00000, 356.03000);
	CreateDynamicObject(1164, 1657.35754, -1823.13550, 15.96872,   332.20999, 0.00000, 356.03000);
	CreateDynamicObject(1162, 1655.15503, -1822.95483, 16.20128,   304.41998, 0.00000, 7.94000);
	CreateDynamicObject(1193, 1656.35632, -1823.14050, 15.05966,   0.00000, 0.00000, 172.69507);
	CreateDynamicObject(1189, 1658.11572, -1823.19775, 14.47341,   3.97000, 0.00000, 356.03000);
	CreateDynamicObject(1186, 1658.28845, -1823.11023, 13.91852,   0.00000, 0.00000, 174.68005);
	CreateDynamicObject(1179, 1658.46326, -1823.22620, 13.15336,   0.00000, 0.00000, 354.04501);
	CreateDynamicObject(1173, 1658.27734, -1823.21094, 17.77769,   314.34500, 0.00000, 0.00000);
	CreateDynamicObject(1172, 1658.20435, -1823.20496, 16.70527,   326.25500, 0.00000, 0.00000);
	CreateDynamicObject(1171, 1658.25195, -1823.20886, 15.80040,   322.28500, 0.00000, 0.00000);
	CreateDynamicObject(1159, 1658.34424, -1823.58521, 14.28864,   9.92499, 0.00000, 177.37996);
	CreateDynamicObject(2798, 1659.16296, -1823.28357, 17.79546,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1131, 1661.13330, -1820.85535, 16.51083,   53.59500, 358.01501, 267.97498);
	CreateDynamicObject(1130, 1661.18018, -1818.32971, 16.29228,   45.65500, 0.00000, 269.95996);
	CreateDynamicObject(1128, 1661.24512, -1821.36609, 14.55445,   31.76001, 1.98499, 267.97498);
	CreateDynamicObject(1126, 1663.03735, -1821.21985, 13.13277,   0.00000, 0.00000, 269.95996);
	CreateDynamicObject(17950, 1599.59521, -1807.10400, 14.74798,   0.00000, 0.00000, 267.96545);
	CreateDynamicObject(17950, 1599.70251, -1816.33472, 14.67506,   0.00000, 0.00000, 267.96204);
	CreateDynamicObject(17950, 1603.62073, -1824.13977, 14.71788,   0.00000, 0.00000, 269.94702);
	CreateDynamicObject(17950, 1603.72864, -1831.55127, 14.74464,   0.00000, 0.00000, 269.94702);
	CreateDynamicObject(17950, 1603.78870, -1838.70044, 14.75242,   0.00000, 0.00000, 269.94507);
	CreateDynamicObject(2601, 1636.65320, -1842.60083, 13.36677,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2601, 1637.00659, -1842.04248, 13.35904,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10562, 1717.81213, -2276.84204, 12.18858,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7212, 1742.18811, -2256.81274, 13.98576,   0.00000, 0.00000, 3.98100);
	CreateDynamicObject(18981, 1741.79529, -2251.88794, -0.34271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1742.59436, -2289.53296, -0.34271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1622.85449, -2253.12256, -2.39452,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(746, 1713.37183, -2270.15552, 12.35853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1710.31641, -2295.51440, 9.08624,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18981, 1660.29810, -2295.05737, 9.08624,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18981, 1710.40698, -2270.49243, 9.08624,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18981, 1660.60278, -2270.64771, 11.25347,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18981, 1685.57910, -2269.27319, 9.08624,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18981, 1685.57458, -2294.70679, 9.08624,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(18981, 1684.97937, -2293.18140, 9.08624,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(746, 1668.81445, -2302.62817, 12.35853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10562, 1672.18079, -2271.98315, 12.18858,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1738.33362, -2307.23828, 12.49837,   0.00000, 0.00000, 289.05054);
	CreateDynamicObject(3472, 1571.98071, -2323.10669, 12.69056,   0.00000, 0.00000, 300.39056);
	CreateDynamicObject(3472, 1738.59131, -2251.77417, 12.99250,   0.00000, 0.00000, 300.39056);
	CreateDynamicObject(3472, 1572.02795, -2250.03540, 12.89765,   0.00000, 0.00000, 300.39056);
	CreateDynamicObject(1683, 1787.76721, -2441.80396, 18.50000,   0.00000, 0.00000, 273.28061);
	CreateDynamicObject(2797, 1767.69995, -2431.50000, 16.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1769.19995, -2433.50000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1769.19995, -2435.39990, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1769.19995, -2437.10010, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1769.19995, -2438.89990, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1769.19995, -2440.80005, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1769.30005, -2442.69995, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1769.30005, -2444.50000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1769.30005, -2446.39990, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1769.40002, -2448.30005, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1769.40002, -2450.19995, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1769.30005, -2452.00000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1769.19995, -2453.89990, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1769.19995, -2455.80005, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1765.59998, -2432.69995, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1765.69995, -2434.60010, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1765.90002, -2436.60010, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1765.50000, -2438.39990, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1765.50000, -2440.30005, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1765.69995, -2442.30005, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1765.59998, -2446.19995, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1765.59998, -2444.19995, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1765.59998, -2450.00000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11544, 1786.73059, -2461.38892, 14.50000,   0.00000, 0.00000, 270.08566);
	CreateDynamicObject(2773, 1765.69995, -2448.10010, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1765.59998, -2451.89990, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1765.69995, -2453.89990, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1765.80005, -2455.89990, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1566.04602, -2351.01050, 13.23821,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(982, 1566.00171, -2355.07153, 13.23821,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(3472, 1489.47534, -2360.67798, 13.26823,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1524.21130, -2361.48462, 13.26823,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1558.87390, -2361.36743, 13.26823,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1560.42334, -2341.39404, 13.26823,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1560.44763, -2306.36768, 13.26823,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1560.79712, -2266.55054, 13.26823,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1560.94873, -2231.25000, 13.26823,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1559.05249, -2211.76416, 13.26823,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1524.22766, -2211.76025, 13.26823,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1486.84705, -2189.17896, 12.61518,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1566.08630, -2223.58862, 13.23821,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(982, 1566.07324, -2217.78467, 13.23821,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(3472, 1382.36011, -2314.78198, 13.37333,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1418.24683, -2314.67456, 13.37333,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1418.14832, -2331.57153, 13.37333,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1382.08508, -2331.61865, 13.37333,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1382.10449, -2348.71021, 13.37333,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1418.09485, -2348.84448, 13.37333,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1435.03638, -2349.06299, 13.37333,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1380.95032, -2260.85083, 13.37333,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1416.66919, -2260.87744, 13.37333,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1417.74829, -2241.58252, 13.37333,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1417.84460, -2224.37866, 13.37333,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1434.47498, -2224.40894, 13.37333,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1381.68628, -2224.63550, 13.37333,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1381.95422, -2241.73682, 13.37333,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1459.73840, -2251.34521, 13.23043,   0.00000, 0.00000, 278.85046);
	CreateDynamicObject(983, 1453.66321, -2253.22070, 13.23043,   0.00000, 0.00000, 295.09818);
	CreateDynamicObject(983, 1459.73840, -2251.34521, 13.23043,   0.00000, 0.00000, 278.85046);
	CreateDynamicObject(983, 1448.29065, -2256.60474, 13.23043,   0.00000, 0.00000, 309.21173);
	CreateDynamicObject(983, 1443.93176, -2261.22070, 13.23043,   0.00000, 0.00000, 324.14096);
	CreateDynamicObject(983, 1440.78467, -2266.77734, 13.23043,   0.00000, 0.00000, 336.60904);
	CreateDynamicObject(983, 1439.09888, -2272.86792, 13.23043,   0.00000, 0.00000, 352.60190);
	CreateDynamicObject(983, 1438.61194, -2279.23730, 13.23043,   0.00000, 0.00000, 358.56458);
	CreateDynamicObject(983, 1441.75793, -2282.45093, 13.23043,   0.00000, 0.00000, 269.09863);
	CreateDynamicObject(983, 1448.11279, -2282.51611, 13.23043,   0.00000, 0.00000, 269.09863);
	CreateDynamicObject(983, 1441.72925, -2291.72388, 13.23043,   0.00000, 0.00000, 269.09863);
	CreateDynamicObject(983, 1448.09009, -2291.79907, 13.23043,   0.00000, 0.00000, 269.09863);
	CreateDynamicObject(983, 1438.65564, -2294.83350, 13.23043,   0.00000, 0.00000, 2.65301);
	CreateDynamicObject(983, 1439.38208, -2301.16650, 13.23043,   0.00000, 0.00000, 10.64010);
	CreateDynamicObject(983, 1441.25720, -2307.24683, 13.23043,   0.00000, 0.00000, 24.07618);
	CreateDynamicObject(983, 1444.64087, -2312.60645, 13.23043,   0.00000, 0.00000, 40.56301);
	CreateDynamicObject(983, 1449.29456, -2316.99683, 13.23043,   0.00000, 0.00000, 52.58014);
	CreateDynamicObject(983, 1454.82837, -2320.10400, 13.23043,   0.00000, 0.00000, 68.09449);
	CreateDynamicObject(983, 1460.96301, -2321.80078, 13.23043,   0.00000, 0.00000, 80.70721);
	CreateDynamicObject(983, 1467.31177, -2322.29541, 13.23043,   0.00000, 0.00000, 90.13200);
	CreateDynamicObject(983, 1473.71765, -2322.26514, 13.23043,   0.00000, 0.00000, 90.13200);
	CreateDynamicObject(983, 1480.10950, -2322.23218, 13.23043,   0.00000, 0.00000, 90.13200);
	CreateDynamicObject(983, 1486.50378, -2321.81934, 13.23043,   0.00000, 0.00000, 97.27084);
	CreateDynamicObject(983, 1489.65869, -2321.39673, 13.23043,   0.00000, 0.00000, 97.27084);
	CreateDynamicObject(983, 1495.69482, -2319.56055, 13.23043,   0.00000, 0.00000, 115.88893);
	CreateDynamicObject(983, 1500.97852, -2316.07275, 13.23043,   0.00000, 0.00000, 130.72966);
	CreateDynamicObject(983, 1505.29199, -2311.46045, 13.23043,   0.00000, 0.00000, 142.91472);
	CreateDynamicObject(983, 1508.36121, -2305.93188, 13.23043,   0.00000, 0.00000, 158.58057);
	CreateDynamicObject(983, 1509.91064, -2299.79492, 13.23043,   0.00000, 0.00000, 172.83231);
	CreateDynamicObject(983, 1510.29138, -2293.47485, 13.23043,   0.00000, 0.00000, 180.37404);
	CreateDynamicObject(983, 1510.24939, -2287.09009, 13.23043,   0.00000, 0.00000, 180.37404);
	CreateDynamicObject(983, 1510.18152, -2280.68945, 13.23043,   0.00000, 0.00000, 180.37404);
	CreateDynamicObject(983, 1509.78308, -2274.32080, 13.23043,   0.00000, 0.00000, 186.82040);
	CreateDynamicObject(983, 1509.56262, -2272.77148, 13.23043,   0.00000, 0.00000, 186.82040);
	CreateDynamicObject(983, 1507.93811, -2266.63965, 13.23043,   0.00000, 0.00000, 202.78999);
	CreateDynamicObject(983, 1504.77258, -2261.07764, 13.23043,   0.00000, 0.00000, 216.90332);
	CreateDynamicObject(983, 1500.38770, -2256.49536, 13.23043,   0.00000, 0.00000, 230.50586);
	CreateDynamicObject(983, 1494.98547, -2253.12646, 13.23043,   0.00000, 0.00000, 245.98645);
	CreateDynamicObject(983, 1488.92444, -2251.25757, 13.23043,   0.00000, 0.00000, 260.52502);
	CreateDynamicObject(983, 1482.55090, -2250.65894, 13.23043,   0.00000, 0.00000, 269.02896);
	CreateDynamicObject(983, 1479.34607, -2250.61157, 13.23043,   0.00000, 0.00000, 269.02896);
	CreateDynamicObject(983, 1478.48779, -2250.56641, 13.23043,   0.00000, 0.00000, 269.02896);
	CreateDynamicObject(983, 1470.60596, -2250.53735, 13.23043,   0.00000, 0.00000, 269.02896);
	CreateDynamicObject(983, 1464.83130, -2250.73169, 13.23043,   0.00000, 0.00000, 274.23947);
	CreateDynamicObject(700, 1413.78650, -2300.03833, 12.99280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1397.96240, -2299.86035, 12.99280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1381.43909, -2299.75293, 12.99280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1366.66174, -2303.94165, 12.99280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1414.31702, -2272.81372, 12.99280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1397.57776, -2272.98340, 12.99280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1381.48059, -2272.60400, 12.99280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1366.86731, -2269.41797, 12.99280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1534.23621, -2298.69019, 12.52734,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1533.22791, -2314.89868, 12.52734,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1531.61121, -2329.07837, 12.52734,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1502.82031, -2339.18140, 12.52734,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1520.39929, -2335.66016, 12.52734,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1532.75781, -2275.26245, 12.52734,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1533.67615, -2255.22607, 12.52734,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1533.35095, -2236.91577, 12.52734,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1520.42908, -2234.23950, 12.52734,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1502.91663, -2233.55273, 12.52734,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1593.59888, -2267.63940, 12.52734,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1636.93591, -2266.96753, 12.52734,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1592.75610, -2306.26245, 12.52734,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(700, 1636.52881, -2306.16455, 12.52734,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1538.20947, -2309.36279, 13.23821,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(982, 1538.19568, -2327.17700, 13.23821,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(982, 1525.42151, -2339.98633, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1512.61694, -2340.00220, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1538.26062, -2263.52881, 13.23821,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(982, 1538.29602, -2245.66626, 13.23821,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(982, 1525.36609, -2232.52783, 13.23821,   0.00000, 0.00000, 88.49976);
	CreateDynamicObject(982, 1509.58691, -2232.12036, 13.23821,   0.00000, 0.00000, 88.49976);
	CreateDynamicObject(982, 1406.82495, -2267.69434, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1381.19263, -2267.68384, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1376.51318, -2267.69238, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1376.90137, -2305.03418, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1399.29004, -2305.04028, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(982, 1406.82166, -2305.05713, 13.23821,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(983, 1368.71338, -2284.92651, 13.23043,   0.00000, 0.00000, 245.37306);
	CreateDynamicObject(983, 1365.67004, -2283.51343, 13.23043,   0.00000, 0.00000, 244.86937);
	CreateDynamicObject(983, 1360.37537, -2280.02417, 13.23043,   0.00000, 0.00000, 228.87051);
	CreateDynamicObject(983, 1358.32898, -2278.27368, 13.23043,   0.00000, 0.00000, 229.89488);
	CreateDynamicObject(983, 1354.08374, -2273.56323, 13.23043,   0.00000, 0.00000, 213.85139);
	CreateDynamicObject(983, 1353.63770, -2272.89404, 13.23043,   0.00000, 0.00000, 213.85139);
	CreateDynamicObject(983, 1351.91394, -2273.44165, 13.23043,   0.00000, 0.00000, 181.10289);
	CreateDynamicObject(983, 1351.99878, -2279.85059, 13.23043,   0.00000, 0.00000, 179.97549);
	CreateDynamicObject(983, 1351.99695, -2286.23193, 13.23043,   0.00000, 0.00000, 179.97549);
	CreateDynamicObject(983, 1351.97778, -2292.58911, 13.23043,   0.00000, 0.00000, 179.97549);
	CreateDynamicObject(983, 1351.94482, -2298.95947, 13.23043,   0.00000, 0.00000, 179.97549);
	CreateDynamicObject(983, 1353.85339, -2299.58765, 13.23043,   0.00000, 0.00000, 145.45898);
	CreateDynamicObject(983, 1354.21936, -2299.06323, 13.23043,   0.00000, 0.00000, 145.45898);
	CreateDynamicObject(983, 1358.41882, -2294.34692, 13.23043,   0.00000, 0.00000, 130.88185);
	CreateDynamicObject(983, 1360.79541, -2292.28076, 13.23043,   0.00000, 0.00000, 130.88185);
	CreateDynamicObject(983, 1366.13293, -2288.79102, 13.23043,   0.00000, 0.00000, 115.68570);
	CreateDynamicObject(983, 1368.73035, -2287.58936, 13.23043,   0.00000, 0.00000, 114.91986);
	CreateDynamicObject(714, 1358.58765, -2285.63037, 11.47917,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(714, 1487.06982, -2257.30200, 11.47933,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(714, 1460.60754, -2257.17358, 11.47933,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(714, 1441.33899, -2275.15894, 11.47933,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(714, 1442.33423, -2297.05957, 11.47933,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(714, 1460.28381, -2317.82275, 11.47933,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(714, 1492.87744, -2317.02979, 11.47933,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(714, 1506.30151, -2287.85913, 11.47933,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(762, 1297.98328, -2332.10376, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(713, 1298.67017, -2351.80298, 12.45162,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(762, 1295.42346, -2341.90479, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1307.17480, -2339.26953, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1303.99426, -2347.45166, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1312.44250, -2291.80420, 12.72054,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(661, 1283.82739, -2292.45898, 11.62898,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1271.17004, -2274.97070, 11.62898,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1259.84937, -2294.49854, 11.62898,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1238.13342, -2318.82471, 11.62898,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1237.84058, -2285.18433, 11.62898,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1246.78894, -2260.12988, 12.35033,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1237.12207, -2242.47632, 12.35033,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(691, 1304.19568, -2283.56445, 10.86719,   3.14159, 0.00000, 2.15512);
	CreateDynamicObject(762, 1269.81299, -2283.65405, 10.27339,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1263.01062, -2283.33496, 10.27339,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(713, 1294.52722, -2217.10181, 11.22484,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(762, 1294.99768, -2222.41333, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1301.70728, -2219.21362, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1294.03687, -2227.06934, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(713, 1304.75012, -2249.12256, 11.22484,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(762, 1301.38416, -2227.50244, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1300.01465, -2237.36499, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(661, 1396.68591, -2175.89575, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1409.25757, -2161.82935, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1413.71423, -2174.63794, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1431.18213, -2160.69067, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1426.76575, -2171.33008, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1439.73145, -2164.15942, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1443.62488, -2154.98779, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1447.37476, -2178.06543, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1457.36401, -2158.70850, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1460.70740, -2177.48706, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1476.43384, -2158.38013, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1488.27539, -2169.17212, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1481.83362, -2178.14404, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1467.90613, -2167.76392, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(762, 1398.07397, -2176.67505, 10.90257,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1471.96216, -2173.23438, 14.38106,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1412.53162, -2167.42676, 10.90257,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1453.83459, -2156.88965, 13.51051,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1424.67456, -2168.44238, 12.80335,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1454.06653, -2177.71606, 13.31542,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1423.53699, -2160.75366, 10.90257,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1415.75696, -2158.35010, 10.90257,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1404.35242, -2163.65088, 10.90257,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1419.52271, -2178.77783, 13.34973,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1390.84192, -2177.97119, 10.90257,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1388.93079, -2173.65479, 10.90257,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1381.37000, -2181.86328, 10.90257,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1386.94177, -2184.35181, 10.90257,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1376.91675, -2185.20337, 9.45562,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1423.70984, -2160.67529, 10.90257,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1433.88770, -2156.18921, 12.80335,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1431.12561, -2163.49438, 10.90257,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1438.14795, -2174.74829, 14.24761,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1487.53772, -2172.44409, 12.77137,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(8535, 1522.23486, -2170.79858, 18.56620,   0.00000, 0.00000, 90.26042);
	CreateDynamicObject(8661, 1516.73059, -2166.50684, 12.58450,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(8673, 1496.62109, -2166.65479, 14.02737,   0.00000, 0.00000, 90.40182);
	CreateDynamicObject(8661, 1527.89001, -2166.37524, 12.57540,   0.00000, 0.00000, 179.99451);
	CreateDynamicObject(8673, 1537.88281, -2156.55225, 14.02737,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8563, 1505.85547, -2169.42725, 22.11979,   0.00000, 0.00000, 313.89627);
	CreateDynamicObject(8673, 1547.80957, -2174.68652, 14.02737,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8673, 1547.82605, -2166.40918, 14.02737,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9583, 1527.24438, -2184.91089, 16.15531,   0.00000, 179.99451, 0.00000);
	CreateDynamicObject(8673, 1506.92261, -2184.85571, 14.02737,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9583, 1516.94775, -2184.95947, 16.15531,   0.00000, 179.99451, 0.00000);
	CreateDynamicObject(661, 1552.98560, -2156.87915, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1560.79089, -2175.33887, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1572.08838, -2161.65625, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1583.05872, -2152.43408, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1582.61194, -2180.86426, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1593.06433, -2172.78394, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1617.49902, -2172.99878, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1601.00659, -2159.06738, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1630.29919, -2175.97583, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1604.52332, -2179.53589, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1610.88953, -2163.08276, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1644.99976, -2181.37891, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1663.57971, -2181.15332, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1679.70715, -2180.08276, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(762, 1555.70068, -2163.87866, 12.77137,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1568.21240, -2173.28369, 12.77137,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1577.30786, -2160.43506, 12.77137,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1587.02966, -2177.69849, 12.77137,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1594.28442, -2157.54248, 12.77137,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1598.53210, -2176.07422, 12.77137,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1610.00732, -2174.50781, 12.77137,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1622.04895, -2173.43726, 12.77137,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1636.04382, -2175.72339, 12.77137,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1648.68298, -2177.66406, 12.77137,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1662.55176, -2178.57837, 12.77137,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1670.06177, -2176.36719, 12.77137,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1679.54541, -2178.02368, 12.77137,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1691.28015, -2182.46045, 10.34644,   356.85840, 0.00000, 240.21475);
	CreateDynamicObject(661, 1694.06335, -2181.92432, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(762, 1700.42310, -2182.31714, 10.34644,   356.85840, 0.00000, 240.21475);
	CreateDynamicObject(762, 1707.54065, -2181.70801, 10.34644,   356.85840, 0.00000, 240.21475);
	CreateDynamicObject(762, 1714.67834, -2182.02686, 10.34644,   356.85840, 0.00000, 240.21475);
	CreateDynamicObject(762, 1721.22449, -2182.45923, 10.34644,   356.85840, 0.00000, 240.21475);
	CreateDynamicObject(762, 1728.80347, -2182.55786, 10.34644,   356.85840, 0.00000, 240.21475);
	CreateDynamicObject(762, 1734.52271, -2182.85547, 10.34644,   356.85840, 0.00000, 240.21475);
	CreateDynamicObject(762, 1743.30933, -2183.26660, 10.34644,   356.85840, 0.00000, 240.21475);
	CreateDynamicObject(762, 1759.17688, -2183.12573, 10.34644,   356.85840, 0.00000, 240.21475);
	CreateDynamicObject(762, 1763.34351, -2182.90137, 10.34644,   356.85840, 0.00000, 240.21475);
	CreateDynamicObject(762, 1751.76318, -2182.75415, 10.34644,   356.85840, 0.00000, 240.21475);
	CreateDynamicObject(762, 1769.81958, -2183.59302, 10.34644,   356.85840, 0.00000, 240.21475);
	CreateDynamicObject(762, 1776.62988, -2183.97900, 10.34644,   356.85840, 0.00000, 240.21475);
	CreateDynamicObject(762, 1784.47229, -2183.04346, 10.34644,   356.85840, 0.00000, 240.21475);
	CreateDynamicObject(762, 1797.29102, -2183.27759, 10.34644,   356.85840, 0.00000, 240.21475);
	CreateDynamicObject(762, 1795.45715, -2183.91992, 10.34644,   356.85840, 0.00000, 240.21475);
	CreateDynamicObject(661, 1711.24695, -2183.76099, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1724.84961, -2182.82495, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1738.91394, -2182.33643, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1777.65491, -2179.60034, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(762, 1734.15479, -2182.67480, 10.34644,   356.85840, 0.00000, 240.21475);
	CreateDynamicObject(661, 1791.54053, -2181.43237, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(661, 1752.97375, -2182.32568, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(7212, 1788.39087, -2235.92896, 13.98576,   0.00000, 0.00000, 271.36823);
	CreateDynamicObject(7212, 1795.47510, -2343.02393, 13.98576,   0.00000, 0.00000, 266.18033);
	CreateDynamicObject(3629, 1872.12598, -2206.19287, 18.93258,   0.00000, 0.00000, 179.73550);
	CreateDynamicObject(3472, 1950.97754, -2207.84692, 13.32811,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1979.62024, -2208.20557, 13.32811,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 2010.91016, -2207.76611, 13.32811,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 2041.82239, -2208.07202, 13.32811,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3629, 1916.41333, -2206.68335, 19.32113,   0.00000, 0.00000, 178.79860);
	CreateDynamicObject(3629, 2082.06226, -2223.20825, 19.31463,   0.00000, 0.00000, 120.57180);
	CreateDynamicObject(3629, 2064.03833, -2296.16943, 19.31463,   0.00000, 0.00000, 89.79580);
	CreateDynamicObject(3629, 2064.68604, -2341.27368, 19.31463,   0.00000, 0.00000, 89.79580);
	CreateDynamicObject(3629, 2125.85889, -2374.47485, 19.31463,   0.00000, 0.00000, 141.22054);
	CreateDynamicObject(3629, 2121.57324, -2451.46509, 19.31463,   0.00000, 0.00000, 88.82793);
	CreateDynamicObject(18850, 2007.55994, -2445.73389, 8.44797,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18850, 2007.61108, -2397.97607, 8.44797,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3629, 1877.40149, -2289.18506, 19.31463,   0.00000, 0.00000, 270.39056);
	CreateDynamicObject(3629, 1877.82104, -2335.01147, 19.31463,   0.00000, 0.00000, 270.39056);
	CreateDynamicObject(3629, 1857.18030, -2397.13159, 19.31463,   0.00000, 0.00000, 228.22914);
	CreateDynamicObject(3629, 1895.43689, -2669.76367, 18.88281,   356.85840, 0.00000, -3.14159);
	CreateDynamicObject(3629, 1843.46265, -2669.56494, 18.88281,   356.85840, 0.00000, -3.14159);
	CreateDynamicObject(3629, 1792.05164, -2668.64429, 18.88281,   356.85840, 0.00000, -3.14159);
	CreateDynamicObject(3629, 1736.69421, -2668.34033, 18.88281,   356.85840, 0.00000, -3.14159);
	CreateDynamicObject(3629, 1682.72913, -2667.90869, 18.88281,   356.85840, 0.00000, -3.14159);
	CreateDynamicObject(3629, 1630.97913, -2667.56689, 18.88281,   356.85840, 0.00000, -3.14159);
	CreateDynamicObject(2773, 1777.21130, -2463.07886, 13.10000,   0.00000, 0.00000, 278.98822);
	CreateDynamicObject(2773, 1775.33777, -2463.39429, 13.10000,   0.00000, 0.00000, 278.98822);
	CreateDynamicObject(2773, 1773.45398, -2463.69312, 13.10000,   0.00000, 0.00000, 278.98822);
	CreateDynamicObject(2773, 1771.55981, -2463.86035, 13.10000,   0.00000, 0.00000, 267.68594);
	CreateDynamicObject(2773, 1769.65076, -2463.76294, 13.10000,   0.00000, 0.00000, 267.68594);
	CreateDynamicObject(2773, 1768.02832, -2463.04370, 13.10000,   0.00000, 0.00000, 223.40665);
	CreateDynamicObject(2773, 1766.72327, -2461.64868, 13.10000,   0.00000, 0.00000, 223.40665);
	CreateDynamicObject(2773, 1765.91064, -2457.84326, 13.10000,   0.00000, 0.00000, 182.88737);
	CreateDynamicObject(2773, 1765.97424, -2459.87891, 13.10000,   0.00000, 0.00000, 182.88737);
	CreateDynamicObject(2773, 1769.15710, -2457.66846, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1770.12537, -2458.93652, 13.10000,   0.00000, 0.00000, 73.69229);
	CreateDynamicObject(2773, 1772.00598, -2459.43457, 13.10000,   0.00000, 0.00000, 73.69229);
	CreateDynamicObject(2773, 1773.86218, -2459.84448, 13.10000,   0.00000, 0.00000, 82.40975);
	CreateDynamicObject(2773, 1775.79089, -2460.09863, 13.10000,   0.00000, 0.00000, 82.40975);
	CreateDynamicObject(2773, 1776.95544, -2460.14771, 13.10000,   0.00000, 0.00000, 89.18665);
	CreateDynamicObject(4832, 1613.60144, -2285.79272, 52.65606,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4832, 1562.79590, -2351.92065, 26.63501,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4832, 1561.70691, -2221.13208, 26.63501,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(762, 1656.00842, -2281.55811, 15.69638,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(746, 1654.75854, -2293.78003, 12.35853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(762, 1703.34863, -2286.04858, 14.98733,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(746, 1707.95935, -2297.09180, 12.35853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(746, 1715.03027, -2290.28149, 12.35853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(762, 1666.52673, -2278.13892, 15.69638,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(762, 1711.50049, -2278.99243, 14.98733,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(714, 1650.84570, -2300.68481, 11.29266,   0.00000, 0.00000, 0.40604);
	CreateDynamicObject(714, 1669.20557, -2297.31519, 11.24487,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(714, 1651.00635, -2270.15869, 11.27093,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(714, 1716.53162, -2299.41040, 11.35102,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(714, 1694.95557, -2301.92236, 11.13977,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(714, 1696.25183, -2272.70850, 11.13977,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(762, 1308.68750, -2405.46045, 15.13622,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1309.02612, -2416.25562, 13.67132,   356.85840, 0.00000, 358.76498);
	CreateDynamicObject(762, 1309.51123, -2397.63623, 15.85757,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1308.81152, -2424.59204, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1309.47351, -2432.97778, 12.06439,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1304.35840, -2434.11401, 10.81541,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1296.74268, -2433.78442, 11.42847,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1289.14844, -2433.30664, 11.53676,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1282.55359, -2432.51099, 11.75013,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1275.98950, -2431.61865, 11.85523,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1268.96887, -2430.26001, 11.75013,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1261.45386, -2428.67773, 11.95929,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1254.47168, -2428.01025, 12.36533,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1245.61719, -2426.38745, 12.36533,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1239.64014, -2424.31909, 12.36533,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1231.46069, -2421.81812, 12.36533,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1223.72131, -2419.34302, 12.36533,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1217.01758, -2417.08911, 12.36533,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1209.59106, -2413.34106, 12.36533,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1202.02258, -2409.50903, 12.36533,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1192.45984, -2404.57056, 12.36533,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1186.91516, -2401.58447, 12.36533,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1180.41077, -2397.64526, 12.36533,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1172.59290, -2392.79810, 12.36533,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1166.49524, -2387.72168, 12.36533,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1159.61230, -2384.66504, 12.36533,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1154.76233, -2380.36865, 12.36533,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1148.56885, -2376.05054, 12.36533,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1142.42957, -2370.41431, 12.36533,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1137.18359, -2366.83667, 12.36533,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1131.03979, -2359.87378, 12.36533,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1125.41077, -2352.75317, 12.36533,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1308.61084, -2506.36084, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1308.65747, -2498.76587, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1308.95715, -2491.16479, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1309.52771, -2484.11230, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1309.10986, -2476.91211, 12.21977,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1301.06445, -2476.28467, 11.96250,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1292.18811, -2476.29614, 12.46403,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1283.43665, -2475.95020, 11.77767,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1274.56055, -2476.49292, 12.12597,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1267.28516, -2475.40234, 12.01102,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1258.31677, -2474.64111, 11.77767,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1250.26208, -2472.31958, 12.23978,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1241.20850, -2470.72827, 12.23978,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1233.86719, -2469.08276, 12.57449,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1224.72632, -2465.95215, 12.79214,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1216.22791, -2463.57300, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1207.99182, -2460.62842, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1198.94373, -2457.30859, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1190.82446, -2453.64185, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1183.92102, -2449.69604, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1175.32751, -2445.53174, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1167.15491, -2440.57886, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1158.44385, -2434.41675, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1149.42224, -2428.81641, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1142.69385, -2425.56958, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1135.96252, -2418.27563, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1129.74133, -2412.31641, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1122.81812, -2407.06616, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1113.84119, -2403.70117, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1107.63257, -2397.34937, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1100.13879, -2389.17383, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1093.82031, -2380.81177, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1086.99353, -2371.58862, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1080.45691, -2364.78833, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1073.79431, -2357.50220, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1067.25354, -2349.95337, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1061.47058, -2344.47168, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1055.84521, -2337.45508, 13.62071,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1050.38354, -2331.00439, 14.54148,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1044.63672, -2322.62427, 14.54148,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1041.53467, -2315.21045, 14.54148,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1036.80322, -2308.21460, 14.54148,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1033.23096, -2300.49194, 14.54148,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1030.47351, -2292.42627, 14.54148,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1026.99634, -2283.34351, 14.54148,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1022.49554, -2273.57935, 14.54148,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1018.95300, -2264.19507, 14.54148,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1017.29071, -2255.01929, 14.54148,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1014.92206, -2246.53271, 14.54148,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1011.36316, -2240.39160, 14.54148,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(713, 1312.39832, -2438.68579, 6.48921,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1285.51221, -2437.29224, 6.89525,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1258.52490, -2432.62109, 6.89525,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1223.32434, -2424.11304, 8.67464,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1195.97412, -2412.86157, 9.23834,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1174.50098, -2399.77710, 8.83090,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1154.48633, -2384.74097, 9.71178,   0.00000, 0.00000, 355.55316);
	CreateDynamicObject(713, 1138.89270, -2373.45190, 10.16202,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1123.46619, -2354.10669, 10.26967,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1114.63367, -2343.16943, 10.90329,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1314.32654, -2475.74487, 6.67642,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1312.65942, -2496.64160, 6.67642,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1312.33350, -2512.80664, 11.27169,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1288.55640, -2477.01392, 6.67642,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1266.04541, -2473.64209, 6.67642,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1237.55188, -2467.97607, 9.12358,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1213.51379, -2461.62915, 8.51946,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1191.05530, -2450.27417, 6.67642,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1176.21887, -2444.63574, 9.62898,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1137.23401, -2419.31519, 8.89739,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1159.85364, -2433.44678, 9.18003,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1119.22607, -2402.81885, 8.87832,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1102.91321, -2387.85889, 9.88933,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1096.75928, -2379.72998, 10.29681,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1083.21033, -2364.74146, 10.56444,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1067.68921, -2348.56250, 10.68871,   0.00000, 0.00000, 353.85739);
	CreateDynamicObject(713, 1054.01807, -2329.66211, 10.58633,   0.00000, 0.00000, 354.94608);
	CreateDynamicObject(713, 1041.94238, -2311.27588, 9.66242,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1034.36841, -2292.04297, 10.05472,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1026.41345, -2274.49561, 8.91176,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1020.41235, -2254.08374, 8.94273,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(762, 1198.83936, -2409.65601, 9.37471,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1177.91626, -2396.31714, 10.59991,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1111.68774, -2338.09668, 14.38898,   356.85840, 0.00000, 2.42024);
	CreateDynamicObject(762, 1106.27576, -2332.00977, 14.38898,   356.85840, 0.00000, 2.42024);
	CreateDynamicObject(762, 1100.95337, -2327.93311, 14.38898,   356.85840, 0.00000, 2.42024);
	CreateDynamicObject(762, 1096.95483, -2323.24268, 14.38898,   356.85840, 0.00000, 2.42024);
	CreateDynamicObject(713, 1107.86438, -2338.89404, 10.26967,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1096.70044, -2326.69214, 10.26967,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(762, 1188.45911, -2450.94116, 10.75742,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(3472, 1306.25586, -2456.86353, 6.97357,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1286.10095, -2455.78613, 7.58556,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1267.62659, -2455.15527, 7.88857,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1247.16174, -2451.16968, 8.30898,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1225.84924, -2444.74219, 8.62544,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1205.79688, -2437.68115, 9.28207,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1188.52588, -2429.19165, 9.42860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1171.00903, -2419.36938, 9.70848,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1156.60474, -2409.83936, 10.10999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1122.79126, -2383.07886, 10.96514,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1139.25488, -2396.94531, 10.58570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1093.83350, -2352.78198, 11.74307,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1107.68713, -2367.20410, 11.41943,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1082.46326, -2338.73364, 11.88891,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1056.83008, -2299.30615, 12.61460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1047.53345, -2281.35083, 12.52807,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1039.36914, -2261.93384, 12.54261,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1032.20996, -2239.98291, 12.34679,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1325.90784, -2445.35596, -0.59510,   0.00000, 0.00000, 359.89590);
	CreateDynamicObject(18981, 1325.90784, -2465.38428, -0.59510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(762, 1308.58142, -2389.54028, 12.10817,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1310.62109, -2381.95972, 12.10817,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1311.12708, -2374.41772, 12.10817,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1305.76929, -2356.95654, 12.10817,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1308.92224, -2363.73657, 12.10817,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(713, 1310.10657, -2412.06372, 12.35488,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1311.31531, -2396.61548, 12.35488,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(762, 1310.43469, -2514.64795, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1310.50781, -2523.94580, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1311.42456, -2533.88721, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1312.77698, -2543.78662, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1313.98071, -2553.45874, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1315.59851, -2560.73364, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1316.38513, -2567.27588, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1317.90503, -2573.65015, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1319.63220, -2582.43433, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1322.18140, -2590.45996, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1324.02869, -2599.73242, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1325.22815, -2608.35352, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1328.88660, -2617.21606, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1331.48218, -2625.96167, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1336.64795, -2634.93408, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1343.40833, -2643.10596, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1349.80432, -2650.73535, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1357.07324, -2658.83521, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1364.98755, -2666.42090, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1373.21216, -2672.43774, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1381.51123, -2678.98804, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1392.06409, -2683.53149, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1403.99329, -2688.01147, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1413.52722, -2691.55127, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1422.09839, -2693.87671, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1431.53967, -2696.17358, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(762, 1440.86340, -2695.87646, 14.16838,   356.85840, 0.00000, 51.26801);
	CreateDynamicObject(713, 1312.57874, -2531.58838, 12.17128,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1315.17041, -2548.14160, 12.20633,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1317.38464, -2564.68604, 12.20633,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1320.65662, -2579.92676, 12.20633,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1325.45276, -2597.00757, 12.20633,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1328.35999, -2611.57031, 12.20633,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1334.07361, -2626.66821, 12.20633,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1343.72668, -2640.82104, 12.20633,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1352.65295, -2653.38086, 12.20633,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1365.09546, -2666.17578, 12.20633,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1382.20032, -2679.51855, 12.20633,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1403.48999, -2687.84497, 12.20633,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1423.07910, -2692.94092, 12.20633,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1442.37317, -2695.77271, 12.20633,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(3472, 1339.51135, -2337.74707, 12.91124,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1363.60791, -2451.31763, -0.87810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1363.62000, -2468.78809, -0.87810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1352.59546, -2451.49194, -0.51810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18981, 1352.58679, -2467.37842, -0.51810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1339.19983, -2430.30176, 12.79802,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1339.41223, -2452.99048, 12.72600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1339.22900, -2476.93701, 12.97416,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1339.20007, -2505.14014, 12.91542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1339.31335, -2523.35010, 12.91542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1339.56226, -2545.84326, 12.91542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1341.04663, -2582.83838, 12.91542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1346.16467, -2606.09180, 12.91542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1358.49316, -2631.75269, 12.91542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1374.11890, -2649.79028, 12.91542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1391.52917, -2662.15894, 12.91542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1415.08179, -2672.35742, 12.91542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1441.47009, -2676.84790, 12.82791,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1338.88306, -2408.49487, 12.91124,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1339.35938, -2316.73633, 12.91124,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1339.64673, -2292.91943, 12.91124,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1339.36511, -2266.37573, 12.91124,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1338.99719, -2244.53101, 12.91124,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1339.96997, -2222.45386, 12.91124,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1358.19348, -2169.87744, 12.91124,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1382.65479, -2145.52954, 12.91124,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1405.69653, -2132.44727, 12.91124,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1434.54761, -2126.24463, 12.91124,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1463.55713, -2125.16553, 12.91124,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1490.78235, -2124.43799, 13.10361,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1529.60791, -2123.90991, 13.55782,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(762, 1321.26855, -2188.53711, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1322.46448, -2180.84595, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1331.82324, -2169.77954, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(713, 1325.57092, -2177.93628, 11.22484,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(762, 1329.57788, -2174.03223, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(661, 1381.06018, -2178.60791, 12.62347,   356.85840, 0.00000, 3.22102);
	CreateDynamicObject(762, 1400.20935, -2161.98413, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(713, 1399.23132, -2160.80298, 11.22484,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(762, 1410.67664, -2156.70020, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1418.70239, -2153.98560, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1426.60242, -2151.46411, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1434.98279, -2150.35400, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1443.05554, -2149.42944, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1454.52234, -2149.04053, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1467.51794, -2159.75342, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1482.35645, -2161.21509, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1466.93188, -2149.61792, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1478.74939, -2150.54834, 13.16023,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(762, 1491.14197, -2148.95947, 12.99529,   356.85840, 0.00000, 327.61130);
	CreateDynamicObject(762, 1498.46118, -2149.34399, 12.99529,   356.85840, 0.00000, 327.61130);
	CreateDynamicObject(762, 1506.99963, -2149.64209, 12.99529,   356.85840, 0.00000, 327.61130);
	CreateDynamicObject(762, 1514.89783, -2148.82227, 12.99529,   356.85840, 0.00000, 327.61130);
	CreateDynamicObject(762, 1524.26038, -2148.54321, 12.99529,   356.85840, 0.00000, 327.61130);
	CreateDynamicObject(762, 1533.33765, -2147.14136, 12.99529,   356.85840, 0.00000, 327.61130);
	CreateDynamicObject(762, 1540.29248, -2146.39233, 12.99529,   356.85840, 0.00000, 327.61130);
	CreateDynamicObject(762, 1546.71228, -2145.06274, 12.99529,   356.85840, 0.00000, 327.61130);
	CreateDynamicObject(762, 1555.73669, -2141.82153, 12.99529,   356.85840, 0.00000, 327.61130);
	CreateDynamicObject(762, 1557.23157, -2153.12305, 12.99529,   356.85840, 0.00000, 327.61130);
	CreateDynamicObject(762, 1567.98730, -2155.71558, 12.99529,   356.85840, 0.00000, 327.61130);
	CreateDynamicObject(762, 1580.27258, -2149.24756, 12.99529,   356.85840, 0.00000, 327.61130);
	CreateDynamicObject(762, 1564.05457, -2142.47266, 12.99529,   356.85840, 0.00000, 327.61130);
	CreateDynamicObject(762, 1569.33179, -2143.82861, 12.99529,   356.85840, 0.00000, 327.61130);
	CreateDynamicObject(762, 1568.19043, -2136.19092, 12.99529,   356.85840, 0.00000, 327.61130);
	CreateDynamicObject(762, 1575.74487, -2137.82031, 12.99529,   356.85840, 0.00000, 327.61130);
	CreateDynamicObject(713, 1423.35156, -2151.13062, 11.22484,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1443.89148, -2148.27612, 11.22484,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1465.90698, -2149.22510, 11.22484,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1491.03796, -2147.62964, 11.22484,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1506.55249, -2147.70288, 11.22484,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1522.41870, -2147.19165, 11.22484,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1531.84839, -2146.31592, 11.22484,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1546.76392, -2143.64307, 11.22484,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(713, 1561.06274, -2142.36011, 11.22484,   0.00000, 0.00000, 355.35214);
	CreateDynamicObject(762, 1559.60291, -2172.36572, 12.77137,   356.85840, 0.00000, -1.74513);
	CreateDynamicObject(3472, 1489.31165, -2211.58350, 13.26823,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1456.60999, -2189.23291, 13.15130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1437.40698, -2189.15405, 14.48786,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1409.05566, -2189.40405, 17.34185,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1378.51160, -2189.37720, 20.33661,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1354.79797, -2189.14893, 21.20783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1333.29053, -2189.30640, 21.20783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1304.88782, -2189.43701, 20.99446,   0.00000, 0.00000, 359.38477);
	CreateDynamicObject(3472, 1281.70142, -2192.32202, 20.58842,   0.00000, 0.00000, 359.38477);
	CreateDynamicObject(3472, 1262.08276, -2207.26660, 18.41290,   0.00000, 0.00000, 359.38477);
	CreateDynamicObject(3472, 1254.77283, -2229.48877, 16.40805,   0.00000, 0.00000, 359.38477);
	CreateDynamicObject(3472, 1261.67749, -2253.68457, 14.44899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1276.31152, -2266.93848, 13.62043,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1299.08179, -2271.63818, 12.79397,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1308.95508, -2302.99072, 12.54688,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1283.22070, -2303.00195, 13.16208,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1265.04761, -2313.84033, 14.14672,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1255.21851, -2334.65137, 15.88722,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1256.60974, -2355.45117, 17.59113,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1267.86426, -2372.39648, 19.33500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1291.91675, -2383.14404, 21.07971,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1317.21851, -2383.67163, 21.07971,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1343.02429, -2383.69531, 21.07971,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1362.11145, -2383.77173, 21.07971,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1385.81824, -2383.57983, 19.74308,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1408.79224, -2383.29224, 17.94906,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1437.78906, -2384.07202, 14.50986,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1475.31677, -2383.57642, 12.83610,   0.00000, 0.00000, 0.00000);
	//Pizza
	CreateDynamicObject(1360, 2258.89990, -1343.09998, 23.80000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1360, 2256.00000, -1343.09998, 23.80000,   0.00000, 0.00000, 272.00000);
	CreateDynamicObject(970, 2222.50000, -1372.19995, 23.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(970, 2224.60010, -1370.09998, 23.50000,   0.00000, 0.00000, 180.50000);
	CreateDynamicObject(970, 2228.69995, -1370.09998, 23.50000,   0.00000, 0.00000, 180.25000);
	CreateDynamicObject(970, 2232.80005, -1370.09998, 23.50000,   0.00000, 0.00000, 180.24699);
	CreateDynamicObject(1775, 2232.89990, -1368.80005, 24.10000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1281, 2228.50000, -1366.00000, 23.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 2225.80005, -1359.59998, 23.80000,   0.00000, 0.00000, 34.00000);
	CreateDynamicObject(2837, 2225.39990, -1360.09998, 23.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2837, 2224.89990, -1365.09998, 23.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1216, 2232.89990, -1366.59998, 23.70000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2867, 2227.80005, -1365.59998, 23.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1340, 2231.80005, -1362.19995, 24.10000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3578, 2229.60010, -1355.30005, 22.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 2229.50000, -1350.00000, 22.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 2229.69995, -1344.40002, 22.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 2229.80005, -1339.00000, 22.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1257, 2234.10010, -1378.00000, 24.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(949, 2232.89990, -1356.00000, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 2225.60010, -1338.40002, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 2231.69995, -1338.30005, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 2230.79980, -1338.29980, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 2229.90039, -1338.29980, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 2229.10059, -1338.29980, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 2228.19995, -1338.30005, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 2227.29980, -1338.29980, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 2226.40039, -1338.29980, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 2224.69995, -1338.40002, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 2232.60059, -1338.29980, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 2232.00000, -1356.00000, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 2231.10010, -1356.00000, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 2230.19995, -1356.00000, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 2229.30005, -1356.00000, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 2228.39990, -1356.00000, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 2227.50000, -1356.00000, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 2226.60010, -1356.00000, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 2225.69995, -1356.00000, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 2224.69995, -1356.00000, 23.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2100.39990, -1786.09998, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2104.50000, -1786.09998, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2112.69995, -1786.09998, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2116.80005, -1786.09998, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1226, 2125.89990, -1788.59998, 16.40000,   0.00000, 0.00000, 318.00000);
	CreateDynamicObject(970, 2120.89990, -1786.09998, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2125.00000, -1786.09998, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2129.10010, -1786.09998, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2133.19995, -1786.09998, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1364, 2098.00000, -1782.30005, 13.40000,   0.00000, 0.00000, 261.50000);
	CreateDynamicObject(792, 2098.60010, -1779.50000, 12.60000,   0.00000, 0.00000, 351.75000);
	CreateDynamicObject(792, 2097.69995, -1785.19995, 12.60000,   0.00000, 0.00000, 350.49701);
	CreateDynamicObject(1364, 2098.80005, -1776.59998, 13.40000,   0.00000, 0.00000, 261.49701);
	CreateDynamicObject(792, 2099.50000, -1773.80005, 12.60000,   0.00000, 0.00000, 351.24899);
	CreateDynamicObject(1364, 2099.89990, -1771.00000, 13.40000,   0.00000, 0.00000, 256.24701);
	CreateDynamicObject(792, 2101.39990, -1768.40002, 12.60000,   0.00000, 0.00000, 308.99399);
	CreateDynamicObject(997, 2105.60010, -1767.19995, 12.60000,   0.00000, 0.00000, 22.00000);
	CreateDynamicObject(997, 2108.60010, -1766.00000, 12.60000,   0.00000, 0.00000, 59.24500);
	CreateDynamicObject(997, 2110.19995, -1763.19995, 12.60000,   0.00000, 0.00000, 98.99400);
	CreateDynamicObject(997, 2109.60010, -1760.00000, 12.60000,   0.00000, 0.00000, 136.99200);
	CreateDynamicObject(997, 2107.19995, -1757.80005, 12.60000,   0.00000, 0.00000, 172.23900);
	CreateDynamicObject(997, 2104.00000, -1757.40002, 12.60000,   0.00000, 0.00000, 182.48801);
	CreateDynamicObject(997, 2095.19995, -1762.19995, 12.60000,   0.00000, 0.00000, 58.48300);
	CreateDynamicObject(2364, 2110.50000, -1788.50000, 12.60000,   0.00000, 0.00000, 38.00000);
	CreateDynamicObject(1775, 2112.69995, -1790.50000, 13.70000,   0.00000, 0.00000, 180.50000);
	CreateDynamicObject(1363, 2098.80005, -1766.69995, 13.40000,   0.00000, 0.00000, 344.00000);
	CreateDynamicObject(1234, 2098.60010, -1767.90002, 14.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1216, 2114.00000, -1790.59998, 13.20000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1233, 2125.00000, -1789.19995, 14.10000,   0.00000, 0.00000, 238.00000);
	CreateDynamicObject(8661, 2131.60010, -1811.40002, 12.60000,   0.00000, 0.00000, 267.50000);
	CreateDynamicObject(3578, 2133.80005, -1791.59998, 11.90000,   0.00000, 0.00000, 359.50000);
	CreateDynamicObject(3578, 2133.80005, -1795.59998, 11.90000,   0.00000, 0.00000, 359.49500);
	CreateDynamicObject(3578, 2133.80005, -1799.59998, 11.90000,   0.00000, 0.00000, 359.49500);
	CreateDynamicObject(3578, 2133.80005, -1803.69995, 11.90000,   0.00000, 0.00000, 359.49500);
	CreateDynamicObject(3578, 2133.69995, -1807.80005, 11.90000,   0.00000, 0.00000, 359.49500);
	CreateDynamicObject(3578, 2133.69995, -1812.40002, 11.90000,   0.00000, 0.00000, 359.49500);
	CreateDynamicObject(3578, 2133.69995, -1816.59998, 11.90000,   0.00000, 0.00000, 359.49500);
	CreateDynamicObject(3578, 2133.69995, -1820.69995, 11.90000,   0.00000, 0.00000, 359.49500);
	CreateDynamicObject(3578, 2133.60010, -1824.90002, 11.90000,   0.00000, 0.00000, 359.49500);
	CreateDynamicObject(8661, 2125.80005, -1821.90002, 12.60000,   0.00000, 0.00000, 179.49500);
	CreateDynamicObject(966, 2106.10010, -1823.69995, 12.50000,   0.00000, 0.00000, 88.75000);
	CreateDynamicObject(968, 2106.10010, -1823.50000, 13.00000,   0.07700, 88.00100, 268.75101);
	CreateDynamicObject(1233, 2106.10010, -1831.30005, 14.10000,   0.00000, 0.00000, 237.99699);
	CreateDynamicObject(3578, 2121.60010, -1781.30005, 11.70000,   0.00000, 0.00000, 359.99500);
	CreateDynamicObject(3578, 2121.69995, -1776.19995, 11.70000,   0.00000, 0.00000, 359.99500);
	CreateDynamicObject(3578, 2121.69995, -1770.80005, 11.70000,   0.00000, 0.00000, 359.99500);
	CreateDynamicObject(3578, 2121.69995, -1765.90002, 11.70000,   0.00000, 0.00000, 359.99500);
	CreateDynamicObject(3578, 2101.60010, -1781.50000, 11.70000,   0.00000, 0.00000, 359.99500);
	CreateDynamicObject(3578, 2101.89990, -1776.09998, 11.70000,   0.00000, 0.00000, 359.24500);
	CreateDynamicObject(3578, 2101.89990, -1770.69995, 11.70000,   0.00000, 0.00000, 359.24200);
	CreateDynamicObject(997, 2123.89990, -1762.40002, 12.60000,   0.00000, 0.00000, 68.98900);
	CreateDynamicObject(997, 2125.10010, -1759.40002, 12.60000,   0.00000, 0.00000, 32.73300);
	CreateDynamicObject(997, 2127.80005, -1757.80005, 12.60000,   0.00000, 0.00000, 5.72800);
	CreateDynamicObject(970, 2099.10010, -1791.00000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2095.00000, -1791.00000, 13.10000,   0.00000, 0.00000, 359.50000);
	CreateDynamicObject(970, 2097.80005, -1802.50000, 13.10000,   0.00000, 0.00000, 359.49500);
	CreateDynamicObject(970, 2093.60010, -1802.50000, 13.10000,   0.00000, 0.00000, 0.49500);
	CreateDynamicObject(970, 2097.69995, -1811.69995, 13.10000,   0.00000, 0.00000, 359.24399);
	CreateDynamicObject(970, 2093.60010, -1811.69995, 13.10000,   0.00000, 0.00000, 1.24200);
	CreateDynamicObject(970, 2093.69995, -1822.40002, 12.90000,   0.00000, 0.00000, 0.49100);
	CreateDynamicObject(970, 2097.80005, -1822.40002, 12.90000,   0.00000, 0.00000, 0.48900);
	CreateDynamicObject(1432, 2071.60010, -1778.59998, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 2075.89990, -1765.00000, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2837, 2075.89990, -1764.59998, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2866, 2070.00000, -1775.69995, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1359, 2095.19995, -1763.40002, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1359, 2077.29980, -1768.50000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1359, 2104.90039, -1805.00000, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1340, 2126.89990, -1775.19995, 13.70000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1281, 2121.30005, -1789.30005, 13.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 2117.39990, -1789.30005, 13.40000,   0.00000, 0.00000, 0.00000);
	//Los Santos Police Department
	CreateDynamicObject(19454, 220.88000, 75.03000, 1042.15002,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 224.24001, 75.03000, 1042.18994,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 227.23000, 75.03000, 1042.22998,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 230.52000, 75.03000, 1042.27002,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 233.66000, 75.03000, 1042.31006,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 236.84000, 75.03000, 1042.34998,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 228.22000, 66.60000, 1042.17004,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 228.23000, 57.98000, 1042.08997,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 228.23000, 52.69000, 1042.03003,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19465, 228.27000, 70.13000, 1044.56006,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(19465, 222.39999, 70.17000, 1044.56006,   0.00000, 0.00000, -90.48000);
	CreateDynamicObject(19464, 219.42999, 72.94000, 1044.56006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 219.44000, 77.96000, 1044.55005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 222.07001, 79.81000, 1044.56006,   0.00000, 0.00000, -89.58000);
	CreateDynamicObject(19464, 227.22000, 79.85000, 1044.55005,   0.00000, 0.00000, -90.18000);
	CreateDynamicObject(19465, 230.87000, 79.87000, 1044.60999,   0.00000, 0.00000, -89.76000);
	CreateDynamicObject(19464, 236.56000, 79.88000, 1044.59998,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(19464, 235.99001, 78.44000, 1044.58997,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(19464, 236.00999, 73.17000, 1044.56995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 233.58000, 70.10000, 1044.55005,   0.00000, 0.00000, -90.60000);
	CreateDynamicObject(19464, 225.17000, 73.18000, 1040.81006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 225.17999, 78.96000, 1040.80005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2604, 224.75000, 72.12000, 1042.78003,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(2604, 224.75999, 75.80000, 1042.76001,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(2604, 224.75999, 79.48000, 1042.71997,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(2608, 219.78999, 78.67000, 1042.93005,   0.00000, 0.00000, 89.52000);
	CreateDynamicObject(2610, 219.67000, 77.49000, 1043.07996,   0.00000, 0.00000, -272.39999);
	CreateDynamicObject(2610, 219.64000, 76.99000, 1042.65002,   0.00000, 0.00000, -272.39999);
	CreateDynamicObject(2610, 219.62000, 76.51000, 1043.06995,   0.00000, 0.00000, -272.39999);
	CreateDynamicObject(2610, 219.60001, 76.04000, 1043.07996,   0.00000, 0.00000, -272.39999);
	CreateDynamicObject(2608, 219.66000, 74.84000, 1042.81006,   0.00000, 0.00000, 90.12000);
	CreateDynamicObject(2610, 219.58000, 73.63000, 1043.00000,   0.00000, 0.00000, -269.82001);
	CreateDynamicObject(2610, 219.58000, 73.12000, 1042.60999,   0.00000, 0.00000, -268.32001);
	CreateDynamicObject(2737, 219.61000, 71.95000, 1043.45996,   0.00000, 0.00000, 89.88000);
	CreateDynamicObject(2356, 223.23000, 78.07000, 1042.28003,   0.00000, 0.00000, -75.00000);
	CreateDynamicObject(2356, 223.41000, 76.34000, 1042.22998,   0.00000, 0.00000, -81.06000);
	CreateDynamicObject(2356, 223.30000, 74.73000, 1042.22998,   0.00000, 0.00000, -107.46000);
	CreateDynamicObject(2356, 223.25000, 72.74000, 1042.19995,   0.00000, 0.00000, -89.40000);
	CreateDynamicObject(2356, 223.49001, 70.57000, 1042.19995,   0.00000, 0.00000, -46.80000);
	CreateDynamicObject(2614, 219.62000, 75.08000, 1044.25000,   0.00000, 0.00000, 90.42000);
	CreateDynamicObject(1721, 233.07001, 79.66000, 1042.40002,   0.00000, 0.00000, 180.12000);
	CreateDynamicObject(1721, 233.87000, 79.66000, 1042.39001,   0.00000, 0.00000, 181.50000);
	CreateDynamicObject(1721, 234.61000, 79.64000, 1042.41003,   0.00000, 0.00000, 181.62000);
	CreateDynamicObject(1721, 235.66000, 78.44000, 1042.43005,   0.00000, 0.00000, 89.22000);
	CreateDynamicObject(1721, 235.64999, 77.63000, 1042.43994,   0.00000, 0.00000, 89.22000);
	CreateDynamicObject(1721, 235.69000, 76.87000, 1042.43005,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(1721, 235.71001, 76.12000, 1042.42004,   0.00000, 0.00000, 89.34000);
	CreateDynamicObject(1721, 235.71001, 71.59000, 1042.40002,   0.00000, 0.00000, 89.34000);
	CreateDynamicObject(1721, 235.72000, 72.35000, 1042.39001,   0.00000, 0.00000, 89.34000);
	CreateDynamicObject(1721, 235.74001, 73.13000, 1042.39001,   0.00000, 0.00000, 89.34000);
	CreateDynamicObject(1721, 235.75999, 73.90000, 1042.38000,   0.00000, 0.00000, 89.34000);
	CreateDynamicObject(1721, 234.42999, 70.46000, 1042.34998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 233.64000, 70.48000, 1042.33997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 232.86000, 70.47000, 1042.32996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 232.03999, 70.46000, 1042.32996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1516, 233.19000, 72.75000, 1042.28003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1516, 233.87000, 77.42000, 1042.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 235.62000, 74.98000, 1042.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 235.46001, 70.64000, 1042.34998,   0.00000, 0.00000, -40.26000);
	CreateDynamicObject(948, 235.49001, 79.36000, 1042.34998,   0.00000, 0.00000, -81.12000);
	CreateDynamicObject(948, 231.14999, 70.60000, 1042.22998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 232.20000, 79.36000, 1042.35999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 229.78999, 79.39000, 1042.34998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1538, 230.16000, 79.85000, 1042.19995,   0.00000, 0.00000, 1.56000);
	CreateDynamicObject(19454, 225.19000, 65.41000, 1042.10999,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 222.83000, 65.40000, 1042.06995,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 220.83000, 65.40000, 1042.04004,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19464, 219.39999, 67.04000, 1044.56995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 219.38000, 63.40000, 1044.56006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 226.37000, 67.12000, 1044.55005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19465, 226.38000, 63.34000, 1044.55005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 223.49001, 60.71000, 1044.53003,   0.00000, 0.00000, -89.70000);
	CreateDynamicObject(19464, 218.25999, 60.70000, 1044.53003,   0.00000, 0.00000, -89.88000);
	CreateDynamicObject(19454, 231.64000, 65.39000, 1042.19995,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 235.08000, 65.38000, 1042.25000,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 231.61000, 55.99000, 1042.10999,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 235.08000, 56.03000, 1042.15002,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19464, 229.84000, 63.37000, 1044.55005,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(19465, 229.84000, 67.13000, 1044.55005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 236.70000, 67.38000, 1044.55005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 236.71001, 63.47000, 1044.52002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 232.69000, 60.34000, 1044.54004,   0.00000, 0.00000, -89.28000);
	CreateDynamicObject(19464, 237.66000, 60.40000, 1044.53003,   0.00000, 0.00000, -89.28000);
	CreateDynamicObject(19454, 237.85001, 56.05000, 1042.15002,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19390, 234.46001, 51.10000, 1043.83997,   0.00000, 0.00000, -89.28000);
	CreateDynamicObject(19453, 229.82001, 55.78000, 1043.83997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 231.34000, 51.06000, 1043.83997,   0.00000, 0.00000, -89.58000);
	CreateDynamicObject(19454, 231.72000, 46.43000, 1042.02002,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 235.19000, 46.43000, 1042.06006,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 238.61000, 46.44000, 1042.09998,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19361, 237.63000, 51.15000, 1043.83997,   0.00000, 0.00000, -88.62000);
	CreateDynamicObject(19361, 239.14999, 52.72000, 1043.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 239.17000, 55.72000, 1043.83997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 239.16000, 58.83000, 1043.84998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 237.86000, 60.19000, 1043.84998,   0.00000, 0.00000, -89.40000);
	CreateDynamicObject(19361, 231.48000, 60.10000, 1043.84998,   0.00000, 0.00000, -89.40000);
	CreateDynamicObject(19361, 234.69000, 60.15000, 1043.84998,   0.00000, 0.00000, -89.40000);
	CreateDynamicObject(1491, 229.66000, 60.16000, 1042.16003,   0.00000, 0.00000, -180.84000);
	CreateDynamicObject(1491, 226.64999, 60.17000, 1042.16003,   0.00000, 0.00000, -0.36000);
	CreateDynamicObject(19464, 232.59000, 60.27000, 1044.54004,   0.00000, 0.00000, -89.28000);
	CreateDynamicObject(19464, 223.71001, 60.30000, 1044.56006,   0.00000, 0.00000, -90.30000);
	CreateDynamicObject(19434, 230.45000, 60.11000, 1043.83997,   0.00000, 0.00000, 88.32000);
	CreateDynamicObject(19434, 225.85001, 60.16000, 1043.81006,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, 227.38000, 60.30000, 1047.16003,   0.00000, 0.00000, -90.36000);
	CreateDynamicObject(19361, 228.24001, 60.14000, 1046.39001,   0.00000, 0.00000, -90.54000);
	CreateDynamicObject(19454, 224.78999, 57.59000, 1042.04004,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 221.39000, 57.60000, 1041.98999,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 218.61000, 57.59000, 1041.95996,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 224.84000, 48.86000, 1041.94995,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 221.35001, 48.86000, 1041.90002,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 218.62000, 48.85000, 1041.84998,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19390, 225.14000, 55.63000, 1043.72998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 225.13000, 58.76000, 1043.73999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 225.14000, 52.61000, 1043.73999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 220.39999, 51.08000, 1043.63000,   0.00000, 0.00000, -89.88000);
	CreateDynamicObject(19453, 217.00999, 55.96000, 1043.73999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 220.46001, 60.12000, 1043.72998,   0.00000, 0.00000, -89.16000);
	CreateDynamicObject(1502, 226.34000, 64.12000, 1042.10999,   0.00000, 0.00000, -91.20000);
	CreateDynamicObject(1502, 229.81000, 67.90000, 1042.10999,   0.00000, 0.00000, -90.60000);
	CreateDynamicObject(2172, 222.98000, 61.28000, 1042.09998,   0.00000, 0.00000, 179.94000);
	CreateDynamicObject(2193, 221.03000, 61.28000, 1042.08997,   0.00000, 0.00000, 90.54000);
	CreateDynamicObject(2198, 219.97000, 65.08000, 1041.97998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2198, 220.99001, 66.13000, 1041.98999,   0.00000, 0.00000, -179.46001);
	CreateDynamicObject(2198, 225.72000, 67.43000, 1042.07996,   0.00000, 0.00000, -89.16000);
	CreateDynamicObject(2198, 225.69000, 69.45000, 1042.06995,   0.00000, 0.00000, -89.70000);
	CreateDynamicObject(2186, 224.94000, 61.34000, 1042.05005,   0.00000, 0.00000, -179.03999);
	CreateDynamicObject(2610, 219.80000, 69.71000, 1042.93994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2610, 220.34000, 69.73000, 1042.94995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2610, 220.88000, 69.74000, 1042.95996,   0.00000, 0.00000, 1.56000);
	CreateDynamicObject(2356, 224.92999, 68.31000, 1042.18994,   0.00000, 0.00000, -50.52000);
	CreateDynamicObject(2356, 225.17000, 66.58000, 1042.13000,   0.00000, 0.00000, -83.04000);
	CreateDynamicObject(2356, 220.33000, 66.67000, 1042.12000,   0.00000, 0.00000, -177.78000);
	CreateDynamicObject(2356, 220.74001, 64.38000, 1042.07996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2356, 220.58000, 61.87000, 1042.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2356, 221.80000, 61.93000, 1042.09998,   0.00000, 0.00000, -112.02000);
	CreateDynamicObject(2606, 219.56000, 65.52000, 1043.95996,   0.00000, 0.00000, 90.78000);
	CreateDynamicObject(2185, 234.02000, 69.77000, 1042.31995,   0.00000, 0.00000, -88.08000);
	CreateDynamicObject(2185, 234.17000, 62.33000, 1042.27002,   0.00000, 0.00000, -90.30000);
	CreateDynamicObject(2185, 234.03999, 66.11000, 1042.29004,   0.00000, 0.00000, -90.36000);
	CreateDynamicObject(2356, 235.66000, 61.68000, 1042.27002,   0.00000, 0.00000, 89.46000);
	CreateDynamicObject(2356, 235.52000, 65.55000, 1042.25000,   0.00000, 0.00000, 113.46000);
	CreateDynamicObject(2356, 235.39999, 69.55000, 1042.34998,   0.00000, 0.00000, 147.24001);
	CreateDynamicObject(1721, 232.67999, 69.27000, 1042.31006,   0.00000, 0.00000, -109.80000);
	CreateDynamicObject(1721, 232.59000, 65.36000, 1042.29004,   0.00000, 0.00000, -79.56000);
	CreateDynamicObject(1721, 232.57001, 61.70000, 1042.26001,   0.00000, 0.00000, -92.88000);
	CreateDynamicObject(1721, 230.12000, 63.18000, 1042.23999,   0.00000, 0.00000, -89.88000);
	CreateDynamicObject(1721, 230.13000, 64.04000, 1042.23999,   0.00000, 0.00000, -91.44000);
	CreateDynamicObject(1721, 230.23000, 62.39000, 1042.28003,   0.00000, 0.00000, -76.14000);
	CreateDynamicObject(2185, 217.38000, 51.80000, 1042.03003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2185, 217.25000, 55.33000, 1042.02002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2185, 217.25000, 58.37000, 1042.05005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2185, 220.97000, 51.63000, 1042.03003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2185, 220.97000, 55.30000, 1042.06006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2185, 221.02000, 58.34000, 1042.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2356, 221.60001, 59.75000, 1042.05005,   0.00000, 0.00000, -154.08000);
	CreateDynamicObject(2356, 221.62000, 56.00000, 1042.02002,   0.00000, 0.00000, -151.50000);
	CreateDynamicObject(2356, 221.13000, 52.94000, 1042.02002,   0.00000, 0.00000, -141.24001);
	CreateDynamicObject(2356, 217.84000, 53.01000, 1041.98999,   0.00000, 0.00000, -152.22000);
	CreateDynamicObject(2356, 218.02000, 56.89000, 1041.96997,   0.00000, 0.00000, -175.62000);
	CreateDynamicObject(2356, 218.05000, 59.05000, 1041.97998,   0.00000, 0.00000, -170.70000);
	CreateDynamicObject(2610, 223.42999, 51.56000, 1042.81995,   0.00000, 0.00000, -171.00000);
	CreateDynamicObject(2610, 224.06000, 51.52000, 1042.84998,   0.00000, 0.00000, -179.88000);
	CreateDynamicObject(2610, 224.72000, 51.58000, 1042.81995,   0.00000, 0.00000, -175.25999);
	CreateDynamicObject(2186, 224.64999, 59.33000, 1041.96997,   0.00000, 0.00000, -89.76000);
	CreateDynamicObject(2169, 235.14000, 57.99000, 1042.25000,   0.00000, 0.00000, -179.03999);
	CreateDynamicObject(2894, 234.72000, 57.98000, 1043.03003,   0.00000, 0.00000, -179.46001);
	CreateDynamicObject(2616, 234.92999, 60.01000, 1043.92004,   0.00000, 0.00000, 1.50000);
	CreateDynamicObject(14532, 231.95000, 59.54000, 1043.18005,   0.00000, 0.00000, -152.64000);
	CreateDynamicObject(1721, 231.16000, 54.79000, 1042.18994,   0.00000, 0.00000, 1.80000);
	CreateDynamicObject(1721, 232.00000, 54.78000, 1042.18005,   0.00000, 0.00000, -7.86000);
	CreateDynamicObject(1721, 232.81000, 54.71000, 1042.19995,   0.00000, 0.00000, 0.78000);
	CreateDynamicObject(1721, 233.69000, 54.69000, 1042.20996,   0.00000, 0.00000, -10.44000);
	CreateDynamicObject(1721, 235.45000, 54.68000, 1042.19995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 236.21001, 54.68000, 1042.21997,   0.00000, 0.00000, -3.30000);
	CreateDynamicObject(1721, 236.99001, 54.70000, 1042.22998,   0.00000, 0.00000, 1.08000);
	CreateDynamicObject(1721, 237.80000, 54.73000, 1042.26001,   0.00000, 0.00000, 12.06000);
	CreateDynamicObject(1721, 237.98000, 53.06000, 1042.22998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 237.14999, 53.01000, 1042.21997,   0.00000, 0.00000, -5.88000);
	CreateDynamicObject(1721, 236.28000, 52.98000, 1042.18994,   0.00000, 0.00000, 2.34000);
	CreateDynamicObject(1721, 235.33000, 53.04000, 1042.19995,   0.00000, 0.00000, -11.40000);
	CreateDynamicObject(1721, 233.41000, 52.96000, 1042.16003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 232.56000, 53.00000, 1042.17004,   0.00000, 0.00000, 5.10000);
	CreateDynamicObject(1721, 231.80000, 52.97000, 1042.16003,   0.00000, 0.00000, -4.38000);
	CreateDynamicObject(1721, 230.92999, 52.93000, 1042.15002,   0.00000, 0.00000, 3.24000);
	CreateDynamicObject(1502, 233.71001, 51.08000, 1042.07996,   0.00000, 0.00000, 0.42000);
	CreateDynamicObject(1502, 225.14000, 54.88000, 1041.97998,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(18755, 227.28000, 45.84000, 1043.93005,   0.00000, 0.00000, -89.58000);
	CreateDynamicObject(18756, 227.19000, 45.88000, 1043.91003,   0.00000, 0.00000, -89.70000);
	CreateDynamicObject(18757, 227.17999, 45.87000, 1043.94995,   0.00000, 0.00000, -89.58000);
	CreateDynamicObject(19361, 230.84000, 47.85000, 1043.75000,   0.00000, 0.00000, 90.36000);
	CreateDynamicObject(19390, 233.92999, 47.86000, 1043.75000,   0.00000, 0.00000, 90.42000);
	CreateDynamicObject(19453, 240.28000, 47.87000, 1043.76001,   0.00000, 0.00000, -90.06000);
	CreateDynamicObject(19453, 230.10001, 43.09000, 1043.70996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 231.70000, 37.70000, 1041.93005,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 235.11000, 37.68000, 1041.96997,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 238.61000, 37.67000, 1042.01001,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 241.95000, 46.54000, 1042.14001,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 241.94000, 37.65000, 1042.06995,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19390, 243.41000, 46.21000, 1043.76001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 243.42999, 39.87000, 1043.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 230.13000, 34.91000, 1043.71997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 231.89000, 32.93000, 1043.69995,   0.00000, 0.00000, -89.76000);
	CreateDynamicObject(19453, 243.42000, 33.76000, 1043.76001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 241.37000, 33.13000, 1043.72998,   0.00000, 0.00000, -89.64000);
	CreateDynamicObject(19390, 241.84000, 38.68000, 1043.75000,   0.00000, 0.00000, -89.58000);
	CreateDynamicObject(19390, 231.78999, 38.61000, 1043.72998,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(19453, 236.63000, 37.86000, 1043.70996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 236.64000, 43.82000, 1043.69995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 238.85001, 38.66000, 1043.75000,   0.00000, 0.00000, -89.46000);
	CreateDynamicObject(19361, 234.92999, 38.63000, 1043.72998,   0.00000, 0.00000, -89.46000);
	CreateDynamicObject(19434, 237.39000, 38.65000, 1043.75000,   0.00000, 0.00000, -89.52000);
	CreateDynamicObject(14782, 236.23000, 42.04000, 1043.14001,   0.00000, 0.00000, -89.34000);
	CreateDynamicObject(14782, 237.08000, 41.96000, 1043.10999,   0.00000, 0.00000, 88.86000);
	CreateDynamicObject(14782, 242.92000, 42.14000, 1043.20996,   0.00000, 0.00000, -90.54000);
	CreateDynamicObject(14782, 230.53000, 41.98000, 1043.06995,   0.00000, 0.00000, 88.44000);
	CreateDynamicObject(14842, 235.67000, 34.60000, 1043.88000,   0.00000, 0.00000, 180.24001);
	CreateDynamicObject(14842, 237.66000, 37.00000, 1043.85999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2523, 242.83000, 34.20000, 1042.09998,   0.00000, 0.00000, -90.96000);
	CreateDynamicObject(2523, 242.85001, 35.82000, 1042.10999,   0.00000, 0.00000, -90.54000);
	CreateDynamicObject(2523, 242.82001, 36.53000, 1042.10999,   0.00000, 0.00000, -89.64000);
	CreateDynamicObject(2523, 242.82001, 34.98000, 1042.09998,   0.00000, 0.00000, -90.60000);
	CreateDynamicObject(2523, 230.73000, 35.76000, 1041.93005,   0.00000, 0.00000, 87.24000);
	CreateDynamicObject(2523, 230.70000, 34.04000, 1041.92004,   0.00000, 0.00000, 87.84000);
	CreateDynamicObject(2523, 230.75000, 34.93000, 1041.93994,   0.00000, 0.00000, 89.04000);
	CreateDynamicObject(2523, 230.73000, 33.18000, 1041.93994,   0.00000, 0.00000, 90.06000);
	CreateDynamicObject(2208, 233.84000, 43.42000, 1041.83997,   0.00000, 0.00000, -90.42000);
	CreateDynamicObject(2208, 239.14999, 43.64000, 1041.85999,   0.00000, 0.00000, -89.58000);
	CreateDynamicObject(1502, 233.14000, 47.81000, 1042.04004,   0.00000, 0.00000, 0.30000);
	CreateDynamicObject(1502, 243.39000, 47.00000, 1042.06995,   0.00000, 0.00000, -90.48000);
	CreateDynamicObject(19454, 240.84000, 55.96000, 1042.18005,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 244.23000, 55.97000, 1042.21997,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 245.30000, 46.43000, 1042.18994,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 248.73000, 46.42000, 1042.21997,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 247.67999, 56.05000, 1042.28003,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 250.73000, 56.03000, 1042.34998,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 250.78999, 46.45000, 1042.26001,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 254.03999, 56.05000, 1042.38000,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 254.03999, 46.45000, 1042.29004,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 257.48001, 46.46000, 1042.32996,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 257.47000, 56.06000, 1042.42004,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 260.66000, 46.46000, 1042.32996,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 260.64999, 56.05000, 1042.43005,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19390, 246.70000, 47.89000, 1043.76001,   0.00000, 0.00000, -89.52000);
	CreateDynamicObject(19361, 249.89000, 47.91000, 1043.76001,   0.00000, 0.00000, -89.28000);
	CreateDynamicObject(19361, 251.46001, 46.40000, 1043.76001,   0.00000, 0.00000, 1.80000);
	CreateDynamicObject(19361, 251.55000, 43.31000, 1043.76001,   0.00000, 0.00000, 1.62000);
	CreateDynamicObject(19453, 248.22000, 41.78000, 1043.73999,   0.00000, 0.00000, -90.42000);
	CreateDynamicObject(1502, 245.96001, 47.85000, 1042.00000,   0.00000, 0.00000, 0.42000);
	CreateDynamicObject(19453, 225.23000, 47.78000, 1043.62000,   0.00000, 0.00000, -89.58000);
	CreateDynamicObject(18070, 247.53000, 40.10000, 1042.68005,   0.00000, 0.00000, -180.06000);
	CreateDynamicObject(1968, 250.22000, 44.14000, 1042.84998,   0.00000, 0.00000, 1.80000);
	CreateDynamicObject(1968, 250.14000, 46.51000, 1042.83997,   0.00000, 0.00000, 1.98000);
	CreateDynamicObject(1969, 244.83000, 44.23000, 1042.78003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1969, 247.28999, 45.31000, 1042.79004,   0.00000, 0.00000, -88.74000);
	CreateDynamicObject(2453, 249.64000, 42.15000, 1043.53003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2355, 248.94000, 41.93000, 1043.23999,   -25.80000, 23.10000, 0.00000);
	CreateDynamicObject(1775, 244.74001, 47.32000, 1043.31995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19390, 240.69000, 51.21000, 1043.83997,   0.00000, 0.00000, -88.86000);
	CreateDynamicObject(19434, 243.07001, 51.26000, 1043.83997,   0.00000, 0.00000, -88.86000);
	CreateDynamicObject(19407, 243.75999, 52.81000, 1043.82996,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(19407, 243.75999, 56.00000, 1043.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 243.75999, 59.16000, 1043.81995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 243.91000, 57.65000, 1043.83997,   0.00000, 0.00000, -89.10000);
	CreateDynamicObject(19390, 245.46001, 51.31000, 1043.83997,   0.00000, 0.00000, -88.86000);
	CreateDynamicObject(19453, 246.95000, 56.08000, 1043.84998,   0.00000, 0.00000, 0.72000);
	CreateDynamicObject(2169, 240.83000, 54.80000, 1042.17004,   0.00000, 0.00000, 0.72000);
	CreateDynamicObject(1721, 241.39000, 53.40000, 1042.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1721, 241.32001, 56.57000, 1042.27002,   0.00000, 0.00000, -177.78000);
	CreateDynamicObject(1651, 243.73000, 52.86000, 1043.63000,   0.00000, 0.00000, -179.46001);
	CreateDynamicObject(19466, 243.75000, 52.90000, 1043.85999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 243.82001, 55.96000, 1043.82996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1651, 243.75999, 56.02000, 1044.13000,   0.00000, 0.00000, -180.36000);
	CreateDynamicObject(2198, 244.31000, 55.49000, 1042.20996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2356, 245.59000, 56.30000, 1042.30005,   0.00000, 0.00000, 103.86000);
	CreateDynamicObject(2737, 245.62000, 57.51000, 1044.04004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2606, 246.60001, 55.33000, 1044.65002,   0.00000, 0.00000, -89.64000);
	CreateDynamicObject(1721, 244.34000, 54.74000, 1042.30005,   0.00000, 0.00000, 194.52000);
	CreateDynamicObject(1721, 246.58000, 53.96000, 1042.31995,   0.00000, 0.00000, 96.72000);
	CreateDynamicObject(2608, 246.66000, 52.43000, 1042.93005,   0.00000, 0.00000, -89.88000);
	CreateDynamicObject(1491, 244.71001, 51.28000, 1042.13000,   0.00000, 0.00000, 1.38000);
	CreateDynamicObject(1491, 239.95000, 51.18000, 1042.12000,   0.00000, 0.00000, 0.90000);
	CreateDynamicObject(19365, 248.57001, 51.37000, 1043.91003,   0.00000, 0.00000, -88.86000);
	CreateDynamicObject(19365, 250.25000, 52.93000, 1043.91003,   0.00000, 0.00000, 0.54000);
	CreateDynamicObject(19365, 251.64999, 54.60000, 1043.91003,   0.00000, 0.00000, -88.44000);
	CreateDynamicObject(19365, 253.25999, 53.03000, 1043.90002,   0.00000, 0.00000, 1.32000);
	CreateDynamicObject(19365, 254.84000, 54.66000, 1043.90002,   0.00000, 0.00000, -88.44000);
	CreateDynamicObject(19365, 256.54999, 53.04000, 1043.90002,   0.00000, 0.00000, 1.32000);
	CreateDynamicObject(19365, 251.56000, 46.40000, 1043.89001,   0.00000, 0.00000, 1.26000);
	CreateDynamicObject(19365, 253.21001, 44.77000, 1043.87000,   0.00000, 0.00000, -88.68000);
	CreateDynamicObject(19365, 254.81000, 46.44000, 1043.89001,   0.00000, 0.00000, 1.26000);
	CreateDynamicObject(19365, 250.00999, 47.92000, 1043.90002,   0.00000, 0.00000, -88.98000);
	CreateDynamicObject(19365, 256.64001, 49.85000, 1043.90002,   0.00000, 0.00000, 1.80000);
	CreateDynamicObject(19365, 256.73001, 47.14000, 1043.90002,   0.00000, 0.00000, 1.80000);
	CreateDynamicObject(19365, 256.29001, 48.07000, 1043.90002,   0.00000, 0.00000, -88.68000);
	CreateDynamicObject(19302, 252.34000, 48.02000, 1043.62000,   0.00000, 0.00000, 1.14000);
	CreateDynamicObject(19303, 254.09000, 48.05000, 1043.62000,   0.00000, 0.00000, 1.14000);
	CreateDynamicObject(19302, 254.20000, 51.50000, 1043.66003,   0.00000, 0.00000, 1.14000);
	CreateDynamicObject(19303, 255.95000, 51.54000, 1043.66003,   0.00000, 0.00000, 1.14000);
	CreateDynamicObject(19303, 252.50000, 51.45000, 1043.66003,   0.00000, 0.00000, 1.14000);
	CreateDynamicObject(19302, 250.75000, 51.42000, 1043.66003,   0.00000, 0.00000, 1.14000);
	CreateDynamicObject(19304, 253.17000, 48.02000, 1045.44995,   0.00000, 0.00000, 1.14000);
	CreateDynamicObject(19304, 255.08000, 51.53000, 1045.50000,   0.00000, 0.00000, 1.14000);
	CreateDynamicObject(19304, 251.61000, 51.45000, 1045.51001,   0.00000, 0.00000, 1.14000);
	CreateDynamicObject(19454, 215.39999, 46.22000, 1041.80005,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 218.88000, 46.17000, 1041.83997,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19453, 220.49001, 42.99000, 1043.62000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 217.24001, 41.47000, 1043.62000,   0.00000, 0.00000, -91.26000);
	CreateDynamicObject(19453, 215.50999, 46.29000, 1043.62000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19390, 218.85001, 47.74000, 1043.62000,   0.00000, 0.00000, -89.76000);
	CreateDynamicObject(19453, 212.56000, 47.72000, 1043.62000,   0.00000, 0.00000, -89.76000);
	CreateDynamicObject(2206, 217.00999, 43.85000, 1041.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1663, 217.87000, 42.34000, 1042.30005,   0.00000, 0.00000, -180.06000);
	CreateDynamicObject(2190, 217.48000, 44.13000, 1042.76001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2776, 218.88000, 45.64000, 1042.33997,   0.00000, 0.00000, -27.54000);
	CreateDynamicObject(2776, 217.17999, 45.63000, 1042.25000,   0.00000, 0.00000, 16.50000);
	CreateDynamicObject(2001, 220.22000, 41.74000, 1041.84998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 215.89999, 41.83000, 1041.79004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2614, 217.81000, 41.60000, 1044.06995,   0.00000, 0.00000, -180.53999);
	CreateDynamicObject(1491, 218.10001, 47.72000, 1041.84998,   0.00000, 0.00000, 0.72000);
	CreateDynamicObject(2602, 252.25999, 45.16000, 1042.81006,   0.00000, 0.00000, -178.44000);
	CreateDynamicObject(1800, 253.96001, 43.82000, 1042.17004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 255.67000, 51.13000, 1042.30005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1800, 252.39000, 51.02000, 1042.23999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2602, 250.69000, 54.01000, 1042.87000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2602, 253.70000, 53.69000, 1042.91003,   0.00000, 0.00000, 91.14000);
	CreateDynamicObject(19454, 254.95000, 52.87000, 1045.43005,   0.54000, -90.72000, 1.62000);
	CreateDynamicObject(19454, 251.58000, 52.83000, 1045.38000,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 253.28999, 43.55000, 1045.31995,   0.54000, -90.72000, 0.90000);
	CreateDynamicObject(19454, 251.27000, 43.05000, 1045.30005,   0.54000, -90.72000, 1.02000);
	CreateDynamicObject(19454, 248.52000, 52.77000, 1045.34998,   0.54000, -90.72000, 0.54000);
	CreateDynamicObject(19454, 248.59000, 43.21000, 1045.27002,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 245.10001, 43.07000, 1045.22998,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 241.66000, 42.96000, 1045.16003,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 238.23000, 42.96000, 1045.12000,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 234.75000, 42.96000, 1045.06995,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 231.42000, 42.94000, 1045.04004,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 231.67999, 33.74000, 1044.94995,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 234.94000, 33.73000, 1044.98999,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 238.42000, 33.73000, 1045.03003,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 241.71001, 33.49000, 1045.06006,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 219.57001, 42.91000, 1045.00000,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 216.28000, 42.89000, 1044.95996,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 245.47000, 52.76000, 1045.31006,   0.54000, -90.72000, 0.36000);
	CreateDynamicObject(19454, 242.00999, 52.66000, 1045.26001,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 238.64999, 52.63000, 1045.21997,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 235.88000, 52.63000, 1045.18005,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 232.56000, 52.64000, 1045.13000,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 229.17000, 52.66000, 1045.08997,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 225.87000, 52.66000, 1045.05005,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 222.47000, 52.65000, 1045.01001,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 219.09000, 52.63000, 1044.96997,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 215.64000, 52.40000, 1044.93994,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 218.80000, 61.87000, 1045.06006,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 222.27000, 62.11000, 1045.09998,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 225.53999, 62.10000, 1045.13000,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 228.97000, 62.10000, 1045.18005,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 232.38000, 62.09000, 1045.20996,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 235.64999, 62.08000, 1045.23999,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 238.69000, 61.99000, 1045.29004,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 235.02000, 71.52000, 1045.31995,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 231.61000, 71.52000, 1045.28003,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 228.24001, 71.52000, 1045.23999,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 224.75000, 71.50000, 1045.19995,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 221.25999, 71.53000, 1045.16003,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 221.28999, 80.83000, 1045.23999,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 223.89999, 80.87000, 1045.28003,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 226.63000, 81.03000, 1045.31006,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 228.77000, 80.66000, 1045.32996,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 232.11000, 80.73000, 1045.35999,   0.54000, -90.72000, 0.00000);
	CreateDynamicObject(19454, 235.38000, 81.06000, 1045.42004,   0.54000, -90.72000, 0.00000);

    //tempat penyapu
    CreateDynamicObject(4639, 1669.38525, -1885.89514, 13.99650,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(983, 1665.38525, -1884.25806, 13.24850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1662.19336, -1887.49329, 13.24850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1662.19727, -1893.87866, 13.24850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1665.42505, -1897.09570, 13.24850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1671.81018, -1897.07751, 13.24850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1668.81274, -1890.04126, 13.24850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1664.14746, -1896.67529, 12.96090,   360.00000, 0.00000, -90.00000);
	CreateDynamicObject(1280, 1662.56104, -1894.08704, 12.96090,   360.00000, 0.00000, 180.00000);
	CreateDynamicObject(3472, 1661.72400, -1884.43799, 9.79080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1661.72400, -1884.43799, 9.79080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1678.16968, -1877.56567, 12.73740,   0.00000, 0.00000, 0.00000);

	//paytoll
	//Toll baru r2
    CreateDynamicObject(5837, -496.599609375, -557.5, 26.200000762939, 0, 0, 90);
	CreateDynamicObject(2932, -597.40002441406, -497.70001220703, 26, 0, 0, 0);
	CreateDynamicObject(2932, -600.5, -497.70001220703, 23.299999237061, 0, 0, 0);
	CreateDynamicObject(2932, -603.599609375, -497.69921875, 26, 0, 0, 0);
	CreateDynamicObject(2932, -600.5, -497.89999389648, 28.799999237061, 0, 0, 0);
	CreateDynamicObject(1671, -599.70001220703, -500.89999389648, 25.200000762939, 0, 0, 210);
	CreateDynamicObject(2932, -606.70001220703, -497.70001220703, 23.299999237061, 0, 0, 0);
	CreateDynamicObject(2932, -609.79998779297, -497.70001220703, 26, 0, 0, 0);
	CreateDynamicObject(2932, -606.70001220703, -497.60000610352, 28.799999237061, 0, 0, 0);
	CreateDynamicObject(3525, -494.70001220703, -558.79998779297, 27.799999237061, 0, 0, 90);
	CreateDynamicObject(3749, -488.70001220703, -564.29998779297, 28.700000762939, 0, 0, 0);
	CreateDynamicObject(643, -600.90002441406, -479.5, 25, 0, 0, 0);
	CreateDynamicObject(643, -610.70001220703, -474.89999389648, 25, 0, 0, 0);
	CreateDynamicObject(8406, -487.39999389648, -506.79998779297, 30, 0, 0, 0);
	CreateDynamicObject(996, -504.10000610352, -506.79998779297, 25.299999237061, 0, 0, 0);
	CreateDynamicObject(996, -472.39999389648, -506.89999389648, 25.299999237061, 0, 0, 0);
	CreateDynamicObject(1616, -504.60000610352, -536.90002441406, 31.700000762939, 0, 0, 164);
	CreateDynamicObject(11391, -571.90002441406, -562.29998779297, 25.799999237061, 0, 0, 90);
	CreateDynamicObject(11393, -583.20001220703, -549, 26, 0, 0, 180);
	CreateDynamicObject(11505, -557.40002441406, -555.79998779297, 28.89999961853, 0, 0, 0);
	CreateDynamicObject(727, -470.29998779297, -499, 24.5, 0, 0, 356.14379882813);
	CreateDynamicObject(727, -618.90002441406, -483.70001220703, 24.5, 0, 0, 356.14379882813);
	CreateDynamicObject(955, -566.2998046875, -506.2998046875, 24.89999961853, 0, 0, 179.99450683594);
	CreateDynamicObject(16151, -607, -469.39999389648, 24.5, 0, 0, 90);
	CreateDynamicObject(1776, -567.70001220703, -506.29998779297, 25.60000038147, 0, 0, 180);
	CreateDynamicObject(3528, -571.79998779297, -505.10000610352, 31.10000038147, 0, 0, 86);
	CreateDynamicObject(1364, -583.40002441406, -506.10000610352, 25.299999237061, 0, 0, 180);
	CreateDynamicObject(1364, -567.20001220703, -539.70001220703, 25.299999237061, 0, 0, 0);
	CreateDynamicObject(1597, -485.39999389648, -508.70001220703, 27.200000762939, 0, 0, 0);
	CreateDynamicObject(1492, -602, -494.10000610352, 24.700000762939, 0, 0, 0);
	CreateDynamicObject(1492, -599, -494.10000610352, 24.700000762939, 0, 0, 180);
	CreateDynamicObject(1492, -608.20001220703, -494.10000610352, 24.799999237061, 0, 0, 0);
	CreateDynamicObject(1492, -605.20001220703, -494.10000610352, 24.799999237061, 0, 0, 180);
	CreateDynamicObject(643, -601.20001220703, -474.60000610352, 25, 0, 0, 0);
	CreateDynamicObject(643, -606.70001220703, -480.29998779297, 25, 0, 0, 0);
	CreateDynamicObject(984, -616.79998779297, -484.70001220703, 25.200000762939, 0, 0, 274);
	CreateDynamicObject(984, -604, -483.79998779297, 25.200000762939, 0, 0, 273.9990234375);
	CreateDynamicObject(984, -597.40002441406, -476.89999389648, 25.200000762939, 0, 0, 177.9990234375);
	CreateDynamicObject(1671, -497.10000610352, -558.59997558594, 25.200000762939, 0, 0, 90);
	CreateDynamicObject(1963, -495.89999389648, -558.20001220703, 25.200000762939, 0, 0, 90);

 	//X PROJECT by Yanuar / Pablo
	CreateDynamicObject(18370, -2897.70, -1023.95, -10.71,   -10.68, -4.26, 265.84);
	CreateDynamicObject(18563, -2890.81, -1051.63, 3.18,   0.96, 19.44, 0.00);
	CreateDynamicObject(3330, -2880.53, -946.38, -2.35,   -41.10, 5.88, 88.14);
	CreateDynamicObject(16437, -2925.3000488281, -1274.5999755859, 11.60000038147, 0, 0, 172);
	CreateDynamicObject(4527, -2913.2998046875, -1282, 11.39999961853, 0, 0, 0);
	CreateDynamicObject(4527, -2939.1000976563, -1278.9000244141, 11.60000038147, 0, 0, 96);
	CreateDynamicObject(4527, -2872.1000976563, -833.40002441406, 7.5999999046326, 0, 0, 227.99853515625);
	CreateDynamicObject(4527, -2859.1000976563, -833.90002441406, 7.5999999046326, 0, 0, 227.99377441406);
	CreateDynamicObject(966, -199.10000610352, 249.19999694824, 11.10000038147, 0, 0, 166);
	CreateDynamicObject(966, -199.099609375, 249.19921875, 11.10000038147, 0, 0, 345.99792480469);
	TollGates[10] = CreateDynamicObject(968, -199.10000610352, 249.19999694824, 11.89999961853, 0, 90, 165.99792480469);
	TollGates[9] = CreateDynamicObject(968, -199.099609375, 249.19921875, 11.89999961853, 0, 90, 345.99789428711);
	CreateDynamicObject(967, -199.5, 247.80000305176, 10.89999961853, 0, 0, 255);
	TollGates[12] = CreateDynamicObject(968, 612.59997558594, 341.20001220703, 18.89999961853, 0, 90, 209.9979095459);
	CreateDynamicObject(967, 613.20001220703, 340.20001220703, 18, 0, 0, 302);
	CreateDynamicObject(966, 612.59997558594, 341.20001220703, 17.89999961853, 0, 0, 212);
	CreateDynamicObject(966, 612.599609375, 341.19921875, 17.89999961853, 0, 0, 29.997680664063);
	TollGates[11] = CreateDynamicObject(968, 612.599609375, 341.19921875, 18.89999961853, 0, 90, 31.992584228516);
	CreateDynamicObject(3877, 607.59997558594, 336.20001220703, 19.799999237061, 0, 0, 38);
	CreateDynamicObject(3877, 618.90002441406, 344.39999389648, 19.60000038147, 0, 0, 37.996215820313);
	CreateDynamicObject(3877, 1682.5999755859, 416.70001220703, 31.200000762939, 0, 0, 73.996215820313);
	CreateDynamicObject(3877, 1716.5999755859, 405.39999389648, 31.200000762939, 0, 0, 73.992919921875);
	CreateDynamicObject(3877, -205.5, 251.80000305176, 12.89999961853, 0, 0, 73.992919921875);
	CreateDynamicObject(3877, -192.30000305176, 248.30000305176, 12.89999961853, 0, 0, 73.992919921875);
	CreateDynamicObject(3877, -2909.6999511719, -1287.5999755859, 12, 0, 0, 0);
	CreateDynamicObject(3091, -2931.3999023438, -1279.1999511719, 10.60000038147, 0, 0, 0);
	CreateDynamicObject(3091, -2921.8999023438, -1280.6999511719, 10.60000038147, 0, 0, 342);

	// Tolls
   	CreateDynamicObject(994, 2912.2678222656, -871.81829833984, 10.046875, 0, 0, 0);
	CreateDynamicObject(994, 2903.5893554688, -871.83807373047, 10.046875, 0, 0, 0);
	CreateDynamicObject(994, 2897.2080078125, -871.81359863281, 9.875, 0, 0, 0);
	CreateDynamicObject(994, 2882.6171875, -871.44653320313, 9.8756713867188, 0, 0, 0);
	CreateDynamicObject(994, 2876.2880859375, -871.45666503906, 9.8756713867188, 0, 0, 0);
	CreateDynamicObject(994, 2862.3515625, -871.79943847656, 9.9519424438477, 0, 0, 0);
	CreateDynamicObject(994, 2855.9018554688, -871.86383056641, 9.9547166824341, 0, 0, 0);
	CreateDynamicObject(994, 2849.4296875, -871.8798828125, 9.8813285827637, 0, 0, 0);
	CreateDynamicObject(994, 2831.6301269531, -872.09674072266, 10.436527252197, 0, 0, 0);
	CreateDynamicObject(1892, 2910.5446777344, -871.83093261719, 10.046875, 0, 0, 0);
	TollGates[4] = CreateDynamicObject(968, 2896.6918945313, -871.87084960938, 10.87566947937, 0, -90, 0); //LSLV
	CreateDynamicObject(966, 2896.7587890625, -871.85906982422, 9.8756694793701, 0, 0, 358.01501464844);
	CreateDynamicObject(966, 2869.4245605469, -871.80432128906, 9.8756694793701, 0, 0, 182.57055664063);
	TollGates[3] = CreateDynamicObject(968, 2869.3918457031, -871.80389404297, 10.87566947937, 0, 90, 0); //LSLV
	CreateDynamicObject(8168, 2901.416015625, -876.81921386719, 11.994848251343, 0, 0, 286.19506835938);
	CreateDynamicObject(8168, 2865.9953613281, -867.72808837891, 12.003793716431, 0, 0, 104.74884033203);
	CreateDynamicObject(8168, 2835.3957519531, -867.14697265625, 11.884063720703, 0, 0, 104.74365234375);
	TollGates[2] = CreateDynamicObject(968, 2850.5170898438, -872.54412841797, 10.892744064331, 0, -90, 0); //LSLV
	CreateDynamicObject(966, 2850.5649414063, -872.47796630859, 9.8927440643311, 0, 0, 0);
	CreateDynamicObject(966, 2836.8889160156, -872.56323242188, 9.8818283081055, 0, 0, 180.67553710938);
	TollGates[1] = CreateDynamicObject(968, 2836.8671875, -872.58013916016, 10.881828308105, 0, 90, 0); //LSLV
	CreateDynamicObject(994, 1716.6951904297, -511.7516784668, 33.189891815186, 0, 0, 12);
	CreateDynamicObject(994, 1703.2320556641, -514.54058837891, 33.209777832031, 0, 0, 10.012084960938);
	CreateDynamicObject(994, 1689.837890625, -517.61199951172, 33.430316925049, 0, 0, 13.982055664063);
	TollGates[8] = CreateDynamicObject(968, 1716.4252929688, -511.66552734375, 34.183242797852, 0, -90, 7.9399719238281);
	CreateDynamicObject(966, 1716.4581298828, -511.70385742188, 33.183242797852, 0, 0, 13.984985351563);
	CreateDynamicObject(966, 1696.2523193359, -516.08190917969, 33.293453216553, 0, 0, 192.58239746094);
	TollGates[7] = CreateDynamicObject(968, 1696.2215576172, -516.06262207031, 34.293453216553, 0, 90, 7.9376220703125);
	CreateDynamicObject(8168, 1720.7490234375, -516.28149414063, 35.354682922363, 0, 0, 296.1650390625);
	CreateDynamicObject(8168, 1691.4393310547, -512.40612792969, 35.163421630859, 0, 0, 114.71716308594);
	CreateDynamicObject(994, 48.250907897949, -1527.8386230469, 4.1128487586975, 0, 0, 260.30029296875);
	CreateDynamicObject(1237, 49.181930541992, -1542.5516357422, 4.1783151626587, 0, 0, 0);
	CreateDynamicObject(1237, 48.278831481934, -1541.4007568359, 4.1829466819763, 0, 0, 0);
	CreateDynamicObject(1237, 46.812271118164, -1540.9676513672, 4.1904683113098, 0, 0, 0);
	CreateDynamicObject(1237, 45.413352966309, -1540.9266357422, 4.197642326355, 0, 0, 0);
	CreateDynamicObject(1237, 43.949974060059, -1540.8375244141, 4.2051472663879, 0, 0, 0);
	CreateDynamicObject(1237, 42.716003417969, -1541.5274658203, 4.2114744186401, 0, 0, 0);
	CreateDynamicObject(1237, 46.048110961914, -1519.6726074219, 4.1444673538208, 0, 0, 0);
	CreateDynamicObject(1237, 46.997032165527, -1520.7718505859, 4.1104865074158, 0, 0, 0);
	CreateDynamicObject(1237, 48.52131652832, -1520.9207763672, 4.0918750762939, 0, 0, 0);
	CreateDynamicObject(1237, 49.841445922852, -1520.9104003906, 4.090548992157, 0, 0, 0);
	CreateDynamicObject(1237, 51.16593170166, -1521.0124511719, 4.0893244743347, 0, 0, 0);
	CreateDynamicObject(1237, 52.198638916016, -1520.2877197266, 4.1312303543091, 0, 0, 0);
	CreateDynamicObject(966, 48.158699035645, -1527.4317626953, 4.1139159202576, 0, 0, 260.21020507813);
	CreateDynamicObject(966, 47.006690979004, -1534.3416748047, 4.1531405448914, 0, 0, 82.730651855469);
	TollGates[5] = CreateDynamicObject(968, 47.043354034424, -1534.3469238281, 5.1531405448914, 0, 90, 260.30029296875); //LSSF
	TollGates[6] = CreateDynamicObject(968, 48.152641296387, -1527.4071044922, 5.1139159202576, 0, -90, 260.29907226563); //LSSF
	CreateDynamicObject(8168, 40.607109069824, -1530.1695556641, 6.3409695625305, 0, 0, 6);
	CreateDynamicObject(8168, 55.990371704102, -1532.0758056641, 6.1963772773743, 0, 0, 186.44677734375);
	CreateDynamicObject(994, 60.159355163574, -1530.5363769531, 4.1925511360168, 0, 0, 350.0299987793);
	CreateDynamicObject(994, 59.616363525391, -1534.9475097656, 4.2165975570679, 0, 0, 350.02990722656);
	CreateDynamicObject(994, 31.208312988281, -1525.7135009766, 4.1979918479919, 0, 0, 348.04296875);
	CreateDynamicObject(994, 30.053535461426, -1530.4888916016, 4.123496055603, 0, 0, 348.04138183594);

	//Toll By Niel
	CreateDynamicObject(5837, -496.60, -557.50, 26.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(2932, -597.40, -497.70, 26.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(2932, -600.50, -497.70, 23.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(2932, -603.60, -497.70, 26.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(2932, -600.50, -497.90, 28.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(1671, -599.70, -500.90, 25.20,   0.00, 0.00, 210.00);
	CreateDynamicObject(2932, -606.70, -497.70, 23.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(2932, -609.80, -497.70, 26.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(2932, -606.70, -497.60, 28.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(3525, -494.70, -558.80, 27.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(3749, -488.70, -564.30, 28.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(643, -600.90, -479.50, 25.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(643, -610.70, -474.90, 25.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(8406, -487.40, -506.80, 30.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(996, -504.10, -506.80, 25.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(996, -472.40, -506.90, 25.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(1616, -504.60, -536.90, 31.70,   0.00, 0.00, 164.00);
	CreateDynamicObject(11391, -571.90, -562.30, 25.80,   0.00, 0.00, 90.00);
	CreateDynamicObject(11393, -583.20, -549.00, 26.00,   0.00, 0.00, 180.00);
	CreateDynamicObject(11505, -557.40, -555.80, 28.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(727, -470.30, -499.00, 24.50,   0.00, 0.00, 356.14);
	CreateDynamicObject(727, -618.90, -483.70, 24.50,   0.00, 0.00, 356.14);
	CreateDynamicObject(955, -566.30, -506.30, 24.90,   0.00, 0.00, 179.99);
	CreateDynamicObject(16151, -607.00, -469.40, 24.50,   0.00, 0.00, 90.00);
	CreateDynamicObject(1776, -567.70, -506.30, 25.60,   0.00, 0.00, 180.00);
	CreateDynamicObject(1364, -583.40, -506.10, 25.30,   0.00, 0.00, 180.00);
	CreateDynamicObject(1364, -567.20, -539.70, 25.30,   0.00, 0.00, 0.00);
	CreateDynamicObject(1597, -485.40, -508.70, 27.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(1492, -602.00, -494.10, 24.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1492, -599.00, -494.10, 24.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(1492, -608.20, -494.10, 24.80,   0.00, 0.00, 0.00);
	CreateDynamicObject(1492, -605.20, -494.10, 24.80,   0.00, 0.00, 180.00);
	CreateDynamicObject(643, -601.20, -474.60, 25.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(643, -606.70, -480.30, 25.00,   0.00, 0.00, 0.00);
	CreateDynamicObject(984, -616.80, -484.70, 25.20,   0.00, 0.00, 274.00);
	CreateDynamicObject(1671, -497.10, -558.60, 25.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(1963, -495.90, -558.20, 25.20,   0.00, 0.00, 90.00);
	CreateDynamicObject(966, 629.26, -1193.65, 17.10,   0.00, 0.00, 205.00);
	CreateDynamicObject(968, 629.17, -1193.69, 17.90,   0.00, 270.00, 205.00);
	CreateDynamicObject(966, 613.12, -1199.97, 17.10,   0.00, 0.00, 20.00);
	CreateDynamicObject(968, 613.15, -1199.96, 17.90,   0.00, 270.00, 20.00);
	CreateDynamicObject(967, -74.70, -891.00, 14.70,   0.00, 0.00, 62.00);
	CreateDynamicObject(966, -69.40, -893.50, 14.70,   0.00, 0.00, 334.00);
	CreateDynamicObject(968, -79.90, -888.40, 15.80,   0.00, 0.00, 334.00);
	CreateDynamicObject(966, -79.90, -888.40, 15.00,   0.00, 0.00, 154.00);
	CreateDynamicObject(968, -69.40, -893.50, 15.50,   0.00, 0.00, 154.00);
	CreateDynamicObject(1237, -80.80, -887.80, 14.90,   0.00, 0.00, 0.00);
	CreateDynamicObject(966, -945.60, -265.00, 36.00,   0.00, 0.00, 348.00);
	CreateDynamicObject(966, -959.00, -262.20, 36.00,   0.00, 0.00, 168.00);
	CreateDynamicObject(967, -952.10, -262.70, 35.70,   0.00, 0.00, 78.00);
	CreateDynamicObject(968, -959.00, -262.20, 36.80,   0.00, 0.00, 350.00);
	CreateDynamicObject(968, -945.60, -265.00, 36.80,   0.00, 0.00, 168.00);
	CreateDynamicObject(994, -945.40, -265.00, 36.10,   0.00, 0.00, 346.00);
	CreateDynamicObject(994, -965.20, -260.70, 36.00,   0.00, 0.00, 346.00);
	CreateDynamicObject(10829, 619.66, -1197.14, 17.33,   0.00, 0.00, 28.00);
	CreateDynamicObject(983, 603.40, -1203.54, 17.84,   0.00, 0.00, 110.00);
	CreateDynamicObject(983, 616.53, -1198.92, 17.84,   0.00, 0.00, 110.00);
	CreateDynamicObject(983, 625.89, -1194.97, 17.84,   0.00, 0.00, 110.00);
	CreateDynamicObject(983, 638.60, -1189.35, 17.84,   0.00, 0.00, 115.00);

	//aztecas
	CreateDynamicObject(1736, -574.78082, -1484.78735, 16.72190,   0.00000, 0.00000, 216.00000);
	CreateDynamicObject(1728, -577.10309, -1485.72681, 13.33350,   0.00000, 0.00000, -144.00000);
	CreateDynamicObject(1810, -572.60425, -1482.20776, 13.37420,   0.00000, 0.00000, -98.00000);
	CreateDynamicObject(1810, -572.94391, -1481.10803, 13.37420,   0.00000, 0.00000, -18.00000);
	CreateDynamicObject(1362, -576.09283, -1481.92969, 10.17080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1728, -573.41968, -1481.58777, 9.47080,   0.00000, 0.00000, -120.00000);
	CreateDynamicObject(2840, -575.34760, -1482.43164, 9.68880,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2866, -576.02795, -1480.77722, 9.76855,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(924, -577.76501, -1481.23450, 10.39224,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1440, -577.10992, -1484.96948, 10.11070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3015, -576.35455, -1480.50305, 10.43252,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3015, -573.50305, -1479.95459, 10.43252,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3015, -572.50031, -1480.53198, 10.43252,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, -570.24103, -1480.23889, 9.98560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, -575.36981, -1473.70764, 10.69160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, -581.84229, -1485.27698, 10.69160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, -587.40686, -1479.75745, 11.75060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17324, -589.11572, -1451.44482, 9.06680,   0.00000, 0.00000, 25.00000);
	CreateDynamicObject(1440, -588.20276, -1463.12415, 10.06230,   -1.76500, 0.00000, 0.00000);
	CreateDynamicObject(2047, -583.71332, -1462.26563, 15.51930,   0.00000, 0.00000, 25.00000);
	CreateDynamicObject(2866, -577.53638, -1483.00745, 9.76855,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2866, -578.49530, -1480.20166, 10.12160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3279, -551.15369, -1427.25659, 10.65550,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1728, -553.27588, -1427.10718, 26.67350,   0.00000, 0.00000, 55.00000);
	CreateDynamicObject(2840, -552.18988, -1428.31506, 26.81400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2866, -550.56427, -1426.96423, 26.88315,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2812, -552.70709, -1428.75562, 26.80970,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(3015, -549.64581, -1427.22363, 27.10124,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3015, -550.72009, -1429.48328, 27.10120,   0.00000, 0.00000, 18.00000);
    CreateDynamicObject(18688, -551.72522, -1426.96106, 26.60700,   0.00000, 0.00000, 0.00000);
    
    //IsInBa
    CreateDynamicObject(3983, 3144.724609, -2314.101074, 17.445784, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2068, 3142.240234, -2316.502197, 19.963873, 354.9475, 0.0000, 11.2500);
	CreateDynamicObject(2068, 3141.787598, -2315.667725, 19.201948, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2068, 3142.720215, -2321.237061, 18.845448, 87.6625, 0.0000, 348.7500);
	CreateDynamicObject(2068, 3136.821533, -2319.732666, 16.033203, 87.6625, 0.0000, 348.7500);
	CreateDynamicObject(2068, 3139.232666, -2318.491943, 16.028339, 87.6625, 0.0000, 281.2500);
	CreateDynamicObject(2068, 3137.984375, -2312.538574, 16.015327, 87.6625, 0.0000, 281.2500);
	CreateDynamicObject(2068, 3140.551758, -2309.073975, 16.024065, 87.6625, 0.0000, 191.2500);
	CreateDynamicObject(2068, 3143.630859, -2311.376953, 15.973962, 87.6625, 0.0000, 123.7500);
	CreateDynamicObject(2068, 3145.474609, -2316.678467, 15.911213, 87.6625, 0.0000, 101.2500);
	CreateDynamicObject(2068, 3146.576172, -2320.555908, 15.911213, 87.6625, 0.0000, 90.0000);
	CreateDynamicObject(2068, 3140.239990, -2308.595947, 20.361210, 10.3132, 0.0000, 0.0000);
	CreateDynamicObject(2068, 3145.078125, -2320.153076, 20.188871, 0.8594, 0.0000, 0.0000);
	CreateDynamicObject(2068, 3145.547852, -2322.225830, 18.561218, 356.5623, 86.8031, 0.0000);
	CreateDynamicObject(13817, 3139.437744, -2318.596924, 17.200428, 0.0000, 0.0000, 11.2500);
	CreateDynamicObject(13817, 3138.573975, -2314.105225, 17.226894, 0.0000, 0.0000, 11.2500);
	CreateDynamicObject(13817, 3137.300781, -2309.855225, 17.258968, 0.0000, 0.0000, 22.5000);
	CreateDynamicObject(13817, 3139.298584, -2309.344238, 17.231806, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(13817, 3143.307373, -2307.988525, 17.178354, 0.0000, 0.0000, 303.7500);
	CreateDynamicObject(13817, 3142.559326, -2309.895020, 17.183077, 0.0000, 0.0000, 213.7501);
	CreateDynamicObject(13817, 3144.603027, -2313.375977, 17.142582, 0.0000, 0.0000, 202.5000);
	CreateDynamicObject(13817, 3145.171875, -2315.684082, 17.127060, 0.0000, 0.0000, 191.2501);
	CreateDynamicObject(13817, 3146.063232, -2319.821045, 17.107765, 0.0000, 0.0000, 191.2501);
	CreateDynamicObject(13817, 3145.252441, -2322.136230, 17.107765, 0.0000, 0.0000, 146.2500);
	CreateDynamicObject(13817, 3143.241455, -2321.533447, 17.135830, 0.0000, 0.0000, 78.7500);
	CreateDynamicObject(13817, 3140.965332, -2320.956299, 17.170532, 0.0000, 0.0000, 67.5000);
	CreateDynamicObject(3657, 3144.968750, -2318.601563, 15.953517, 0.0000, 0.0000, 281.2500);
	CreateDynamicObject(3657, 3144.015381, -2315.507324, 15.977393, 0.0000, 0.0000, 292.5000);
	CreateDynamicObject(3657, 3142.718994, -2312.429932, 16.005524, 0.0000, 0.0000, 292.5000);
	CreateDynamicObject(3657, 3140.130615, -2318.430176, 16.023767, 0.0000, 0.0000, 101.2500);
	CreateDynamicObject(3657, 3139.463379, -2315.120850, 16.043888, 0.0000, 0.0000, 101.2500);
	CreateDynamicObject(3657, 3138.845215, -2311.847900, 16.063183, 0.0000, 0.0000, 101.2500);
	CreateDynamicObject(2140, 3141.908691, -2310.387451, 15.515387, 0.0000, 0.0000, 292.5000);
	CreateDynamicObject(2690, 3142.240723, -2310.804932, 17.271290, 0.0000, 0.0000, 67.5000);
	CreateDynamicObject(2044, 3143.694580, -2314.892334, 15.866624, 0.0000, 0.0000, 292.5000);
	CreateDynamicObject(2035, 3140.254639, -2318.612305, 15.910913, 0.0000, 0.0000, 101.2500);
	CreateDynamicObject(1252, 3141.750244, -2310.519531, 17.013798, 0.0000, 0.0000, 112.5000);
	CreateDynamicObject(3797, 3141.996582, -2318.306641, 17.958271, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(16782, 3140.111816, -2309.702393, 16.726130, 0.0000, 0.0000, 279.5312);
	CreateDynamicObject(3877, 3142.972412, -2320.703857, 14.873146, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(3864, 3127.999023, -2317.683105, 21.699818, 0.0000, 0.0000, 191.2501);
	CreateDynamicObject(3864, 3136.422119, -2332.452881, 21.585926, 0.0000, 0.0000, 247.5000);
	CreateDynamicObject(3864, 3128.700684, -2294.642334, 21.775555, 0.0000, 0.0000, 135.0000);
	CreateDynamicObject(3864, 3162.286865, -2317.755371, 21.610310, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2780, 3140.809570, -2326.063232, 15.471542, 0.0000, 0.0000, 0.0000);

	//mapingan sanews ((BY FERDI))
	CreateDynamicObject(19446, 680.03998, -1352.77002, 770.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19354, 676.91998, -1346.38000, 770.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19354, 676.90997, -1343.18994, 770.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1536, 676.97998, -1346.52002, 769.22998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 681.90997, -1346.41003, 769.10999,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1536, 676.94000, -1343.52002, 769.22998,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19354, 678.41998, -1348.04004, 770.87000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 681.73999, -1342.80005, 770.87000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 681.89001, -1356.01001, 769.10999,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1502, 683.41998, -1353.14001, 769.20001,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19354, 683.45001, -1357.10999, 770.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19384, 683.45001, -1353.92004, 770.85999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 680.66998, -1343.47998, 769.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 683.17999, -1343.44995, 769.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 680.23999, -1343.44995, 769.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 677.31000, -1347.41003, 769.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 679.72998, -1347.41003, 769.20001,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2001, 680.28998, -1347.52002, 769.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 683.33667, -1351.62927, 770.82001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2001, 677.38000, -1343.18994, 769.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 688.91998, -1356.97998, 769.09998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19446, 688.28998, -1358.67004, 770.87000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 692.03003, -1353.92004, 770.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 688.28003, -1351.33997, 770.87000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 686.35999, -1357.53003, 769.19000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2007, 684.08002, -1358.05005, 769.19000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2007, 684.09003, -1357.03003, 769.19000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2007, 684.09998, -1356.00000, 769.19000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2001, 683.90002, -1355.04004, 769.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2172, 689.35999, -1357.53003, 769.19000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 689.35999, -1353.53003, 769.19000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 686.35999, -1353.53003, 769.19000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 690.28998, -1356.91003, 769.19000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1714, 690.28998, -1352.91003, 769.19000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1714, 687.28998, -1352.91003, 769.19000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1714, 687.28998, -1356.91003, 769.19000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14455, 691.88000, -1357.26001, 770.69000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14393, 671.27563, -1358.44702, 771.47839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19384, 680.03998, -1359.14001, 770.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 680.04999, -1359.90002, 769.20001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 671.79999, -1361.07996, 768.60999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 671.79999, -1358.06006, 768.60999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14392, 671.37909, -1358.68872, 770.40472,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 671.25000, -1359.93005, 770.35999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1727, 665.64001, -1355.00000, 769.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 663.09003, -1359.44995, 769.20001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1727, 667.50000, -1362.43005, 769.20001,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1827, 664.72998, -1358.34998, 769.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19421, 664.95001, -1358.68005, 769.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19418, 664.78998, -1358.30005, 769.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19421, 665.04999, -1358.62000, 769.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 663.46002, -1358.96997, 772.70001,   0.00000, 88.50000, 0.00000);
	CreateDynamicObject(14391, 672.83002, -1359.68994, 770.13000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 680.03998, -1365.55005, 770.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 692.15002, -1353.73999, 769.09003,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19446, 684.78003, -1361.88000, 770.87000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19354, 689.01001, -1361.88000, 770.87000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19354, 694.01001, -1363.04004, 770.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 692.70428, -1363.49475, 769.09003,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19354, 693.09998, -1365.68005, 770.87000,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(19354, 691.56000, -1365.68005, 770.87000,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(19446, 698.78998, -1361.52002, 770.87000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 700.70001, -1361.16003, 770.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 704.65997, -1356.59998, 769.09003,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 701.81000, -1347.29004, 769.09998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 692.00000, -1346.39001, 769.09003,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19384, 694.67999, -1358.66003, 770.87000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 693.89001, -1358.67004, 769.16998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19384, 700.71002, -1354.75000, 770.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 700.71997, -1355.48999, 769.16998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19354, 690.58002, -1363.40002, 770.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 684.98999, -1357.18005, 769.09998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19446, 693.78253, -1351.34119, 770.87000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 705.51074, -1351.29199, 770.87000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 705.48999, -1356.01001, 770.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 700.71997, -1348.35999, 770.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 705.95001, -1360.71997, 770.87000,   0.00000, 0.00000, -80.00000);
	CreateDynamicObject(19446, 698.56000, -1353.94995, 770.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19354, 697.03003, -1358.68005, 770.87000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 690.38000, -1358.90002, 770.82001,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2007, 681.27002, -1361.22998, 769.17999,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2007, 682.31000, -1361.22998, 769.17999,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2001, 680.48999, -1361.43994, 769.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2002, 683.59003, -1361.25000, 769.17999,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2007, 701.27002, -1360.39001, 769.17999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2007, 701.27002, -1359.35999, 769.17999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2007, 701.27002, -1358.33997, 769.17999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2007, 701.26001, -1357.31995, 769.17999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2001, 701.15002, -1356.44995, 769.17999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 701.14001, -1361.22998, 769.17999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 705.40997, -1360.00000, 770.79999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, 697.41998, -1357.40002, 769.19000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2172, 697.41998, -1354.90002, 769.19000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14455, 697.57001, -1351.54004, 770.73999,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2172, 694.12000, -1356.35999, 769.19000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2172, 694.12000, -1353.85999, 769.19000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1714, 693.57001, -1352.93994, 769.17999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 696.82001, -1354.01001, 769.17999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 693.51001, -1355.50000, 769.17999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 696.81000, -1356.48999, 769.17999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2007, 692.97998, -1358.05005, 769.19000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2002, 698.02002, -1352.84998, 769.17999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14455, 695.16998, -1361.32996, 770.84998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2007, 702.45001, -1360.33997, 769.17999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2007, 702.46002, -1359.30005, 769.17999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2007, 702.46002, -1358.25000, 769.17999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2007, 702.46002, -1357.20996, 769.17999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2007, 703.48999, -1357.21997, 769.17999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2007, 703.50000, -1358.26001, 769.17999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2007, 703.50000, -1359.30005, 769.17999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2007, 703.48999, -1360.33997, 769.17999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2001, 703.00000, -1356.30005, 769.17999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 701.66998, -1351.96997, 769.17999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 704.84998, -1352.51001, 769.17999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1827, 702.72998, -1353.83997, 769.17999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 702.60999, -1353.45996, 769.60999,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2894, 702.28003, -1353.75000, 769.60999,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2894, 702.97998, -1353.55005, 769.60999,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2894, 703.08002, -1353.97998, 769.60999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 703.34003, -1353.83997, 769.60999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 702.76001, -1353.77002, 769.60999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2001, 704.70001, -1351.81995, 769.19000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2002, 701.23999, -1353.27002, 769.17999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2001, 701.15997, -1351.98999, 769.19000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1792, 698.40997, -1358.54004, 770.97998,   0.00000, 0.00000, 220.00000);
	CreateDynamicObject(19379, 695.78998, -1356.64001, 769.09003,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19444, 683.41718, -1351.97278, 770.83160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 683.58331, -1349.69788, 770.82660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 683.60828, -1348.26978, 770.82660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 691.28119, -1342.78845, 770.87000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19446, 692.07166, -1350.64087, 770.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19384, 692.04785, -1344.34216, 770.85999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 698.54205, -1346.88867, 770.87000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 695.21283, -1342.81519, 770.87000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 689.16010, -1347.32275, 772.58118,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 678.79211, -1347.48633, 772.58118,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 699.07404, -1347.43005, 772.58118,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 682.03687, -1357.09570, 772.58118,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 682.03687, -1357.09570, 772.58118,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 692.05212, -1356.91833, 772.58118,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 692.82117, -1364.10376, 772.58118,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 702.21576, -1358.70520, 772.58118,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 702.28723, -1349.34412, 772.58118,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2357, 687.37488, -1348.68835, 769.47510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2357, 687.38220, -1347.87842, 769.47510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2357, 688.58411, -1348.67322, 769.47510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2357, 688.59705, -1347.89087, 769.47510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2184, 696.42303, -1348.41907, 769.17548,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19999, 695.48865, -1350.38379, 769.17798,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19999, 689.59052, -1350.46265, 769.17798,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19999, 687.62823, -1350.47852, 769.17798,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19999, 685.78589, -1350.48853, 769.17798,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2172, 696.34167, -1344.62561, 769.19000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19999, 697.74255, -1344.16699, 769.17798,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1726, 684.03076, -1343.50586, 769.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 687.35040, -1343.49341, 769.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 686.69995, -1343.41687, 769.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 690.58038, -1343.41577, 769.20001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19446, 703.32465, -1348.25427, 770.87000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3109, 700.45477, -1348.26807, 770.34930,   0.00000, 0.00000, 90.00000);

	//mappingan Riskyy
	CreateDynamicObject(8650, 1164.69995, -2002.69995, 69.10000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8650, 1195.09998, -2071.39990, 69.10000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8650, 1195.19995, -2002.69995, 69.10000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8650, 1164.59998, -2071.39990, 69.10000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1568, 1180.09998, -2007.59998, 68.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1568, 1169.90002, -2066.39990, 68.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1568, 1180.09961, -2066.29980, 68.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1568, 1169.90002, -2007.59998, 68.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3471, 1214.69995, -2070.80005, 70.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3471, 1214.80005, -2002.80005, 70.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3461, 1240.00000, -2038.59998, 62.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3461, 1240.09998, -2035.40002, 62.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1148.40820, -2020.15234, 67.31968,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2802, 1120.00000, -2018.30005, 73.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1704, 1117.19995, -2018.19995, 73.40000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 1118.69995, -2015.90002, 73.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8041, 1263.90002, -2049.60010, 64.10000,   0.00000, 0.00000, 266.00000);


	//mappingan LSPD ((BY FERDI))
	CreateDynamicObject(1536, 1559.84619, -1674.10522, 15.17970,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1536, 1559.87598, -1677.13391, 15.17970,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19407, 1556.51062, -1669.49377, 16.91987,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19407, 1556.51331, -1682.14197, 16.91570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1565.04614, -1677.29968, 15.08540,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1561.76904, -1661.16125, 5.13980,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19453, 1559.76770, -1675.76379, 16.91370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19434, 1560.43262, -1671.01428, 16.91370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1562.80127, -1671.01611, 16.90192,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1568.33301, -1671.01672, 16.91370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1575.29822, -1676.79846, 15.08540,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1575.26868, -1686.31653, 15.08540,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1564.98352, -1688.47925, 15.08540,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19390, 1566.00024, -1671.00806, 16.91370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1572.40320, -1669.66907, 15.08540,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1565.15588, -1650.96277, 15.08540,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1573.98889, -1650.06116, 15.08540,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1560.97363, -1668.96826, 15.08540,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19361, 1558.03931, -1671.00867, 16.91370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2165, 1570.58691, -1679.60840, 15.17280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1569.84668, -1672.62329, 16.91370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 1569.85437, -1675.85950, 14.83980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 1569.84436, -1678.88367, 14.83980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1569.84131, -1682.08948, 16.91370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1572.88440, -1676.73230, 16.90970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1572.90991, -1685.86731, 16.90970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1569.84058, -1675.31445, 16.91370,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2614, 1572.77783, -1677.55688, 17.74770,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2165, 1570.56836, -1676.38306, 15.17280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19390, 1571.37378, -1671.02161, 16.91370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, 1572.90540, -1667.51807, 16.91370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19390, 1571.38953, -1683.60852, 16.91370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1558.08228, -1680.49255, 16.91370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1562.58252, -1680.66541, 15.08540,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19361, 1561.44678, -1680.48792, 16.91370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19407, 1562.96558, -1682.04138, 16.91370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1561.79480, -1694.11023, 15.08540,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1561.82104, -1700.79761, 15.08540,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1570.97351, -1695.88647, 15.08540,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19453, 1556.51160, -1688.49487, 16.90970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19434, 1562.97461, -1684.43701, 16.91370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19390, 1566.11731, -1685.14539, 16.91370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19434, 1563.73682, -1685.14795, 16.91370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1569.83618, -1683.59497, 16.91370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19434, 1568.48560, -1685.12341, 16.91370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19434, 1569.10889, -1685.12830, 16.91360,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1563.00317, -1682.75317, 16.97150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1556.43579, -1682.81921, 16.97150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1556.50256, -1670.17944, 16.97150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1560.99146, -1659.35120, 15.08540,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19361, 1556.51416, -1666.35950, 16.91370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1556.51563, -1663.21997, 16.91370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19407, 1556.51599, -1660.05530, 16.91987,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1562.83984, -1666.21472, 16.91370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19390, 1562.81775, -1659.91455, 16.91370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1561.31909, -1658.35046, 16.91370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1558.12488, -1658.34985, 16.91370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1568.09204, -1669.46204, 16.91370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19407, 1568.08215, -1666.52869, 16.91987,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19390, 1568.08313, -1663.31262, 16.91370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1556.50500, -1653.71924, 13.36838,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1561.21399, -1650.25439, 16.91370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1575.75562, -1660.95264, 5.13980,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1571.63220, -1661.28491, 5.13980,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1575.76819, -1670.40369, 5.13980,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1575.76086, -1679.79346, 5.13980,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1575.79248, -1684.62451, 5.13980,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1565.40137, -1684.42395, 5.13980,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1561.77222, -1684.40991, 5.13980,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1561.80505, -1674.80835, 5.13980,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1561.82361, -1666.96863, 5.13980,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1569.80859, -1677.53577, 5.13980,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1567.36377, -1667.96484, 15.08540,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1561.75696, -1684.71326, 15.08540,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1561.55627, -1650.55920, 15.08540,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19407, 1556.49536, -1659.91650, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1556.50183, -1663.02698, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1556.50366, -1666.22644, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19407, 1556.50696, -1669.40564, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1556.53613, -1675.77771, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1536, 1556.57922, -1666.12793, 5.19153,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1536, 1556.53845, -1663.12903, 5.19150,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19453, 1581.02112, -1657.62817, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1581.01685, -1667.15039, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1581.02881, -1676.62476, 5.17710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1581.02527, -1685.25598, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1579.40942, -1689.15112, 6.94010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19407, 1576.20032, -1689.13196, 6.94010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, 1569.83740, -1689.12695, 6.94010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19407, 1563.41028, -1689.12109, 6.94010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1560.22900, -1689.11401, 6.94010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19407, 1556.53369, -1682.19019, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1558.14465, -1689.10742, 6.94010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1556.52966, -1685.38855, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1556.53516, -1687.57471, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1570.82043, -1650.24634, 16.91370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, 1572.91541, -1661.97607, 16.91370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1572.90247, -1654.80664, 16.91370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1556.53516, -1700.92175, 16.90970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1561.26563, -1700.72961, 16.90970,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, 1570.82593, -1700.72705, 16.90970,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, 1572.90015, -1695.40637, 16.90970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1572.89465, -1696.00732, 16.90970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1570.58484, -1671.05347, 15.13795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1570.59021, -1683.65320, 15.13795,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1561.69470, -1671.74683, 15.17196,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1724, 1561.98315, -1679.93005, 15.01390,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2001, 1564.93738, -1684.62427, 15.13518,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1560.36218, -1679.91931, 15.13518,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1560.61230, -1671.67651, 15.13518,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1564.70300, -1671.65076, 15.13518,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1567.35034, -1684.62476, 15.13518,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1567.38489, -1671.66125, 15.13518,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 1564.31702, -1662.02356, 15.13303,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2356, 1563.15442, -1662.46594, 15.14340,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1523, 1562.85547, -1660.67371, 15.16430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1569.59424, -1661.79529, 16.91370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1571.48267, -1661.80066, 16.91370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1556.50781, -1660.55090, 16.97150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1568.09741, -1666.63940, 16.97150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1568.01721, -1666.59875, 16.97150,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19453, 1568.09009, -1653.76563, 16.91370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19390, 1568.07227, -1660.10364, 16.91370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 1568.96936, -1651.05566, 15.13300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2356, 1569.69543, -1652.32324, 15.14340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1572.09753, -1658.15637, 15.14720,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1757, 1557.10535, -1667.49402, 15.17220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1757, 1557.05322, -1664.18970, 15.17220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2319, 1558.65894, -1664.00232, 15.14310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2319, 1558.67090, -1667.25293, 15.10692,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1417, 1562.12683, -1670.49146, 15.38343,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19937, 1560.52002, -1670.58301, 14.69250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1417, 1558.94019, -1670.59509, 15.38343,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19787, 1560.51135, -1670.63403, 16.14210,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2001, 1556.92004, -1658.73779, 15.13465,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1557.11060, -1670.43311, 15.13465,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14819, 1565.84680, -1650.21094, 16.30554,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1556.53674, -1656.83508, 16.91370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19407, 1556.53333, -1654.28479, 16.91987,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1556.52698, -1651.77454, 16.91370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1558.27869, -1656.59241, 15.13212,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1558.18298, -1651.91479, 15.13212,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1560.59241, -1654.07190, 15.13212,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1562.50391, -1651.81189, 15.13212,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1562.56433, -1656.40833, 15.13212,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1567.31458, -1656.03809, 15.14720,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1723, 1567.32336, -1652.22192, 15.14720,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2001, 1567.30090, -1655.12915, 15.13465,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2165, 1571.10107, -1663.65833, 15.13300,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2165, 1571.09106, -1666.49536, 15.13300,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2165, 1568.78210, -1669.43506, 15.13300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2356, 1572.49390, -1663.09631, 15.14340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2356, 1572.50049, -1666.17786, 15.14340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2356, 1569.16772, -1670.74768, 15.14340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1558.11865, -1696.45862, 16.90970,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1561.16284, -1696.46204, 16.90970,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1561.44312, -1696.46118, 16.90970,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1562.98010, -1686.74133, 16.90970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19390, 1562.98962, -1689.88367, 16.91370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1562.98792, -1692.90442, 16.90970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1562.99939, -1694.94592, 16.90970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1563.02881, -1690.64111, 15.13790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2184, 1558.77808, -1683.18225, 15.17049,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2308, 1561.19604, -1694.43970, 15.17130,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2308, 1561.21179, -1691.76245, 15.17130,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2206, 1557.23474, -1692.97632, 15.13270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2206, 1557.23718, -1689.42358, 15.13270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19999, 1559.79492, -1681.28186, 15.25017,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, 1558.75818, -1684.18665, 15.59750,   0.00000, 0.00000, 163.68011);
	CreateDynamicObject(1671, 1560.81030, -1684.21094, 15.59750,   0.00000, 0.00000, 198.96002);
	CreateDynamicObject(1671, 1558.48523, -1688.44897, 15.59750,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1671, 1558.54236, -1691.85400, 15.59750,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1671, 1561.09204, -1692.90417, 15.59750,   0.00000, 0.00000, 127.92016);
	CreateDynamicObject(1671, 1560.96790, -1695.70605, 15.59750,   0.00000, 0.00000, 127.92016);
	CreateDynamicObject(14409, 1560.15332, -1698.49365, 15.61669,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19453, 1561.26563, -1700.72961, 20.50790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 1561.62939, -1685.17566, 18.69710,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1561.67188, -1691.73352, 18.69710,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19453, 1556.51270, -1696.02246, 18.71205,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1556.55981, -1691.60669, 20.50790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19407, 1556.52673, -1685.23889, 20.50790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1556.57666, -1682.05847, 20.50790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1558.21326, -1680.46704, 20.50790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, 1559.76770, -1675.76379, 20.40790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1556.56128, -1698.51343, 20.62448,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1556.55933, -1685.19031, 20.62448,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11686, 1570.92786, -1698.11328, 15.17230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1716, 1570.38843, -1699.53052, 15.15210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1716, 1570.43176, -1697.97424, 15.15210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1716, 1570.48218, -1696.03833, 15.15210,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2746, 1571.03345, -1692.96655, 15.71200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2746, 1571.02197, -1691.44604, 15.71200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2746, 1571.02637, -1689.91675, 15.71200,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 1568.30005, -1696.05518, 18.69710,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1568.33105, -1686.80798, 18.69710,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1572.03369, -1677.92285, 18.69710,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1572.03210, -1669.86145, 18.69710,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1564.46680, -1666.27991, 18.69710,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1561.62207, -1666.25378, 18.69710,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1561.63025, -1656.85229, 18.69710,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1568.41248, -1657.17639, 18.69710,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1569.66992, -1661.68665, 18.69710,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1561.26416, -1653.23865, 18.69710,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 1570.58545, -1652.80652, 18.69710,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19430, 1561.51355, -1680.43689, 19.55430,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, 1565.02783, -1680.44080, 19.55430,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, 1566.85583, -1678.82251, 19.55430,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1566.86292, -1675.36328, 19.55430,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1566.87170, -1672.69934, 19.55430,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1565.19153, -1671.01306, 19.55430,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, 1561.41626, -1671.01892, 19.55430,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, 1561.89978, -1671.01660, 19.55430,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, 1572.90906, -1678.79004, 20.50790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1556.53308, -1691.73755, 16.90970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1569.83777, -1679.65576, 16.91370,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1649, 1569.85693, -1679.67676, 16.91370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1569.84802, -1675.32043, 16.91370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 1559.30676, -1705.43579, 18.69710,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19453, 1570.69482, -1700.71716, 20.50790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, 1572.91321, -1688.42639, 20.50790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1572.90210, -1697.99280, 20.50790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1572.91809, -1669.24365, 20.50790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1561.21399, -1650.25439, 20.50790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, 1572.91736, -1659.65527, 20.50790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1572.91577, -1651.45288, 20.50790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1569.77917, -1650.26465, 20.51940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1558.25134, -1671.02649, 20.50790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, 1556.74805, -1666.24292, 20.50790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1561.43799, -1665.11023, 20.50790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19390, 1567.78699, -1665.11914, 20.50790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1570.86511, -1665.11560, 20.50790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1573.08545, -1665.12756, 20.50790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1556.74683, -1651.87561, 20.50790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1556.73083, -1659.70813, 19.55430,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1556.73804, -1656.24622, 19.55430,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19430, 1556.70581, -1654.03516, 19.55430,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1556.73901, -1659.57239, 20.66410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1556.73523, -1655.25269, 20.66410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, 1563.11035, -1698.71704, 20.50790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19407, 1563.09265, -1692.54626, 20.50790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1563.09924, -1689.40271, 20.50790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1564.64709, -1687.87329, 20.50790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1570.81982, -1687.85938, 20.50790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19390, 1567.74622, -1687.87158, 20.50790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1571.83228, -1687.86670, 20.50790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1563.08350, -1693.07312, 20.62448,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1247, 1567.77112, -1687.82080, 21.67970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19390, 1571.45056, -1685.12000, 16.91370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1556.52466, -1653.78296, 16.97150,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2604, 1558.97986, -1666.99316, 19.42200,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2604, 1561.77551, -1667.00012, 19.42200,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2604, 1564.55115, -1666.95972, 19.42200,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19999, 1562.86157, -1666.90747, 18.78350,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19999, 1560.05774, -1666.96399, 18.78350,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19999, 1557.42468, -1667.14648, 18.78350,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14782, 1572.20959, -1653.45923, 16.08080,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1814, 1570.91833, -1659.65820, 15.17430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18070, 1564.03894, -1657.97559, 19.11110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18070, 1564.08472, -1657.98596, 19.11110,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1564.10107, -1657.98779, 19.60270,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1559.30859, -1657.95984, 18.78230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1559.33643, -1659.51270, 18.78230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1559.30054, -1656.43164, 18.78230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1247, 1559.02136, -1657.97290, 20.08490,   -15.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1561.59827, -1654.45093, 18.78230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1563.28662, -1654.42871, 18.78230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1564.85107, -1654.44763, 18.78230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1566.45557, -1654.46399, 18.78230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1568.99194, -1656.64917, 18.78230,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1714, 1568.98645, -1658.01868, 18.78230,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1714, 1568.93213, -1659.31433, 18.78230,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1714, 1566.52600, -1661.73755, 18.78230,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1714, 1565.00488, -1661.74951, 18.78230,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1714, 1563.32471, -1661.71875, 18.78230,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1714, 1561.60535, -1661.64697, 18.78230,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1792, 1572.88354, -1653.86792, 20.99578,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1792, 1572.99744, -1661.51978, 20.99578,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1792, 1556.74219, -1652.06482, 21.13836,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1792, 1556.66895, -1663.29749, 21.13836,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2313, 1570.01636, -1688.59448, 18.78195,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1786, 1570.60364, -1688.30811, 19.27720,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2184, 1569.12317, -1697.47339, 18.78380,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2614, 1572.78723, -1657.88843, 21.29800,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2614, 1567.93433, -1700.55457, 21.21800,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1247, 1567.90356, -1700.59521, 21.97970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2308, 1565.11353, -1689.96094, 18.78350,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19999, 1565.38989, -1688.72656, 18.78337,   0.00000, 0.00000, -53.76012);
	CreateDynamicObject(1714, 1568.03186, -1699.50000, 18.78320,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1715, 1569.27856, -1696.26709, 18.78375,   0.00000, 0.00000, -21.12001);
	CreateDynamicObject(1715, 1566.99561, -1696.07422, 18.78375,   0.00000, 0.00000, 14.76000);
	CreateDynamicObject(19381, 1568.05139, -1696.00122, 22.18850,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1568.07227, -1686.39392, 22.18850,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1561.69861, -1696.09607, 22.18850,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1561.69446, -1686.59058, 22.18850,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1561.75195, -1677.00427, 22.18850,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1568.03284, -1677.00793, 22.18850,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1561.79004, -1667.60840, 22.18850,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1568.01208, -1667.57800, 22.18850,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1568.01208, -1667.57800, 22.22026,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1561.80359, -1658.18127, 22.18850,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1567.95544, -1658.10229, 22.18850,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1561.69165, -1654.25024, 22.18850,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1567.79663, -1652.64380, 22.18850,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1649, 1581.02368, -1674.11646, 7.02030,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1649, 1581.03979, -1678.41162, 7.02030,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1649, 1576.25940, -1689.12488, 7.02030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1563.25330, -1689.17542, 7.02030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1561.24048, -1657.42126, 6.94010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, 1561.22168, -1671.37830, 6.94010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19390, 1565.95215, -1669.83191, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19390, 1565.97937, -1658.93127, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1565.95740, -1666.62646, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1565.96338, -1663.61816, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1565.96851, -1661.69019, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1576.20044, -1657.41772, 6.94010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1571.15027, -1660.22974, 15.08540,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1571.22620, -1655.31079, 15.08540,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19464, 1559.45911, -1677.67212, 4.36810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, 1562.32117, -1677.62354, 4.36810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19390, 1562.32629, -1673.05371, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19390, 1562.35535, -1682.14600, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, 1562.38721, -1686.67822, 4.36810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 1557.30420, -1676.30371, 5.44608,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 1559.49634, -1676.37476, 5.44608,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 1561.54688, -1676.36169, 5.44608,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 1557.31555, -1672.79871, 5.44608,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 1559.34961, -1672.77820, 5.44608,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 1557.85974, -1678.58655, 5.44610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2603, 1557.91675, -1680.84375, 5.44610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2603, 1557.90076, -1683.09851, 5.44610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2603, 1557.90515, -1685.26086, 5.44610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2603, 1557.85779, -1687.22607, 5.44610,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19869, 1562.31812, -1676.75439, 6.20230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19869, 1562.33142, -1678.49585, 6.20230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19869, 1562.31641, -1686.36084, 6.20230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, 1565.96558, -1675.53577, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19390, 1565.95703, -1681.94434, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1571.03662, -1684.52686, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19390, 1571.02161, -1678.31238, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1571.06030, -1672.16187, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 1570.71326, -1667.43408, 6.94010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, 1576.31921, -1667.42444, 6.94010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1565.95984, -1685.01062, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1565.94666, -1687.62671, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2604, 1578.92712, -1668.10815, 5.96738,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2604, 1578.98999, -1670.73828, 5.96738,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2604, 1574.13440, -1668.19775, 5.96738,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2604, 1574.01660, -1670.85181, 5.96738,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2308, 1571.94080, -1675.35400, 5.22480,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19390, 1572.63379, -1683.09460, 6.94010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19390, 1579.44666, -1683.10095, 6.94010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1575.79163, -1683.09961, 6.94010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1576.40063, -1683.09424, 6.94010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19361, 1576.18408, -1687.57910, 4.64890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19361, 1576.17090, -1684.61841, 4.64890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1576.22217, -1685.22888, 7.02030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1576.18726, -1686.92371, 7.02030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2115, 1573.55310, -1686.50085, 5.09690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2115, 1578.57007, -1686.39319, 5.09690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1811, 1577.19324, -1685.95337, 5.80640,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, 1572.25427, -1685.61414, 5.80640,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, 1579.79053, -1686.38733, 5.80640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 1579.80200, -1685.50671, 5.80640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 1574.88452, -1686.01050, 5.80640,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1811, 1572.24829, -1686.57495, 5.80640,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2808, 1574.70508, -1682.48975, 5.62100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2808, 1577.23486, -1682.48938, 5.62100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1565.04370, -1665.85095, 5.22600,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1723, 1564.96350, -1660.69043, 5.22600,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2370, 1564.55005, -1664.59155, 5.22540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1556.36133, -1659.69336, 7.02030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1556.43799, -1669.11475, 7.02030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1556.54004, -1681.76550, 7.02030,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19869, 1559.77539, -1677.63367, 6.20230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19869, 1559.17297, -1677.56506, 6.20230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1523, 1565.99780, -1670.57312, 5.19600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 1566.02271, -1659.68201, 5.19600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, 1570.80054, -1657.41724, 6.94010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2627, 1580.20825, -1665.85181, 5.22573,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2627, 1578.78857, -1665.83179, 5.22573,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2627, 1577.32922, -1665.80542, 5.22573,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2628, 1580.21252, -1662.86023, 5.37236,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2628, 1580.16602, -1660.57153, 5.37236,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2628, 1578.17139, -1662.80310, 5.37236,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2628, 1578.15088, -1660.59729, 5.37236,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2629, 1576.86255, -1658.58813, 5.22587,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2629, 1574.64783, -1658.63635, 5.22587,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2629, 1572.50793, -1658.66138, 5.22587,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2630, 1575.55298, -1665.76050, 5.22540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2630, 1574.04041, -1665.75867, 5.22540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2630, 1570.45300, -1658.53186, 5.22540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2631, 1575.80151, -1661.13562, 5.22630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2631, 1572.06946, -1661.13525, 5.22630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2632, 1575.80359, -1663.05322, 5.22621,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2632, 1572.04114, -1663.06824, 5.22621,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1570.47974, -1670.85010, 5.13980,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(14782, 1569.16162, -1666.85889, 6.23390,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, 1566.70032, -1663.78650, 5.22710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19380, 1561.65723, -1662.07153, 8.61065,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19361, 1556.49158, -1657.16858, 6.94010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 1572.02258, -1661.93018, 8.61065,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1575.85510, -1661.95776, 8.61065,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1575.81567, -1671.52527, 8.61065,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1575.82458, -1681.02881, 8.61065,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1575.79553, -1684.41711, 8.61065,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1565.50134, -1684.48596, 8.61065,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1561.66174, -1684.36914, 8.61065,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1561.68799, -1674.79065, 8.61065,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1561.72400, -1668.09912, 8.61065,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1569.57300, -1671.52136, 8.61065,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 1569.86548, -1677.19104, 8.61065,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1649, 1576.22217, -1685.22888, 7.02030,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1649, 1576.18726, -1686.92371, 7.02030,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1649, 1576.25940, -1689.12488, 7.02030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 1563.25330, -1689.17542, 7.02030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1663, 1574.79468, -1671.98755, 5.68070,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1663, 1579.05713, -1672.08557, 5.68070,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1663, 1574.24561, -1669.87646, 5.68070,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1663, 1578.96558, -1669.70178, 5.68070,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1663, 1571.79846, -1676.64014, 5.68070,   0.00000, 0.00000, 141.35997);
	CreateDynamicObject(1523, 1565.99939, -1682.70569, 5.19600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1565.67029, -1683.92944, 15.08540,   0.00000, 90.00000, 0.00000);



	//mappinganmall
	CreateDynamicObject(640, 637.51721, -1382.29968, 13.22600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1145.54199, -1291.23401, 17.50301,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 1136.02209, -1291.23853, 17.50301,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 637.51721, -1376.75574, 13.22600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 637.51721, -1371.21167, 13.22600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 637.51721, -1365.66772, 13.22600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 637.51721, -1360.12366, 13.22600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 637.51721, -1354.57971, 13.22600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 637.51721, -1349.03564, 13.22600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 637.51721, -1343.22766, 13.22600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 637.51721, -1337.68372, 13.22600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 637.51721, -1332.13965, 13.22600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 646.55627, -1348.11658, 13.18450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(949, 646.51471, -1366.77185, 13.18450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 637.68073, -1346.10522, 12.56810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 637.58759, -1368.38293, 12.56810,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 660.62817, -1400.46204, 12.99290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 687.13123, -1400.46204, 12.99290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 714.07123, -1400.46204, 12.99290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 740.56219, -1400.46204, 12.99290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 767.05322, -1400.46204, 12.99290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 822.28021, -1400.46204, 12.99290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 849.22021, -1400.46204, 12.99290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 876.16022, -1400.46204, 12.99290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 941.71417, -1400.46204, 12.99290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 968.65417, -1400.46204, 12.99290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 996.04321, -1400.46204, 12.99290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 1023.43219, -1400.46204, 12.99290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 1085.35120, -1400.69800, 12.99290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 1112.67615, -1400.69800, 12.99290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1652, 1140.17615, -1400.69800, 12.99290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1126.61353, -1400.62146, 12.10970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1154.42969, -1400.63281, 12.10970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1098.93530, -1400.64441, 12.10970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1009.35291, -1400.46045, 12.10970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 982.24243, -1400.44531, 12.10970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 955.15613, -1400.39722, 12.10970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 862.34192, -1400.49866, 12.10970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 835.61835, -1400.44324, 12.10970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 753.87433, -1400.46008, 12.10970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 727.53235, -1400.47046, 12.10970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 700.58105, -1400.49133, 12.10970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 673.95911, -1400.42102, 12.10970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1136.62134, -1389.82190, 13.46460,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1130.12134, -1389.82190, 13.46460,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1124.12134, -1389.82190, 13.46460,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1117.62134, -1389.82190, 13.46460,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1111.12134, -1389.82190, 13.46460,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1085.88037, -1389.80273, 13.46460,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(640, 1092.12134, -1389.82190, 13.46460,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3472, 1137.68530, -1383.87830, 13.10970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1103.36328, -1377.21753, 13.10970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1123.29712, -1380.01587, 13.10970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1597, 1114.03638, -1384.69727, 15.24270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 1088.19910, -1384.81970, 15.24270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4641, 1107.93787, -1383.41895, 14.41190,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4641, 1107.93787, -1383.41895, 14.41190,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1094.47412, -1384.60437, 13.28200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1098.71814, -1384.60437, 13.28200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1084.03186, -1384.81958, 13.28200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(640, 1098.33130, -1389.82190, 13.46460,   0.00000, 0.00000, 90.00000);

	//mappingku
	CreateDynamicObject(980, 2071.59302, -1831.40723, 13.82610,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(980, 2643.14819, -2039.23047, 14.31526,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(980, 489.27094, -1735.87500, 12.92950,   0.00000, 0.00000, -6.00000);
	CreateDynamicObject(980, 1025.48792, -1029.42493, 33.83751,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(980, 1043.76208, -1025.79260, 32.47975,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(980, 721.79272, -462.26868, 16.64045,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10244, 710.85730, -1458.95874, 18.10410,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(980, 767.24268, -1420.04163, 14.51570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(980, 767.21576, -1453.41882, 11.40850,   0.00000, 0.00000, 83.89400);
	CreateDynamicObject(980, 698.09125, -1421.18713, 14.90180,   0.00000, 0.00000, 47.00000);
	CreateDynamicObject(9482, 708.31720, -1415.01831, 17.30210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(980, 854.78809, -726.50299, 100.44740,   0.00000, 0.00000, 64.00000);
	CreateDynamicObject(980, 857.47516, -734.09186, 100.44740,   0.00000, 0.00000, 155.00000);
	CreateDynamicObject(980, 867.18176, -738.60028, 100.44740,   0.00000, 0.00000, 155.00000);
	CreateDynamicObject(1814, 857.77692, -727.31860, 100.38620,   0.00000, 0.00000, 66.00000);
	CreateDynamicObject(1670, 856.58569, -728.70563, 100.89080,   0.00000, 0.00000, 76.00000);
	CreateDynamicObject(1709, 855.49701, -729.31293, 100.29180,   0.00000, 0.00000, 65.00000);
	CreateDynamicObject(1814, 856.82239, -729.33997, 100.38620,   0.00000, 0.00000, 66.00000);
	CreateDynamicObject(1670, 857.50812, -726.65228, 100.89080,   0.00000, 0.00000, 76.00000);
	CreateDynamicObject(1723, 859.19690, -727.60156, 100.39970,   0.00000, 0.00000, -115.00000);
	CreateDynamicObject(1824, 862.19501, -733.09882, 100.71170,   0.00000, 0.00000, -117.00000);
	CreateDynamicObject(2964, 865.79889, -735.03137, 100.28290,   0.00000, 0.00000, -117.00000);
	CreateDynamicObject(640, 855.45660, -732.49915, 101.05530,   0.00000, 0.00000, 65.00000);
	CreateDynamicObject(640, 861.14917, -725.78589, 101.05530,   0.00000, 0.00000, 67.00000);
	CreateDynamicObject(16151, 866.93213, -729.01550, 100.75450,   0.00000, 0.00000, 64.00000);
	CreateDynamicObject(640, 873.69635, -737.35272, 101.05530,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(3472, 872.08130, -740.22131, 100.12380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 852.74823, -731.28687, 100.12380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1817, 867.09869, -738.49048, 100.38410,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(14705, 868.04828, -738.36151, 101.09010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2248, 867.43140, -738.06378, 101.34460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(980, 891.88531, -710.85004, 109.56270,   0.00000, -4.00000, -20.00000);


	//church
	CreateDynamicObject(9931, 369.68164, 2339.92676, 1904.99158,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9931, 369.70605, 2308.43164, 1904.99207,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6959, 380.31934, 2327.49512, 1888.59814,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6959, 378.18066, 2333.77539, 1897.54663,   296.47705, 0.00000, 0.00000);
	CreateDynamicObject(6959, 378.07031, 2314.83936, 1897.50842,   63.74002, 0.00000, 0.00000);
	CreateDynamicObject(6959, 363.04980, 2326.47363, 1902.50073,   0.00000, 270.18677, 0.00000);
	CreateDynamicObject(9931, 409.28952, 2325.36133, 1903.95142,   0.00000, 0.00000, 182.88501);
	CreateDynamicObject(6959, 349.35693, 2328.10840, 1889.63599,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14394, 370.83624, 2320.27002, 1888.79468,   0.00000, 0.00000, 179.43994);
	CreateDynamicObject(14394, 370.92697, 2328.26318, 1888.79468,   0.00000, 0.00000, 179.43970);
	CreateDynamicObject(3657, 373.32642, 2328.60034, 1889.08508,   0.00000, 0.00000, 269.96997);
	CreateDynamicObject(3657, 375.27359, 2328.58716, 1889.08508,   0.00000, 0.00000, 269.96704);
	CreateDynamicObject(3657, 377.10638, 2328.55078, 1889.08508,   0.00000, 0.00000, 269.96704);
	CreateDynamicObject(3657, 379.10193, 2328.55298, 1889.08508,   0.00000, 0.00000, 269.96704);
	CreateDynamicObject(3657, 381.24136, 2328.55273, 1889.08508,   0.00000, 0.00000, 269.96704);
	CreateDynamicObject(3657, 383.30206, 2328.54590, 1889.08508,   0.00000, 0.00000, 269.96704);
	CreateDynamicObject(3657, 373.34204, 2320.07715, 1889.08508,   0.00000, 0.00000, 269.96155);
	CreateDynamicObject(3657, 375.22266, 2320.04346, 1889.08508,   0.00000, 0.00000, 269.96155);
	CreateDynamicObject(3657, 377.12314, 2320.04199, 1889.08508,   0.00000, 0.00000, 269.96155);
	CreateDynamicObject(3657, 379.14075, 2320.06152, 1889.08508,   0.00000, 0.00000, 269.96155);
	CreateDynamicObject(3657, 381.31061, 2320.05859, 1889.08508,   0.00000, 0.00000, 269.96155);
	CreateDynamicObject(3657, 383.32202, 2320.02930, 1889.08508,   0.00000, 0.00000, 269.96155);
	CreateDynamicObject(8131, 359.04636, 2324.15601, 1890.94678,   334.75000, 0.00000, 270.44000);
	CreateDynamicObject(14705, 367.74390, 2322.64966, 1890.70459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2208, 367.70975, 2325.31104, 1889.60474,   0.00000, 0.00000, 269.95499);
	CreateDynamicObject(2868, 367.74664, 2325.31738, 1890.46997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 367.60568, 2324.02197, 1890.46997,   0.00000, 0.00000, 269.39514);
	CreateDynamicObject(2869, 368.66562, 2331.67920, 1889.60474,   0.00000, 0.00000, 320.95996);
	CreateDynamicObject(2869, 365.07346, 2331.70239, 1889.60474,   0.00000, 0.00000, 322.20654);
	CreateDynamicObject(2869, 365.21088, 2316.75049, 1889.60474,   0.00000, 0.00000, 320.95459);
	CreateDynamicObject(2869, 368.77744, 2316.80200, 1889.60474,   0.00000, 0.00000, 320.95459);
	CreateDynamicObject(2896, 367.05939, 2318.20679, 1890.24402,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1664, 367.76474, 2323.08081, 1890.63672,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 367.53043, 2323.22949, 1890.55859,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2869, 375.79761, 2316.71118, 1888.56689,   0.00000, 0.00000, 320.95459);
	CreateDynamicObject(2869, 382.89117, 2316.57129, 1888.56689,   0.00000, 0.00000, 320.95459);
	CreateDynamicObject(2869, 375.69821, 2331.72070, 1888.56689,   0.00000, 0.00000, 320.95459);
	CreateDynamicObject(2869, 382.86984, 2331.74341, 1888.56689,   0.00000, 0.00000, 320.95459);
	CreateDynamicObject(6959, 375.40222, 2326.05957, 1915.37219,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6959, 387.21533, 2323.32227, 1924.68115,   0.00000, 269.68677, 2.75000);
	CreateDynamicObject(3462, 364.39996, 2328.12598, 1890.39270,   0.00000, 0.00000, 179.65002);
	CreateDynamicObject(3462, 364.37485, 2320.16626, 1890.36768,   0.00000, 0.00000, 180.39844);
	
	//mappingan NG
	CreateDynamicObject(16375, 389.30161, 2527.58691, 15.66410,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(3268, 355.87070, 2466.90356, 15.55910,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3268, 324.12689, 2466.86938, 15.55910,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3268, 292.08350, 2466.93213, 15.55910,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(16094, 249.80960, 2637.44116, 20.38760,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14488, 265.66794, 2539.87134, 18.27790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14782, 275.44165, 2547.13818, 16.85400,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14787, 265.33829, 2547.07617, 15.84920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2934, 318.09308, 2586.93994, 16.46580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7677, 297.06900, 2588.26074, 19.38850,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(16101, 269.56769, 2592.61890, 23.03100,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(16101, 261.18942, 2587.12598, 24.47600,   -4.00000, 98.00000, 33.00000);
	CreateDynamicObject(7677, 240.66235, 2588.58984, 19.38850,   0.00000, 0.00000, -113.00000);
	CreateDynamicObject(975, 237.92792, 2614.62036, 13.94750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 238.04962, 2611.41650, 13.94750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 247.90144, 2614.64014, 13.94750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 247.83662, 2611.40747, 13.94750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 257.42310, 2611.37524, 13.94750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 257.42416, 2614.62183, 13.94750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3279, 227.03474, 2615.60864, 15.17500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 267.34863, 2611.37183, 13.94750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 277.27603, 2614.55420, 13.94750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 267.25986, 2614.58350, 13.94750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 277.30908, 2611.38501, 13.94750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1077, 290.48111, 2609.85449, 15.60570,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1077, 292.74124, 2612.03735, 15.60570,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1077, 296.02695, 2610.79785, 15.60570,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1077, 296.32150, 2613.71313, 15.74970,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1077, 300.26379, 2612.16382, 15.89370,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1077, 300.89609, 2614.87524, 16.18170,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1077, 304.82913, 2613.49023, 16.61370,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1077, 305.93686, 2615.62158, 16.61370,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1077, 308.81949, 2614.32178, 16.75770,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1077, 309.20529, 2616.87427, 16.54170,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1077, 311.92560, 2615.76465, 16.68570,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1077, 312.64880, 2618.08398, 16.46970,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3279, 314.97189, 2628.38525, 15.17500,   0.00000, 0.00000, -120.00000);
	CreateDynamicObject(16774, 257.67465, 2640.50439, 16.96480,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(975, 253.03381, 2621.36450, 17.64650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 244.10580, 2621.36450, 17.64650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 235.10580, 2621.36450, 17.64650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 226.10980, 2621.36450, 17.64650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 221.66133, 2625.73120, 17.64650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(975, 221.66130, 2634.65918, 17.64650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(975, 221.66130, 2643.58716, 17.64650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(975, 221.66130, 2652.51514, 17.64650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(975, 226.08241, 2656.83643, 17.64650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 235.01041, 2656.83643, 17.64650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 243.93840, 2656.83643, 17.64650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 252.86639, 2656.83643, 17.64650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(975, 257.35260, 2652.51196, 17.64650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(975, 257.40652, 2625.76050, 17.64650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1584, 239.92953, 2631.00000, 15.41310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1584, 238.56189, 2633.21265, 15.41310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1584, 235.02115, 2635.45654, 15.41310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1584, 233.98410, 2638.37671, 15.67310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1584, 229.43079, 2640.63257, 16.19310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1584, 227.02756, 2643.17798, 16.19310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1584, 224.14163, 2645.45898, 16.19310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1584, 223.33974, 2649.15991, 16.19310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1584, 224.59550, 2652.28760, 16.19310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3463, 298.92355, 2641.78174, 15.62880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3463, 260.12415, 2622.37622, 15.62880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3463, 290.95282, 2606.28711, 15.62880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3463, 332.37448, 2606.42822, 15.62880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3463, 260.12415, 2622.37622, 15.62880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3463, 259.92572, 2655.09595, 15.62880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3463, 225.78793, 2640.35913, 15.62880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(16563, 386.45087, 2545.35913, 14.25050,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(16101, 386.06967, 2529.21997, 14.63770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19307, 386.04019, 2529.24536, 24.43340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3277, 382.55081, 2530.03613, 15.49450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12911, 356.14319, 2439.05713, 14.97590,   0.00000, 0.00000, 11.00000);
	CreateDynamicObject(12911, 322.23279, 2435.62500, 14.97590,   0.00000, 0.00000, 11.00000);
	CreateDynamicObject(12911, 289.69110, 2437.12061, 14.97590,   0.00000, 0.00000, 11.00000);
	CreateDynamicObject(3279, 265.15771, 2469.31226, 15.32560,   0.00000, 0.00000, -120.00000);
	CreateDynamicObject(3279, 246.48364, 2533.88403, 15.32560,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(3279, 344.85080, 2534.75854, 15.32560,   0.00000, 0.00000, 76.00000);
	CreateDynamicObject(3279, 435.79553, 2504.51880, 16.32560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 351.12711, 2592.50195, 18.96260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 365.12711, 2592.50195, 18.96260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 372.03922, 2585.54663, 18.96260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 372.03922, 2575.04663, 18.96260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 378.96637, 2557.72192, 18.96260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 392.96640, 2557.72192, 18.96260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 406.96640, 2557.72192, 18.96260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 420.96640, 2557.72192, 18.96260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 434.96640, 2557.72192, 18.96260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 441.71466, 2550.76245, 18.96260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 441.71469, 2536.76245, 18.96260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 441.71469, 2522.76245, 18.96260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 441.71469, 2508.76245, 18.96260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 441.71469, 2494.76245, 18.96260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 441.71469, 2480.76245, 18.96260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 441.71469, 2466.76245, 18.96260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 434.71304, 2459.73096, 18.96260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 373.35242, 2457.07520, 18.96260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 340.71683, 2457.13379, 18.96260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 307.80835, 2457.35400, 18.96260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 272.53192, 2457.14355, 18.96260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 258.53189, 2457.14355, 18.96260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 244.53191, 2457.14355, 18.96260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 230.53191, 2457.14355, 18.96260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 216.53191, 2457.14355, 18.96260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 202.53191, 2457.14355, 18.96260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 188.53191, 2457.14355, 18.96260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 181.55373, 2464.09302, 18.96260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 181.55370, 2478.09302, 18.96260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 181.55370, 2529.59302, 18.96260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 181.55370, 2543.59302, 18.96260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 181.55370, 2557.59302, 18.96260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 181.55370, 2571.59302, 18.96260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 181.55370, 2574.09302, 18.96260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3271, 201.14281, 2613.81812, 16.08520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3271, 174.55405, 2641.70752, 16.08520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3271, 198.23177, 2659.74268, 16.08520,   0.00000, 0.00000, -215.00000);
	CreateDynamicObject(19377, 510.09579, 2354.96826, 41.44270,   90.00000, 0.00000, -33.00000);
	CreateDynamicObject(16101, 512.78613, 2359.12231, 28.93750,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 507.27698, 2350.65015, 28.93750,   0.00000, 0.00000, 0.00000);
	
	//IsInNev
	CreateDynamicObject(3983, 2469.629150, -2919.871094, 8.278376, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(944, 2473.229248, -2946.492432, 7.139725, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(944, 2473.292236, -2946.488770, 8.585608, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(964, 2471.891846, -2945.690186, 6.254938, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(931, 2471.147461, -2947.244629, 7.316843, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1271, 2471.712646, -2946.877197, 7.922562, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1271, 2470.625732, -2945.544189, 6.613726, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1271, 2472.054932, -2946.875244, 8.737639, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1271, 2472.056885, -2946.107178, 7.570676, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1271, 2470.611572, -2945.521240, 7.312428, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1271, 2470.595947, -2946.877197, 7.921617, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(14548, 2472.750244, -2945.020264, 8.406580, 12.8916, 0.0000, 0.0000);
	CreateDynamicObject(964, 2474.609131, -2945.771240, 6.407874, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(964, 2474.610596, -2946.862793, 6.409838, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1685, 2469.227783, -2945.027100, 7.156536, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1431, 2468.566650, -2942.016602, 6.948733, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1431, 2474.366211, -2946.001709, 7.921226, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1431, 2474.345459, -2945.954590, 8.426396, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1431, 2474.378174, -2945.846924, 8.931562, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1431, 2474.369385, -2945.933350, 9.834582, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1271, 2474.386230, -2945.187500, 9.286991, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2567, 2473.761963, -2944.838379, 8.329632, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(2567, 2473.796387, -2940.026367, 8.325142, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(2567, 2473.699707, -2935.200928, 8.316462, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(2567, 2473.759033, -2930.333252, 8.307705, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(2567, 2470.662354, -2930.452881, 8.307920, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(1431, 2468.531250, -2939.992432, 6.945092, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1431, 2468.501709, -2938.042969, 6.941586, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1431, 2468.498779, -2936.026855, 6.937959, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(1431, 2468.518066, -2934.179443, 6.934636, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(1431, 2468.678223, -2932.426270, 6.931481, 0.0000, 0.0000, 258.7500);
	CreateDynamicObject(927, 2470.650391, -2946.379150, 9.311947, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(943, 2472.903320, -2934.670654, 7.175140, 0.0000, 0.0000, 180.0000);
	CreateDynamicObject(1535, 2470.270996, -2931.557861, 6.296233, 0.0000, 0.0000, 0.0000);
	CreateDynamicObject(2634, 2472.766113, -2941.141602, 7.668908, 0.0000, 0.0000, 90.0000);
	CreateDynamicObject(2373, 2468.896973, -2940.247314, 6.023496, 0.0000, 0.0000, 270.0000);
	CreateDynamicObject(2399, 2468.996582, -2941.314209, 7.562979, 0.0000, 0.0000, 78.7500);
	
	//mappingan TRAF
	CreateDynamicObject(987, 1005.81000, -285.14001, 72.99000,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(987, 1005.84003, -369.04999, 72.55000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1039.13000, -369.17999, 72.73000,   0.00000, 0.00000, 359.98001);
	CreateDynamicObject(987, 1051.18994, -369.07999, 72.99000,   0.00000, 0.00000, 359.98001);
	CreateDynamicObject(3279, 1033.76001, -287.57999, 72.99000,   0.00000, 0.00000, 267.98001);
	CreateDynamicObject(3279, 1115.42004, -266.89001, 72.09000,   0.00000, 0.00000, 205.99001);
	CreateDynamicObject(987, 1063.30005, -369.28000, 72.99000,   0.00000, 0.00000, 359.98001);
	CreateDynamicObject(987, 1075.19995, -369.34000, 72.99000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1087.12000, -369.48999, 72.96000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1099.17004, -369.50000, 72.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1110.88000, -369.54999, 72.92000,   0.00000, 0.00000, 359.98001);
	CreateDynamicObject(987, 1123.03003, -369.67001, 72.54000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1123.06995, -357.92001, 72.96000,   0.00000, 0.00000, 90.71000);
	CreateDynamicObject(987, 1122.92273, -345.97989, 72.96000,   0.00000, 0.00000, 87.98000);
	CreateDynamicObject(987, 1123.34497, -334.14139, 72.96000,   0.00000, 0.00000, 87.98000);
	CreateDynamicObject(987, 1123.81006, -322.26596, 72.96000,   0.00000, 0.00000, 87.98000);
	CreateDynamicObject(987, 1135.48560, -298.69019, 72.20730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(8614, 1043.54004, -284.76999, 75.22000,   0.00000, 0.00000, 181.98000);
	CreateDynamicObject(987, 1006.90002, -356.95001, 72.87000,   0.00000, 0.00000, 266.00000);
	CreateDynamicObject(987, 1006.84998, -344.97000, 72.89000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 1006.46002, -333.07999, 72.83000,   0.00000, 0.00000, 272.00000);
	CreateDynamicObject(987, 1006.15997, -321.12000, 72.85000,   0.00000, 0.00000, 272.00000);
	CreateDynamicObject(987, 1006.03998, -309.13000, 72.92000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 1005.82001, -297.12000, 72.98000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 1015.85999, -278.51001, 72.55000,   0.00000, 0.00000, 213.99001);
	CreateDynamicObject(987, 1027.75000, -278.26001, 72.43000,   0.00000, 0.00000, 182.00000);
	CreateDynamicObject(987, 1039.69995, -279.17001, 72.37000,   0.00000, 0.00000, 176.00000);
	CreateDynamicObject(987, 1050.90002, -279.75000, 72.98000,   0.00000, 0.00000, 177.99001);
	CreateDynamicObject(987, 1057.40002, -269.70001, 72.60000,   0.00000, 0.00000, 237.99001);
	CreateDynamicObject(987, 1060.30005, -258.10001, 72.50000,   0.00000, 0.00000, 256.00000);
	CreateDynamicObject(987, 1082.09998, -253.10001, 73.00000,   0.00000, 0.00000, 174.00000);
	CreateDynamicObject(987, 1116.90002, -256.79999, 71.49000,   0.00000, 0.00000, 174.00000);
	CreateDynamicObject(987, 1123.90002, -266.50000, 71.10000,   0.00000, 0.00000, 126.00000);
	CreateDynamicObject(987, 1121.50000, -286.89999, 72.80000,   0.00000, 0.00000, 81.99000);
	CreateDynamicObject(987, 1123.67664, -298.54999, 73.01000,   0.00000, 0.00000, 101.54001);
	CreateDynamicObject(987, 1027.06995, -369.17999, 72.74000,   0.00000, 0.00000, 359.98001);
	CreateDynamicObject(3279, 1012.29999, -358.50000, 73.00000,   0.00000, 0.00000, 359.98001);
	CreateDynamicObject(3648, 1115.17004, -356.06000, 75.74000,   0.02000, 0.02000, 358.04999);
	CreateDynamicObject(8572, 1021.04999, -284.39001, 75.21000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(11503, 1095.95996, -299.79999, 73.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3355, 1035.76001, -353.37000, 72.99000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3356, 1116.48999, -337.47000, 77.39000,   0.00000, 0.00000, 267.98999);
	CreateDynamicObject(2048, 1035.76001, -346.89999, 77.52000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(1736, 1033.71997, -346.54001, 76.77000,   0.00000, 0.00000, 177.99001);
	CreateDynamicObject(2048, 1095.95996, -302.79999, 76.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2048, 1106.48999, -303.31000, 75.15000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2048, 1109.81006, -356.85999, 75.46000,   0.00000, 0.00000, 268.00000);
	CreateDynamicObject(2048, 1031.28003, -314.01001, 76.25000,   0.00000, 0.00000, 357.98999);
	CreateDynamicObject(1408, 1101.92004, -333.00000, 73.60000,   0.00000, 0.00000, 271.20999);
	CreateDynamicObject(2048, 1080.43994, -326.45001, 74.70000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1736, 1037.87000, -346.60001, 76.79000,   0.00000, 0.00000, 174.00000);
	CreateDynamicObject(3525, 1082.80005, -292.70001, 73.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17036, 1099.85999, -298.64999, 72.99000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10150, 1045.48999, -315.50000, 78.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2922, 1013.70001, -386.10001, 71.90000,   0.00000, 10.00000, 269.98999);
	CreateDynamicObject(2048, 1016.32001, -369.26999, 76.01000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2048, 1028.59998, -369.39999, 76.01000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3398, 1008.70001, -366.89999, 75.10000,   0.00000, 0.00000, 150.00000);
	CreateDynamicObject(3398, 1008.52002, -286.26001, 75.12000,   0.00000, 0.00000, 48.00000);
	CreateDynamicObject(3398, 1122.19995, -269.10001, 75.10000,   0.00000, 0.00000, 297.98999);
	CreateDynamicObject(3398, 1122.59998, -368.97000, 75.12000,   0.00000, 0.00000, 225.99001);
	CreateDynamicObject(5837, 1015.00000, -386.10001, 72.30000,   0.00000, 349.98999, 90.00000);
	CreateDynamicObject(16326, 1082.95996, -324.85999, 72.99000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(10150, 1118.63000, -346.91000, 73.43000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1506, 1079.31006, -322.16000, 72.86000,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(2063, 1087.96997, -316.82001, 76.55000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2048, 157.53999, 59.16000, 468.31000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17036, 1086.48999, -314.07001, 72.76000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(10150, 1090.41003, -314.09000, 73.39000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17063, 1035.75000, -354.56000, 81.80000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2235, 1035.26001, -357.04999, 81.81000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2063, 1039.78003, -350.29001, 82.62000,   0.00000, 0.00000, 272.00000);
	CreateDynamicObject(1520, 1035.97998, -356.60001, 82.32000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1665, 1035.35999, -356.56000, 82.31000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1846, 1035.95996, -359.16000, 83.76000,   90.00000, 90.00000, 268.98999);
	CreateDynamicObject(2229, 1033.98999, -360.42001, 83.08000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2229, 1037.30005, -360.34000, 83.08000,   0.00000, 0.00000, 185.99001);
	CreateDynamicObject(10150, 1099.76001, -294.76999, 73.48000,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(6865, 1089.51001, -349.04999, 82.38000,   0.00000, 0.00000, 226.64000);
	CreateDynamicObject(10150, 1045.51001, -285.70999, 78.35000,   0.00000, 0.00000, 89.97000);
	CreateDynamicObject(10150, 1019.35999, -285.31000, 78.35000,   0.00000, 0.00000, 89.97000);
	CreateDynamicObject(1508, 1045.70996, -315.70001, 74.20000,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(3249, 1089.53003, -355.85999, 72.98000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(3525, 1090.55005, -346.89999, 74.12000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(3525, 1088.50000, -346.91000, 74.12000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2673, 1106.84998, -312.01999, 73.08000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1508, 1031.28003, -356.17999, 83.53000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2048, 1089.46997, -348.51999, 79.18000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(11496, 1035.79004, -354.70001, 81.67000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(11496, 1035.75000, -354.70001, 81.67000,   0.00000, 0.00000, 359.98001);
	CreateDynamicObject(8615, 1030.82996, -361.39999, 74.54000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(12950, 1044.58997, -354.88000, 78.36000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11496, 1034.48999, -306.04999, 81.42000,   0.00000, 0.00000, 359.98001);
	CreateDynamicObject(11496, 1030.48999, -306.01999, 81.42000,   0.00000, 0.00000, 179.98000);
	CreateDynamicObject(8614, 1032.40002, -354.23001, 83.84000,   0.00000, 0.00000, 87.99000);
	CreateDynamicObject(964, 1086.40002, -324.79001, 76.24000,   90.00000, 0.00000, 179.99001);
	CreateDynamicObject(2064, 1087.77002, -323.22000, 76.23000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(2290, 1034.77002, -354.20001, 81.87000,   0.00000, 0.00000, 358.00000);
	CreateDynamicObject(1754, 1033.92004, -355.79001, 81.87000,   0.00000, 0.00000, 44.00000);
	CreateDynamicObject(2566, 1034.54004, -351.35001, 82.45000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2004, 1038.18994, -348.88000, 83.67000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11445, 1032.34998, -308.95001, 81.62000,   0.00000, 0.00000, 174.00000);
	CreateDynamicObject(3066, 1032.20996, -299.79999, 82.50000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8613, 1021.84003, -304.56000, 78.04000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(8614, 1027.62000, -294.60001, 74.47000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(13360, 1087.83997, -295.20999, 74.93000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12937, 1090.31006, -292.09000, 75.91000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16285, 1032.79004, -310.42999, 72.99000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3525, 1091.30005, -295.60001, 73.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2673, 1025.69995, -360.60001, 73.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2670, 1020.40002, -361.10001, 73.10000,   0.00000, 0.00000, 348.00000);
	CreateDynamicObject(2048, 1045.53003, -315.57999, 78.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16285, 1113.98047, -318.50455, 73.00000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(964, 1022.79999, -315.17999, 73.50000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, 1016.00000, -315.22000, 73.50000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3415, 1096.27002, -332.81000, 73.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1764, 1098.59998, -331.50000, 73.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2207, 1094.90002, -333.60001, 73.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1765, 1095.69995, -331.39999, 73.00000,   0.00000, 0.00000, 308.00000);
	CreateDynamicObject(1765, 1096.30005, -333.20001, 73.00000,   0.00000, 0.00000, 240.00000);
	CreateDynamicObject(1765, 1092.80005, -333.04999, 73.00000,   0.00000, 0.00000, 88.00000);
	CreateDynamicObject(17036, 1114.73999, -346.76999, 72.90000,   0.00000, 0.00000, 89.16000);
	CreateDynamicObject(2048, 1107.28003, -315.76001, 75.18000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(1550, 1038.80005, -349.29999, 82.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3785, 1114.06995, -335.60001, 75.40000,   0.00000, 0.00000, 198.00000);
	CreateDynamicObject(16011, 1073.09924, -355.13281, 73.50000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 1070.40002, -251.80000, 72.70000,   0.00000, 0.00000, 211.99001);
	CreateDynamicObject(987, 1094.00000, -254.30000, 73.30000,   0.00000, 0.00000, 174.00000);
	CreateDynamicObject(987, 1105.09998, -255.50000, 72.60000,   0.00000, 0.00000, 174.00000);
	CreateDynamicObject(987, 1122.40002, -278.29999, 71.60000,   0.00000, 0.00000, 81.99000);
	CreateDynamicObject(3279, 1068.80005, -260.50000, 72.80000,   0.00000, 0.00000, 317.98999);
	CreateDynamicObject(3285, 1114.09998, -278.10001, 74.60000,   0.00000, 0.00000, 272.00000);
	CreateDynamicObject(3362, 1104.14001, -259.67999, 72.40000,   0.00000, 0.00000, 242.47000);
	CreateDynamicObject(3173, 1102.80005, -287.29999, 73.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1116.90002, -256.79999, 76.30000,   0.00000, 0.00000, 174.00000);
	CreateDynamicObject(987, 1105.09998, -255.50000, 77.50000,   0.00000, 0.00000, 174.00000);
	CreateDynamicObject(987, 1094.00000, -254.30000, 78.10000,   0.00000, 0.00000, 174.00000);
	CreateDynamicObject(987, 1082.09998, -253.10001, 77.80000,   0.00000, 0.00000, 174.00000);
	CreateDynamicObject(987, 1070.40002, -251.80000, 77.70000,   0.00000, 0.00000, 211.99001);
	CreateDynamicObject(987, 1060.30005, -258.10001, 77.30000,   0.00000, 0.00000, 255.99001);
	CreateDynamicObject(987, 1057.40002, -269.70001, 77.40000,   0.00000, 0.00000, 237.99001);
	CreateDynamicObject(987, 1050.90002, -279.70001, 77.70000,   0.00000, 0.00000, 177.99001);
	CreateDynamicObject(987, 1039.69995, -279.20001, 77.30000,   0.00000, 0.00000, 176.00000);
	CreateDynamicObject(987, 1027.80005, -278.29999, 77.20000,   0.00000, 0.00000, 182.00000);
	CreateDynamicObject(987, 1015.90002, -278.50000, 77.10000,   0.00000, 0.00000, 213.99001);
	CreateDynamicObject(987, 1005.79999, -285.10001, 77.70000,   0.00000, 0.00000, 269.98999);
	CreateDynamicObject(987, 1005.79999, -297.10001, 78.00000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 1006.00000, -309.10001, 77.70000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 1006.20001, -321.10001, 77.60000,   0.00000, 0.00000, 272.00000);
	CreateDynamicObject(987, 1006.50000, -333.10001, 77.60000,   0.00000, 0.00000, 272.00000);
	CreateDynamicObject(987, 1006.90002, -345.00000, 77.40000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(987, 1006.90002, -357.00000, 77.60000,   0.00000, 0.00000, 266.00000);
	CreateDynamicObject(987, 1005.84003, -369.04999, 77.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1027.09998, -369.20001, 77.60000,   0.00000, 0.00000, 359.98001);
	CreateDynamicObject(987, 1039.09998, -369.20001, 77.70000,   0.00000, 0.00000, 359.98001);
	CreateDynamicObject(987, 1063.30005, -369.29999, 77.70000,   0.00000, 0.00000, 359.98001);
	CreateDynamicObject(987, 1051.19995, -369.10001, 77.70000,   0.00000, 0.00000, 359.98001);
	CreateDynamicObject(987, 1075.19995, -369.29999, 77.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1099.19995, -369.50000, 77.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1087.09998, -369.50000, 77.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1110.90002, -369.50000, 77.40000,   0.00000, 0.00000, 359.98001);
	CreateDynamicObject(987, 1123.00000, -369.70001, 77.40000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1123.90002, -266.50000, 75.90000,   0.00000, 0.00000, 126.00000);
	CreateDynamicObject(987, 1122.40002, -278.29999, 76.40000,   0.00000, 0.00000, 81.99000);
	CreateDynamicObject(987, 1121.50000, -286.89999, 77.60000,   0.00000, 0.00000, 81.99000);
	CreateDynamicObject(11503, 1096.50000, -320.50000, 73.10000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(8615, 1043.20996, -348.20999, 74.30000,   0.00000, 0.00000, 178.00000);
	CreateDynamicObject(10832, 1060.69995, -311.29999, 71.60000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3934, 1060.54004, -311.39999, 73.30000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(10832, 1060.59998, -301.60001, 71.60000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(10832, 1060.40002, -291.39999, 71.60000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3934, 1060.40002, -301.70001, 73.30000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(3934, 1060.40002, -291.50000, 73.30000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(11455, 1019.40002, -315.20001, 77.57000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1018.16998, -315.25000, 78.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1017.34003, -315.23001, 71.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1021.04999, -315.23001, 71.79000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1017.90002, -315.25000, 78.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3279, 1099.01001, -362.14001, 73.00000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14638, 1090.57996, -363.26001, 73.00000,   0.00000, 4.44000, 91.00000);
	CreateDynamicObject(944, 1049.35999, -367.29999, 73.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3403, 1032.09998, -309.00000, 84.66000,   0.00000, 0.00000, 3.99000);
	CreateDynamicObject(1408, 1107.40002, -348.79001, 73.51000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3250, 1105.01001, -321.34000, 72.94000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3250, 1108.51001, -297.73001, 73.04000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2048, 1090.07996, -295.35999, 75.55000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11503, 1119.70996, -297.50000, 73.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19173, 1036.10999, -348.92001, 84.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19170, 1032.93005, -360.20001, 83.99000,   270.00000, 90.00000, 90.00000);
	CreateDynamicObject(19171, 1039.06995, -360.20001, 83.78000,   270.00000, 0.00000, 0.00000);
	CreateDynamicObject(1508, 1094.16003, -355.16000, 74.20000,   0.00000, 0.00000, 0.77000);
	CreateDynamicObject(1767, 1105.13000, -264.45001, 72.80000,   0.00000, 0.00000, -65.00000);
	CreateDynamicObject(1493, 1034.98999, -361.75000, 73.40000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1017.34003, -315.23001, 74.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 1021.04999, -315.23001, 74.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2878, 1018.72998, -315.17001, 74.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18368, 1128.53003, -215.83000, 50.72000,   0.00000, 0.00000, 100.00000);
	CreateDynamicObject(1506, 1114.26001, -335.23001, 73.57000,   0.00000, 0.00000, 89.00000);
	CreateDynamicObject(13360, 1045.45996, -285.66000, 77.52000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13360, 1019.26001, -285.25000, 77.52000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19375, 1052.97998, -309.31000, 70.46000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19375, 1045.68005, -285.72000, 70.95000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1018.15997, -285.39999, 70.57000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1038.18994, -291.51001, 70.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19375, 1011.98999, -291.89999, 70.43000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2415, 1118.04004, -344.00000, 77.10000,   0.00000, 0.00000, 0.47000);
	CreateDynamicObject(19375, 1026.81006, -308.67001, 70.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1408, 1106.48999, -330.01999, 73.51000,   3.14000, 0.00000, 0.02000);
	CreateDynamicObject(1408, 1110.40002, -351.51001, 73.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1408, 1104.83997, -330.01001, 73.51000,   0.00000, 0.00000, 178.21001);
	CreateDynamicObject(1408, 1104.31006, -358.75000, 73.60000,   0.00000, 0.00000, 269.57001);
	CreateDynamicObject(1408, 1104.35999, -351.29999, 73.60000,   0.00000, 0.00000, 269.57001);
	CreateDynamicObject(1408, 1107.18005, -361.38000, 73.60000,   0.00000, 0.00000, 359.29999);
	CreateDynamicObject(1408, 1109.97998, -343.63000, 73.60000,   0.00000, 0.00000, 0.94000);
	CreateDynamicObject(1408, 1104.56006, -343.70001, 73.60000,   0.00000, 0.00000, 0.94000);
	CreateDynamicObject(1369, 1024.19995, -316.00000, 73.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2833, 1114.17004, -334.94000, 73.58000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1759, 1113.32996, -336.75000, 73.54000,   0.00000, 0.00000, 267.42999);
	CreateDynamicObject(2100, 1104.77002, -262.69000, 72.87000,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(19314, 1035.75000, -346.85001, 76.18000,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(1481, 1144.81006, -211.39999, 55.86000,   0.00000, 0.00000, 304.91000);
	CreateDynamicObject(1810, 1142.29004, -214.97000, 55.18000,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1810, 1144.19995, -213.72000, 55.18000,   0.00000, 0.00000, -100.00000);
	CreateDynamicObject(1810, 1140.68005, -213.62000, 55.18000,   0.00000, 0.00000, 126.07000);
	CreateDynamicObject(933, 1142.41003, -213.16000, 55.13000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3927, 1038.92004, -443.56000, 52.57000,   0.00000, 0.00000, 15.00000);
	CreateDynamicObject(2048, 1038.73999, -443.67001, 53.38000,   0.00000, 0.00000, 15.00000);
	CreateDynamicObject(3927, 1146.27002, -219.78000, 57.30000,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(2048, 1146.07996, -219.86000, 58.15000,   0.00000, 0.12000, -140.03000);
	CreateDynamicObject(3927, 1013.03998, -453.60999, 52.57000,   0.00000, 0.00000, 15.00000);
	CreateDynamicObject(2048, 1012.84003, -453.72000, 53.38000,   0.00000, 0.00000, 15.00000);
	CreateDynamicObject(2146, 1013.59998, -315.85999, 73.47000,   0.00000, 0.00000, 92.00000);
	CreateDynamicObject(3886, 999.48999, -128.95000, 0.35000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3886, 1009.75000, -129.39000, 0.35000,   0.00000, 0.00000, 85.00000);
	CreateDynamicObject(3886, 989.31000, -128.94000, 2.57000,   25.00000, 0.00000, 90.00000);
	CreateDynamicObject(3886, 979.71002, -128.94000, 4.70000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3886, 977.70001, -136.17000, 4.66000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3927, 979.81000, -130.85001, 7.49000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2048, 979.59998, -130.92999, 8.34000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(994, 1017.97192, -375.25201, 72.21960,   0.00000, -6.26000, 90.00000);
	CreateDynamicObject(994, 1017.97418, -381.55280, 71.42540,   0.00000, -6.70000, 90.00000);
	CreateDynamicObject(994, 1027.64172, -374.66599, 72.15260,   0.00000, -7.18000, 89.88000);
	CreateDynamicObject(994, 1027.66626, -380.91391, 71.32090,   0.00000, -7.48000, 90.54000);
	CreateDynamicObject(994, 1027.67737, -387.09561, 70.06610,   0.00000, -11.80000, 90.00000);
	CreateDynamicObject(3886, 1020.17999, -130.31000, 0.35000,   0.00000, 0.00000, 85.00000);
	CreateDynamicObject(3174, 1116.68005, -287.56000, 72.90000,   -4.00000, 0.00000, -25.00000);
	CreateDynamicObject(10766, 1050.92493, -327.09927, 70.51957,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(791, 1157.42139, -361.72687, 56.34456,   0.00000, 0.00000, -239.57922);
	CreateDynamicObject(987, 1147.20947, -298.69019, 72.20730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 1153.22473, -298.69019, 72.20730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 1162.22119, -298.69019, 72.20730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 1162.14636, -310.76410, 72.20730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1162.14636, -322.72470, 72.20730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1162.14636, -334.72891, 72.20730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1162.14636, -346.70230, 72.20730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1162.14636, -355.69632, 72.20730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1138.15210, -355.59760, 72.20730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1126.21753, -354.92725, 72.20730,   0.00000, 0.00000, -3.12000);
	CreateDynamicObject(987, 1123.19507, -354.74127, 72.42719,   0.00000, 0.00000, -3.48000);
	CreateDynamicObject(987, 1123.00000, -366.69901, 77.40000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1123.19507, -354.74130, 77.08240,   0.00000, 0.00000, -3.48000);
	CreateDynamicObject(987, 1150.09216, -355.59760, 72.20730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1123.67664, -298.54999, 77.80000,   0.00000, 0.00000, 101.54000);
	CreateDynamicObject(987, 1126.21753, -354.92719, 77.08240,   0.00000, 0.00000, -3.12000);
	CreateDynamicObject(987, 1138.15210, -355.59760, 77.08240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1150.09216, -355.59760, 77.08240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 1162.14636, -355.69629, 77.08240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1162.15503, -346.72031, 77.08240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1162.14636, -334.72891, 77.08240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1162.14636, -322.72470, 77.08240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1162.14636, -310.76410, 77.08240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(987, 1162.22119, -298.69019, 77.08240,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 1153.22473, -298.69019, 77.08240,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 1147.20947, -298.69019, 77.08240,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(987, 1135.48560, -298.69019, 77.08238,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(694, 1161.15698, -298.02872, 62.15560,   0.00000, 0.00000, 95.10004);
	CreateDynamicObject(17324, 1131.83459, -340.80026, 72.60115,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(16770, 1146.26697, -326.22858, 74.36684,   0.00000, 0.00000, -89.58001);
	CreateDynamicObject(11445, 1152.15674, -307.72159, 72.83017,   0.00000, 0.00000, 120.58012);
	CreateDynamicObject(705, 1154.65161, -315.05899, 72.74644,   0.00000, 0.00000, -17.82001);
	CreateDynamicObject(3403, 1151.99707, -307.52856, 75.23817,   0.00000, 0.00000, -55.02003);
	CreateDynamicObject(832, 1158.61035, -307.24869, 74.06133,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(833, 1151.92651, -315.63150, 73.47649,   0.00000, 0.00000, 44.58003);
	CreateDynamicObject(844, 1157.21753, -319.43011, 73.57754,   -0.24000, -3.60000, -70.98000);
	CreateDynamicObject(647, 1158.48645, -305.20245, 73.86030,   0.00000, 0.00000, -56.52003);
	CreateDynamicObject(647, 1156.83032, -301.63852, 73.86030,   0.00000, 0.00000, 87.60004);
	CreateDynamicObject(833, 1143.28662, -347.75137, 73.32142,   0.00000, 0.00000, -153.90009);
	CreateDynamicObject(672, 1146.95081, -349.29251, 73.59031,   0.00000, 0.00000, -5.70000);
	CreateDynamicObject(660, 1154.13477, -347.92331, 72.78374,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11446, 1156.39368, -302.20285, 72.69294,   0.00000, 0.00000, 174.66017);
	CreateDynamicObject(1463, 1136.56824, -315.48218, 73.35160,   0.00000, 43.32000, 85.98004);
	CreateDynamicObject(1463, 1137.21008, -317.59445, 73.09712,   0.00000, 0.00000, -78.24001);
	CreateDynamicObject(2905, 1137.34497, -315.84079, 73.50523,   0.00000, 0.00000, -17.88001);
	CreateDynamicObject(2908, 1135.97729, -315.13101, 72.88986,   0.00000, 0.00000, -77.82004);
	CreateDynamicObject(2907, 1136.67590, -316.76425, 73.85734,   -7.56000, -36.30000, 0.00000);
	CreateDynamicObject(3260, 1134.69861, -316.29385, 72.27910,   30.36001, 7.07999, 73.68000);
	CreateDynamicObject(1463, 1137.67212, -316.52798, 73.31767,   0.00000, 43.32000, 0.00000);
	CreateDynamicObject(1463, 1135.50610, -317.70813, 73.12519,   0.00000, 0.00000, 133.91983);
	CreateDynamicObject(831, 1136.39246, -316.68936, 72.96049,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18691, 1136.52246, -316.78781, 70.51070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2905, 1136.53979, -317.77689, 73.18829,   -52.07994, -7.32000, -201.53960);
	CreateDynamicObject(839, 1136.36401, -317.10965, 74.20282,   0.00000, 0.00000, 24.84002);
	CreateDynamicObject(1368, 1136.86865, -312.14124, 73.53126,   0.00000, 0.00000, -3.30000);
	CreateDynamicObject(1368, 1141.42358, -316.98392, 73.53840,   0.00000, 0.00000, -90.90000);
	CreateDynamicObject(1368, 1135.99426, -321.97729, 73.52680,   0.00000, 0.00000, 171.05991);
	CreateDynamicObject(2051, 1156.27087, -344.09503, 73.99009,   0.00000, 0.00000, 201.84018);
	CreateDynamicObject(2051, 1146.83020, -348.40018, 73.99009,   -4.32000, 0.84000, 177.66049);
	CreateDynamicObject(2051, 1144.44250, -347.86838, 73.29879,   -4.32000, 0.84000, 130.98070);
	CreateDynamicObject(831, 1140.95215, -345.39703, 73.70485,   0.00000, 0.00000, -52.02002);
	CreateDynamicObject(2051, 1141.16650, -344.78601, 74.06978,   0.00000, 0.00000, 174.47990);
	CreateDynamicObject(2051, 1140.36523, -347.41974, 76.17490,   0.00000, 0.00000, 174.47990);
	CreateDynamicObject(3415, 1126.73706, -315.39999, 72.75799,   0.00000, 0.00000, 90.00001);
	CreateDynamicObject(2048, 1131.83032, -328.72424, 79.18000,   0.00000, 0.00000, 179.99001);
	CreateDynamicObject(3398, 1160.98376, -354.87366, 75.12000,   0.00000, 0.00000, 225.99001);
	CreateDynamicObject(2395, 1138.29993, -328.75360, 72.59251,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2395, 1137.31995, -328.75360, 75.32730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19386, 1134.28564, -328.89359, 74.58290,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2395, 1133.04834, -328.75360, 72.59250,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2395, 1129.32068, -328.75360, 72.59250,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2395, 1129.32068, -328.75360, 75.32730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2395, 1133.04834, -328.75360, 75.32730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2395, 1134.59399, -328.75339, 75.32730,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19448, 1135.92395, -333.74719, 74.58290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1135.92395, -343.35840, 74.58290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19386, 1132.71704, -330.51901, 74.58290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19356, 1132.71704, -333.71680, 74.58290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19386, 1132.71704, -336.91461, 74.58290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19356, 1132.71704, -340.12061, 74.58290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19448, 1131.16272, -348.20105, 74.58290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19356, 1131.11963, -341.62390, 74.58290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19356, 1127.93066, -341.62390, 74.58290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19448, 1126.32654, -345.03772, 74.58290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19356, 1131.12451, -328.90289, 74.58290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19356, 1127.91626, -328.90289, 74.58290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19356, 1131.08191, -333.45581, 74.58290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19356, 1127.88647, -333.45581, 74.58290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19448, 1126.45667, -333.68060, 74.58290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19356, 1126.45667, -340.08560, 74.58290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 1131.08862, -334.06799, 72.82370,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19378, 1131.08862, -344.55121, 72.82370,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19378, 1131.08862, -344.55121, 76.28532,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19378, 1131.08862, -334.06799, 76.28530,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19425, 1134.30566, -328.85809, 72.81600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2063, 1126.85339, -331.95987, 73.73650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14782, 1128.94751, -329.37939, 73.89320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(964, 1131.81775, -332.58005, 72.88200,   0.00000, 0.00000, 185.39998);
	CreateDynamicObject(19386, 1134.27527, -341.60611, 74.58290,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1415, 1134.68555, -347.33585, 72.99973,   0.00000, 0.00000, -178.61977);
	CreateDynamicObject(1439, 1132.74731, -347.56427, 72.99944,   0.00000, 0.00000, 178.26006);
	CreateDynamicObject(12986, 1130.01062, -336.89389, 74.33800,   0.00000, 0.00000, 0.00000);

	//mapping theo
	CreateDynamicObject(19129, 1429.45068, 2782.36768, 13.90241,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19129, 1429.31641, 2765.37964, 13.90241,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16151, 1428.88342, 2787.97510, 14.16355,   0.00000, 0.00000, 0.41735);
	CreateDynamicObject(11689, 1429.10168, 2773.88745, 13.97981,   0.00000, 0.00000, -89.88008);
	CreateDynamicObject(1978, 1424.52380, 2765.61694, 14.77602,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1426.61121, 2761.01953, 13.93853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1421.91138, 2789.06299, 13.93853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1428.66895, 2757.53735, 13.93853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1423.42957, 2758.03027, 13.93853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1421.30725, 2760.86548, 13.93853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1421.47681, 2765.60571, 13.93853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1428.34302, 2765.71045, 13.93853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1426.68652, 2782.91553, 13.93853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1421.80725, 2781.55542, 13.93853,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19159, 1422.71143, 2773.73315, 17.06652,   0.00000, 0.00000, 0.40604);
	CreateDynamicObject(6965, 1399.85413, 2774.24023, 13.54050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7448, 1427.30469, 2857.71875, 24.05469,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9241, 1517.43701, 2865.98730, 11.58650,   0.00000, 0.00000, 0.24030);
	CreateDynamicObject(9241, 1485.31982, 2866.25732, 11.58650,   0.00000, 0.00000, 0.24030);
	CreateDynamicObject(19126, 1529.97974, 2853.94165, 12.80299,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1473.30579, 2853.80957, 12.80299,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1529.80237, 2878.16162, 12.80299,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1505.07397, 2878.01587, 12.80299,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1505.38708, 2853.52222, 12.80299,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1497.91858, 2853.84888, 12.80299,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1497.79871, 2878.50952, 12.80299,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 1472.83118, 2878.42212, 12.80299,   0.00000, 0.00000, 0.00000);

	//mapping ferdi
	CreateDynamicObject(9320, 280.96820, -1152.63379, 85.13540,   0.00000, 0.00000, 132.87680);
	CreateDynamicObject(16362, 320.92905, -1139.63318, 82.91995,   0.00000, 0.00000, 43.44000);
	CreateDynamicObject(982, 329.99442, -1142.23303, 80.65164,   0.00000, 0.00000, 43.47959);
	CreateDynamicObject(982, 316.42459, -1127.91907, 80.65164,   0.00000, 0.00000, 43.47959);
	CreateDynamicObject(984, 302.95630, -1123.04980, 80.51069,   0.00000, 0.00000, 313.31802);
	CreateDynamicObject(984, 334.15097, -1155.87854, 80.51069,   0.00000, 0.00000, 313.31802);
	CreateDynamicObject(10244, 334.82544, -1157.37195, 82.50312,   0.00000, 0.00000, 43.94779);
	CreateDynamicObject(3472, 312.62259, -1194.21838, 79.87875,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 329.04568, -1180.69641, 79.87875,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 331.06015, -1157.68884, 86.43533,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 303.42926, -1128.52405, 86.43533,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 338.35593, -1150.81104, 86.46073,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 310.72818, -1121.58472, 86.46073,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3934, 330.77847, -1149.74084, 85.26660,   0.00000, 0.00000, 43.50387);
	CreateDynamicObject(3934, 310.18811, -1128.01990, 85.26660,   0.00000, 0.00000, 43.50387);
	CreateDynamicObject(3934, 320.78040, -1139.19788, 85.26660,   0.00000, 0.00000, 43.50387);
	CreateDynamicObject(19419, 328.36304, -1155.06213, 85.50090,   90.00000, 0.00000, 313.00000);
	CreateDynamicObject(19419, 316.77792, -1142.90698, 85.50090,   90.00000, 0.00000, 313.00000);
	CreateDynamicObject(19419, 305.36935, -1130.83838, 85.50090,   90.00000, 0.00000, 313.00000);
	CreateDynamicObject(19126, 316.96317, -1142.81812, 86.54426,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19126, 324.30939, -1135.88965, 86.54426,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 312.62259, -1194.21838, 79.87875,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 349.38928, -1162.53625, 80.68777,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 235.25162, -1155.97522, 77.85869,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 292.68634, -1104.40161, 81.69782,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14582, 281.79788, -1205.41077, 83.16592,   0.00000, 0.00000, 44.27922);
	CreateDynamicObject(14582, 262.98465, -1183.23071, 82.16194,   0.00000, 0.00000, 44.27922);
	CreateDynamicObject(16152, 270.91019, -1197.33008, 79.43720,   0.00000, 0.00000, 40.11320);
	CreateDynamicObject(1824, 276.49420, -1196.05371, 79.28720,   0.00000, 0.00000, 130.00000);
	CreateDynamicObject(1824, 271.74585, -1190.42664, 79.28720,   0.00000, 0.00000, 130.00000);

	//mappingan awang
	CreateDynamicObject(19588, 731.92224, -1433.94775, 18.61003,   0.00000, -12.00000, 90.00000);
	CreateDynamicObject(14781, 741.68451, -1424.59338, 20.15256,   0.00000, 0.00000, 1.56000);

	//mapping kuchiyose
	CreateDynamicObject(9482, 1568.37988, -1881.09338, 18.65870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9482, 1210.31177, -2037.15698, 73.77730,   0.00000, 0.00000, 0.00000);
	
	//Newbie School
	CreateDynamicObject(19369, 1155.07996, -626.00000, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1156.59998, -627.65002, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1159.78003, -627.65997, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1162.97998, -627.65997, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19379, 1160.40002, -622.78003, 1088.83997,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1502, 1155.07996, -624.44000, 1088.88000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 1155.02002, -621.40997, 1088.88000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19369, 1166.17004, -627.65997, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1165.68994, -626.03003, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1165.69995, -622.82001, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1165.68994, -619.62000, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1164.06006, -617.92999, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1160.85999, -617.92999, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1157.66003, -617.91998, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1155.04004, -619.82001, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1155.05005, -616.62000, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1156.59998, -617.94000, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1155.06006, -613.96997, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1155.08997, -612.39001, 1088.88000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 1155.04004, -609.34998, 1088.88000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19379, 1160.33997, -613.03998, 1088.83997,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19369, 1165.67004, -616.29999, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1165.67004, -613.09998, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1165.66003, -609.91998, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1164.06995, -608.38000, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1160.88000, -608.37000, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1157.68005, -608.38000, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1156.02002, -608.35999, 1090.43994,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1155.03003, -607.78003, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1156.56006, -629.35999, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1156.55005, -633.01001, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1158.12000, -634.53003, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1159.63000, -632.91998, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1159.63000, -629.73999, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1161.29004, -628.03003, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1164.48999, -628.03003, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1167.69995, -628.03998, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1168.93005, -629.60999, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1168.93005, -632.78003, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1168.93005, -635.96002, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1999, 1164.08997, -623.69000, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1165.18005, -623.16998, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1999, 1164.08997, -613.57001, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1165.15002, -613.15002, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14455, 1164.82996, -628.32001, 1090.41003,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14455, 1171.05005, -628.38000, 1090.41003,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2001, 1165.81995, -628.35999, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1167.43005, -637.65997, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1159.65002, -636.19000, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1161.29004, -637.71002, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 1162.82996, -637.71997, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1165.84998, -637.66998, 1088.93005,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(4604, 1314.80005, -569.12000, 1093.00000,   -0.05000, 179.22000, 9.44000);
	CreateDynamicObject(19369, 1170.65002, -637.65002, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1173.85999, -637.65002, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1175.38000, -635.96002, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1180.22998, -636.38000, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1180.21997, -633.17999, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1181.72998, -631.48999, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1175.39001, -632.77002, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1175.38000, -629.57001, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1177.04004, -628.03998, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1181.81995, -626.82001, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1184.97998, -626.82001, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1180.20996, -628.33002, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1180.16003, -629.89001, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3851, 1180.14001, -629.96997, 1093.43994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1184.75000, -631.46997, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1186.34998, -632.78003, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1188.64001, -628.37000, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1188.18005, -626.79999, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1998, 1186.85999, -628.58002, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1727, 1179.43994, -632.20001, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2001, 1179.89001, -631.69000, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1179.85999, -628.46997, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1727, 1179.42004, -633.64001, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1727, 1179.43005, -635.07001, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1727, 1179.42004, -636.42999, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2001, 1179.85999, -637.81000, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1180.22998, -639.59003, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(0, 1178.13000, -635.76001, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1827, 1177.17004, -635.01001, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1727, 1178.16003, -628.84998, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1727, 1176.56995, -628.84998, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1175.81006, -628.44000, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1178.01001, -641.09998, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1174.81006, -641.10999, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 1168.16003, -630.15002, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1726, 1168.18994, -632.73999, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2001, 1168.30005, -635.47998, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1827, 1165.63000, -633.96002, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1827, 1165.94995, -631.38000, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1165.72998, -634.21997, 1089.34998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1165.55005, -633.78998, 1089.34998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1166.41003, -631.45001, 1089.34998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1164.10999, -623.67999, 1089.73999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1164.16003, -613.41998, 1089.73999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1165.91003, -633.60999, 1089.34998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1166.00000, -630.95001, 1089.34998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 1159.93994, -632.51001, 1090.46997,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2001, 1160.01001, -631.63000, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2002, 1160.21997, -630.96002, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2007, 1160.29004, -629.92999, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 1163.76001, -632.28998, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 1163.78003, -634.83002, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1150.18994, -626.73999, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1150.18994, -629.92999, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1148.56006, -631.44000, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1148.58997, -634.62000, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1150.06995, -636.31000, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1151.41003, -639.16998, 1090.43005,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(19369, 1154.33997, -639.50000, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1155.90002, -641.02002, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1157.54004, -641.15997, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1160.71997, -641.14001, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1166.89001, -641.14001, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 1162.29004, -641.15002, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1165.29004, -641.09998, 1088.93005,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19369, 1170.08997, -641.14001, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 1171.68994, -641.10999, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1181.22998, -641.10999, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 1165.01001, -637.71002, 1093.41003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1172.68005, -641.09998, 1093.09998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1170.09998, -642.76001, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1171.08997, -645.46002, 1090.43005,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(19369, 1173.08997, -645.35999, 1090.43005,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(19369, 1174.06006, -642.69000, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4604, 1162.20996, -626.67999, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4604, 1162.22998, -626.67999, 1092.01001,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19369, 1149.41003, -608.39001, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1150.19995, -623.59003, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1150.18994, -620.39001, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1150.22998, -614.03998, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1150.29004, -607.89001, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1172.66003, -641.07001, 1093.09998,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(3515, 1152.35999, -637.07001, 1088.91003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1150.07996, -639.48999, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1151.15002, -639.50000, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1152.31995, -634.75000, 1089.45996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1154.63000, -637.27002, 1089.45996,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2001, 1154.56006, -634.96997, 1088.88000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 1156.29004, -633.46002, 1090.47998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 1156.70996, -640.91998, 1090.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1162.07996, -640.85999, 1088.91003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1165.44995, -640.89001, 1088.91003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 1166.30005, -640.89001, 1090.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1171.55005, -640.91998, 1088.91003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1173.48999, -640.90997, 1088.91003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1744, 1170.05005, -643.27002, 1090.46997,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1750, 1170.05005, -643.27002, 1090.79004,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1775, 1158.18005, -635.06000, 1090.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1159.28003, -635.02002, 1088.91003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 1155.08997, -620.71997, 1093.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 1155.02002, -613.00000, 1093.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 1163.13000, -641.13000, 1093.41003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1147.07996, -636.28998, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1147.07996, -639.47998, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1147.06995, -642.67999, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1145.39001, -644.16998, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1142.18994, -644.16998, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1139.02002, -644.16998, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1145.43005, -637.92999, 1088.22998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1142.22998, -637.94000, 1088.22998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1139.03003, -637.94000, 1088.22998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1137.51001, -639.64001, 1088.22998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1137.51001, -640.48999, 1088.21997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1137.47998, -642.04999, 1087.46997,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19369, 1135.84998, -644.17999, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1147.73999, -638.01001, 1091.27002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1143.63000, -638.00000, 1091.27002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1139.54004, -637.92999, 1091.27002,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1137.50000, -639.97998, 1091.27002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1137.51001, -645.19000, 1088.21997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1137.52002, -644.09998, 1091.27002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1145.41003, -631.44000, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1143.70996, -629.92999, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1143.72998, -626.77002, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1142.07996, -625.22998, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1138.88000, -625.23999, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1135.67004, -625.23999, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1132.66003, -644.20001, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1129.45996, -644.19000, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1126.93005, -642.96002, 1090.43005,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(19369, 1125.90002, -640.14001, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1125.91003, -636.92999, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1125.91003, -633.75000, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1125.92004, -630.54999, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1127.30005, -628.22998, 1090.43005,   0.00000, 0.00000, -60.00000);
	CreateDynamicObject(19369, 1130.06995, -626.65002, 1090.43005,   0.00000, 0.00000, -60.00000);
	CreateDynamicObject(19369, 1132.55005, -625.65997, 1090.43005,   0.00000, 0.00000, 105.00000);
	CreateDynamicObject(1775, 1143.08997, -630.40002, 1089.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1776, 1143.06006, -628.96002, 1089.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2001, 1143.13000, -631.34998, 1088.91003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1133.17004, -642.52002, 1089.01001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1129.20996, -641.82001, 1089.01001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1131.40002, -638.97998, 1089.01001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1135.08997, -639.37000, 1089.01001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1128.02002, -637.66998, 1089.01001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1126.34998, -641.46002, 1088.91003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1137.09998, -643.67999, 1088.91003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1130.51001, -634.84998, 1089.01001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1127.54004, -632.56000, 1089.01001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1128.85999, -629.37000, 1089.01001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1131.82996, -631.57001, 1089.01001,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(1432, 1132.67004, -628.03998, 1089.01001,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(1432, 1135.54004, -629.41998, 1089.01001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1139.34998, -630.41998, 1089.01001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1138.16003, -627.12000, 1089.01001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1135.00000, -632.63000, 1089.01001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1133.75000, -635.85999, 1089.01001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1138.62000, -633.90997, 1089.01001,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(1432, 1141.41003, -626.97998, 1089.01001,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(1432, 1141.85999, -633.34003, 1089.01001,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(1715, 1187.93005, -628.59003, 1088.91003,   0.00000, 0.00000, -100.00000);
	CreateDynamicObject(1715, 1185.63000, -628.58002, 1088.91003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2001, 1180.75000, -629.62000, 1088.91003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1181.06006, -629.19000, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1726, 1183.87000, -627.20001, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14855, 1155.59998, -600.04999, 1093.41003,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2001, 1154.20996, -608.40997, 1088.91003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1151.31995, -608.40002, 1088.91003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1156.08997, -603.66998, 1088.83997,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19369, 1156.68994, -606.27002, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1159.85999, -606.27002, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1161.40002, -604.72998, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1161.25000, -601.56000, 1090.43005,   0.00000, 0.00000, 5.00000);
	CreateDynamicObject(19379, 1145.63000, -603.56000, 1088.83997,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1145.62000, -593.95001, 1088.83997,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1156.12000, -594.03003, 1088.83997,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1502, 1149.83997, -599.09003, 1088.91003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1151.38000, -597.45001, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1154.51001, -597.44000, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1156.03003, -595.77002, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1157.68994, -594.39001, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1159.14001, -596.08002, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1160.14001, -598.84003, 1090.43005,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(19369, 1148.14001, -597.46002, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1146.03003, -598.65997, 1090.43005,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(19369, 1145.05005, -601.34003, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1146.34998, -603.71997, 1090.43005,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(19369, 1149.03003, -605.42999, 1090.43005,   0.00000, 0.00000, 55.00000);
	CreateDynamicObject(1536, 1145.12000, -602.84003, 1088.90002,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1536, 1145.08997, -599.84003, 1088.90002,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1714, 1156.06006, -601.19000, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1157.81995, -601.16998, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1159.66003, -601.12000, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1152.57996, -600.67999, 1088.93005,   0.00000, 0.00000, -35.00000);
	CreateDynamicObject(2190, 1151.89001, -601.84998, 1089.90002,   0.00000, 0.00000, 150.00000);
	CreateDynamicObject(2190, 1156.52002, -602.63000, 1089.90002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2190, 1158.22998, -602.64001, 1089.90002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2190, 1160.08997, -602.65002, 1089.90002,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2007, 1156.64001, -594.97998, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2007, 1157.58997, -594.97998, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2007, 1158.54004, -594.97998, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2002, 1154.38000, -598.08002, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1154.93994, -598.09003, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2000, 1155.47998, -598.09998, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1156.09998, -597.89001, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2007, 1158.54004, -597.10999, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2007, 1158.53003, -596.15002, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1722, 1156.51001, -616.03003, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2209, 1157.56995, -616.23999, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1156.47998, -615.13000, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2209, 1160.17004, -616.22998, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1159.01001, -616.03003, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1722, 1159.02002, -615.14001, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2209, 1162.67004, -616.22998, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1161.52002, -615.14001, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1722, 1161.51001, -616.04999, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2209, 1162.67004, -611.22998, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1161.42004, -611.07001, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1722, 1161.43005, -610.15002, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2209, 1160.17004, -611.22998, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1158.92004, -611.07001, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1722, 1158.93005, -610.15002, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2209, 1157.67004, -611.22998, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1156.42004, -611.07001, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1722, 1156.43005, -610.15002, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14455, 1160.52002, -617.69000, 1090.46997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 1162.67004, -618.16998, 1090.46997,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1271, 1172.12000, -645.34998, 1089.22998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 1171.34998, -644.57001, 1089.22998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 1171.34998, -644.57001, 1089.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 1171.34998, -644.57001, 1090.60999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 1172.35999, -644.47998, 1089.22998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 1173.25000, -644.00000, 1089.22998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 1172.12000, -645.34998, 1089.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 1172.35999, -644.47998, 1089.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1264, 1170.76001, -641.84998, 1089.34998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1264, 1170.76001, -642.66998, 1089.34998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1264, 1171.21997, -642.32001, 1089.34998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1264, 1171.34998, -641.63000, 1089.34998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1150.30005, -612.44000, 1088.91003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 1150.27002, -609.41998, 1088.91003,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3851, 1150.28003, -613.03003, 1093.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 1145.02002, -613.10999, 1088.83997,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1144.98999, -620.45001, 1088.84998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1134.54004, -613.06000, 1088.84998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1135.16003, -603.54999, 1088.84998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1134.56995, -620.56000, 1088.83997,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19369, 1146.84998, -607.21997, 1090.43005,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(19369, 1144.81006, -604.79999, 1090.43005,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(19369, 1142.90002, -604.44000, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1139.68994, -604.45001, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1137.62000, -605.58002, 1090.43005,   0.00000, 0.00000, -40.00000);
	CreateDynamicObject(19369, 1136.68994, -608.21002, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1136.68994, -611.40002, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1136.67004, -614.57001, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1139.00000, -614.16998, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1142.20996, -614.16998, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1145.35999, -614.15997, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1148.56006, -614.16998, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1135.81006, -614.17999, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1999, 1138.56995, -608.84003, 1088.93005,   0.66000, 0.48000, 270.00000);
	CreateDynamicObject(1714, 1137.50000, -608.96997, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1138.56995, -609.06000, 1089.73999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 1145.05005, -613.85999, 1090.46997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, 1139.33997, -613.87000, 1090.46997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2209, 1140.06995, -605.84003, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2209, 1142.56995, -605.84003, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2209, 1144.98999, -606.92999, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2209, 1145.33997, -610.60999, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2209, 1147.94995, -610.54999, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2209, 1142.69995, -610.59998, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2209, 1140.08997, -610.59998, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1722, 1141.33997, -611.65002, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1141.34998, -610.78003, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1141.29004, -606.84003, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1141.30005, -606.00000, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1143.72998, -605.92999, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1143.76001, -606.90002, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1146.14001, -608.04999, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1146.15002, -607.15997, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1143.89001, -610.85999, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1143.89001, -611.72998, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1146.52002, -610.76001, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1146.56006, -611.65997, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1149.13000, -610.69000, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1149.17004, -611.64001, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1145.09998, -608.01001, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1145.09998, -607.00000, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1142.80005, -606.89001, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1142.77002, -605.95001, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1140.23999, -605.90997, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1140.25000, -606.77002, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1142.83997, -610.75000, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1142.82996, -611.69000, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1140.13000, -611.75000, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1140.08997, -610.79999, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1145.33997, -610.70001, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1145.31995, -611.70001, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1148.03003, -611.67999, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1148.03003, -610.79999, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1162.63000, -610.15002, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1162.59998, -611.17999, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1160.12000, -611.10999, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1160.09998, -610.10999, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1157.64001, -610.03003, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1157.59998, -611.07001, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1157.47998, -615.23999, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1157.43005, -616.13000, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1160.08997, -616.07001, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1160.10999, -615.16998, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1162.59998, -615.15997, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1162.56995, -616.07001, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19370, 1148.31006, -626.84998, 1088.84998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 1148.31006, -629.84998, 1088.84998,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 1145.56006, -629.78998, 1088.85999,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19370, 1145.53003, -626.78003, 1088.83997,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19369, 1140.00000, -615.84003, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1140.00000, -619.03998, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1138.47998, -620.72998, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1137.03003, -620.47998, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1137.03003, -623.63000, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1140.00000, -622.32001, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1495, 1139.88000, -623.97998, 1088.93005,   0.00000, 0.00000, 350.00000);
	CreateDynamicObject(14455, 1149.96997, -630.62000, 1090.47998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 1149.95996, -624.90997, 1090.47998,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 1144.02002, -626.23999, 1090.47998,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(0, 1148.09998, -628.34003, 1088.94995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1827, 1147.05005, -628.70001, 1088.93994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1148.06006, -630.67999, 1088.93005,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2001, 1145.48999, -630.83002, 1088.94995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1148.70996, -630.77002, 1088.94995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1726, 1146.07996, -626.71002, 1088.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1145.41003, -626.78998, 1088.94995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1148.69995, -626.67999, 1088.94995,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1146.88000, -628.20001, 1089.34998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1147.39001, -628.38000, 1089.34998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1146.63000, -629.19000, 1089.34998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1147.19995, -628.92999, 1089.34998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1744, 1138.20996, -620.66998, 1090.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1744, 1138.20996, -620.66998, 1091.25000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1139.14001, -620.92999, 1090.57996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1138.52002, -620.91998, 1090.57996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1138.50000, -620.87000, 1090.64001,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1138.50000, -620.87000, 1090.68994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 1138.50000, -620.87000, 1090.57996,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 1137.52002, -624.48999, 1089.28003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 1137.52002, -624.48999, 1089.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 1137.98999, -623.57001, 1089.28003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 1137.66003, -622.59998, 1089.28003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 1137.78003, -621.71002, 1089.28003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 1137.78003, -621.71002, 1089.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1271, 1137.66003, -622.59998, 1089.93005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1999, 1141.68005, -618.71002, 1088.93005,   0.66000, 0.48000, 270.00000);
	CreateDynamicObject(1714, 1140.68005, -618.89001, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2894, 1141.66003, -618.87000, 1089.73999,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2209, 1143.05005, -615.52002, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2209, 1143.06006, -618.82001, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2209, 1142.98999, -622.10999, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2209, 1145.41003, -622.12000, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2209, 1145.43005, -618.82001, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2209, 1145.41003, -615.44000, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2209, 1147.60999, -615.42999, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2209, 1147.57996, -618.77002, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2209, 1147.56006, -622.09003, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1722, 1144.25000, -615.64001, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1144.27002, -616.59998, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1146.59998, -615.62000, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1146.63000, -616.46997, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1146.60999, -619.09003, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1146.65002, -619.96002, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1144.32996, -619.03003, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1144.31995, -619.84998, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1144.15002, -622.45001, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1144.18005, -623.22998, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1146.59998, -622.32001, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1146.64001, -623.14001, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1148.75000, -623.21002, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1148.76001, -622.35999, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1148.72998, -619.78003, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1148.71997, -618.88000, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1148.82996, -616.44000, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1148.81006, -615.40002, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1165.87000, -642.84003, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1165.85999, -646.03003, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1160.39001, -642.84003, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1160.41003, -646.03003, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1160.42004, -649.21002, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1165.83997, -649.22998, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1164.18994, -650.65002, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1160.98999, -650.65002, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1727, 1161.25000, -643.17999, 1088.88000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2001, 1160.97998, -641.59998, 1088.91003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1727, 1161.26001, -644.57001, 1088.88000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1727, 1165.09998, -643.50000, 1088.88000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1727, 1165.09998, -642.02002, 1088.88000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2001, 1165.53003, -641.51001, 1088.91003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1165.31006, -645.42999, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19369, 1160.59998, -645.39001, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 1162.19995, -645.44000, 1088.81006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 1165.09998, -645.34998, 1093.41003,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1999, 1162.64001, -648.42999, 1088.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1671, 1163.21997, -649.28998, 1089.18994,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1671, 1163.12000, -647.46002, 1089.18994,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2002, 1165.20996, -646.34003, 1088.71997,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2001, 1165.50000, -645.72998, 1088.81006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2007, 1165.17004, -649.69000, 1088.69995,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2007, 1161.04004, -648.54999, 1088.69995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2007, 1161.03003, -649.53998, 1088.69995,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2001, 1165.47998, -645.06000, 1088.91003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1160.92004, -645.12000, 1088.91003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2001, 1160.78003, -650.29999, 1088.81006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2209, 1162.66003, -620.94000, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2209, 1162.63000, -626.42999, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2209, 1160.20996, -626.40997, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2209, 1160.15002, -620.91998, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2209, 1157.96997, -620.96997, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2209, 1157.94995, -626.46002, 1088.93005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1722, 1161.40002, -619.85999, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1722, 1161.33997, -620.71997, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1722, 1159.00000, -620.78003, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1722, 1158.93005, -619.84998, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1722, 1161.45996, -625.39001, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1722, 1161.41003, -626.31000, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1722, 1158.91003, -626.21997, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1722, 1158.89001, -625.40002, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1722, 1156.73999, -626.34003, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1722, 1156.76001, -625.38000, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1722, 1156.80005, -620.70001, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1722, 1156.73999, -619.72998, 1088.93005,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1162.50000, -619.84998, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1162.54004, -620.70001, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1160.06995, -620.76001, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1160.07996, -619.87000, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1157.91003, -620.72998, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1157.91003, -619.84998, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1162.64001, -625.39001, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1162.64001, -626.34998, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1160.05005, -626.10999, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1160.09998, -625.26001, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1157.84998, -625.31000, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2894, 1157.80005, -626.35999, 1089.73999,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1502, 1150.23999, -618.65997, 1088.93994,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, 1150.18994, -615.63000, 1088.93994,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19369, 1150.18994, -620.22998, 1090.42004,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2414, 1142.16003, -640.87000, 1088.88000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2414, 1140.16003, -640.85999, 1088.88000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2414, 1144.17004, -640.88000, 1088.88000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2414, 1146.15002, -640.88000, 1088.88000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2414, 1148.10999, -640.87000, 1088.88000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19369, 1188.64001, -631.57001, 1090.43005,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19369, 1187.87000, -631.17999, 1090.43005,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2001, 1184.00000, -629.65002, 1088.91003,   0.00000, 0.00000, 0.00000);
	//City Hall
	CreateDynamicObject(3851,1490.1999500,-1751.3000500,16.4000000,0.0000000,0.0000000,270.0000000); //object(carshowwin_sfsx) (1)
	CreateDynamicObject(3851,1490.1999500,-1751.3000500,20.0000000,0.0000000,0.0000000,270.0000000); //object(carshowwin_sfsx) (2)
	CreateDynamicObject(3851,1488.8000500,-1751.4000200,24.0000000,0.0000000,0.0000000,270.0000000); //object(carshowwin_sfsx) (4)
	CreateDynamicObject(3851,1473.1999500,-1751.0000000,16.4000000,0.0000000,0.0000000,270.0000000); //object(carshowwin_sfsx) (5)
	CreateDynamicObject(3851,1473.1999500,-1751.0000000,19.9000000,0.0000000,0.0000000,270.0000000); //object(carshowwin_sfsx) (6)
	CreateDynamicObject(3851,1473.0999800,-1751.0000000,23.5000000,0.0000000,0.0000000,270.0000000); //object(carshowwin_sfsx) (7)
	CreateDynamicObject(3851,1474.0999800,-1772.6999500,24.5000000,0.0000000,0.0000000,0.0000000); //object(carshowwin_sfsx) (8)
	CreateDynamicObject(3851,1472.8000500,-1751.1999500,25.0000000,0.0000000,0.0000000,270.0000000); //object(carshowwin_sfsx) (9)
	CreateDynamicObject(970,1483.9000200,-1749.6999500,15.0000000,0.0000000,0.0000000,90.0000000); //object(fencesmallb) (1)
	CreateDynamicObject(970,1478.8000500,-1749.8000500,15.0000000,0.0000000,0.0000000,90.0000000); //object(fencesmallb) (2)
	CreateDynamicObject(970,1486.0000000,-1747.8000500,14.9000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (3)
	CreateDynamicObject(970,1490.0999800,-1747.8000500,14.9000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (5)
	CreateDynamicObject(970,1494.1999500,-1747.8000500,14.9000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (6)
	CreateDynamicObject(970,1476.6999500,-1747.8000500,15.0000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (7)
	CreateDynamicObject(970,1472.5999800,-1747.8000500,14.9000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (9)
	CreateDynamicObject(970,1468.6999500,-1747.8000500,15.0000000,0.0000000,0.0000000,0.0000000); //object(fencesmallb) (11)
	//freebike
	CreateVehicle(509, 1560.2975, -2308.9304, 13.0330, 92.9400, -1, -1, 50);
	CreateVehicle(509, 1560.3363, -2315.4529, 13.0330, 92.9400, -1, -1, 50);
	CreateVehicle(509, 1560.3163, -2312.1128, 13.0330, 92.9400, -1, -1, 50);
	CreateVehicle(509, 1560.2175, -2318.7739, 13.0330, 92.9400, -1, -1, 50);
	CreateVehicle(509, 1559.9294, -2322.0374, 13.0330, 92.9400, -1, -1, 50);
	CreateVehicle(509, 1560.0815, -2325.0569, 13.0330, 92.9400, -1, -1, 50);
	CreateVehicle(509, 1559.9534, -2328.5159, 13.0330, 92.9400, -1, -1, 50);
	CreateVehicle(509, 1559.9900, -2331.6572, 13.0330, 92.9400, -1, -1, 50);
	CreateVehicle(509, 1559.9297, -2334.9771, 13.0330, 92.9400, -1, -1, 50);
	//garbageman
	CreateVehicle(408, 2182.8296, -1972.0874, 13.8644, -181.0200, -1, -1, 50);
	CreateVehicle(408, 2187.9453, -1972.1521, 13.8644, -181.0200, -1, -1, 50);
	CreateVehicle(408, 2178.0894, -1972.1075, 13.8644, -181.0200, -1, -1, 50);
	CreateVehicle(408, 2173.3484, -1972.0458, 13.8644, -181.0200, -1, -1, 50);
	CreateVehicle(408, 2168.6072, -1972.0043, 13.8644, -181.0200, -1, -1, 50);
	CreateVehicle(408, 2163.5676, -1971.9614, 13.8644, -181.0200, -1, -1, 50);
	CreateVehicle(509, 1560.0177, -2338.2708, 13.0330, 92.9400, -1, -1, 50);
	//Class room
	CreateDynamicObject(19506, -1368.01477, -1116.14917, 9851.91992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1506, -1373.92432, -1118.19971, 9850.06250,   0.00000, 0.00000, 90.65997);
	CreateDynamicObject(19172, -1365.28308, -1122.32312, 9851.37793,   0.00000, 0.00000, 180.17987);
	CreateDynamicObject(19174, -1369.00000, -1122.30273, 9851.43652,   0.00000, 0.00000, 179.88016);
	CreateDynamicObject(1651, -1374.14941, -1112.14722, 9851.42578,   0.00000, 0.00000, 359.61688);
	CreateDynamicObject(1651, -1371.09546, -1110.57056, 9851.42578,   0.00000, 0.00000, 269.71841);
	CreateDynamicObject(14527, -1368.19434, -1116.64319, 9850.87109,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1651, -1374.18005, -1119.52527, 9851.42578,   0.00000, 0.00000, 357.77139);
	CreateDynamicObject(1506, -1360.40210, -1120.07971, 9850.06250,   0.00000, 0.00000, 90.65997);
	CreateDynamicObject(1651, -1372.81531, -1122.34424, 9851.42578,   0.00000, 0.00000, 90.09138);
	CreateDynamicObject(1651, -1362.30579, -1122.35034, 9851.42578,   0.00000, 0.00000, 90.11986);
	CreateDynamicObject(1651, -1360.29272, -1113.31787, 9851.42578,   0.00000, 0.00000, 179.87996);
	CreateDynamicObject(3077, -1361.02979, -1114.25769, 9849.65234,   0.06000, 0.00000, 90.38969);
	CreateDynamicObject(2558, -1361.62769, -1121.92346, 9850.74121,   0.00000, 0.00000, 180.37628);
	CreateDynamicObject(2558, -1372.01208, -1121.94568, 9850.74121,   0.00000, 0.00000, 180.42694);
	CreateDynamicObject(2558, -1373.71985, -1119.98389, 9850.74121,   0.00000, 0.00000, 90.69133);
	CreateDynamicObject(2558, -1373.72327, -1112.90662, 9850.74121,   0.00000, 0.00000, 90.69133);
	CreateDynamicObject(2558, -1371.89160, -1110.99158, 9850.74121,   0.00000, 0.00000, 0.01898);
	CreateDynamicObject(2558, -1360.70789, -1112.89136, 9850.74121,   0.00000, 0.00000, 269.67560);
	CreateDynamicObject(1963, -1362.96680, -1120.35522, 9850.53418,   0.00000, 0.00000, 223.02820);
	CreateDynamicObject(2356, -1361.93237, -1121.40295, 9850.10059,   -0.18000, -0.18000, 0.00000);
	CreateDynamicObject(2180, -1365.05237, -1119.19202, 9850.07715,   0.00000, 0.00000, 88.63339);
	CreateDynamicObject(2180, -1364.96643, -1114.49060, 9850.07715,   0.00000, 0.00000, 88.63339);
	CreateDynamicObject(2180, -1367.66199, -1114.48877, 9850.07715,   0.00000, 0.00000, 88.63339);
	CreateDynamicObject(2180, -1370.26001, -1114.50330, 9850.07715,   0.00000, 0.00000, 88.63339);
	CreateDynamicObject(2180, -1370.30737, -1119.19678, 9850.07715,   0.00000, 0.00000, 88.63339);
	CreateDynamicObject(2180, -1367.76001, -1119.19287, 9850.07715,   0.00000, 0.00000, 88.63339);
	CreateDynamicObject(2310, -1366.31702, -1118.82507, 9850.47461,   0.00000, 0.00000, 177.57307);
	CreateDynamicObject(2310, -1366.28333, -1114.08716, 9850.47168,   0.00000, 0.00000, 177.57307);
	CreateDynamicObject(2310, -1368.74390, -1113.97205, 9850.48633,   0.00000, 0.00000, 177.57307);
	CreateDynamicObject(2310, -1371.58801, -1113.84485, 9850.57520,   0.00000, 0.00000, 177.57307);
	CreateDynamicObject(2310, -1371.49353, -1118.69189, 9850.57520,   0.00000, 0.00000, 177.57307);
	CreateDynamicObject(2310, -1368.89014, -1118.77881, 9850.56348,   0.00000, 0.00000, 177.57307);
	CreateDynamicObject(2190, -1363.10657, -1120.51538, 9850.93652,   0.00000, 0.00000, 42.00854);
	CreateDynamicObject(2894, -1362.29028, -1120.06226, 9850.93848,   0.00000, 0.00000, 12.34557);
	CreateDynamicObject(1742, -1363.74902, -1110.58679, 9850.11719,   0.00000, 0.00000, 0.00000);

	//ASGH ((BY FERDI))
	CreateDynamicObject(8417, 1230.16, -1286.16, 12.08,	0.00, 180.00, 0.00);
	CreateDynamicObject(8417, 1231.98, -1366.14, 12.08,	0.00, 180.00, 0.00);
	CreateDynamicObject(8417, 1231.38, -1326.16, 12.08,	0.00, 180.00, 0.00);
	CreateDynamicObject(3660, 1234.02, -1291.81, 14.75, 0.00, 0.00, 359.72);
	CreateDynamicObject(3660, 1217.38, -1320.31, 14.75, 0.00, 0.00, 270.00);
	CreateDynamicObject(3660, 1245.12, -1300.92, 14.75, 0.00, 0.00, 270.00);
	CreateDynamicObject(4642, 1219.92, -1291.95, 14.17, 0.00, 0.00, 360.00);
	CreateDynamicObject(1892, 1222.13, -1291.67, 12.10, 0.00, 0.00, 0.00);
	CreateDynamicObject(3660, 1245.18, -1365.61, 14.75, 0.00, 0.00, 270.00);
	CreateDynamicObject(3660, 1245.10, -1320.56, 14.75, 0.00, 0.00, 270.00);
	CreateDynamicObject(3660, 1245.09, -1340.19, 14.75, 0.00, 0.00, 270.00);
	CreateDynamicObject(3881, 1243.19, -1381.72, 13.97,	0.00, 0.00, 0.00);
	CreateDynamicObject(1892, 1244.84, -1350.64, 12.10,	0.00, 0.00, 270.00);
	CreateDynamicObject(4642, 1244.84, -1354.04, 13.81,	0.00, 0.00, 270.00);
	CreateDynamicObject(3660, 1217.39, -1300.69, 14.75,	0.00, 0.00, 270.00);
	CreateDynamicObject(4642, 1217.12, -1334.22, 13.81, 0.00, 0.00, 89.70);
	CreateDynamicObject(1892, 1217.12, -1330.77, 12.10, 0.00, 0.00, 270.00);
	CreateDynamicObject(3660, 1217.26, -1345.90, 14.75, 0.00, 0.00, 269.64);
	CreateDynamicObject(3660, 1217.15, -1365.56, 14.75, 0.00, 0.00, 269.64);
	CreateDynamicObject(3881, 1218.75, -1380.99, 13.97, 0.00, 0.00, 179.84);
	CreateDynamicObject(1892, 1216.99, -1376.12, 12.10, 0.00, 0.00, 270.00);
	CreateDynamicObject(1892, 1244.79, -1376.04, 12.10, 0.00, 0.00, 270.00);
	CreateDynamicObject(10183, 1221.93, -1355.39, 12.14, 0.00, 0.00, 134.88);
	CreateDynamicObject(10183, 1222.40, -1313.38, 12.14, 0.00, 0.00, 135.08);
	CreateDynamicObject(10183, 1239.84, -1313.44, 12.14, 0.00, 0.00, 315.15);
	CreateDynamicObject(10183, 1239.69, -1353.91, 12.14, 0.00, 0.00, 315.15);
	CreateDynamicObject(8406, 1228.34, -1385.53, 17.67, 0.00, 0.00, 0.00);
	CreateDynamicObject(3934, 1161.69, -1317.44, 30.51, 0.00, 0.00, 359.01);
	CreateDynamicObject(1500, 1160.72, -1330.52, 30.46, 0.00, 0.00, 0.00);
	CreateDynamicObject(3934, 1161.49, -1303.07, 30.51, 0.00, 0.00, 359.01);
	CreateDynamicObject(618, 1217.29, -1371.02, 13.19, 0.00, 0.00, 0.00);
	CreateDynamicObject(618, 1217.28, -1356.46, 13.19, 0.00, 0.00, 0.00);
	CreateDynamicObject(618, 1217.59, -1338.28, 13.19, 0.00, 0.00, 0.00);
	CreateDynamicObject(618, 1217.61, -1317.66, 13.19, 0.00, 0.00, 0.00);
	CreateDynamicObject(618, 1217.53, -1294.76, 13.19, 0.00, 0.00, 0.00);
	CreateDynamicObject(618, 1234.09, -1292.30, 13.19, 0.00, 0.00, 0.00);
	CreateDynamicObject(618, 1244.99, -1298.64, 13.19, 0.00, 0.00, 0.00);
	CreateDynamicObject(618, 1244.75, -1321.34, 13.19, 0.00, 0.00, 0.00);
	CreateDynamicObject(618, 1244.88, -1340.88, 13.19, 0.00, 0.00, 0.00);
	CreateDynamicObject(618, 1244.60, -1364.90, 13.19, 0.00, 0.00, 0.00);

	//LSPD
	CreateDynamicObject(3749, 1544.8000488281, -1627.6999511719, 18.200000762939, 0, 0, 270);
	CreateDynamicObject(1251, 1544.6999511719, -1627.1999511719, 12.5, 0, 0, 0);
	CreateDynamicObject(987, 1539.8000488281, -1605.8000488281, 13.199999809265, 0, 0, 270);
	CreateDynamicObject(987, 1539.8000488281, -1602.5, 13.199999809265, 0, 0, 270);
	CreateDynamicObject(987, 1551.6999511719, -1602.5, 13.300000190735, 0, 0, 180);
	CreateDynamicObject(987, 1563.6999511719, -1602.5999755859, 13.300000190735, 0, 0, 179.99450683594);
	CreateDynamicObject(987, 1575.6999511719, -1602.5999755859, 13.300000190735, 0, 0, 179.99450683594);
	CreateDynamicObject(987, 1587.9000244141, -1602.6999511719, 13.300000190735, 0, 0, 180.5);
	CreateDynamicObject(987, 1599.9000244141, -1602.5999755859, 13.300000190735, 0, 0, 180.49987792969);
	CreateDynamicObject(987, 1608, -1602.5, 13.300000190735, 0, 0, 180.49987792969);
	CreateDynamicObject(987, 1608, -1614.1999511719, 13.300000190735, 0, 0, 89.749877929688);
	CreateDynamicObject(987, 1607.9000244141, -1626.1999511719, 13.300000190735, 0, 0, 89.747314453125);
	CreateDynamicObject(987, 1607.9000244141, -1638.0999755859, 13.300000190735, 0, 0, 89.747314453125);
	CreateDynamicObject(983, 1604.8000488281, -1638.0999755859, 16.60000038147, 0, 0, 90);
	CreateDynamicObject(983, 1604.8000488281, -1638.0999755859, 17.89999961853, 0, 0, 90);
	CreateDynamicObject(994, 1547, -1620.3000488281, 12.5, 0, 0, 0);
	CreateDynamicObject(994, 1553.4000244141, -1620.3000488281, 12.5, 0, 0, 0);
	CreateDynamicObject(994, 1559.8000488281, -1620.3000488281, 12.5, 358, 0, 0);
	CreateDynamicObject(994, 1566.1999511719, -1620.3000488281, 12.5, 357.99499511719, 0, 0);
	CreateDynamicObject(994, 1572.5999755859, -1620.3000488281, 12.5, 357.99499511719, 0, 0);
	CreateDynamicObject(1499, 1577.3000488281, -1637.3000488281, 12.60000038147, 0, 0, 90);
	CreateDynamicObject(970, 1539.5, -1654.4000244141, 13.10000038147, 0, 0, 90);
	CreateDynamicObject(970, 1539.5, -1657.6999511719, 13.10000038147, 0, 0, 90);
	CreateDynamicObject(970, 1539.5, -1661.9000244141, 13.10000038147, 0, 0, 90);
	CreateDynamicObject(970, 1539.5, -1666, 13.10000038147, 0, 0, 90);
	CreateDynamicObject(970, 1539.5, -1670.0999755859, 13.10000038147, 0, 0, 90);
	CreateDynamicObject(970, 1541.5999755859, -1672.1999511719, 13.10000038147, 0, 0, 178);
	CreateDynamicObject(737, 1544.6999511719, -1671.9000244141, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(737, 1544.4000244141, -1678.3000488281, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(970, 1541.5999755859, -1678.3000488281, 13.10000038147, 0, 0, 177.99499511719);
	CreateDynamicObject(970, 1539.5, -1680.3000488281, 13.10000038147, 0, 0, 269.99499511719);
	CreateDynamicObject(970, 1539.5, -1684.4000244141, 13.10000038147, 0, 0, 269.99450683594);
	CreateDynamicObject(970, 1539.5, -1688.5999755859, 13.10000038147, 0, 0, 269.99450683594);
	CreateDynamicObject(970, 1539.5, -1692.6999511719, 13.10000038147, 0, 0, 269.99450683594);
	CreateDynamicObject(970, 1539.5, -1696.8000488281, 13.10000038147, 0, 0, 269.99450683594);
	CreateDynamicObject(737, 1539.5999755859, -1699.3000488281, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(737, 1539.5999755859, -1652, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(870, 1542, -1688.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.9000244141, -1688.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.8000488281, -1689.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.6999511719, -1687.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.5, -1687.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1689.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1688.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.6999511719, -1688.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.6999511719, -1689.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1690, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.5, -1690.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.8000488281, -1690.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.0999755859, -1690.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.5999755859, -1690.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1690.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.5999755859, -1690.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1689.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1689.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1689.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1688.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1688.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1687.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1687.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1686.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1686.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1686.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1685.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1685.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1685.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1685.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1684.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1684.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1685.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1686.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.1999511719, -1688.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.0999755859, -1687.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.3000488281, -1687.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.1999511719, -1686.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.1999511719, -1686.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1686.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1686.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1686.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.4000244141, -1685.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1684.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1684.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.3000488281, -1683.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.5999755859, -1683.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.1999511719, -1683.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1683.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1684.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1685.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1683.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1683, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1682.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1691.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1690.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1690.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.6999511719, -1690.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1682.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.0999755859, -1681.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1681.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1681.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1681.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1680.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1680.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1680.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.0999755859, -1680, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1679.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.6999511719, -1680, 12.800000190735, 0, 0, 32);
	CreateDynamicObject(870, 1540.5999755859, -1679.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.5999755859, -1680.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.5999755859, -1681, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.5999755859, -1681.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.6999511719, -1681.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1692.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1691.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1692.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.6999511719, -1691.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.6999511719, -1691.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1692.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.6999511719, -1693.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.6999511719, -1692.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.1999511719, -1692.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.19921875, -1692.19921875, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.4000244141, -1691.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1690.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5999755859, -1689.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5999755859, -1689.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1688.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.1999511719, -1688.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.9000244141, -1691.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.9000244141, -1693.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.8000488281, -1693.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.8000488281, -1693.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542, -1693.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.0999755859, -1692.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.1999511719, -1692.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.9000244141, -1692.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.5999755859, -1693.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.4000244141, -1693.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.5999755859, -1692.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542, -1692.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.1999511719, -1692.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.3000488281, -1692.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.2998046875, -1692.7998046875, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.6999511719, -1692.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1692, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.8000488281, -1691.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1693, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.4000244141, -1693.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542, -1693.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.0999755859, -1693.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1693.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.5, -1694.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.5999755859, -1694.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.0999755859, -1695.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.3000488281, -1695, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.9000244141, -1695.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542, -1695.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.5999755859, -1696.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.4000244141, -1695.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.0999755859, -1695.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1695.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1695.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1697.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1697.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.8000488281, -1697.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.1999511719, -1698, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.8000488281, -1698.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1543.4000244141, -1698.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1543.4000244141, -1698.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1543.3000488281, -1698.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1543.3000488281, -1697.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1543.1999511719, -1697.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1543.19921875, -1697.3994140625, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1543.1999511719, -1696.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1543.0999755859, -1696.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.1999511719, -1696.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.1999511719, -1696.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1696.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1696.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1697.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1698, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1698.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1698.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.3000488281, -1698.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.6999511719, -1698.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.6999511719, -1696.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.6999511719, -1696.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.5999755859, -1695.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.5999755859, -1695.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.5999755859, -1695.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.5, -1694.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.4000244141, -1694.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.4000244141, -1694.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.4000244141, -1693.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.4000244141, -1693.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.6999511719, -1697.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1683.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1683.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1683, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1682.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1682.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.4000244141, -1682.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.4000244141, -1682.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.4000244141, -1682.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.4000244141, -1682, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.4000244141, -1682, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.4000244141, -1681.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.4000244141, -1681.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1681.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1681.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1680.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1680.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5999755859, -1680.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1680.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1680.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1679.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.4000244141, -1679.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.4000244141, -1679.6999511719, 12.800000190735, 0, 0, 30);
	CreateDynamicObject(3515, 1541.5999755859, -1690.5999755859, 12.199999809265, 358, 0, 0);
	CreateDynamicObject(9833, 1540.6999511719, -1690.5, 16.299999237061, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1667.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.6999511719, -1667.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.8000488281, -1668.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.8000488281, -1669.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.8000488281, -1668.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.9000244141, -1669.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.9000244141, -1670.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.8000488281, -1670.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.8000488281, -1670.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.4000244141, -1670.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.0999755859, -1670.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.6999511719, -1671, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.3000488281, -1671, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.0999755859, -1671, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1671, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.6999511719, -1671, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.5999755859, -1671, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.5999755859, -1670.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1670, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.0999755859, -1669.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.0999755859, -1669, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.4000244141, -1668.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.5999755859, -1668.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.8000488281, -1667.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.8000488281, -1667.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.6999511719, -1667.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.5999755859, -1667.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.3000488281, -1667, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.1999511719, -1667.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.0999755859, -1667.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.0999755859, -1667.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1668.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1668.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1669.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1669.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1670.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1669.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1669.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1669, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1668.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1668.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1667.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1667.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1667.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1666.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1666.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1666.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1666.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1665.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1665.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1665.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1665.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1665.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1665, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1664.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1664.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1664.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1664.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1664, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1664.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1664.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1664.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.0999755859, -1665.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.5999755859, -1665.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.9000244141, -1666.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.1999511719, -1666.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1666.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5999755859, -1665.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5999755859, -1665.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5999755859, -1664.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.4000244141, -1664.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.4000244141, -1664.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.4000244141, -1664, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.1999511719, -1663.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.8000488281, -1663.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.5, -1663.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.0999755859, -1663.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1663.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.1999511719, -1664.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1663.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1663.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1663.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1663.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1663.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1663.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1663.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1663, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1662.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1662.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1662.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1662.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1662.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1662, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1661.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.1999511719, -1661.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.6999511719, -1661.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542, -1661.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542, -1662.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542, -1663.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.1999511719, -1663, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.0999755859, -1662.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.1999511719, -1661.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542, -1660.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.1999511719, -1660.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.5999755859, -1660.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.3000488281, -1660.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.0999755859, -1660.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1661.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.0999755859, -1661.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1661.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1661.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1660.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1660.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.5, -1660.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.9000244141, -1659.4000244141, 12.199999809265, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1659.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.0999755859, -1659.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.5999755859, -1659.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1660.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1660.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1660.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.4000244141, -1659.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.1999511719, -1659, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.3000488281, -1658.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.8000488281, -1658.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.4000244141, -1659.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.0999755859, -1659.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1659.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.5, -1659.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1659.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1659.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1658.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1657.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1657.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.0999755859, -1656.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.5999755859, -1656.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.1999511719, -1657.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.0999755859, -1657.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.3000488281, -1656.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.4000244141, -1655.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.4000244141, -1655.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1654.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.4000244141, -1654, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1653.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5, -1653.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.6999511719, -1652.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.8000488281, -1652.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.5999755859, -1652.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1542.4000244141, -1652.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.6999511719, -1652.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.5, -1652.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.0999755859, -1652.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1652.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.5999755859, -1653.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.5999755859, -1654.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.5999755859, -1655.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.599609375, -1655.19921875, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.5, -1656.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.5999755859, -1656.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.5999755859, -1657.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.5999755859, -1657.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.6999511719, -1658.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.6999511719, -1658.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1658.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1659.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.8000488281, -1659.4000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1540.9000244141, -1659.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541, -1659.8000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(870, 1541.4000244141, -1668, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(3515, 1541.6999511719, -1661.5, 12.199999809265, 357.99499511719, 0, 0);
	CreateDynamicObject(9833, 1541, -1661.5999755859, 16.299999237061, 0, 0, 0);
	CreateDynamicObject(1369, 1538.6999511719, -1679.0999755859, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1369, 1538.6999511719, -1680.4000244141, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1369, 1538.6999511719, -1681.6999511719, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(983, 1538, -1681.8000488281, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1369, 1538.6999511719, -1682.9000244141, 13.199999809265, 0, 0, 182);
	CreateDynamicObject(1369, 1538.6999511719, -1683.9000244141, 13.199999809265, 0, 0, 181.99951171875);
	CreateDynamicObject(1369, 1538.6999511719, -1685, 13.199999809265, 0, 0, 181.99951171875);
	// Spawn bikes
    CreateVehicle(510, -2433.4031, 319.3516, 34.7669, 240.0000, 5, 5, -1); // bike 1
	CreateVehicle(510, -2433.0540, 320.1264, 34.7723, 240.0000, 39, 39, -1); // bike 2
	CreateVehicle(510, -2432.6870, 320.9364, 34.7610, 240.0000, 16, 16, -1); // bike 3
	CreateVehicle(510, -2432.2620, 321.6999, 34.7566, 240.0000, 6, 6, -1); // bike 4
	CreateVehicle(510, -2431.7371, 322.6430, 34.7798, 240.0000, 28, 28, -1); // bike 5
	CreateVehicle(510, -2431.1504, 323.7235, 34.7716, 240.0000, 2, 2, -1); // bike 6
	CreateVehicle(510, -2416.8005, 348.5500, 34.7781, 240.0000, 46, 46, -1); // bike 7
	CreateVehicle(510, -2416.1936, 349.4323, 34.7724, 240.0000, 43, 43, -1); // bike 8
	CreateVehicle(510, -2415.5227, 350.2519, 34.7586, 240.0000, 39, 39, -1); // bike 9
	CreateVehicle(510, -2414.9409, 351.0704, 34.7711, 240.0000, 6, 6, -1); // bike 10
	CreateVehicle(510, -2414.1025, 351.9817, 34.7546, 240.0000, 28, 28, -1); // bike 11
	CreateVehicle(510, -2413.4233, 352.8137, 34.7543, 240.0000, 16, 16, -1); // bike 12

    for (new i = 0; i < 24; i ++)
	{
	    PrisonData[prisonCellOpened][i] = true;
		SetDynamicObjectPos(PrisonData[prisonCells][i], PrisonCells[i][0], PrisonCells[i][1] + 1.6, PrisonCells[i][2]);
	}
	flushExplosiveData();
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);

	SetNameTagDrawDistance(10.0);
	ShowPlayerMarkers(0);

	UpdateTime();

	SetTimer("PlayerCheck", 1000, true);
	SetTimer("FuelUpdate", 50000, true);
	SetTimer("RefuelCheck", 500, true);
	SetTimer("LotteryUpdate", 2700000, true);
	SetTimer("MinuteCheck", 60000, true);
	SetTimer("WeatherRotator", 2400000, true);
	SetTimer("RandomFire", 1800000, true);

	robpossible = 1;
	return 1;
}

forward WeatherRotator();
public WeatherRotator()
{
	new index = random(sizeof(g_aWeatherRotations));

	SetWeather(g_aWeatherRotations[index]);
}

forward LotteryUpdate();
public LotteryUpdate()
{
	new
		number = random(60) + 1,
		jackpot = random(2000) + 1000;

	foreach (new i : Player)
	{
	    if(PlayerData[i][pLotteryB] == 1)
	    {
			if (PlayerData[i][pLottery] == number)
			{
				GiveMoney(i, jackpot);
				SendServerMessage(i, "Kamu telah memenangkan lotre jackpot dari %s!", FormatNumber(jackpot));
			}
			else
			{
		    	SendClientMessage(i, COLOR_WHITE, "[LOTTERY]: Kamu tidak memenangkan undian undian kali ini.");
			}
			PlayerData[i][pLottery] = 0;
			PlayerData[i][pLotteryB] = 0;
		}
	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    if (IsPlayerNPC(playerid))
	    return 1;
	if (!PlayerData[playerid][pAccount] && !PlayerData[playerid][pKicked])
	{
	    new
	        time[3];

        gettime(time[0], time[1], time[2]);
		SetPlayerTime(playerid, time[0], time[1]);

	    PlayerData[playerid][pAccount] = 1;
	    TogglePlayerSpectating(playerid, 1);
		SetPlayerColor(playerid, DEFAULT_COLOR);
		SetTimerEx("AccountCheck", 100, false, "d", playerid); // 400 ms
	}
	return 1;
}

public OnPlayerSpawn(playerid) // ubah
{
    if (IsPlayerNPC(playerid))
	    return 1;
	    
	//Event system by Lilx9
 	if(EventData[EventMode] == 1)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerData[i][pEventDuty] == 1)
				{
					if((EventData[TeamRedScore] >= EventData[EventScore]) || EventData[TeamBlueScore] < EventData[EventScore])
					{
						OnEventFinished(i, 1);
						GiveMoney(i, EventData[EventMoney] + 100);
						EventTeam[i][red] = false;
					}
					else if((EventData[TeamBlueScore] >= EventData[EventScore]) || EventData[TeamBlueScore] >= EventData[EventScore])
					{
						OnEventFinished(i, 1);
						GiveMoney(i, EventData[EventMoney] + 100);
						EventTeam[i][blue] = false;
					}
					else
					{
						if(EventTeam[playerid][red])
						{
							SetPlayerHealth(playerid, EventData[EventHealth]);
							SetPlayerArmour(playerid, EventData[EventArmor]);
						 	SetTimerEx("AntiSpawnKill",6000,0,"i",playerid);
							SetPlayerPos(playerid, EventData[EventPosRed][0], EventData[EventPosRed][1], EventData[EventPosRed][2]);
							GivePlayerWeapon(playerid, EventData[EventGun1], 2000);
							GivePlayerWeapon(playerid, EventData[EventGun2], 2000);
							GivePlayerWeapon(playerid, EventData[EventGun3], 2000);
							EventData[TeamRedScore]++;
						}
						else if(EventTeam[playerid][blue])
						{
							SetPlayerHealth(playerid, EventData[EventHealth]);
							SetPlayerArmour(playerid, EventData[EventArmor]);
						 	SetTimerEx("AntiSpawnKill",6000,0,"i",playerid);
							SetPlayerPos(playerid, EventData[EventPosBlue][0], EventData[EventPosBlue][1], EventData[EventPosBlue][2]);
							GivePlayerWeapon(playerid, EventData[EventGun1], 2000);
							GivePlayerWeapon(playerid, EventData[EventGun2], 2000);
							GivePlayerWeapon(playerid, EventData[EventGun3], 2000);
							EventData[TeamBlueScore]++;
						}
					}
				}
			}
		}
	}
	else if(EventData[EventMode] == 2)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(PlayerData[i][pEventDuty] == 1)
				{
					if(EventTeam[i][Kills] > EventData[EventScore])
					{
						OnEventFinished(i, 2);
						GiveMoney(i, EventData[EventMoney] + 100);
					}
					else
					{
						SetPlayerHealth(playerid, EventData[EventHealth]);
						SetPlayerArmour(playerid, EventData[EventArmor]);
						SetPlayerPos(playerid, EventData[EventPos][0], EventData[EventPos][1], EventData[EventPos][2]);
						GivePlayerWeapon(playerid, EventData[EventGun1], 2000);
						GivePlayerWeapon(playerid, EventData[EventGun2], 2000);
						GivePlayerWeapon(playerid, EventData[EventGun3], 2000);
						EventTeam[playerid][Kills]++;
					}
				}
			}
		}
	}
	else if(EventData[EventMode] == 4)
	{
		if(EventData[EventLMS] > EventData[EventScore])
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerData[i][pEventDuty] == 1)
					{
						OnEventFinished(i, 4);
						GiveMoney(i, EventData[EventMoney] + 100);
					}
				}
			}
		}
		else
		{
			OnEventFinished(playerid, 4);
		}
	}
    if (!GetPVarInt(playerid, "color")) SetPVarInt(playerid, "color", 18643);
    if(Grade[playerid] == 0)
    {
		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(playerid, i)) {
							Car_Spawn(i);
		}
		if(PlayerData[playerid][pRep] >= 0 && PlayerData[playerid][pRep] < 20)
		{
			mylabel[playerid] = Create3DTextLabel("Grade {FF0000}F", 0xFFFFFFFF, 30.0, 40.0, 50.0, 10.0, 0);
			Attach3DTextLabelToPlayer(mylabel[playerid], playerid, 0.0, 0.0, 0.2);
 		}
		else if(PlayerData[playerid][pRep] >= 20 && PlayerData[playerid][pRep] < 40)
		{
			mylabel[playerid] = Create3DTextLabel("Grade {FF0000}E", 0xFFFFFFFF, 30.0, 40.0, 50.0, 10.0, 0);
			Attach3DTextLabelToPlayer(mylabel[playerid], playerid, 0.0, 0.0, 0.2);
 		}
		else if(PlayerData[playerid][pRep] >= 40 && PlayerData[playerid][pRep] < 60)
		{
			mylabel[playerid] = Create3DTextLabel("Grade {FF0000}D", 0xFFFFFFFF, 30.0, 40.0, 50.0, 10.0, 0);
			Attach3DTextLabelToPlayer(mylabel[playerid], playerid, 0.0, 0.0, 0.2);
 		}
		else if(PlayerData[playerid][pRep] >= 60 && PlayerData[playerid][pRep] < 80)
		{
			mylabel[playerid] = Create3DTextLabel("Grade {FF0000}C", 0xFFFFFFFF, 30.0, 40.0, 50.0, 10.0, 0);
			Attach3DTextLabelToPlayer(mylabel[playerid], playerid, 0.0, 0.0, 0.2);
 		}
		else if(PlayerData[playerid][pRep] >= 80 && PlayerData[playerid][pRep] < 100)
		{
			mylabel[playerid] = Create3DTextLabel("Grade {FF0000}B", 0xFFFFFFFF, 30.0, 40.0, 50.0, 10.0, 0);
			Attach3DTextLabelToPlayer(mylabel[playerid], playerid, 0.0, 0.0, 0.2);
 		}
		else if(PlayerData[playerid][pRep] >= 100 && PlayerData[playerid][pRep] < 120)
		{
			mylabel[playerid] = Create3DTextLabel("Grade {FF0000}A", 0xFFFFFFFF, 30.0, 40.0, 50.0, 10.0, 0);
			Attach3DTextLabelToPlayer(mylabel[playerid], playerid, 0.0, 0.0, 0.2);
 		}
		else if(PlayerData[playerid][pRep] >= 120)
		{
			mylabel[playerid] = Create3DTextLabel("Grade {FF0000}A+", 0xFFFFFFFF, 30.0, 40.0, 50.0, 10.0, 0);
			Attach3DTextLabelToPlayer(mylabel[playerid], playerid, 0.0, 0.0, 0.2);
		}
		
		
		SetTimer("CekSakit", 1000, false);
		
		//Airport
		RemoveBuildingForPlayer(playerid, 4832, 1610.7969, -2285.8359, 52.7500, 0.25);
		RemoveBuildingForPlayer(playerid, 4948, 1610.7969, -2285.8359, 52.7500, 0.25);
		RemoveBuildingForPlayer(playerid, 4949, 1782.5781, -2284.4844, 26.3281, 0.25);
		RemoveBuildingForPlayer(playerid, 4985, 1394.9453, -2286.1563, 17.5391, 0.25);
		RemoveBuildingForPlayer(playerid, 5011, 1874.2109, -2286.5313, 17.9297, 0.25);
		RemoveBuildingForPlayer(playerid, 3672, 1921.6406, -2206.3906, 18.8828, 0.25);
		RemoveBuildingForPlayer(playerid, 3672, 2030.0547, -2249.0234, 18.8828, 0.25);
		RemoveBuildingForPlayer(playerid, 3672, 2030.0547, -2315.4297, 18.8828, 0.25);
		RemoveBuildingForPlayer(playerid, 3672, 2030.0547, -2382.1406, 18.8828, 0.25);
		RemoveBuildingForPlayer(playerid, 3672, 2112.9375, -2384.6172, 18.8828, 0.25);
		RemoveBuildingForPlayer(playerid, 3672, 1889.6563, -2666.0078, 18.8828, 0.25);
		RemoveBuildingForPlayer(playerid, 3672, 1822.7344, -2666.0078, 18.8828, 0.25);
		RemoveBuildingForPlayer(playerid, 3672, 1682.7266, -2666.0078, 18.8828, 0.25);
		RemoveBuildingForPlayer(playerid, 3672, 1617.2813, -2666.0078, 18.8828, 0.25);
		RemoveBuildingForPlayer(playerid, 5044, 1818.9141, -2543.6719, 13.4688, 0.25);
		RemoveBuildingForPlayer(playerid, 1525, 1624.6250, -2296.2422, 14.3125, 0.25);
		RemoveBuildingForPlayer(playerid, 3672, 1754.1719, -2666.0078, 18.8828, 0.25);
		RemoveBuildingForPlayer(playerid, 3769, 1961.4453, -2216.1719, 14.9844, 0.25);
		RemoveBuildingForPlayer(playerid, 3744, 2061.5313, -2209.8125, 14.9766, 0.25);
		RemoveBuildingForPlayer(playerid, 3744, 2082.4063, -2269.6563, 14.9609, 0.25);
		RemoveBuildingForPlayer(playerid, 3744, 2082.4375, -2298.2266, 14.9609, 0.25);
		RemoveBuildingForPlayer(playerid, 3744, 2082.4063, -2370.0156, 14.7031, 0.25);
		RemoveBuildingForPlayer(playerid, 3769, 2060.6875, -2305.9609, 14.9844, 0.25);
		RemoveBuildingForPlayer(playerid, 3769, 2060.6875, -2371.8828, 14.9844, 0.25);
		RemoveBuildingForPlayer(playerid, 3780, 1884.1719, -2541.3750, 14.2500, 0.25);
		RemoveBuildingForPlayer(playerid, 3780, 1652.3438, -2541.3750, 14.2500, 0.25);
		RemoveBuildingForPlayer(playerid, 3780, 1381.1172, -2541.3750, 14.2500, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 1586.2109, -2325.5625, 13.0234, 0.25);
		RemoveBuildingForPlayer(playerid, 3658, 1599.3047, -2335.3906, 12.9609, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1608.6953, -2323.4219, 16.3516, 0.25);
		RemoveBuildingForPlayer(playerid, 3629, 1617.2813, -2666.0078, 18.8828, 0.25);
		RemoveBuildingForPlayer(playerid, 3659, 1628.9531, -2335.5781, 13.5000, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 1624.9453, -2325.5625, 13.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 3659, 1635.5156, -2335.5781, 13.5000, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1649.0625, -2641.4063, 18.4766, 0.25);
		RemoveBuildingForPlayer(playerid, 3665, 1652.3438, -2541.3750, 14.2500, 0.25);
		RemoveBuildingForPlayer(playerid, 3658, 1649.8203, -2335.3906, 12.9922, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 1657.3203, -2325.5625, 13.0156, 0.25);
		RemoveBuildingForPlayer(playerid, 3663, 1664.4531, -2439.8047, 14.4688, 0.25);
		RemoveBuildingForPlayer(playerid, 3658, 1675.2031, -2335.3906, 13.0078, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1660.2891, -2323.4219, 16.2500, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 1586.2109, -2272.2422, 12.9531, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 1586.2109, -2302.2656, 12.9531, 0.25);
		RemoveBuildingForPlayer(playerid, 712, 1619.5078, -2267.2031, 20.1797, 0.25);
		RemoveBuildingForPlayer(playerid, 712, 1619.5078, -2305.8125, 20.1797, 0.25);
		RemoveBuildingForPlayer(playerid, 712, 1650.7969, -2271.1953, 5.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 712, 1650.7891, -2303.5313, 5.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1653.9609, -2267.7344, -4.0234, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1653.9609, -2301.9063, -4.0234, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1658.1641, -2300.5703, 8.7422, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1658.1641, -2271.8906, 8.7422, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1673.2969, -2301.9063, -4.0234, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1673.2969, -2267.7344, -4.0234, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 1586.2109, -2247.0234, 13.0781, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1607.3594, -2249.5703, 16.3359, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 1624.9453, -2247.0234, 13.0781, 0.25);
		RemoveBuildingForPlayer(playerid, 956, 1634.1094, -2237.5313, 12.8906, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1650.8594, -2249.5703, 16.3359, 0.25);
		RemoveBuildingForPlayer(playerid, 3658, 1649.7344, -2237.5547, 13.0078, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 1657.3203, -2247.0234, 13.0781, 0.25);
		RemoveBuildingForPlayer(playerid, 3658, 1678.8125, -2237.5938, 13.0078, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1624.6875, -2190.3750, 16.3125, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1673.6016, -2190.3750, 16.3125, 0.25);
		RemoveBuildingForPlayer(playerid, 4995, 1682.0703, -2330.6094, 16.8984, 0.25);
		RemoveBuildingForPlayer(playerid, 3629, 1682.7266, -2666.0078, 18.8828, 0.25);
		RemoveBuildingForPlayer(playerid, 3658, 1693.6563, -2335.3516, 13.0078, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1699.5313, -2323.4219, 16.2500, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 1690.7969, -2325.5625, 13.0781, 0.25);
		RemoveBuildingForPlayer(playerid, 3658, 1722.7344, -2335.3906, 13.0078, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 1723.9453, -2325.5625, 13.0469, 0.25);
		RemoveBuildingForPlayer(playerid, 3629, 1754.1719, -2666.0078, 18.8828, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 1756.7891, -2325.5625, 13.0234, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1742.6328, -2323.4219, 16.2500, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1686.8828, -2272.1797, 16.2500, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1686.8828, -2300.8594, 16.2500, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1695.2578, -2301.9063, -4.0234, 0.25);
		RemoveBuildingForPlayer(playerid, 712, 1697.7031, -2302.9531, 5.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1695.2578, -2267.7344, -4.0234, 0.25);
		RemoveBuildingForPlayer(playerid, 712, 1696.0859, -2271.1953, 5.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 712, 1712.3203, -2303.1484, 5.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1715.7031, -2301.9063, -4.0234, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1736.6953, -2300.8594, 16.3359, 0.25);
		RemoveBuildingForPlayer(playerid, 4874, 1782.5781, -2284.4844, 26.3281, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1715.7031, -2267.7344, -4.0234, 0.25);
		RemoveBuildingForPlayer(playerid, 712, 1712.3203, -2271.1953, 5.2344, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1736.6953, -2272.1797, 16.3359, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 1690.7969, -2247.0234, 13.0781, 0.25);
		RemoveBuildingForPlayer(playerid, 4996, 1690.5703, -2242.5234, 16.8984, 0.25);
		RemoveBuildingForPlayer(playerid, 3658, 1695.2422, -2237.5547, 13.0078, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1699.7422, -2249.5703, 16.3359, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 1723.9453, -2247.0234, 13.0781, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1740.7422, -2249.5703, 16.3359, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 1756.7891, -2247.0234, 13.0781, 0.25);
		RemoveBuildingForPlayer(playerid, 3658, 1722.6484, -2237.5547, 12.9922, 0.25);
		RemoveBuildingForPlayer(playerid, 3659, 1736.9531, -2237.3672, 13.5000, 0.25);
		RemoveBuildingForPlayer(playerid, 3659, 1740.6094, -2237.3672, 13.5000, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1722.5234, -2190.3750, 16.3125, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1771.4453, -2190.3750, 16.3125, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1702.5391, -2170.7031, 18.4063, 0.25);
		RemoveBuildingForPlayer(playerid, 3629, 1822.7344, -2666.0078, 18.8828, 0.25);
		RemoveBuildingForPlayer(playerid, 3663, 1832.4531, -2388.4375, 14.4688, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1855.7969, -2641.4063, 18.4766, 0.25);
		RemoveBuildingForPlayer(playerid, 3629, 1889.6563, -2666.0078, 18.8828, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1922.2031, -2641.4063, 18.4766, 0.25);
		RemoveBuildingForPlayer(playerid, 3665, 1884.1719, -2541.3750, 14.2500, 0.25);
		RemoveBuildingForPlayer(playerid, 3663, 1882.2656, -2395.7813, 14.4688, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 2003.4531, -2422.1719, 18.4766, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 2003.4531, -2350.7344, 18.4766, 0.25);
		RemoveBuildingForPlayer(playerid, 3629, 2030.0547, -2382.1406, 18.8828, 0.25);
		RemoveBuildingForPlayer(playerid, 3664, 2042.7734, -2442.1875, 19.2813, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, 2057.7344, -2402.9922, 12.7500, 0.25);
		RemoveBuildingForPlayer(playerid, 3625, 2060.6875, -2371.8828, 14.9844, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 2088.6094, -2422.1719, 18.4766, 0.25);
		RemoveBuildingForPlayer(playerid, 3574, 2082.4063, -2370.0156, 14.7031, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, 2089.3047, -2359.7578, 12.7500, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 2088.6094, -2350.7344, 18.4766, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 2146.0156, -2409.3516, 18.4766, 0.25);
		RemoveBuildingForPlayer(playerid, 3629, 2112.9375, -2384.6172, 18.8828, 0.25);
		RemoveBuildingForPlayer(playerid, 5006, 1874.2109, -2286.5313, 17.9297, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1899.4219, -2328.1406, 18.4766, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1899.4219, -2244.5078, 18.4766, 0.25);
		RemoveBuildingForPlayer(playerid, 1215, 1983.8594, -2281.7109, 13.0625, 0.25);
		RemoveBuildingForPlayer(playerid, 3664, 1960.6953, -2236.4297, 19.2813, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 2003.4531, -2281.3984, 18.3828, 0.25);
		RemoveBuildingForPlayer(playerid, 5031, 2037.0469, -2313.5469, 18.7109, 0.25);
		RemoveBuildingForPlayer(playerid, 3629, 2030.0547, -2315.4297, 18.8828, 0.25);
		RemoveBuildingForPlayer(playerid, 5089, 2037.0469, -2313.5469, 18.7109, 0.25);
		RemoveBuildingForPlayer(playerid, 3629, 2030.0547, -2249.0234, 18.8828, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, 2057.0547, -2315.4688, 12.7422, 0.25);
		RemoveBuildingForPlayer(playerid, 3625, 2060.6875, -2305.9609, 14.9844, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, 2057.5391, -2270.0703, 12.7500, 0.25);
		RemoveBuildingForPlayer(playerid, 3574, 2082.4063, -2269.6563, 14.9609, 0.25);
		RemoveBuildingForPlayer(playerid, 3574, 2082.4375, -2298.2266, 14.9609, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, 2089.3047, -2289.8906, 12.7500, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, 2089.3047, -2332.5547, 12.7500, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, 2089.7813, -2244.4922, 12.7500, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 2088.6094, -2281.3984, 18.3828, 0.25);
		RemoveBuildingForPlayer(playerid, 3629, 1921.6406, -2206.3906, 18.8828, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, 1949.3438, -2227.5156, 13.6563, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, 1944.0625, -2227.5156, 13.6563, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1951.0313, -2207.7031, 18.4219, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, 1954.6172, -2227.4844, 13.6875, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, 1965.1719, -2227.4141, 13.7578, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, 1959.8984, -2227.4453, 13.7266, 0.25);
		RemoveBuildingForPlayer(playerid, 3625, 1961.4453, -2216.1719, 14.9844, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, 1975.7266, -2227.4141, 13.7578, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, 1970.4453, -2227.4141, 13.7578, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1979.6797, -2207.8438, 18.4219, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, 1981.0000, -2227.4141, 13.7578, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, 1996.8281, -2227.3828, 13.7891, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, 1991.5547, -2227.4141, 13.7578, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, 1986.2813, -2227.4141, 13.7578, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, 1983.8047, -2224.1641, 12.7500, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, 2002.1094, -2227.3438, 13.8281, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, 2018.0313, -2224.1641, 12.7500, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 2010.3984, -2207.6172, 18.4219, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 2042.4766, -2207.7031, 18.4219, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, 2055.0547, -2224.3828, 13.7578, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, 2055.0547, -2219.1094, 13.7578, 0.25);
		RemoveBuildingForPlayer(playerid, 1308, 2056.8281, -2224.1641, 12.7500, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, 2054.9844, -2213.7891, 13.7578, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, 2054.9219, -2208.4609, 13.7578, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, 2054.9219, -2203.1875, 13.7578, 0.25);
		RemoveBuildingForPlayer(playerid, 3574, 2061.5313, -2209.8125, 14.9766, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1957.3906, -2176.7109, 16.3438, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, 2054.9297, -2181.3594, 13.7578, 0.25);
		RemoveBuildingForPlayer(playerid, 1412, 2054.9297, -2186.6328, 13.7578, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1036.0469, -2255.0938, 17.7734, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1065.3359, -2313.9609, 17.8906, 0.25);
		RemoveBuildingForPlayer(playerid, 647, 1091.6641, -2319.9141, 13.4063, 0.25);
		RemoveBuildingForPlayer(playerid, 671, 1096.3906, -2325.8906, 11.4531, 0.25);
		RemoveBuildingForPlayer(playerid, 647, 1095.0469, -2324.0938, 13.1641, 0.25);
		RemoveBuildingForPlayer(playerid, 671, 1094.9219, -2320.4063, 11.4531, 0.25);
		RemoveBuildingForPlayer(playerid, 671, 1097.0938, -2317.7500, 17.6484, 0.25);
		RemoveBuildingForPlayer(playerid, 661, 1098.9453, -2329.8438, 11.5547, 0.25);
		RemoveBuildingForPlayer(playerid, 671, 1099.9531, -2322.0625, 15.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1100.1406, -2360.0938, 16.9688, 0.25);
		RemoveBuildingForPlayer(playerid, 671, 1101.1953, -2330.4688, 11.4531, 0.25);
		RemoveBuildingForPlayer(playerid, 671, 1104.2734, -2334.3984, 11.4531, 0.25);
		RemoveBuildingForPlayer(playerid, 618, 1106.4297, -2337.2109, 11.4063, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1142.3906, -2399.5469, 16.1797, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1185.7656, -2427.8438, 14.9531, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1239.0625, -2449.2188, 13.9375, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1296.8906, -2456.6094, 12.6484, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1339.4297, -2341.1172, 18.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1339.4297, -2404.0078, 18.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1339.4297, -2474.5469, 18.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1339.4297, -2544.0625, 18.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1348.4219, -2613.2109, 18.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1386.9297, -2659.3516, 18.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 3665, 1381.1172, -2541.3750, 14.2500, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1381.7813, -2347.9141, 18.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 3664, 1388.0078, -2593.0000, 19.2813, 0.25);
		RemoveBuildingForPlayer(playerid, 3664, 1388.0078, -2494.2656, 19.2813, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1417.8438, -2347.9141, 18.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1426.7109, -2675.8125, 18.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1434.8438, -2347.9141, 18.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1470.1250, -2344.2500, 16.3125, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1478.7969, -2365.3984, 16.3125, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1489.2109, -2361.0313, 18.7188, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1523.7344, -2361.0313, 18.7188, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1558.6953, -2361.0313, 18.7188, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1560.1953, -2341.6406, 18.7188, 0.25);
		RemoveBuildingForPlayer(playerid, 5032, 1567.7109, -2543.6328, 13.4688, 0.25);
		RemoveBuildingForPlayer(playerid, 712, 1568.5781, -2364.1484, 21.6484, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1569.3125, -2342.1094, 11.2969, 0.25);
		RemoveBuildingForPlayer(playerid, 3663, 1580.0938, -2433.8281, 14.5703, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1339.4297, -2286.8750, 18.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1368.2656, -2302.8594, 11.2969, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1368.2656, -2269.0781, 11.2969, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1381.0000, -2260.9922, 18.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1381.9375, -2281.8516, 16.1484, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1381.7813, -2314.7188, 18.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1392.8906, -2302.8594, 11.2969, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1392.8906, -2269.0781, 11.2969, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1413.2344, -2290.7969, 16.2422, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1418.0000, -2302.8594, 11.2969, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1417.8438, -2314.7188, 18.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1417.8438, -2330.6406, 18.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1418.0000, -2269.0781, 11.2969, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1417.0234, -2260.9922, 18.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 671, 1530.8906, -2251.4219, 12.6094, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1531.0859, -2250.3828, 11.2969, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1531.0859, -2329.1406, 11.2969, 0.25);
		RemoveBuildingForPlayer(playerid, 712, 1534.2344, -2273.9375, 21.6484, 0.25);
		RemoveBuildingForPlayer(playerid, 712, 1533.6406, -2301.7188, 21.6484, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1536.8281, -2282.2891, 16.2422, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1560.1016, -2290.7969, 16.2422, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1560.9375, -2306.2813, 18.7188, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1560.9375, -2266.7422, 18.7188, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1570.6797, -2323.4219, 16.3125, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1570.9688, -2249.5703, 16.3125, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1339.4297, -2230.6328, 18.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1381.7813, -2224.0234, 18.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1417.8438, -2241.0000, 18.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1417.8438, -2224.0234, 18.4609, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1478.7969, -2228.2891, 16.3125, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1489.0547, -2211.5156, 18.7188, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1524.0156, -2211.5156, 18.7188, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1526.8438, -2190.3750, 16.3125, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1558.7266, -2211.5156, 18.7188, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1560.9375, -2231.5625, 18.7188, 0.25);
		RemoveBuildingForPlayer(playerid, 620, 1569.8359, -2234.6016, 11.2969, 0.25);
		RemoveBuildingForPlayer(playerid, 712, 1570.5625, -2213.3359, 21.6484, 0.25);
		RemoveBuildingForPlayer(playerid, 1226, 1575.7656, -2190.3750, 16.3125, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1356.9297, -2171.8359, 18.4453, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1403.4141, -2133.4766, 18.4219, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1466.3828, -2124.6016, 18.1250, 0.25);
		RemoveBuildingForPlayer(playerid, 1290, 1514.7188, -2124.3984, 19.0547, 0.25);
		RemoveBuildingForPlayer(playerid, 3723, 2178.7344, -1971.2656, 16.8672, 0.25);
		RemoveBuildingForPlayer(playerid, 3722, 2178.7344, -1971.2656, 16.8672, 0.25);
	}
	if(!Inventory_HasItem(playerid, "GPS System"))
	{
		GangZoneShowForPlayer(playerid, BlackRadar, 0x000000FF);
		TextDrawShowForPlayer(playerid, Textdraw33);
		PlayerTextDrawSetPreviewModel(playerid, Textdraw32[playerid], PlayerData[playerid][pSkin]);
		PlayerTextDrawShow(playerid, Textdraw32[playerid]);
	}
	else
	{
		TextDrawShowForPlayer(playerid, Textdraw33);
		GangZoneHideForPlayer(playerid, BlackRadar);
		PlayerTextDrawSetPreviewModel(playerid, Textdraw32[playerid], PlayerData[playerid][pSkin]);
		PlayerTextDrawShow(playerid, Textdraw32[playerid]);
	}
    // Skill levels
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 0);

	//koran
	koran[playerid] = -1;
	//penyapu
	penyapu[playerid] = -1;
	//truckerjob
	trucker[playerid] = -1;

	/*if (PlayerData[playerid][pSpawnPoint])
	{
	 	SetDefaultSpawn(playerid);
	}*/

	if (PlayerData[playerid][pHUD])
	{
	 	TextDrawShowForPlayer(playerid, gServerTextdraws[0]);
		TextDrawShowForPlayer(playerid, gServerTextdraws[1]);
	}
    SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
    Streamer_ToggleIdleUpdate(playerid, true);
    //SetSpawnInfo(playerid, 0, PlayerData[playerid][pSkin], PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2], PlayerData[playerid][pPos][3], 0, 0, 0, 0, 0, 0);

	PlayerData[playerid][pKilled] = 0;

    if (PlayerData[playerid][pBleeding])
	{
 		PlayerData[playerid][pBleedTime] = 1;
   	}
	if (PlayerData[playerid][pJailTime] > 0)
	{
	    if (PlayerData[playerid][pPrisoned])
	    {
	        SetPlayerInPrison(playerid);
	    }
	    else
	    {
		    SetPlayerPos(playerid, 197.6346, 175.3765, 1003.0234);
		    SetPlayerInterior(playerid, 3);

		    SetPlayerVirtualWorld(playerid, (playerid + 100));
		    SetPlayerFacingAngle(playerid, 0.0);

		    SetCameraBehindPlayer(playerid);
		}
		ResetWeapons(playerid);

		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][70]);
	    SendServerMessage(playerid, "Kamu memiliki %d detik sisa waktu dipenjara.", PlayerData[playerid][pJailTime]);
	}
	else if (PlayerData[playerid][pHospital] != -1)
	{
	    ResetDamages(playerid);
	    PlayerData[playerid][pHospitalTime] = 0;

	    PlayerData[playerid][pHunger] = 50;
	    PlayerData[playerid][pThirst] = 50;

		SetPlayerInterior(playerid, 3);
		SetPlayerVirtualWorld(playerid, playerid + 100);

		SetPlayerPos(playerid, -211.0370, -1738.6848, 676.7153);
		SetPlayerFacingAngle(playerid, 82.0000);

		SetPlayerCameraPos(playerid, -214.236602, -1738.812133, 676.648132);
		SetPlayerCameraLookAt(playerid, -203.072738, -1738.656127, 675.768737);

        ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
        ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);

		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Memulihkan... 15", 1000, 3);
		TogglePlayerControllable(playerid, 0);
	}
	else if (!PlayerData[playerid][pCreated])
	{
    	TogglePlayerControllable(playerid, 0);
		SetPlayerPos(playerid, 216.8005, -99.8691, 1005.2578);
    	SetPlayerFacingAngle(playerid, 90.0000);

  		SetPlayerInterior(playerid, 15);
		SelectTextDraw(playerid, -1);

		for (new i = 23; i < 34; i ++) {
		    PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
		}
	}
	else
	{
	    SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

	    SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
	    SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);

		SetCameraBehindPlayer(playerid);
		SetAccessories(playerid);

        if (PlayerData[playerid][pWorld] == PRISON_WORLD)
		{
		    SetPlayerPosEx(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		}
		else
		{
		    if(PlayerData[playerid][pInjured] == 0)
			{
				SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
			}
		}
		if (PlayerData[playerid][pInjured])
		{
			sakittimer[playerid] = SetTimerEx("Sakit", 180000, false, "i", playerid);
		    ShowHungerTextdraw(playerid, 0);
            SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
			TextDrawShowForPlayer(playerid, gServerTextdraws[2]);
		    TextDrawShowForPlayer(playerid, Textdraw37);
			SendClientMessage(playerid, COLOR_LIGHTRED, "[WARNING]:{FFFFFF} Kamu terluka dan membutuhkan perawatan medis (/call 911).");

			ApplyAnimation(playerid, "CRACK", "null", 4.0, 0, 0, 0, 1, 0, 1);
			ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
		}
		else
		{
			SetWeapons(playerid);
			ShowHungerTextdraw(playerid, 1);

			SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
			SetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]);
		}
	}
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if (!SQL_IsLogged(playerid) || (PlayerData[playerid][pTutorial] > 0 || PlayerData[playerid][pTutorialStage] > 0 || PlayerData[playerid][pKilled] > 0 || PlayerData[playerid][pHospital] != -1))
	    return 0;

	if (PlayerData[playerid][pMuted] && strfind(cmdtext, "/unmute", true) != 0)
 	{
	    SendErrorMessage(playerid, "Kamu dimute oleh sistem.");
	    return 0;
	}
	if (PlayerData[playerid][pCommandCount] < 6)
	{
	    PlayerData[playerid][pCommandCount]++;

	    if (PlayerData[playerid][pCommandCount] == 6) {
	        PlayerData[playerid][pCommandCount] = 0;

	        PlayerData[playerid][pMuted] = 1;
	        PlayerData[playerid][pMuteTime] = 5;

	        SendServerMessage(playerid, "Kamu telah dibisukan karena spamming(5 detik).");
	        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah otomatis dibisukan karena spamming.", ReturnName(playerid, 0));
	        return 0;
		}
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
    if(PlayerData[playerid][pEventDuty] == 1)
	{
		SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "{FFFF00}[Event] %s{FFFFFF} [%d]: (( %.64s ))", ReturnName(playerid, 0), playerid, text);
		return 0;
	}

	if(PlayerData[playerid][pAdminDuty] == 1)
	{
		SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "{33EE33}Admin %s{FFFFFF} [%d]: (( %.64s ))", PlayerData[playerid][pForumName], playerid, text);
		return 0;
	}
	
	if(PlayerData[playerid][pDonatorDuty] == 1)
	{
		SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "{DAA520}Donator{FFFFFF} %s [%d]: (( %.64s ))", ReturnName(playerid, 0), playerid, text);
		return 0;
	}
  
	if (PlayerData[playerid][pHelperDuty] == 1)
	{
	   	SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "{33EE33}Helper %s{FFFFFF} [%d]: (( %.64s ))", PlayerData[playerid][pForumName], playerid, text);
		return 0;
	}

	if ((!PlayerData[playerid][pLogged] && !PlayerData[playerid][pCharacter]) || PlayerData[playerid][pTutorial] > 0 || PlayerData[playerid][pTutorialStage] > 0 || PlayerData[playerid][pHospital] != -1)
	    return 0;

	if (PlayerData[playerid][pMuted])
	{
	    SendErrorMessage(playerid, "Kamu dimute oleh sistem.");
	    return 0;
	}
	
	
	if (PlayerData[playerid][pSpamCount] < 5)
	{
	    PlayerData[playerid][pSpamCount]++;

	    if (PlayerData[playerid][pSpamCount] == 5) {
	        PlayerData[playerid][pSpamCount] = 0;

	        PlayerData[playerid][pMuted] = 1;
	        PlayerData[playerid][pMuteTime] = 5;

	        SendServerMessage(playerid, "Kamu telah dimute karena spamming (5 detik).");
	        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah otomatis dimute karena spamming.", ReturnName(playerid, 0));
	        return 0;
		}
	}
	if (PlayerData[playerid][pNewsGuest] != INVALID_PLAYER_ID && GetFactionType(PlayerData[playerid][pNewsGuest]) == FACTION_NEWS && IsPlayerInAnyVehicle(playerid) && IsNewsVehicle(GetPlayerVehicleID(playerid)))
	{
	    foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
	  		SendClientMessageEx(i, COLOR_LIGHTGREEN, "[NEWS] Pengunjung %s: %s", ReturnName(playerid, 0), text);
		}
	   	return 0;
   	}
	else
	{
		new
			targetid = PlayerData[playerid][pCallLine];

		SetPlayerChatBubble(playerid, text, COLOR_WHITE, 25.0, 6000);

        if (IsPlayerInAnyVehicle(playerid) && IsWindowedVehicle(GetPlayerVehicleID(playerid)) && !CoreVehicles[GetPlayerVehicleID(playerid)][vehWindowsDown])
			SendVehicleMessage(GetPlayerVehicleID(playerid), 0xBBFFEEFF, "[Vehicle] %s berkata: %s", ReturnName(playerid, 0), text);

		else
		{
		    if (!IsPlayerOnPhone(playerid))
		    {
   				if (inSchool[playerid] == 1)
				{
			    	    if(PlayerData[playerid][pAdminDuty] == 1) SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "{33EE33}%s{FFFFFF} [%d]: (( %s ))", ReturnName(playerid, 0), playerid, text);
	    				else SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "%s [%d]: (( %s ))", ReturnName(playerid, 0), playerid, text);
				}
				else SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "%s berkata: %s", ReturnName(playerid, 0), text);
			}
			else SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "(Phone) %s berkata: %s", ReturnName(playerid, 0), text);

			if (!IsPlayerInAnyVehicle(playerid) && !PlayerData[playerid][pInjured] && !PlayerData[playerid][pLoopAnim]) {
				ApplyAnimation(playerid, "GANGS", "prtial_gngtlkA", 4.1, 0, 1, 1, 1, strlen(text) * 100, 1);

				SetTimerEx("StopChatting", strlen(text) * 100, false, "d", playerid);
			}
		}
		switch (PlayerData[playerid][pEmergency])
		{
			case 1:
			{
				if (!strcmp(text, "Police", true))
				{
				    PlayerData[playerid][pEmergency] = 2;
				    SendClientMessage(playerid, COLOR_RADIO, "[DISPATCHER]:{FFFFFF} Kamu telah menelpon ke markas besar polisi. Tolong jelaskan kejahatannya.");
				}
				else if (!strcmp(text, "LSFMD", true))
				{
				    PlayerData[playerid][pEmergency] = 3;
				    SendClientMessage(playerid, COLOR_HOSPITAL, "[DISPATCHER]:{FFFFFF} Kamu telah menelpon ke markas besar Departemen Pemadam Kebakaran Dan Medical. Mohon jelaskan keadaan darurat.");
				}
				else SendClientMessage(playerid, COLOR_LIGHTBLUE, "[DISPATCHER]:{FFFFFF} Maaf, saya tidak mengerti Tolong ulangi.\"Police\" atau \"LSFMD\"?");
			}
			case 2:
			{
   				SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "911 CALL: %s (%s)", ReturnName(playerid, 0), GetPlayerLocation(playerid));
        		SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "DESKRIPSI: %s", text);

			    SendClientMessage(playerid, COLOR_RADIO, "[DISPATCHER]:{FFFFFF} Harap tetap tenang, unit kita sedang dalam perjalanan.");
			    cmd_hangup(playerid, "\1");

			    SetFactionMarker(playerid, FACTION_POLICE, 0x00D700FF);
			}
			case 3:
			{
			    SendFactionMessageEx(FACTION_MEDIC, COLOR_HOSPITAL, "911 CALL: %s (%s)", ReturnName(playerid, 0), GetPlayerLocation(playerid));
       			SendFactionMessageEx(FACTION_MEDIC, COLOR_HOSPITAL, "DESKRIPSI: %s", text);

			    SendClientMessage(playerid, COLOR_HOSPITAL, "[DISPATCHER]:{FFFFFF} Harap tetap tenang, unit kita sedang dalam perjalanan.");
			    cmd_hangup(playerid, "\1");

			    SetFactionMarker(playerid, FACTION_MEDIC, 0x00D700FF);
			}
		}
		switch (PlayerData[playerid][pDealerCall])
		{
			case 1:
			{
				if (!strcmp(text, "Melee Parts"))
				{
				    PlayerData[playerid][pDealerCallMP] = 1;
				    SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} Kamu mendapatkan melee parts. Kamu akan memiliki crates Kamu dalam waktu singkat.");
				    GiveMoney(playerid, -1000);
				    cmd_hangup(playerid, "\1");
				    SetPlayerCheckpoint(playerid, 1238.1721, 235.7764, 19.5547, 5.0);
				    Crate_Melee_Dealer(playerid);
				}
				else if (!strcmp(text, "Pistol Parts"))
				{
				    PlayerData[playerid][pDealerCallPP] = 1;
				    SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} Kamu mendapatkan pistol parts. Kamu akan memiliki cratesmu dalam waktu singkat.");
				    GiveMoney(playerid, -7000);
				    cmd_hangup(playerid, "\1");
				    Crate_Pistol_Dealer(playerid);
				    SetPlayerCheckpoint(playerid, 1238.1721, 235.7764, 19.5547, 5.0);
				}
				else if (!strcmp(text, "SMG Parts"))
				{
				    PlayerData[playerid][pDealerCallSMGP] = 1;
				    SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} Kamu mendapatkan pistol parts. Kamu akan memiliki cratesmu dalam waktu singkat.");
				    GiveMoney(playerid, -20000);
				    cmd_hangup(playerid, "\1");
				    Crate_SMG_Dealer(playerid);
				    SetPlayerCheckpoint(playerid, 1238.1721, 235.7764, 19.5547, 5.0);
				}
				else if (!strcmp(text, "Shotgun Parts"))
				{
				    PlayerData[playerid][pDealerCallSP] = 1;
				    SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} Kamu mendapatkan pistol parts. Kamu akan memiliki cratesmu dalam waktu singkat.");
				    GiveMoney(playerid, -15000);
				    cmd_hangup(playerid, "\1");
				    Crate_Shotgun_Dealer(playerid);
				    SetPlayerCheckpoint(playerid, 1238.1721, 235.7764, 19.5547, 5.0);
				}
				else if (!strcmp(text, "Rifle Parts"))
				{
				    PlayerData[playerid][pDealerCallRP] = 1;
				    SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} Kamu mendapatkan pistol parts. Kamu akan memiliki cratesmu dalam waktu singkat.");
				    GiveMoney(playerid, -30000);
				    cmd_hangup(playerid, "\1");
				    Crate_Rifle_Dealer(playerid);
				    SetPlayerCheckpoint(playerid, 1238.1721, 235.7764, 19.5547, 5.0);
				}
				else if (!strcmp(text, "Drugs"))
				{
				    PlayerData[playerid][pDealerCallDP] = 1;
				    SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} Kamu mendapatkan pistol parts. Kamu akan memiliki cratesmu dalam waktu singkat.");
				    GiveMoney(playerid, -3000);
				    cmd_hangup(playerid, "\1");
				    Crate_Drug_Dealer(playerid);
				    SetPlayerCheckpoint(playerid, 1238.1721, 235.7764, 19.5547, 5.0);
				}
				else SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} Apa maksudmu? \"Melee Parts\" atau \"Pistol Parts\"?");
			}
		}
		switch (PlayerData[playerid][pPlaceAd])
		{
		    case 1:
		    {
			    if (!strcmp(text, "yes", true))
		        {
		            if (GetMoney(playerid) < 200)
				    {
    	                SendClientMessage(playerid, COLOR_CYAN, "[DISPATCHER]:{FFFFFF} Maaf, danamu belum mencukupi untuk diiklankan sekarang.");
					    cmd_hangup(playerid, "\1");
					}
					else
					{
						PlayerData[playerid][pPlaceAd] = 2;
						SendClientMessage(playerid, COLOR_CYAN, "[DISPATCHER]:{FFFFFF} Harap tentukan iklanmu dan kami akan mengiklankannya.");
					}
				}
			}
			case 2:
			{
			    if (GetMoney(playerid) < 200)
			    {
                    SendClientMessage(playerid, COLOR_CYAN, "[DISPATCHER]:{FFFFFF} Maaf, danamu belum mencukupi untuk diiklankan sekarang.");
				    cmd_hangup(playerid, "\1");
				}
				else
				{
				    GiveMoney(playerid, -200);
				    SetTimerEx("Advertise", 3000, false, "d", playerid);

                    PlayerData[playerid][pAdTime] = 120;
				    strpack(PlayerData[playerid][pAdvertise], text, 128 char);

        	        SendClientMessage(playerid, COLOR_CYAN, "[DISPATCHER]:{FFFFFF} Iklan Kamu akan segera diterbitkan.");
				    cmd_hangup(playerid, "\1");
				}
			}
		}
		switch (PlayerData[playerid][pLoanAsk])
		{
			case 1:
			{
				if (!strcmp(text, "Loan", true))
				{
				    PlayerData[playerid][pLoanAsk] = 2;
				    SendClientMessage(playerid, COLOR_ORANGE, "[Bank Consultant]:{FFFFFF} Ini adalah Formulir Pinjaman. Tolong masukkan nama, nomor telepon dan alasan pinjaman singkatmu.");
				}
				else if (!strcmp(text, "Help", true))
				{
				    PlayerData[playerid][pLoanAsk] = 3;
				    SendClientMessage(playerid, COLOR_ORANGE, "[Bank Consultant]:{FFFFFF} Ini baris Bantuan. Mohon jelaskan masalahmu.");
				}
				else SendClientMessage(playerid, COLOR_GREY, "[Bank Consultant]:{FFFFFF} Maaf, saya tidak mengerti. Tolong ulangi.\"Loan\" atau \"Help\"?");
			}
			case 2:
			{
   				SendFactionMessageEx(FACTION_GOV, COLOR_ORANGE, "Rincian pinjaman:{FFFFFF} %s, Nomor telepon: %d", ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
        		SendFactionMessageEx(FACTION_GOV, COLOR_ORANGE, "Form:{FFFFFF} %s", text);

			    SendClientMessage(playerid, COLOR_ORANGE, "[Bank Consultant]:{FFFFFF} Konsultan kami akan menghubungimu segera.");
			    cmd_hangup(playerid, "\1");
			}
			case 3:
			{
			    SendFactionMessageEx(FACTION_GOV, COLOR_ORANGE, "Help Call:{FFFFFF} %s, Nomor telepon: %d", ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
       			SendFactionMessageEx(FACTION_GOV, COLOR_ORANGE, "Pertanyaan:{FFFFFF} %s", text);

			    SendClientMessage(playerid, COLOR_WHITE, "[Bank Consultant]:{FFFFFF} Konsultan kami akan menghubungimu segera.");
			    cmd_hangup(playerid, "\1");
			}
		}
		if (targetid != INVALID_PLAYER_ID && !PlayerData[playerid][pIncomingCall])
		{
			SendClientMessageEx(targetid, COLOR_YELLOW, "(Phone) %s berkata: %s", ReturnName(playerid, 0), text);
		}
	}
	return 0;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
/*	if(EditingTreeID[playerid] != -1 && Iter_Contains(Trees, EditingTreeID[playerid]))
	{
	    if(response == EDIT_RESPONSE_FINAL)
	    {
	        new id = EditingTreeID[playerid];
	        TreeData[id][treeX] = x;
	        TreeData[id][treeY] = y;
	        TreeData[id][treeZ] = z;
	        TreeData[id][treeRX] = rx;
	        TreeData[id][treeRY] = ry;
	        TreeData[id][treeRZ] = rz;

	        SetDynamicObjectPos(objectid, TreeData[id][treeX], TreeData[id][treeY], TreeData[id][treeZ]);
	        SetDynamicObjectRot(objectid, TreeData[id][treeRX], TreeData[id][treeRY], TreeData[id][treeRZ]);

			Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, TreeData[id][treeLabel], E_STREAMER_X, TreeData[id][treeX]);
			Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, TreeData[id][treeLabel], E_STREAMER_Y, TreeData[id][treeY]);
			Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, TreeData[id][treeLabel], E_STREAMER_Z, TreeData[id][treeZ] + 1.5);

		    stmt_bind_value(UpdateTree, 0, DB::TYPE_FLOAT, TreeData[id][treeX]);
		    stmt_bind_value(UpdateTree, 1, DB::TYPE_FLOAT, TreeData[id][treeY]);
		    stmt_bind_value(UpdateTree, 2, DB::TYPE_FLOAT, TreeData[id][treeZ]);
		    stmt_bind_value(UpdateTree, 3, DB::TYPE_FLOAT, TreeData[id][treeRX]);
		    stmt_bind_value(UpdateTree, 4, DB::TYPE_FLOAT, TreeData[id][treeRY]);
		    stmt_bind_value(UpdateTree, 5, DB::TYPE_FLOAT, TreeData[id][treeRZ]);
		    stmt_bind_value(UpdateTree, 6, DB::TYPE_INTEGER, id);
			stmt_execute(UpdateTree);

	        EditingTreeID[playerid] = -1;
	    }

	    if(response == EDIT_RESPONSE_CANCEL)
	    {
	        new id = EditingTreeID[playerid];
	        SetDynamicObjectPos(objectid, TreeData[id][treeX], TreeData[id][treeY], TreeData[id][treeZ]);
	        SetDynamicObjectRot(objectid, TreeData[id][treeRX], TreeData[id][treeRY], TreeData[id][treeRZ]);
	        EditingTreeID[playerid] = -1;
	    }
	}
 */
	if (response == EDIT_RESPONSE_FINAL)
	{
	    if (PlayerData[playerid][pEditGraffiti] != -1 && GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiExists])
	    {
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][0] = x;
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][1] = y;
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][2] = z;
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][3] = rz;

			Graffiti_Refresh(PlayerData[playerid][pEditGraffiti]);
			Graffiti_Save(PlayerData[playerid][pEditGraffiti]);
		}
	    else if (PlayerData[playerid][pEditRack] != -1 && RackData[PlayerData[playerid][pEditRack]][rackExists])
	    {
			RackData[PlayerData[playerid][pEditRack]][rackPos][0] = x;
			RackData[PlayerData[playerid][pEditRack]][rackPos][1] = y;
			RackData[PlayerData[playerid][pEditRack]][rackPos][2] = z;
			RackData[PlayerData[playerid][pEditRack]][rackPos][3] = rz;

			Rack_Refresh(PlayerData[playerid][pEditRack]);
			Rack_Save(PlayerData[playerid][pEditRack]);
		}
	    else if (PlayerData[playerid][pEditPump] != -1 && PumpData[PlayerData[playerid][pEditPump]][pumpExists])
	    {
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][0] = x;
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][1] = y;
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][2] = z;
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][3] = rz;

			Pump_Refresh(PlayerData[playerid][pEditPump]);
			Pump_Save(PlayerData[playerid][pEditPump]);

			SendServerMessage(playerid, "Kamu telah mengedit posisi pompa ID: %d.", PlayerData[playerid][pEditPump]);
	    }
	    else if (PlayerData[playerid][pEditFurniture] != -1 && FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureExists])
	    {
	        new id = House_Inside(playerid);

	        if (id != -1 && House_IsOwner(playerid, id))
			{
			    FurnitureData[PlayerData[playerid][pEditFurniture]][furniturePos][0] = x;
			    FurnitureData[PlayerData[playerid][pEditFurniture]][furniturePos][1] = y;
			    FurnitureData[PlayerData[playerid][pEditFurniture]][furniturePos][2] = z;
                FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureRot][0] = rx;
                FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureRot][1] = ry;
                FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureRot][2] = rz;

				Furniture_Refresh(PlayerData[playerid][pEditFurniture]);
				Furniture_Save(PlayerData[playerid][pEditFurniture]);

				SendServerMessage(playerid, "Kamu telah mengedit posisi item \"%s\".", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);
			}
	    }
	    else if (PlayerData[playerid][pEditGate] != -1 && GateData[PlayerData[playerid][pEditGate]][gateExists])
	    {
	        switch (PlayerData[playerid][pEditType])
	        {
	            case 1:
	            {
	                new id = PlayerData[playerid][pEditGate];

	                GateData[PlayerData[playerid][pEditGate]][gatePos][0] = x;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][1] = y;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][2] = z;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][3] = rx;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][4] = ry;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
                    SendServerMessage(playerid, "Kamu telah mengedit posisi gate ID: %d.", id);
				}
				case 2:
	            {
	                new id = PlayerData[playerid][pEditGate];

	                GateData[PlayerData[playerid][pEditGate]][gateMove][0] = x;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][1] = y;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][2] = z;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][3] = rx;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][4] = ry;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
                    SendServerMessage(playerid, "Kamu telah mengedit posisi gate ID: %d.", id);
				}
			}
		}
	}
	if (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL)
	{
	    if (PlayerData[playerid][pEditFurniture] != -1)
			Furniture_Refresh(PlayerData[playerid][pEditFurniture]);

	    if (PlayerData[playerid][pEditPump] != -1)
			Pump_Refresh(PlayerData[playerid][pEditPump]);

        if (PlayerData[playerid][pEditRack] != -1)
			Rack_Refresh(PlayerData[playerid][pEditRack]);

        if (PlayerData[playerid][pEditGraffiti] != -1)
			Graffiti_Refresh(PlayerData[playerid][pEditGraffiti]);

	    PlayerData[playerid][pEditType] = 0;
	    PlayerData[playerid][pEditGate] = -1;
		PlayerData[playerid][pEditPump] = -1;
		PlayerData[playerid][pGasStation] = -1;
		PlayerData[playerid][pEditFurniture] = -1;
		PlayerData[playerid][pEditGraffiti] = -1;
	}
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if (response)
	{
		if (PlayerData[playerid][pEditType] != 0)
 		{
 		    AccessoryData[playerid][PlayerData[playerid][pEditType]-1][0] = fOffsetX;
       		AccessoryData[playerid][PlayerData[playerid][pEditType]-1][1] = fOffsetY;
         	AccessoryData[playerid][PlayerData[playerid][pEditType]-1][2] = fOffsetZ;

          	AccessoryData[playerid][PlayerData[playerid][pEditType]-1][3] = fRotX;
           	AccessoryData[playerid][PlayerData[playerid][pEditType]-1][4] = fRotY;
           	AccessoryData[playerid][PlayerData[playerid][pEditType]-1][5] = fRotZ;

            AccessoryData[playerid][PlayerData[playerid][pEditType]-1][6] = (fScaleX > 3.0) ? (3.0) : (fScaleX);
            AccessoryData[playerid][PlayerData[playerid][pEditType]-1][7] = (fScaleY > 3.0) ? (3.0) : (fScaleY);
			AccessoryData[playerid][PlayerData[playerid][pEditType]-1][8] = (fScaleZ > 3.0) ? (3.0) : (fScaleZ);

			switch (PlayerData[playerid][pEditType])
			{
	  			case 1:
	    		{
		            PlayerData[playerid][pEditType] = 0;
		            PlayerData[playerid][pGlasses] = modelid;

					if (!PlayerData[playerid][pCreated])
					{
		                for (new i = 23; i < 34; i ++) {
				    		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
						}
						SelectTextDraw(playerid, -1);
						TogglePlayerControllable(playerid, 0);
					}
		            SendServerMessage(playerid, "Kamu telah mengkonfirmasi kacamatamu.");
				}
				case 2:
	    		{
	                PlayerData[playerid][pEditType] = 0;
		            PlayerData[playerid][pHat] = modelid;

	                if (!PlayerData[playerid][pCreated])
					{
		                for (new i = 23; i < 34; i ++) {
				    		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
						}
						SelectTextDraw(playerid, -1);
						TogglePlayerControllable(playerid, 0);
					}
		            SendServerMessage(playerid, "Kamu telah mengkonfirmasi topimu.");
				}
				case 3:
	    		{
	                PlayerData[playerid][pEditType] = 0;
		            PlayerData[playerid][pBandana] = modelid;

                 	if (!PlayerData[playerid][pCreated])
					{
		                for (new i = 23; i < 34; i ++) {
				    		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
						}
						SelectTextDraw(playerid, -1);
						TogglePlayerControllable(playerid, 0);
					}
		            SendServerMessage(playerid, "Kamu telah mengkonfirmasi bandanamu.");
				}
			}
	    }
	}
	else
	{
	    if (!PlayerData[playerid][pCreated])
		{
  			for (new i = 23; i < 34; i ++) {
			  	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			SelectTextDraw(playerid, -1);

			TogglePlayerControllable(playerid, 0);
			RemovePlayerAttachedObject(playerid, PlayerData[playerid][pEditType] - 1);
		}
	}
	return 1;
}

public OnModelSelectionResponse(playerid, extraid, index, modelid, response)
{
	if ((extraid >= MODEL_SELECTION_GLASSES && extraid <= MODEL_SELECTION_BANDANAS) && !PlayerData[playerid][pCreated] && !response)
	{
	    for (new i = 23; i < 34; i ++) {
    		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		SetTimerEx("SelectTD", 100, false, "d", playerid);
		return 1;
	}
	if ((extraid == MODEL_SELECTION_INVENTORY && response) && InventoryData[playerid][index][invExists])
	{
	    new
	        name[48],
			id = -1,
			backpack = GetPlayerBackpack(playerid);

		strunpack(name, InventoryData[playerid][index][invItem]);
	    PlayerData[playerid][pInventoryItem] = index;

		switch (PlayerData[playerid][pStorageSelect])
		{
		    case 1:
		    {
		    	if ((id = House_Inside(playerid)) != -1 && House_IsOwner(playerid, id))
				{
					if (InventoryData[playerid][index][invQuantity] == 1)
					{
					    if (!strcmp(name, "Backpack") && GetHouseBackpack(id) != -1)
					        return SendErrorMessage(playerid, "Kamu hanya bisa menyimpan satu ransel di rumahmu.");

		        		House_AddItem(id, name, InventoryData[playerid][index][invModel], 1);
		        		Inventory_Remove(playerid, name);

		        		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menyimpan sebuah \"%s\" di gudang rumahnya.", ReturnName(playerid, 0), name);
				 		House_ShowItems(playerid, id);

				 		if (!strcmp(name, "Backpack") && backpack != -1)
						{
					        BackpackData[backpack][backpackPlayer] = 0;
					        BackpackData[backpack][backpackHouse] = HouseData[id][houseID];

							Backpack_Save(backpack);
							SetAccessories(playerid);
					    }
		        	}
		        	else Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Penyimpanan Rumah", "Item: %s (Jumlah: %d)\n\nHarap masukkan jumlah yang ingin kamu simpan untuk item ini:", "Simpan", "Kembali", name, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
				}
				PlayerData[playerid][pStorageSelect] = 0;
			}
			case 2:
		    {
		    	if ((id = Car_Nearest(playerid)) != -1 && !CarData[id][carLocked])
				{
					if (InventoryData[playerid][index][invQuantity] == 1)
					{
					    if (!strcmp(name, "Backpack") && GetVehicleBackpack(id) != -1)
					        return SendErrorMessage(playerid, "Kamu hanya bisa menyimpan satu ransel di bagasimu.");

		        		Car_AddItem(id, name, InventoryData[playerid][index][invModel], 1);
		        		Inventory_Remove(playerid, name);

		        		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyimpan sebuah \"%s\" ke dalam bagasi.", ReturnName(playerid, 0), name);
				 		Car_ShowTrunk(playerid, id);

				 		if (!strcmp(name, "Backpack") && backpack != -1)
						{
					        BackpackData[backpack][backpackPlayer] = 0;
					        BackpackData[backpack][backpackVehicle] = CarData[id][carID];

							Backpack_Save(backpack);
							SetAccessories(playerid);
					    }
		        	}
		        	else Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Penyimpanan Mobil", "Item: %s (Jumlah: %d)\n\nHarap masukkan jumlah yang ingin kamu simpan untuk item ini:", "Simpan", "Kembali", name, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
				}
				PlayerData[playerid][pStorageSelect] = 0;
			}
			case 3:
		    {
		        if (!strcmp(name, "Backpack"))
		            return SendErrorMessage(playerid, "Item ini tidak bisa disimpan.");

		    	if (InventoryData[playerid][index][invQuantity] == 1)
				{
					Backpack_Add(GetPlayerBackpack(playerid), name, InventoryData[playerid][index][invModel], 1);
   					Inventory_Remove(playerid, name);

					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyimpan sebuah \"%s\" kedalam tasnya.", ReturnName(playerid, 0), name);
					Backpack_Open(playerid);
				}
   				else
	   			{
				   	Dialog_Show(playerid, BackpackDeposit, DIALOG_STYLE_INPUT, "Penyimpanan Tas", "Item: %s (Jumlah: %d)\n\nHarap masukkan jumlah yang ingin kamu simpan untuk item ini:", "Simpan", "Kembali", name, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
				}
				PlayerData[playerid][pStorageSelect] = 0;
			}
			default:
			{
			    if (PlayerData[playerid][pTutorialStage] == 3 && !strcmp(name, "Demo Soda", true))
			    {
			        SendClientMessage(playerid, COLOR_SERVER, "Klik pada pilihan pertama untuk menggunakan item yang dipilih.");
			    }
		    	format(name, sizeof(name), "%s (%d)", name, InventoryData[playerid][index][invQuantity]);

		    	if (Garbage_Nearest(playerid) != -1) {
					Dialog_Show(playerid, Inventory, DIALOG_STYLE_LIST, name, "Gunakan Item\nBerikan Item\nBuang Item", "Pilih", "Batal");
				}
				else {
				    Dialog_Show(playerid, Inventory, DIALOG_STYLE_LIST, name, "Gunakan Item\nBerikan Item\nBuang Item", "Pilih", "Batal");
				}
			}
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_GLASSES))
	{
	    if (modelid == 19300)
	    {
            for (new i = 23; i < 34; i ++) {
		    	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			SelectTextDraw(playerid, -1);
			PlayerData[playerid][pGlasses] = 0;

			RemovePlayerAttachedObject(playerid, 0);
			SendServerMessage(playerid, "Kamu telah menghapus kacamatamu.");
	    }
	    else
	    {
	        PlayerData[playerid][pEditType] = 1;
	        TogglePlayerControllable(playerid, 1);

			SetPlayerAttachedObject(playerid, 0, modelid, 2, 0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000);
			EditAttachedObject(playerid, 0);
		}
	}
    if ((response) && (extraid == MODEL_SELECTION_HATS))
	{
	    if (modelid == 19300)
	    {
			for (new i = 23; i < 34; i ++) {
		    	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			SelectTextDraw(playerid, -1);
			PlayerData[playerid][pHat] = 0;

			RemovePlayerAttachedObject(playerid, 1);
			SendServerMessage(playerid, "Kamu telah melepaskan topimu.");
	    }
	    else
	    {
		    PlayerData[playerid][pEditType] = 2;
		    TogglePlayerControllable(playerid, 1);

			SetPlayerAttachedObject(playerid, 1, modelid, 2, 0.1565, 0.0273, -0.0002, -7.9245, -1.3224, 15.0999);
			EditAttachedObject(playerid, 1);
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_BANDANAS))
	{
	    if (modelid == 19300)
	    {
            for (new i = 23; i < 34; i ++) {
		    	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			SelectTextDraw(playerid, -1);
			PlayerData[playerid][pBandana] = 0;

			RemovePlayerAttachedObject(playerid, 2);
			SendServerMessage(playerid, "Kamu telah melepaskan bandanamu.");
	    }
	    else
	    {
		    PlayerData[playerid][pEditType] = 3;
            TogglePlayerControllable(playerid, 1);

			SetPlayerAttachedObject(playerid, 2, modelid, 2, 0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000);
			EditAttachedObject(playerid, 2);
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_SKIN))
	{
	    PlayerData[playerid][pSkin] = modelid;

		SetSpawnInfo(playerid, 0, PlayerData[playerid][pSkin], 1684.4392, 1771.6658, 10.8203, 270.0000, 0, 0, 0, 0, 0, 0);
		TogglePlayerSpectating(playerid, 0);
	}
	if ((response) && (extraid == MODEL_SELECTION_UNDERCOVER))
	{
	    new factionid = PlayerData[playerid][pFaction];

    	SetPlayerSkin(playerid, modelid);
		PlayerData[playerid][pSkin] = modelid;
		SetPlayerColor(playerid, DEFAULT_COLOR);
		SetPlayerArmour(playerid, 150.0);
		SetPlayerHealth(playerid, 100.0);
	  	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s bersiaplah dengan peralatan Undercover-nya.", ReturnName(playerid, 0));
	   	SendFactionMessage(factionid, COLOR_FACTIONCHAT, "**DISPATCH: %s %s sekarang berada di Undercover Duty.**", Faction_GetRank(playerid), ReturnName(playerid, 0));
	}
	if ((response) && (extraid == MODEL_SELECTION_OFFDUTYCLOTHES))
	{
    	SetPlayerSkin(playerid, modelid);
		PlayerData[playerid][pSkin] = modelid;
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mengganti pakaian mereka.", ReturnName(playerid, 0));
	}
	if ((response) && (extraid == MODEL_SELECTION_ADMINCLOTHES))
	{
    	SetPlayerSkin(playerid, modelid);
		PlayerData[playerid][pSkin] = modelid;
	}
	if ((response) && (extraid == MODEL_SELECTION_CLOTHES))
	{
	    new
			bizid = -1,
			price;

	    if ((bizid = Business_Inside(playerid)) == -1 || BusinessData[bizid][bizType] != 3)
	        return 0;

		if (BusinessData[bizid][bizProducts] < 1)
		    return SendErrorMessage(playerid, "Bisnis ini kehabisan stok.");

	    price = BusinessData[bizid][bizPrices][PlayerData[playerid][pClothesType] - 1];

	    if (GetMoney(playerid) < price)
	        return SendErrorMessage(playerid, "Kamu memiliki dana yang tidak mencukupi untuk pembelian.");

		GiveMoney(playerid, -price);

		BusinessData[bizid][bizProducts]--;
		BusinessData[bizid][bizVault] += Tax_Percent(price);

		Business_Save(bizid);
		Tax_AddPercent(price);

	    switch (PlayerData[playerid][pClothesType])
	    {
	        case 1:
	        {
	            PlayerData[playerid][pSkin] = modelid;
	            SetPlayerSkin(playerid, modelid);

	            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima beberapa pakaian.", ReturnName(playerid, 0), FormatNumber(price));
			}
			case 2:
			{
			    PlayerData[playerid][pEditType] = 1;
                PlayerData[playerid][pGlasses] = modelid;

			    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima beberapa kacamata.", ReturnName(playerid, 0), FormatNumber(price));
				RemovePlayerAttachedObject(playerid, 0);

                SetPlayerAttachedObject(playerid, 0, modelid, 2, 0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000);
				EditAttachedObject(playerid, 0);
			}
			case 3:
			{
			    PlayerData[playerid][pHat] = modelid;
			    PlayerData[playerid][pEditType] = 2;

			    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima beberapa pakaian.", ReturnName(playerid, 0), FormatNumber(price));
                RemovePlayerAttachedObject(playerid, 1);

				SetPlayerAttachedObject(playerid, 1, modelid, 2, 0.1565, 0.0273, -0.0002, -7.9245, -1.3224, 15.0999);
				EditAttachedObject(playerid, 1);
			}
			case 4:
			{
			    PlayerData[playerid][pBandana] = modelid;
			    PlayerData[playerid][pEditType] = 3;

			    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima beberapa bandana.", ReturnName(playerid, 0), FormatNumber(price));
			    RemovePlayerAttachedObject(playerid, 2);

			    SetPlayerAttachedObject(playerid, 2, modelid, 2, 0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000);
				EditAttachedObject(playerid, 2);
			}
	    }
	}
	if ((response) && (extraid == MODEL_SELECTION_DEALER))
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
 	    {
	        if (!DealershipCars[id][index][vehModel])
	        {
	            Dialog_Show(playerid, AddVehicle, DIALOG_STYLE_LIST, "Tambah Kendaraan", "Tambah dengan nama\nTambah dengan Thumbnail", "Pilih", "Batal");
			}
			else
			{
			    PlayerData[playerid][pDealerCar] = index;
			    Dialog_Show(playerid, CarOptions, DIALOG_STYLE_LIST, "Dealership Vehicle", "Ubah Harga (%s)\nHapus Kendaraan", "Pilih", "Batal", FormatNumber(DealershipCars[id][index][vehPrice]));
			}
	    }
	}
	if ((response) && (extraid == MODEL_SELECTION_DEALER_ADD))
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
	        for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
			{
				if (DealershipCars[id][i][vehModel] == modelid)
	            	return SendErrorMessage(playerid, "Kendaraan ini sudah dijual di dealer ini.");
			}
			PlayerData[playerid][pDealerCar] = modelid;
			Dialog_Show(playerid, DealerCarPrice, DIALOG_STYLE_INPUT, "Masukan Harga", "Harap masukkan harga untuk '%s':", "Submit", "Batal", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_BUY_CAR))
	{
	    new id = Business_Inside(playerid);

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
		    if (!DealershipCars[id][index][vehModel])
		        return SendErrorMessage(playerid, "Tidak ada model di slot yang dipilih.");

		    if (GetMoney(playerid) < DealershipCars[id][index][vehPrice])
	    	    return SendErrorMessage(playerid, "Kamu tidak mampu membeli kendaraan ini (%s).", FormatNumber(DealershipCars[id][index][vehPrice]));

			PlayerData[playerid][pDealerCar] = index;
			Dialog_Show(playerid, ConfirmCarBuy, DIALOG_STYLE_MSGBOX, "Konfrimasi Beli", "Apakah kamu yakin ingin membeli ini? '%s'?\n\nNote: Biaya kendaraan ini %s di dealer ini.", "Ya", "Tidak", ReturnVehicleModelName(modelid), FormatNumber(DealershipCars[id][index][vehPrice]));
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_FURNITURE))
	{
        new
			id = Business_Inside(playerid),
			type = PlayerData[playerid][pFurnitureType],
			price;

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 7)
	    {
	        price = BusinessData[id][bizPrices][type];

	        if (GetMoney(playerid) < price)
	            return SendErrorMessage(playerid, "Kamu memiliki dana yang tidak mencukupi untuk pembelian.");

			if (BusinessData[id][bizProducts] < 1)
		    	return SendErrorMessage(playerid, "Bisnis ini kehabisan stok.");

			new item = Inventory_Add(playerid, GetFurnitureNameByModel(modelid), modelid);

            if (item == -1)
   	        	return SendErrorMessage(playerid, "Kamu tidak memiliki slot yang tersisa.");

			GiveMoney(playerid, -price);
			SendServerMessage(playerid, "Kamu telah membeli \"%s\" untuk %s.", GetFurnitureNameByModel(modelid), FormatNumber(price));

			BusinessData[id][bizProducts]--;
			BusinessData[id][bizVault] += Tax_Percent(price);

			Business_Save(id);
			Tax_AddPercent(price);
	    }
	}
	if ((response) && (extraid == MODEL_SELECTION_COLOR))
	{
	    new vehicleid = GetNearestVehicle(playerid);

        if (vehicleid == INVALID_VEHICLE_ID)
		    return SendErrorMessage(playerid, "Kamu tidak berdiri di dekat kendaraan apapun.");

		if (!Inventory_HasItem(playerid, "Spray Can"))
		    return SendErrorMessage(playerid, "Kamu tidak memiliki cans of spray paint.");

	    ApplyAnimation(playerid, "GRAFFITI", "null", 4.0, 0, 0, 0, 0, 0, 0);
		ApplyAnimation(playerid, "GRAFFITI", "spraycan_fire", 4.0, 1, 0, 0, 0, 0, 1);
        ApplyAnimation(playerid, "GRAFFITI", "spraycan_fire", 4.0, 1, 0, 0, 0, 0, 1);

		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Mengecat kendaraan...", 3000, 3);
		SetTimerEx("ResprayCar", 3000, false, "ddd", playerid, vehicleid, modelid);
	}
	if ((response) && (extraid == MODEL_SELECTION_SKINS))
	{
	    Dialog_Show(playerid, FactionSkin, DIALOG_STYLE_LIST, "Edit Skin", "Tambah Model dengan ID\nTambah model dengan Thumbnail\nBersihkan Slot", "Pilih", "Batal");
	    PlayerData[playerid][pSelectedSlot] = index;
	}
	if ((response) && (extraid == MODEL_SELECTION_ADD_SKIN))
	{
	    FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = modelid;
		Faction_Save(PlayerData[playerid][pFactionEdit]);

		SendServerMessage(playerid, "Kamu telah mengatur ID skin di slot %d ke %d.", PlayerData[playerid][pSelectedSlot], modelid);
	}
	if ((response) && (extraid == MODEL_SELECTION_FACTION_SKIN))
	{
	    new factionid = PlayerData[playerid][pFaction];

		if (factionid == -1 || !IsNearFactionLocker(playerid))
	    	return 0;

		if (modelid == 19300)
		    return SendErrorMessage(playerid, "Tidak ada model di slot yang dipilih.");

  		SetPlayerSkin(playerid, modelid);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mengubah seragamnya.", ReturnName(playerid, 0));
	}
	if ((response) && (extraid == MODEL_SELECTION_WHEELS))
	{
        new vehicleid = GetPlayerVehicleID(playerid);

		if (!IsPlayerInAnyVehicle(playerid) || !IsDoorVehicle(vehicleid))
	    	return 0;

	    AddComponent(vehicleid, modelid);
	    SendServerMessage(playerid, "Kamu menambahkan \"%s\" ban ke kendaraannya.", GetWheelName(modelid));
	}
	return 1;
}

forward ResprayCar(playerid, vehicleid, color);
public ResprayCar(playerid, vehicleid, color)
{
	if (!PlayerData[playerid][pLogged] || GetNearestVehicle(playerid) != vehicleid)
	    return 0;

	Inventory_Remove(playerid, "Spray Can");
	ClearAnimations(playerid);

	SetVehicleColor(vehicleid, color, color);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menggunakan sekaleng cat semprot di %s.", ReturnName(playerid, 0), ReturnVehicleName(vehicleid));
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if (clickedid == Text:INVALID_TEXT_DRAW)
	{
		if (!Dialog_Opened(playerid) && PlayerData[playerid][pDisplayStats] > 0)
	    {
	        if (PlayerData[playerid][pDisplayStats] == 2) {
	        	for (new i = 50; i < 58; i ++) PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
	    	}
		    else for (new i = 40; i < 50; i ++) {
				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			CancelSelectTextDraw(playerid);
			PlayerData[playerid][pDisplayStats] = false;
		}
	}
	return 0;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if (!Dialog_Opened(playerid))
	{
		if (!PlayerData[playerid][pCharacter])
		{
			if (playertextid == PlayerData[playerid][pTextdraws][2])
				SelectCharacter(playerid, 1);

			else if (playertextid == PlayerData[playerid][pTextdraws][3])
				SelectCharacter(playerid, 2);

			else if (playertextid == PlayerData[playerid][pTextdraws][4])
				SelectCharacter(playerid, 3);
		}
		else
		{
		    if (playertextid == PlayerData[playerid][pTextdraws][78])
				SQL_LoadCharacter(playerid, PlayerData[playerid][pCharacter]);

			else if (playertextid == PlayerData[playerid][pTextdraws][79]) {
			    Dialog_Show(playerid, DeleteChar, DIALOG_STYLE_MSGBOX, "Hapus Karakter", "Warning: Yakin ingin menghapus karakter \"%s\"?\n\nKamu tidak akan mendapatkan pengembalian dana untuk properti yang hilang.", "Konfirmasi", "Batal", PlayerCharacters[playerid][PlayerData[playerid][pCharacter] - 1]);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][80]) {
			    ShowCharacterMenu(playerid);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][19]) {
			    CancelSelectTextDraw(playerid);
			    Dialog_Show(playerid, Gender, DIALOG_STYLE_LIST, "Kelamin", "Pria\nWanita", "Pilih", "Batal");
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][20]) {
			    Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Tanggal Lahir", "Harap masukkan tanggal lahirmu di bawah ini (HH/BB/TTTT):", "Lanjut", "Batal");
			}
            else if (playertextid == PlayerData[playerid][pTextdraws][21]) {
			    Dialog_Show(playerid, Origin, DIALOG_STYLE_INPUT, "Asal", "Harap masukkan asal geografis karaktermu di bawah ini:", "Lanjut", "Batal");
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][22])
			{
			    if (!strlen(PlayerData[playerid][pBirthdate]))
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Server: Kamu harus menentukan tanggal lahir.");

				else if (!strlen(PlayerData[playerid][pOrigin]))
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Server: Kamu harus menentukan asal.");

				else
				{
				    for (new i = 11; i < 23; i ++) {
						PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
					}
                    switch (PlayerData[playerid][pGender])
                    {
                        case 1:
                        	ShowModelSelectionMenu(playerid, "Pilih Skin", MODEL_SELECTION_SKIN, g_hMaleSkins, sizeof(g_hMaleSkins), -16.0, 0.0, -55.0);

						case 2:
                       		ShowModelSelectionMenu(playerid, "Pilih Skin", MODEL_SELECTION_SKIN, g_hFemaleSkins, sizeof(g_hFemaleSkins), -16.0, 0.0, -55.0);
                    }
				}
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][26])
			{
			    static
					arrGlasses[] = {19300, 19006, 19007, 19008, 19009, 19010, 19011, 19012, 19013, 19014, 19015, 19016, 19017, 19018, 19019, 19020, 19021, 19022, 19023, 19024, 19025, 19026, 19027, 19028, 19029, 19030, 19031, 19032, 19033, 19034, 19035};

				for (new i = 23; i < 34; i ++) {
				    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
				}
				ShowModelSelectionMenu(playerid, "Kacamata", MODEL_SELECTION_GLASSES, arrGlasses, sizeof(arrGlasses), 0.0, 0.0, 90.0);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][28])
			{
			    static
					arrHats[] = {19300, 18926, 18927, 18928, 18929, 18930, 18931, 18932, 18933, 18934, 18935, 18944, 18945, 18946, 18947, 18948, 18949, 18950, 18951, 18636, 18638, 19554, 19553, 19099};

				for (new i = 23; i < 34; i ++) {
				    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
				}
				ShowModelSelectionMenu(playerid, "Topi", MODEL_SELECTION_HATS, arrHats, sizeof(arrHats), -20.0, -90.0, 0.0);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][30])
			{
			    static
					arrBandanas[] = {19300, 18911, 18912, 18913, 18914, 18915, 18916, 18917, 18918, 18919, 18920, 19801};

				for (new i = 23; i < 34; i ++) {
				    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
				}
				ShowModelSelectionMenu(playerid, "Bandana", MODEL_SELECTION_BANDANAS, arrBandanas, sizeof(arrBandanas), 0.0, 0.0, 90.0);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][33])
			{
			    for (new i = 23; i < 34; i ++) {
				    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
				}
			    for (new i = 0; i < 100; i ++) {
			        SendClientMessage(playerid, -1, "");
			    }
			    CancelSelectTextDraw(playerid);
			    TogglePlayerControllable(playerid, 1);

				PlayerData[playerid][pTutorialStage] = 1;
			    PlayerData[playerid][pTutorialObject] = CreatePlayerObject(playerid, 1543, -226.4219, 1408.4594, 26.7734, 0.0, 0.0, 0.0);

			    SetPlayerCheckpoint(playerid, -226.4219, 1408.4594, 27.7734, 0.5);
			    SendClientMessage(playerid, COLOR_SERVER, "Silakan menuju ke item dan jongkok (tekan 'C').");

				SetPlayerPos(playerid, -226.2436, 1400.4767, 27.7656);
				SetPlayerFacingAngle(playerid, 0.0000);

				SetPlayerInterior(playerid, 18);
				SetPlayerVirtualWorld(playerid, (playerid + 2000));

				SetCameraBehindPlayer(playerid);
				ShowHungerTextdraw(playerid, 1);

				PlayerData[playerid][pThirst] = 80;
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][47])
			{
				new
					string[128];

				CancelSelectTextDraw(playerid);

				format(string, sizeof(string), "%s\n%s\n%s", (!PlayerCharacters[playerid][0][0]) ? ("Slot Kosong") : (PlayerCharacters[playerid][0]), (!PlayerCharacters[playerid][1][0]) ? ("Slot Kosong") : (PlayerCharacters[playerid][1]), (!PlayerCharacters[playerid][2][0]) ? ("Slot Kosong") : (PlayerCharacters[playerid][2]));
				Dialog_Show(playerid, CharList, DIALOG_STYLE_LIST, "Karakter", string, "Pilih", "Batal");
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][48])
			{
				for (new i = 40; i < 50; i ++)
			        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

				CancelSelectTextDraw(playerid);
				PlayerData[playerid][pDisplayStats] = false;

				SetTimerEx("OpenInventory", 100, false, "d", playerid);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][49])
			{
				for (new i = 40; i < 50; i ++)
			        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

				CancelSelectTextDraw(playerid);
				PlayerData[playerid][pDisplayStats] = false;
			}
            else if (playertextid == PlayerData[playerid][pTextdraws][55])
			{
			    for (new i = 50; i < 58; i ++)
			        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

				CancelSelectTextDraw(playerid);
				PlayerData[playerid][pDisplayStats] = false;
			}
            else if (playertextid == PlayerData[playerid][pTextdraws][56])
			{
			    for (new i = 40; i < 58; i ++)
			    {
			        if (i >= 50)
				        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

					else if (i < 50)
					    PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			    }
			    PlayerData[playerid][pDisplayStats] = true;
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][57])
			{
			    if (PlayerData[playerid][pCharacterMenu] == PlayerData[playerid][pCharacter])
			        return SendErrorMessage(playerid, "Kamu sedang bermain pada karakter ini, kamu tidak dapat menghapusnya.");

                Dialog_Show(playerid, DeleteCharacter, DIALOG_STYLE_MSGBOX, "Hapus Karakter", "Warning: Yakin ingin menghapus karakter \"%s\"?\n\nKamu tidak akan mendapatkan pengembalian dana untuk properti yang hilang.", "Konfirmasi", "Batal", PlayerCharacters[playerid][PlayerData[playerid][pCharacterMenu] - 1]);
			}
		}
	}
	//atmklik
	if(playertextid  == atmklik[playerid][12]) //cek saldo
 	{
			new saldo[256];
			format(saldo , sizeof(saldo),"Total saldo bank anda adalah :%d",PlayerData[playerid][pBankMoney]);
			ShowPlayerDialog(playerid, 19777, DIALOG_STYLE_MSGBOX, "Cek saldo", saldo, "Oke", "");// This is a comment
	}
	if(playertextid  == atmklik[playerid][13])
 	{
	        if(PlayerData[playerid][pBankMoney]>=500)
	        {
	            PlayerData[playerid][pBankMoney] -= 500;
	            GiveMoney(playerid, 500);
				SendClientMessage(playerid, COLOR_TWPINK, "Kamu Mengambil $500 dari atm");
	        }
	        else
			{
	        	SendClientMessage(playerid, 0xA3B4C5FF, "Uang di Bank kurang");
			}
	}
	if(playertextid  == atmklik[playerid][14])
 	{
	        if(PlayerData[playerid][pBankMoney]>=1000)
	        {
	            PlayerData[playerid][pBankMoney] -= 1000;
	            GiveMoney(playerid, 1000);

	           // new bankir[100];
	            //format(bankir, sizeof(bankir),"$%d",PlayerInfo[playerid][pAccount]);
			//	PlayerTextDrawSetString(playerid, TextdrawBank[playerid], bankir);
				SendClientMessage(playerid, COLOR_TWPINK, "Kamu Mengambil $1000 dari atm");
	        }
	        else
			{
	        	SendClientMessage(playerid, 0xA3B4C5FF, "Uang di Bank kurang");
			}
	}
	if(playertextid  == atmklik[playerid][15])
 	{
	        if(PlayerData[playerid][pBankMoney]>=2000)
	        {
	            PlayerData[playerid][pBankMoney] -= 2000;
	            GiveMoney(playerid, 2000);

	          //  new bankir[100];
	          //  format(bankir, sizeof(bankir),"$%d",PlayerInfo[playerid][pAccount]);
			//	PlayerTextDrawSetString(playerid, TextdrawBank[playerid], bankir);
				SendClientMessage(playerid, COLOR_TWPINK, "Kamu Mengambil $2000 dari atm");
	        }
	        else
			{
	        	SendClientMessage(playerid, 0xA3B4C5FF, "Uang di Bank kurang");
			}
	}
	if(playertextid  == atmklik[playerid][16])
 	{
	        ShowPlayerDialog(playerid,17717, DIALOG_STYLE_INPUT, "Withdraw", "Masukan jumlah uang yang ingin diambil", "Oke", "Batal");
	}
	if(playertextid  == atmklik[playerid][17])
 	{
	        ShowPlayerDialog(playerid,17718, DIALOG_STYLE_INPUT, "Transfer", "Masukan jumlah uang yang ingin Ditransfer", "Oke", "Batal");
	}
	if(playertextid  == atmklik[playerid][18])
 	{
	        CancelSelectTextDraw(playerid);
	        for(new a=0 ; a<19 ; a++)
		   	PlayerTextDrawHide(playerid, atmklik[playerid][a]);

	}
	return 1;
}

//END

forward ForkliftUpdate(playerid, vehid);
public ForkliftUpdate(playerid, vehid)
{
	if (PlayerData[playerid][pJob] != JOB_UNLOADER || GetVehicleModel(vehid) != 530 || !IsPlayerInWarehouse(playerid) || !PlayerData[playerid][pLoading]) {
	    return 0;
	}
	GetVehicleHealth(vehid, CoreVehicles[vehid][vehLoadHealth]);
    PlayerData[playerid][pLoading] = 0;

	CoreVehicles[vehid][vehLoadType] = 7;
	CoreVehicles[vehid][vehCrate] = CreateDynamicObject(3798, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);

	AttachDynamicObjectToVehicle(CoreVehicles[vehid][vehCrate], vehid, 0.0, 1.2, -0.05, 0.0, 0.0, 0.0);
	SetPlayerCheckpoint(playerid, 1306.3438, -45.3100, 1001.0313, 1.5);

	TogglePlayerControllable(playerid, 1);
	SendServerMessage(playerid, "Kirimkan crates ke marker.");
	return 1;
}

stock ShowContacts(playerid)
{
	new
	    string[32 * MAX_CONTACTS],
		count = 0;

	string = "Add Contact\n";

	for (new i = 0; i != MAX_CONTACTS; i ++) if (ContactData[playerid][i][contactExists]) {
	    format(string, sizeof(string), "%s%s - #%d\n", string, ContactData[playerid][i][contactName], ContactData[playerid][i][contactNumber]);

		ListedContacts[playerid][count++] = i;
	}
	Dialog_Show(playerid, Contacts, DIALOG_STYLE_LIST, "Kontak", string, "Pilih", "Kembali");
	return 1;
}

stock GetPlayerID(name[], underscore = 1)
{
	foreach (new i : Player) if (!strcmp(ReturnName(i, underscore), name, true)) {
	    return i;
	}
	return INVALID_PLAYER_ID;
}
Dialog:ReportList(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		if(listitem == 0)
		{
    			new
					reportid = 0,
					text[128],
					string[128];
				format(string, sizeof(string), "Kamu ~g~menerima~w~ laporan ID: %d.", reportid);
				ShowPlayerFooter(playerid, string);
				SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) telah menerima laporanmu.", ReturnName(playerid, 0), playerid);
				SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menerima laporan %s. ", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));
				Report_Remove(reportid);
				strunpack(text, ReportData[0][rText]);
				SendServerMessage(playerid, "Laporan dari id : %s", text, 0);
		}
		if(listitem == 1)
		{
    			new
					reportid = 1,
					text[128],
					string[128];
				format(string, sizeof(string), "Kamu ~g~menerima~w~ laporan ID: %d.", reportid);
				ShowPlayerFooter(playerid, string);
				SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) telah menerima laporanmu.", ReturnName(playerid, 0), playerid);
				SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menerima laporan %s. ", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));
				Report_Remove(reportid);
				strunpack(text, ReportData[1][rText]);
				SendServerMessage(playerid, "Laporan dari id : %s", text, 0);
		}
		if(listitem == 2)
		{
    			new
					reportid = 2,
					text[128],
					string[128];
				format(string, sizeof(string), "Kamu ~g~menerima~w~ laporan ID: %d.", reportid);
				ShowPlayerFooter(playerid, string);
				SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) telah menerima laporanmu.", ReturnName(playerid, 0), playerid);
				SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menerima laporan %s. ", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));
				Report_Remove(reportid);
				strunpack(text, ReportData[2][rText]);
				SendServerMessage(playerid, "Laporan dari id : %s", text, 0);
		}
		if(listitem == 3)
		{
    			new
					reportid = 3,
					text[128],
					string[128];
				format(string, sizeof(string), "Kamu ~g~menerima~w~ laporan ID: %d.", reportid);
				ShowPlayerFooter(playerid, string);
				SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) telah menerima laporanmu.", ReturnName(playerid, 0), playerid);
				SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menerima laporan %s. ", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));
				Report_Remove(reportid);
				strunpack(text, ReportData[3][rText]);
				SendServerMessage(playerid, "Laporan dari id : %s", text, 0);
		}
		if(listitem == 4)
		{
    			new
					reportid = 4,
					text[128],
					string[128];
				format(string, sizeof(string), "Kamu ~g~menerima~w~ laporan ID: %d.", reportid);
				ShowPlayerFooter(playerid, string);
				SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) telah menerima laporanmu.", ReturnName(playerid, 0), playerid);
				SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menerima laporan %s. ", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));
				Report_Remove(reportid);
				strunpack(text, ReportData[4][rText]);
				SendServerMessage(playerid, "Laporan dari id : %s", text, 0);
		}
		if(listitem == 4)
		{
    			new
					reportid = 4,
					text[128],
					string[128];
				format(string, sizeof(string), "Kamu ~g~menerima~w~ laporan ID: %d.", reportid);
				ShowPlayerFooter(playerid, string);
				SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) telah menerima laporanmu.", ReturnName(playerid, 0), playerid);
				SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menerima laporan %s. ", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));
				Report_Remove(reportid);
				strunpack(text, ReportData[4][rText]);
				SendServerMessage(playerid, "Laporan dari id : %s", text, 0);
		}
		if(listitem == 5)
		{
    			new
					reportid = 5,
					text[128],
					string[128];
				format(string, sizeof(string), "Kamu ~g~menerima~w~ laporan ID: %d.", reportid);
				ShowPlayerFooter(playerid, string);
				SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) telah menerima laporanmu.", ReturnName(playerid, 0), playerid);
				SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menerima laporan %s. ", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));
				Report_Remove(reportid);
				strunpack(text, ReportData[5][rText]);
				SendServerMessage(playerid, "Laporan dari id : %s", text, 0);
		}
		if(listitem == 6)
		{
    			new
					reportid = 6,
					text[128],
					string[128];
				format(string, sizeof(string), "Kamu ~g~menerima~w~ laporan ID: %d.", reportid);
				ShowPlayerFooter(playerid, string);
				SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) telah menerima laporanmu.", ReturnName(playerid, 0), playerid);
				SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menerima laporan %s. ", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));
				Report_Remove(reportid);
				strunpack(text, ReportData[6][rText]);
				SendServerMessage(playerid, "Laporan dari id : %s", text, 0);
		}
		if(listitem == 7)
		{
    			new
					reportid = 7,
					text[128],
					string[128];
				format(string, sizeof(string), "Kamu ~g~menerima~w~ laporan ID: %d.", reportid);
				ShowPlayerFooter(playerid, string);
				SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) telah menerima laporanmu.", ReturnName(playerid, 0), playerid);
				SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menerima laporan %s. ", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));
				Report_Remove(reportid);
				strunpack(text, ReportData[7][rText]);
				SendServerMessage(playerid, "Laporan dari id : %s", text, 0);
		}
		if(listitem == 8)
		{
    			new
					reportid = 8,
					text[128],
					string[128];
				format(string, sizeof(string), "Kamu ~g~menerima~w~ laporan ID: %d.", reportid);
				ShowPlayerFooter(playerid, string);
				SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) telah menerima laporanmu.", ReturnName(playerid, 0), playerid);
				SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menerima laporan %s. ", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));
				Report_Remove(reportid);
				strunpack(text, ReportData[8][rText]);
				SendServerMessage(playerid, "Laporan dari id : %s", text, 0);
		}
		if(listitem == 9)
		{
    			new
					reportid = 9,
					text[128],
					string[128];
				format(string, sizeof(string), "Kamu ~g~menerima~w~ laporan ID: %d.", reportid);
				ShowPlayerFooter(playerid, string);
				SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) telah menerima laporanmu.", ReturnName(playerid, 0), playerid);
				SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menerima laporan %s. ", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));
				Report_Remove(reportid);
				strunpack(text, ReportData[9][rText]);
				SendServerMessage(playerid, "Laporan dari id : %s", text, 0);
		}
		if(listitem == 10)
		{
    			new
					reportid = 10,
					text[128],
					string[128];
				format(string, sizeof(string), "Kamu ~g~menerima~w~ laporan ID: %d.", reportid);
				ShowPlayerFooter(playerid, string);
				SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) telah menerima laporanmu.", ReturnName(playerid, 0), playerid);
				SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menerima laporan %s. ", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));
				Report_Remove(reportid);
				strunpack(text, ReportData[10][rText]);
				SendServerMessage(playerid, "Laporan dari id : %s", text, 0);
		}
		if(listitem == 11)
		{
    			new
					reportid = 11,
					text[128],
					string[128];
				format(string, sizeof(string), "Kamu ~g~menerima~w~ laporan ID: %d.", reportid);
				ShowPlayerFooter(playerid, string);
				SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) telah menerima laporanmu.", ReturnName(playerid, 0), playerid);
				SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menerima laporan %s. ", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));
				Report_Remove(reportid);
				strunpack(text, ReportData[11][rText]);
				SendServerMessage(playerid, "Laporan dari id : %s", text, 0);
		}
		if(listitem == 12)
		{
    			new
					reportid = 12,
					text[128],
					string[128];
				format(string, sizeof(string), "Kamu ~g~menerima~w~ laporan ID: %d.", reportid);
				ShowPlayerFooter(playerid, string);
				SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) telah menerima laporanmu.", ReturnName(playerid, 0), playerid);
				SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menerima laporan %s. ", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));
				Report_Remove(reportid);
				strunpack(text, ReportData[12][rText]);
				SendServerMessage(playerid, "Laporan dari id : %s", text, 0);
		}
		if(listitem == 13)
		{
    			new
					reportid = 13,
					text[128],
					string[128];
				format(string, sizeof(string), "Kamu ~g~menerima~w~ laporan ID: %d.", reportid);
				ShowPlayerFooter(playerid, string);
				SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) telah menerima laporanmu.", ReturnName(playerid, 0), playerid);
				SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menerima laporan %s. ", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));
				Report_Remove(reportid);
				strunpack(text, ReportData[13][rText]);
				SendServerMessage(playerid, "Laporan dari id : %s", text, 0);
		}
		if(listitem == 14)
		{
    			new
					reportid = 14,
					text[128],
					string[128];
				format(string, sizeof(string), "Kamu ~g~menerima~w~ laporan ID: %d.", reportid);
				ShowPlayerFooter(playerid, string);
				SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) telah menerima laporanmu.", ReturnName(playerid, 0), playerid);
				SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menerima laporan %s. ", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));
				Report_Remove(reportid);
				strunpack(text, ReportData[14][rText]);
				SendServerMessage(playerid, "Laporan dari id : %s", text, 0);
		}
	}
	return 1;
}
Dialog:Helmet(playerid, response, listitem, inputtext[]) {
            if(response)
            {
                switch(listitem)
                {
                    case 0:
                    {
						SetPlayerAttachedObject(playerid,9 , 18645, 2, 0.07, 0.017, 0, 88, 75, 0);
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah memakai helm miliknya.", ReturnName(playerid, 0));
           			}
                    case 1:
                    {
                    	SetPlayerAttachedObject(playerid,9 , 18976, 2, 0.07, 0.017, 0, 88, 75, 0);
                    	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah memakai helm miliknya.", ReturnName(playerid, 0));
        			}
                    case 2:
                    {
         				SetPlayerAttachedObject(playerid,9 , 18977, 2, 0.07, 0.017, 0, 88, 75, 0);
         				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah memakai helm miliknya.", ReturnName(playerid, 0));
      				}
                    case 3:
                    {
                        SetPlayerAttachedObject(playerid,9 , 18978, 2, 0.07, 0.017, 0, 88, 75, 0);\
                        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah memakai helm miliknya.", ReturnName(playerid, 0));
					}
                    case 4:
                    {
                        SetPlayerAttachedObject(playerid,9 , 18979, 2, 0.07, 0.017, 0, 88, 75, 0);
                        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah memakai helm miliknya.", ReturnName(playerid, 0));
					}
				}
            }
            return 1;
}
Dialog:HelpDialog(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    if(listitem == 0)
	    {
			new pDialog[1000];
	        strcat(pDialog, "/pizzahelp, /health, /codes, /changepass, /properties, /assistance, /cancelassistance, /tog, /stats, /report, /acc\n", sizeof(pDialog));
	        strcat(pDialog, "/pdrag, /inventory, /switch, /search, /searchbp, /approve, /faq, /sell, /paint, /drink, /bank, /cook, /vest, /ammo, /unequip\n", sizeof(pDialog));
			strcat(pDialog, "/usekit, /id, /drop, /flist, /crates, /fill, /pay, /gps, /open, /usedrug, /breakcuffs, /backpack, /invoices, /tickets\n", sizeof(pDialog));
			strcat(pDialog, "/boombox, /disablecp, /shakehand, /showlicenses, /frisk, /toghud, /passwep, /setradio, /picklock, /resetvw\n", sizeof(pDialog));
			strcat(pDialog, "/buyfstyle, /donators, /admins, /helpers, /bomb, /plantbomb, /detonate, /mywarnings\n", sizeof(pDialog));
			strcat(pDialog, "/myclothes, /changeclothes, /buyclothes, /safe, /lastlogged, /username.\n", sizeof(pDialog));
			Dialog_Show(playerid, HelpDialog, DIALOG_STYLE_MSGBOX, "{00FF00}General", pDialog, "Tutup", "");
	    }
	    if(listitem == 1)
	    {
			new pDialog[1000];
	        strcat(pDialog, "[Global OOC] : /o  [Local OOC] : /b [Whisper] : /w [Shout] : /s [Faction] : /f [Quite] : /l /pintercom\n", sizeof(pDialog));
			Dialog_Show(playerid, HelpDialog, DIALOG_STYLE_MSGBOX, "{00FF00}Percakapan", pDialog, "Tutup", "");
	    }
	    if(listitem == 2)
	    {
			new pDialog[1000];
	        strcat(pDialog, "Faction Commands : /listonline, /fann, /(f)ac, /fquit, /locker, /invite, /uninvite, /frank, /fdiv, /fspawn\n", sizeof(pDialog));
	        strcat(pDialog, "Faction Commands : /d, /manageranks, /managedivs, /changefname, /factrunk, /pagermsg\n\n", sizeof(pDialog));
   			if (GetFactionType(playerid) == FACTION_POLICE) {
	        	strcat(pDialog, "Faction : /checkseatbealt, /taser, /cuff, /uncuff, /drag, /detain, /mdc, /arrest, /radio, /dept, /seizeplant\n", sizeof(pDialog));
	        	strcat(pDialog, "Faction : /ticket, /undercover, /fingerprint, /revokeweplic, /grantweplic\n", sizeof(pDialog));
				strcat(pDialog, "Faction : /take, /kickdoor, /siren, /traffic /beanbag, /callsign, /taclight, /revokelicense, /trace\n", sizeof(pDialog));
				strcat(pDialog, "Faction : /checkvehicles, /checkproperties, /equipment, /spike, /crb, /rallrb, /rrb", sizeof(pDialog));
				strcat(pDialog, "SWAT : /bomb, /defuse, /spawndrone, /despawndrone, /setswat, /swat\n", sizeof(pDialog));
			}
			else if (GetFactionType(playerid) == FACTION_NEWS) {
	        	strcat(pDialog, "Faction :{FFFFFF} /radio, /callsign, /broadcast, /bc, /inviteguest, /removeguest\n", sizeof(pDialog));
			}
  			else if (GetFactionType(playerid) == FACTION_MEDIC) {
	        	strcat(pDialog, "Faction :{FFFFFF} /radio, /dept, /callsign, /siren, /bandage, /loadinjured, /dropinjured /heal\n", sizeof(pDialog));
	        	strcat(pDialog, "Faction :{FFFFFF} /crb, /rallrb, /rrb, /traffic\n", sizeof(pDialog));
			}
			else if (GetFactionType(playerid) == FACTION_GOV) {
	        	strcat(pDialog, "Faction :{FFFFFF} /radio, /dept, /twithdraw,/impound, /callsign, /tdeposit, /siren, /offerloan\n", sizeof(pDialog));
	        	strcat(pDialog, "Faction :{FFFFFF} /checkvehicles, /checkproperties, /crb, /rallrb, /rrb, /grantlicense, /revokelicense, /traffic\n", sizeof(pDialog));
			}
			else if (GetFactionType(playerid) == FACTION_COMPANY) {
	        	strcat(pDialog, "Faction :{FFFFFF} /dept, /invoice, /taser, /callsign, /siren, /traffic\n", sizeof(pDialog));
			}
			else if (GetFactionType(playerid) == FACTION_GANG) {
	        	strcat(pDialog, "Faction :{FFFFFF} /fspray, /blackmarket, /call 58696, /bomb, /plantbomb, /detonate\n", sizeof(pDialog));
 		    }
			Dialog_Show(playerid, HelpDialog, DIALOG_STYLE_MSGBOX, "{00FF00}Faction", pDialog, "Tutup", "");
		}
 	    if(listitem == 3)
	    {
			new pDialog[1000];
	        strcat(pDialog, "/buy, /abandon, /lock, /vault, /products, /binfo, /bname, /bmessage, /bshipment\n", sizeof(pDialog));
			Dialog_Show(playerid, HelpDialog, DIALOG_STYLE_MSGBOX, "{00FF00}Bisnis", pDialog, "Tutup", "");
	    }
 	    if(listitem == 4)
	    {
			new pDialog[1000];
	        strcat(pDialog, "/buy, /abandon, /lock, /storage, /furniture, /buyrack, /gunrack, /deleterack\n", sizeof(pDialog));
			Dialog_Show(playerid, HelpDialog, DIALOG_STYLE_MSGBOX, "{00FF00}Rumah", pDialog, "Tutup", "");
		}
 	    if(listitem == 5)
	    {
			new pDialog[1000];
	        strcat(pDialog, "/park, /lock, /abandon, /windows, /window /refuel, /unmod, /trunk, /listcars, /engine, /lights, /hood, /tow\n", sizeof(pDialog));
			Dialog_Show(playerid, HelpDialog, DIALOG_STYLE_MSGBOX, "{00FF00}Kendaraan", pDialog, "Tutup", "");
	    }
 	    if(listitem == 6)
	    {
			new pDialog[1000];
			switch (PlayerData[playerid][pJob])
			{
	    		case 1: strcat(pDialog, "PERINTAH :{FFFFFF} /startdelivery, /stoploading, /unload, /shipments.\n", sizeof(pDialog));
	    		case 2: strcat(pDialog, "PERINTAH :{FFFFFF} /repair, /nitrous.\n", sizeof(pDialog));
	    		case 3: strcat(pDialog, "PERINTAH :{FFFFFF} /taxi, /acceptcall.\n", sizeof(pDialog));
	    		case 4: strcat(pDialog, "PERINTAH :{FFFFFF} /loadcrate.\n", sizeof(pDialog));
	    		case 5: strcat(pDialog, "PERINTAH :{FFFFFF} /mine.\n", sizeof(pDialog));
	    		case 6: strcat(pDialog, "PERINTAH :{FFFFFF} /sellfood.\n", sizeof(pDialog));
	    		case 7: strcat(pDialog, "PERINTAH :{FFFFFF} /takebag, /dumpgarbage, /findgarbage.\n", sizeof(pDialog));
	    		case 8: strcat(pDialog, "PERINTAH :{FFFFFF} /sorting.\n", sizeof(pDialog));
	    		case 9: strcat(pDialog, "PERINTAH :{FFFFFF} /craftparts.\n", sizeof(pDialog));
	    		default: strcat(pDialog, "Kamu pengangguran pada saat ini.\n", sizeof(pDialog));
			}
			Dialog_Show(playerid, HelpDialog, DIALOG_STYLE_MSGBOX, "Pekerjaan", pDialog, "Tutup", "");
	    }
 	    if(listitem == 7)
	    {
			new pDialog[1000];
	        strcat(pDialog, "/dance, /handsup, /bat, /bar, /wash, /lay, /workout, /blowjob, /bomb\n", sizeof(pDialog));
  	        strcat(pDialog, "/carry, /crack, /sleep, /jump, /deal, /dancing, /eating, /puke, /gsign, /chat\n", sizeof(pDialog));
  	        strcat(pDialog, "/goggles, /spray, /throw, /swipe, /office, /kiss, /knife, /cpr, /scratch, /point\n", sizeof(pDialog));
  	        strcat(pDialog, "/cry, /tired, /sit, /crossarms, /fucku, /walk, /piss, /stopanim\n", sizeof(pDialog));
			Dialog_Show(playerid, HelpDialog, DIALOG_STYLE_MSGBOX, "Animasi", pDialog, "Tutup", "");
	    }
 	    if(listitem == 8)
	    {
			new pDialog[1000];
	        strcat(pDialog, "/phone, /call, /pickup, /hangup, /text\n", sizeof(pDialog));
			Dialog_Show(playerid, HelpDialog, DIALOG_STYLE_MSGBOX, "Ponsel", pDialog, "Tutup", "");
	    }
 	    if(listitem == 9)
	    {
			new pDialog[1000];
	        strcat(pDialog, "/travel /neon /toggold /dooc /tog(donator) /dskin /darmor /dclearchat\n", sizeof(pDialog));
			Dialog_Show(playerid, HelpDialog, DIALOG_STYLE_MSGBOX, "Donator", pDialog, "Tutup", "");
	    }
 	    if(listitem == 10)
	    {
			new pDialog[1000];
	        strcat(pDialog, "/bank, /atm, /robatm, /registercard\n", sizeof(pDialog));
			Dialog_Show(playerid, HelpDialog, DIALOG_STYLE_MSGBOX, "Bank", pDialog, "Tutup", "");
	    }
 	    if(listitem == 11)
	    {
			new pDialog[1000];
	        strcat(pDialog, "[Radio] : /r, r2, r3 [Channel] : /channel, /channel2, /channel3\n", sizeof(pDialog));
			Dialog_Show(playerid, HelpDialog, DIALOG_STYLE_MSGBOX, "Radio", pDialog, "Tutup", "");
	    }
	}
	return 1;
}
Dialog:ShowOnly(playerid, response, listitem, inputtext[]) {
	playerid = INVALID_PLAYER_ID;
	response = 0;
	listitem = 0;
	inputtext[0] = '\0';
}
Dialog:Billboards(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new string[500], szString[100];
	    if(BillBoardData[listitem][bbExists] >= 1)
		{
		    if(!BillBoardData[listitem][bbOwner])
		    {
				BillboardCheckout[playerid] = listitem;
		        format(szString, sizeof(szString), "{FFFFFF}Sewa Billboard - {FF8000}%i{FFFFFF} - {FF8000}$%d", listitem, BillBoardData[listitem][bbPrice]);
		        format(string, sizeof(string), "{FFFFFF}Nama Billboard: {FF8000}%s{FFFFFF} ({FF8000}%i{FFFFFF})\nHarga Billboard: {FF8000}$%d{FFFFFF}\n\n\n((Biaya Sewa dikumpulkan setiap gajian dari rekening bankmu!))", BillBoardData[listitem][bbName], listitem, BillBoardData[listitem][bbPrice]);
		    	Dialog_Show(playerid, BillboardRent, DIALOG_STYLE_MSGBOX, szString, string, "Sewa", "Batal");
		    	return 1;
		    }
		    if(BillBoardData[listitem][bbOwner] == GetPlayerSQLID(playerid))
		    {
		    	Dialog_Show(playerid, MyBillboardMenu, DIALOG_STYLE_LIST, "Manage Billboard", "Edit Pesan\nBatal Sewa Billboard", "Proses", "Batal");
		    	return 1;
		    }
		    else
		    {
		        SendErrorMessage(playerid, "Maaf, papan Billboard ini sudah disewa!");
			}
		}
	}
	return 1;
}

Dialog:MyBillboardMenu(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    if(listitem == 0)
	    {
	        Dialog_Show(playerid, MyBillboardMessage, DIALOG_STYLE_INPUT, "Pesan Billboard", "Masukkan pesan papan Billboard yang baru!\n\n(Max Karakter: 230)", "Proses", "Batal");
	    }
	    if(listitem == 1)
	    {
	        Dialog_Show(playerid, MyBillboardUnrent, DIALOG_STYLE_MSGBOX, "Batal Sewa", "Apakah kamu yakin ingin membatalkan sewa Billboardmu??\n\nKamu akan mendapatkan setengah dari biaya sewa kembali", "Konfirmasi", "Batal");
	    }
	}
	return 1;
}

Dialog:MyBillboardMessage(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, MyBillboardMessage, DIALOG_STYLE_INPUT, "Pesan Billboard", "Masukkan pesan papan Billboard baru!\n\n(Max Karakter: 230)", "Proses", "Batal");

		if (strlen(inputtext) > 230)
	        return Dialog_Show(playerid, MyBillboardMessage, DIALOG_STYLE_INPUT, "Pesan Billboard", "Terlalu banyak karakter (Max adalah 230)\n\nMasukkan pesan Billboard baru!\n\n(Max karakter: 230)", "Proses", "Batal");

		format(BillBoardData[PlayerData[playerid][pOwnsBillboard]][bbMessage], 230, inputtext);

		Billboard_Save(PlayerData[playerid][pOwnsBillboard]);
		Billboard_Refresh(PlayerData[playerid][pOwnsBillboard]);
	}
	return 1;
}

Dialog:MyBillboardUnrent(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		new bbid = PlayerData[playerid][pOwnsBillboard];

		GiveMoney(playerid, BillBoardData[bbid][bbPrice]/2);
		BillBoardData[bbid][bbOwner] = 0;
		format(BillBoardData[PlayerData[playerid][pOwnsBillboard]][bbMessage], 230, "Tidak dimiliki");
		Billboard_Save(bbid);
		Billboard_Refresh(bbid);
		PlayerData[playerid][pOwnsBillboard] = -1;
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "Kamu belum memiliki Billboard");
	}
	return 1;
}

Dialog:BillboardRent(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new bbid = BillboardCheckout[playerid];
	    if(PlayerData[playerid][pBankMoney] < BillBoardData[bbid][bbPrice])
	    {
	        SendErrorMessage(playerid, "Kamu tidak memiliki cukup uang tunai di rekening bankmu untuk biaya sewa billboard");
	        return 1;
	    }
	    else
	    {
			PlayerData[playerid][pBankMoney] -= BillBoardData[playerid][bbPrice];
			PlayerData[playerid][pOwnsBillboard] = bbid;
			BillBoardData[bbid][bbOwner] = GetPlayerSQLID(playerid);
			Tax_AddMoney(BillBoardData[bbid][bbPrice]);
			Billboard_Save(bbid);
			Billboard_Refresh(bbid);
			SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "Kamu telah membeli papan reklame, ketik /mybillboard untuk mengedit pesan");
		}
	}
	return 1;
}

Dialog:GraffitiColor(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Graffiti_Nearest(playerid);

		if (id == -1)
		    return 0;

	    if (IsSprayingInProgress(id))
	        return SendErrorMessage(playerid, "Sebelumnya sudah ada yang menyemprot graffiti di daerah ini.");

	    switch (listitem)
	    {
	        case 0:
	            PlayerData[playerid][pGraffitiColor] = 0xFFFFFFFF;

	        case 1:
	            PlayerData[playerid][pGraffitiColor] = 0xFFFF0000;

	        case 2:
	            PlayerData[playerid][pGraffitiColor] = 0xFFFFFF00;

	        case 3:
	            PlayerData[playerid][pGraffitiColor] = 0xFF33CC33;

	        case 4:
	            PlayerData[playerid][pGraffitiColor] = 0xFF33CCFF;

	        case 5:
	            PlayerData[playerid][pGraffitiColor] = 0xFFFFA500;

	        case 6:
	            PlayerData[playerid][pGraffitiColor] = 0xFF1394BF;
	    }
	    Dialog_Show(playerid, GraffitiText, DIALOG_STYLE_INPUT, "Teks Graffiti", "Harap masukkan teks yang ingin disemprot di bawah ini.\n\nNote: Teks tidak boleh lebih dari 64 karakter.", "Lanjut", "Batal");
	}
	return 1;
}

Dialog:GraffitiText(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Graffiti_Nearest(playerid);

		if (id == -1)
		    return 0;

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, GraffitiText, DIALOG_STYLE_INPUT, "Teks Graffiti", "Harap masukkan teks yang ingin disemprot di bawah ini.\n\nNote: Teks tidak boleh lebih dari 64 karakter.", "Lanjut", "Batal");

		if (strlen(inputtext) > 64)
		    return Dialog_Show(playerid, GraffitiText, DIALOG_STYLE_INPUT, "Teks Graffiti", "Error: Tesk tidak boleh melebihi 64 karakter.\n\nHarap masukkan teks yang ingin disemprot di bawah ini.\n\nNote: Teks tidak boleh lebih dari 64 karakter.", "Lanjut", "Batal");

        if (IsSprayingInProgress(id))
	        return SendErrorMessage(playerid, "Ada yang sedang menyemprot didaerah ini juga.");

        PlayerData[playerid][pGraffiti] = id;
        PlayerData[playerid][pGraffitiTime] = 15;

		strpack(PlayerData[playerid][pGraffitiText], inputtext, 64 char);
		ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0, 1);

		ShowPlayerFooter(playerid, "Kamu sekarang sedang menyemprotkan ~g~graffiti.");
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Menyemprot...~w~ mohon tunggu!", 15000, 3);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan sebuah semprotan dan menyemprot dinding.", ReturnName(playerid, 0));
	}
	return 1;
}

Dialog:Radio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	            Dialog_Show(playerid, CulturalRadio, DIALOG_STYLE_LIST, "Cultural", "Classical\nInstruments", "Pilih", "Batal");

			case 1:
			    Dialog_Show(playerid, OldiesRadio, DIALOG_STYLE_LIST, "Oldies", "70's\n80's\n90's", "Pilih", "Batal");

			case 2:
			    Dialog_Show(playerid, OtherRadio, DIALOG_STYLE_LIST, "Other", "Dance\nGlee\nMash Ups", "Pilih", "Batal");

			case 3:
			    Dialog_Show(playerid, PopRadio, DIALOG_STYLE_LIST, "Pop", "Korean\nPop\nTop Hits", "Pilih", "Batal");

			case 4:
			    Dialog_Show(playerid, RNBRadio, DIALOG_STYLE_LIST, "Rhythm & Blues", "R&B\nSoul", "Pilih", "Batal");

			case 5:
				Dialog_Show(playerid, RockRadio, DIALOG_STYLE_LIST, "Rock", "Alternative\nClassic\nIndie Rock\nMetal\nPunk\nRock & Roll", "Pilih", "Batal");

	        case 6:
	            Dialog_Show(playerid, TalkRadio, DIALOG_STYLE_LIST, "Talk", "Comedy\nScanners", "Pilih", "Batal");

	 		case 7:
				Dialog_Show(playerid, UrbanRadio, DIALOG_STYLE_LIST, "Urban", "Country\nHip-Hop", "Pilih", "Batal");

			case 8:
			    Dialog_Show(playerid, ElectricRadio, DIALOG_STYLE_LIST, "Electric", "ElectricFM.com\n1Dance.fm\nDanceTime.fm", "Pilih", "Batal");

			case 9:
			{
			    new vehicleid = GetPlayerVehicleID(playerid);

			    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
			        return 0;

				StopVehicleRadio(vehicleid);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mematikan radio mobil.", ReturnName(playerid, 0));
			}
	    }
	}
	return 1;
}

Dialog:UrbanRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
			    Dialog_Show(playerid, Country, DIALOG_STYLE_LIST, "Country", "GotRadio - Today's Country\n181.fm - Highway 181\nHPR1: Traditional Classic Country\nCountry - Sky.fm", "Mainkan", "Batal");

            case 1:
			    Dialog_Show(playerid, HipHop, DIALOG_STYLE_LIST, "Hip-Hop", "100Hits - HipHop\nHot 108 Jamz\n181.fm - The Box\nGotRadio - Urban Jams", "Mainkan", "Batal");
		}
	}
	return 1;
}

Dialog:Country(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://206.217.213.235:8100/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://relay.181.fm:8018/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://108.61.73.119:8024/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://scfire-ntc-aa01.stream-aol.com/stream/1019");
		}
	}
	return 1;
}

Dialog:HipHop(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://64.56.64.67:10354/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://stream-95.shoutcast.com/hot108_mp3_128kbps");

            case 2:
			    SetVehicleRadio(vehicleid, "http://108.61.73.119:8024/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://108.61.73.118:8068/");
		}
	}
	return 1;
}

Dialog:ElectricRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://72.13.83.151/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://173.192.207.51:8062/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://212.83.60.202:8000/");
		}
	}
	return 1;
}

Dialog:TalkRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
			    Dialog_Show(playerid, Comedy, DIALOG_STYLE_LIST, "Comedy", "Comedy104\nAddictedToRadio.com - Comedy\n181.fm - Comedy Club", "Mainkan", "Batal");

            case 1:
			    Dialog_Show(playerid, Scanners, DIALOG_STYLE_LIST, "Scanners", "New Orleans Police Department\nSan Diego Police Dispatch\nLong Beach Police Dispatch\nCalifornia Highway Patrol - Los Angeles & Orange County\nLAPD - Citywide Dispatch and Hot Shots/Code 3", "Mainkan", "Batal");
		}
	}
	return 1;
}

Dialog:Comedy(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://69.195.140.50:8060/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://208.77.21.13:17910/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://108.61.73.118:8026/");
		}
	}
	return 1;
}

Dialog:Scanners(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://www.radioreference.com/scripts/playlists/1/3877/0-5443008964.m3u");

			case 1:
			    SetVehicleRadio(vehicleid, "http://www.radioreference.com/scripts/playlists/1/6740/0-5443008116.m3u");

            case 2:
			    SetVehicleRadio(vehicleid, "http://www.radioreference.com/scripts/playlists/1/6740/0-5443008116.m3u");

            case 3:
			    SetVehicleRadio(vehicleid, "http://radioreference.com/scripts/playlists/1/10239/0-5443007068.m3u");

            case 4:
			    SetVehicleRadio(vehicleid, "http://radioreference.com/scripts/playlists/1/10239/0-5443007068.m3u");
		}
	}
	return 1;
}

Dialog:RockRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
			case 0:
			    Dialog_Show(playerid, Alternative, DIALOG_STYLE_LIST, "Alternative", "GotRadio - Alternative", "Mainkan", "Batal");

            case 1:
			    Dialog_Show(playerid, Classic, DIALOG_STYLE_LIST, "Classic", "181.FM - Rock 181 #1\n.977 The Classic Rock\n181.fm - The Eagle\n181.fm Rock 40\n181.fm Rock 181 #2", "Mainkan", "Batal");

            case 2:
			    Dialog_Show(playerid, IndieRock, DIALOG_STYLE_LIST, "Indie Rock", "GotRadio - Indie Underground\nIndie Rock - LifeJive.com", "Mainkan", "Batal");

            case 3:
			    Dialog_Show(playerid, Metal, DIALOG_STYLE_LIST, "Metal", "GotRadio - Metal Madness\nDepressive Metal Rock radio\nDeath.F(ucking)M(etal)\nDepressive metal rock (Death)\nRepressive metal rock radio (Black)", "Mainkan", "Batal");

            case 4:
			    Dialog_Show(playerid, Punk, DIALOG_STYLE_LIST, "Punk", "Pop Punk - Sky.fm", "Mainkan", "Batal");

            case 5:
			    Dialog_Show(playerid, RockRoll, DIALOG_STYLE_LIST, "Rock & Roll", "Absolute Radio", "Mainkan", "Batal");
		}
	}
	return 1;
}

Dialog:Alternative(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://206.217.213.235:8200/");
		}
	}
	return 1;
}

Dialog:Classic(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://relay.181.fm:8008/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://7649.live.streamtheworld.com/977_CLASSROCK_SC");

            case 2:
			    SetVehicleRadio(vehicleid, "http://relay.181.fm:8030/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://uplink.181.fm:8028/");

            case 4:
			    SetVehicleRadio(vehicleid, "http://relay.181.fm:8064/");
		}
	}
	return 1;
}

Dialog:IndieRock(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://173.244.215.163:8330/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://208.53.138.125:8136/");
		}
	}
	return 1;
}

Dialog:Metal(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://173.244.215.163:8340/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://184.154.10.83:8390/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://209.9.229.211/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://184.154.185.170:8080/");

            case 4:
			    SetVehicleRadio(vehicleid, "http://65.60.19.43:8270/");
		}
	}
	return 1;
}

Dialog:Punk(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://80.94.69.106:6884/");
		}
	}
	return 1;
}

Dialog:RockRoll(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://mp3-ar-192.as34763.net/");
		}
	}
	return 1;
}

Dialog:RNBRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
			case 0:
			    Dialog_Show(playerid, RNB, DIALOG_STYLE_LIST, "R&B", "181.fm - True R&B\nDEFJay.de - 100% R&B\nGotRadio - R&B Classics\nSlow Jamz\nAddictedToRadio.com - V101 RnB AAC", "Mainkan", "Batal");

            case 1:
			    Dialog_Show(playerid, SoulRadio, DIALOG_STYLE_LIST, "Soul", "181.fm - Soul\nSoulful Bits", "Mainkan", "Batal");
		}
	}
	return 1;
}

Dialog:RNB(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://108.61.73.119:8022/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://87.230.56.38/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://206.217.213.236:8390/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://173.193.32.153:8020/");

            case 4:
			    SetVehicleRadio(vehicleid, "http://208.77.21.15:10730/");
		}
	}
	return 1;
}

Dialog:SoulRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://relay.181.fm:8058/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://88.191.137.70/");
		}
	}
	return 1;
}

Dialog:PopRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
		        Dialog_Show(playerid, KoreanRadio, DIALOG_STYLE_LIST, "Korean", "KPOP TOP 100\nGeneraction\nBig B Radio", "Mainkan", "Batal");

			case 1:
			    Dialog_Show(playerid, Pop, DIALOG_STYLE_LIST, "Pop", "My Tunes FM\nHot Hits IR\nGay FM", "Mainkan", "Batal");

            case 2:
			    Dialog_Show(playerid, TopHits, DIALOG_STYLE_LIST, "Top Hits", "ChartHits.fm - Your Hitz More Music\n181.fm The Office\n100Hitz - Top 40\n1.fm Absolute Top 40\nTop Hits Music - Sky.fm", "Mainkan", "Batal");
		}
	}
	return 1;
}

Dialog:KoreanRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://39.119.181.57:8000/128");

			case 1:
			    SetVehicleRadio(vehicleid, "http://176.31.241.195:8700/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://199.241.187.194:8060/");
		}
	}
	return 1;
}

Dialog:Pop(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://77.102.253.75:8000/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://50.117.26.26:1265/moon.wavestreamer.com:1265/live");

            case 2:
			    SetVehicleRadio(vehicleid, "http://80.237.211.85/");
		}
	}
	return 1;
}

Dialog:TopHits(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://79.141.174.206:22000/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://108.61.73.117:8002/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://206.217.213.235:8300/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://205.164.62.15:7016/");

            case 4:
			    SetVehicleRadio(vehicleid, "http://stream-67.shoutcast.com/tophits_skyfm_mp3_96kbps");
		}
	}
	return 1;
}

Dialog:OtherRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
		        Dialog_Show(playerid, DanceRadio, DIALOG_STYLE_LIST, "Dance", "Dancetime.fm\nPlus Fm - Pure Dance Radio", "Mainkan", "Batal");

			case 1:
			    Dialog_Show(playerid, Glee, DIALOG_STYLE_LIST, "Glee", "AceRadio.net - Glee Radio", "Mainkan", "Batal");

            case 2:
			    Dialog_Show(playerid, MashUps, DIALOG_STYLE_LIST, "Mash Ups", "Mastermix - Base Manic Radio\nMashups\nGotRadio - Mashups\nMashup-Radio24.de\nI love mashup radio", "Mainkan", "Batal");
		}
	}
	return 1;
}

Dialog:DanceRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://87.230.53.17:8000/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://87.230.82.41/");
		}
	}
	return 1;
}

Dialog:Glee(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://174.36.42.110:8360/");
		}
	}
	return 1;
}

Dialog:MashUps(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://184.107.17.34:8046/");

            case 1:
				SetVehicleRadio(vehicleid, "http://67.212.166.210:8413/");

            case 2:
				SetVehicleRadio(vehicleid, "http://206.217.213.236:8530/");

            case 3:
				SetVehicleRadio(vehicleid, "http://188.138.124.98:39710/");

            case 4:
				SetVehicleRadio(vehicleid, "http://87.118.64.205:8040/");
		}
	}
	return 1;
}

Dialog:OldiesRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
		        Dialog_Show(playerid, 70sRadio, DIALOG_STYLE_LIST, "70's", "181.fm - 70's\nAll Hit 70's\nSky.fm", "Mainkan", "Batal");

			case 1:
			    Dialog_Show(playerid, 80sRadio, DIALOG_STYLE_LIST, "80's", "Golden Radio Italia 80's\n181.fm - Lite 80's\n181.fm - Awesome 80's\n80's, 80's, 80's! - Sky.fm", "Mainkan", "Batal");

            case 2:
			    Dialog_Show(playerid, 90sRadio, DIALOG_STYLE_LIST, "90's", "GotRadio - 90's Alternative\nAddictedToRadio.com\n181.fm - Lite 90's\n181.fm - 90's Alternative\n181.fm - Star 90's", "Mainkan", "Batal");
		}
	}
	return 1;
}

Dialog:70sRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://108.61.73.118:8066/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://stream-45.shoutcast.com/all_hit_70s_skyfm_mp3_96kbps");
		}
	}
	return 1;
}

Dialog:80sRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://109.123.116.202:8040/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://74.86.186.4:12114/");

			case 2:
				SetVehicleRadio(vehicleid, "http://108.61.73.118:8000/");

			case 3:
			    SetVehicleRadio(vehicleid, "http://stream-54.shoutcast.com/the80s_skyfm_mp3_96kbps");
		}
	}
	return 1;
}

Dialog:90sRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://173.244.215.162:8190/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://208.77.21.13:14330/");

			case 2:
				SetVehicleRadio(vehicleid, "http://74.86.186.4:12118/");

			case 3:
			    SetVehicleRadio(vehicleid, "http://108.61.73.118:8052/");

            case 4:
			    SetVehicleRadio(vehicleid, "http://108.61.73.118:8012/");
		}
	}
	return 1;
}

Dialog:CulturalRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
		        Dialog_Show(playerid, Classical, DIALOG_STYLE_LIST, "Classical", "Mostly Classical - Sky.fm\nCalmradio.com - Mozart\n1.fm - Otto's classical\nClassical Piano - Sky.fm", "Mainkan", "Batal");

			case 1:
			    Dialog_Show(playerid, Instruments, DIALOG_STYLE_LIST, "Instruments", "Calmradio.com - Solo Piano & Guitar\nGotRadio - Guitar Genius\nGotRadio - Piano Perfect\nPianorama", "Mainkan", "Batal");
		}
	}
	return 1;
}

Dialog:Classical(playerid, response, listitem, inputtext[])
{
    if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://stream-135.shoutcast.com/classical_skyfm_mp3_96kbps");

			case 1:
			    SetVehicleRadio(vehicleid, "http://159.253.143.15:12128/");

			case 2:
			    SetVehicleRadio(vehicleid, "http://205.164.41.18:7070/");

			case 3:
			    SetVehicleRadio(vehicleid, "http://72.26.204.28:6874/");
		}
	}
	return 1;
}

Dialog:Instruments(playerid, response, listitem, inputtext[])
{
    if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://173.192.225.172:8200/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://173.244.215.162:8020/");

			case 2:
			    SetVehicleRadio(vehicleid, "http://173.244.215.162:8050/");

			case 3:
			    SetVehicleRadio(vehicleid, "http://188.127.226.185/");
		}
	}
	return 1;
}

Dialog:NewTasks(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!strcmp(inputtext, "Kunjungi Bank (pending)"))
	    {
	        new id = GetClosestEntrance(playerid, 2);

	        if (id == -1)
	            return SendErrorMessage(playerid, "Tidak ada bank di server.");

			SetPlayerCheckpoint(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2], 1.0);
			SendServerMessage(playerid, "Checkpoint diatur ke bank terdekat (ditandai di radar).");
		}
		else if (!strcmp(inputtext, "Kunjungi Store (pending)"))
	    {
	        new id = GetClosestBusiness(playerid, 1);

	        if (id == -1)
	            return SendErrorMessage(playerid, "Tidak ada retail store di server.");

			SetPlayerCheckpoint(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2], 1.0);
			SendServerMessage(playerid, "Checkpoint diatur ke retail store terdekat (ditandai di radar).");
		}
		else if (!strcmp(inputtext, "Kunjungi Drive School (pending)"))
	    {
	        new id = GetClosestEntrance(playerid, 1);

	        if (id == -1)
	            return SendErrorMessage(playerid, "Tidak ada DMV di server.");

			SetPlayerCheckpoint(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2], 1.0);
			SendServerMessage(playerid, "Checkpoint diatur ke DMV terdekat (ditandai di radar).");
		}
	}
	return 1;
}

Dialog:PickupItems(playerid, response, listitem, inputtext[])
{
	static
	    string[64];

	if (response)
	{
	    new id = NearestItems[playerid][listitem];

		if (id != -1 && DroppedItems[id][droppedModel])
		{
		    if (DroppedItems[id][droppedWeapon] != 0)
			{
  				if (PlayerData[playerid][pChannel4] < 2)
					return SendErrorMessage(playerid, "Kamu harus memiliki minimal level 2.");

				GiveWeaponToPlayer(playerid, DroppedItems[id][droppedWeapon], DroppedItems[id][droppedAmmo]);

				Item_Delete(id);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mengambil sebuah %s.", ReturnName(playerid, 0), ReturnWeaponName(DroppedItems[id][droppedWeapon]));
			}
			else if (PickupItem(playerid, id))
			{
				format(string, sizeof(string), "~g~%s~w~ ditambahkan ke inventory!", DroppedItems[id][droppedItem]);
 				ShowPlayerFooter(playerid, string);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mengambil sebuah \"%s\".", ReturnName(playerid, 0), DroppedItems[id][droppedItem]);
			}
			else
				SendErrorMessage(playerid, "Kamu tidak memiliki slot dalam inventorymu.");
		}
		else SendErrorMessage(playerid, "Item ini sudah diambil.");
	}
	return 1;
}

Dialog:StartDelivery(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Job_NearestPoint(playerid);

	    if (id == -1)
	        return 0;

		PlayerData[playerid][pLoadType] = listitem + 1;
		PlayerData[playerid][pLoadCrate] = 1;
		PlayerData[playerid][pLoading] = 1;

		SendServerMessage(playerid, "Kamu telah memilih \"%s\". Masukkan crates ke dalam truk untuk memulai.", inputtext);
		SetPlayerCheckpoint(playerid, JobData[id][jobPoint][0], JobData[id][jobPoint][1], JobData[id][jobPoint][2], 1.0);

        SetPlayerAttachedObject(playerid, 4, 3014, 1, 0.038192, 0.371544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

		ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
		ShowPlayerFooter(playerid, "Tekan ~y~'N'~w~ untuk memuat crates.");
	}
	return 1;
}

Dialog:GatePass(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Gate_Nearest(playerid);

	    if (id == -1)
	        return 0;

        if (isnull(inputtext))
        	return Dialog_Show(playerid, GatePass, DIALOG_STYLE_INPUT, "Masukan Password", "Tolong masukkan password gate ini dibawah ini:", "Submit", "Batal");

		if (strcmp(inputtext, GateData[id][gatePass]) != 0)
  			return Dialog_Show(playerid, GatePass, DIALOG_STYLE_INPUT, "Masukan Password", "Error: Password salah.\n\nTolong masukkan password gate ini dibawah ini:", "Submit", "Batal");

		Gate_Operate(id);
	}
	return 1;
}

Dialog:EditRanks(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!FactionData[PlayerData[playerid][pFactionEdit]][factionExists])
			return 0;

		PlayerData[playerid][pSelectedSlot] = listitem;
		Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Set Rank", "Rank: %s (%d)\n\nHarap masukkan nama baru untuk rank ini di bawah ini:", "Submit", "Kembali", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);
	}
	return 1;
}

Dialog:EditDivisions(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!FactionData[PlayerData[playerid][pFactionEdit]][factionExists])
			return 0;

		PlayerData[playerid][pSelectedSlot] = listitem;
		Dialog_Show(playerid, SetDivisionName, DIALOG_STYLE_INPUT, "Set Division", "Division: %s (%d)\n\nHarap masukkan nama baru untuk divisi ini di bawah ini:", "Submit", "Kembali", FactionDivisions[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);
	}
	return 1;
}

Dialog:SetRankName(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Set Rank", "Rank: %s (%d)\n\nHarap masukkan nama baru untuk rank ini di bawah ini:", "Submit", "Kembali", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

	    if (strlen(inputtext) > 32)
	        return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Set Rank", "Error: Namanya tidak boleh lebih dari 32 karakter.\n\nRank: %s (%d)\n\nHarap masukkan nama baru untuk rank ini di bawah ini:", "Submit", "Kembali", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

		format(FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], 32, inputtext);
		Faction_SaveRanks(PlayerData[playerid][pFactionEdit]);

		Faction_ShowRanks(playerid, PlayerData[playerid][pFactionEdit]);
		SendServerMessage(playerid, "Kamu telah menetapkan nama rank %d ke \"%s\".", PlayerData[playerid][pSelectedSlot] + 1, inputtext);
	}
	else Faction_ShowRanks(playerid, PlayerData[playerid][pFactionEdit]);
	return 1;
}

Dialog:SetDivisionName(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, SetDivisionName, DIALOG_STYLE_INPUT, "Set Division", "Division: %s (%d)\n\nHarap masukkan nama baru untuk divisi ini di bawah ini:", "Submit", "Kembali", FactionDivisions[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

	    if (strlen(inputtext) > 32)
	        return Dialog_Show(playerid, SetDivisionName, DIALOG_STYLE_INPUT, "Set Division", "Error: Tidak boleh lebih dari 32 karakter.\n\nDivision: %s (%d)\n\nHarap masukkan nama baru untuk divisi ini di bawah ini:", "Submit", "Kembali", FactionDivisions[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

		format(FactionDivisions[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], 32, inputtext);
		Faction_SaveDivisions(PlayerData[playerid][pFactionEdit]);

		Faction_ShowDivisions(playerid, PlayerData[playerid][pFactionEdit]);
		SendServerMessage(playerid, "Kamu telah menetapkan nama divisi %d ke \"%s\".", PlayerData[playerid][pSelectedSlot] + 1, inputtext);
	}
	else Faction_ShowDivisions(playerid, PlayerData[playerid][pFactionEdit]);
	return 1;
}

Dialog:AcceptTaxi(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new targetid = strval(inputtext);

	    if (!IsPlayerConnected(targetid))
	        return SendErrorMessage(playerid, "Player yang ditentukan telah terputus.");

		if (!PlayerData[targetid][pTaxiCalled])
		    return SendErrorMessage(playerid, "Panggilan player itu diterima oleh supir taksi lain.");

		static
			Float:x,
			Float:y,
			Float:z;

		GetPlayerLocationEx(targetid, x, y, z);

		PlayerData[targetid][pTaxiCalled] = 0;
		Waypoint_Set(playerid, GetPlayerLocation(targetid), x, y, z);

        SendServerMessage(playerid, "Kamu menerima panggilan taksi dari %s.", ReturnName(targetid, 0));
        SendServerMessage(targetid, "%s telah menerima panggilan taksimu , dia sedang berada dalam perjalanan.", ReturnName(playerid, 0));
	}
	return 1;
}

Dialog:AcceptMechanic(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new targetid = strval(inputtext);

	    if (!IsPlayerConnected(targetid))
	        return SendErrorMessage(playerid, "Player yang ditentukan telah terputus.");

		if (!PlayerData[targetid][pMechanicCalled])
		    return SendErrorMessage(playerid, "Panggilan telah diterima oleh mekanik lain.");

		static
			Float:x,
			Float:y,
			Float:z;

		GetPlayerLocationEx(targetid, x, y, z);

		PlayerData[targetid][pMechanicCalled] = 0;
		Waypoint_Set(playerid, GetPlayerLocation(targetid), x, y, z);

        SendServerMessage(playerid, "Kamu telah menerima panggilan mekanik oleh %s.", ReturnName(targetid, 0));
        SendServerMessage(targetid, "%s telah menerima panggilan mekanikmu dan sedang dalam perjalanan.", ReturnName(playerid, 0));
	}
	return 1;
}

Dialog:AcceptShipment(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new bizid = strval(inputtext);

		if (!BusinessData[bizid][bizExists])
		    return 0;

	    if (!BusinessData[bizid][bizShipment])
	        return SendErrorMessage(playerid, "Bisnis ini tidak lagi meminta kiriman.");

		if (IsShipmentAccepted(bizid))
		    return SendErrorMessage(playerid, "Pengiriman ini sudah diterima.");

		foreach (new i : Player) if (Business_IsOwner(i, bizid)) {
		    SendServerMessage(i, "%s telah menerima permintaan pengirimanmu.", ReturnName(playerid, 0));
		}
		PlayerData[playerid][pShipment] = bizid;
		SendServerMessage(playerid, "Kamu telah menerima kiriman tersebut. Ketik /startdelivery untuk memulai pengiriman.");
	}
	return 1;
}

Dialog:RackWeapons(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Rack_Nearest(playerid);

	    if (id == -1)
	        return 0;

	    if (!RackData[id][rackWeapons][listitem])
	    {
			if (!GetWeapon(playerid))
			    return SendErrorMessage(playerid, "Kamu harus memegang senjata untuk menyimpannya.");

			RackData[id][rackWeapons][listitem] = GetWeapon(playerid);
			RackData[id][rackAmmo][listitem] = GetPlayerAmmo(playerid);

			ResetWeapon(playerid, GetWeapon(playerid));

			Rack_RefreshGuns(id);
			Rack_Save(id);

			ApplyAnimation(playerid, "WEAPONS", "SHP_Ar_Lift", 4.1, 0, 0, 0, 0, 0, 1);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyimpan sebuah %s di rakk senjata.", ReturnName(playerid, 0), ReturnWeaponName(RackData[id][rackWeapons][listitem]));
	    }
	    else
	    {
	        GiveWeaponToPlayer(playerid, RackData[id][rackWeapons][listitem], RackData[id][rackAmmo][listitem]);
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mangambil %s dari rak senjata.", ReturnName(playerid, 0), ReturnWeaponName(RackData[id][rackWeapons][listitem]));

            RackData[id][rackWeapons][listitem] = 0;
			RackData[id][rackAmmo][listitem] = 0;

			Rack_RefreshGuns(id);
			Rack_Save(id);

			ApplyAnimation(playerid, "WEAPONS", "SHP_Tray_Out", 4.1, 0, 0, 0, 0, 0, 1);
	    }
	}
	return 1;
}
Dialog:TakeItems(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || PlayerData[playerid][pTakeItems] == INVALID_PLAYER_ID)
	    return 0;

	if (response)
	{
	    if (!strcmp(inputtext, "Ambil Weapons")) {
	        ResetWeapons(PlayerData[playerid][pTakeItems]);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyita senjata %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Ambil Seeds")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Marijuana Seeds", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Cocaine Seeds", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Heroin Opium Seeds", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyita drug seeds punya %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Ambil Drugs")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Marijuana", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Cocaine", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Heroin", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Steroids", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyita obat-obatan milik %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Ambil Radio")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Portable Radio", -1);

		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyita portable radio milik %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Ambil Car License")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Car License", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyita Car license milik %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Ambil Truck License")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Truck License", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyita Truck license milik %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Ambil Motorbike License")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Motorbike License", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyita Motorbike license milik %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Ambil Airplane License")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Airplane License", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyita Airplane license milik %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Ambil Helicopter License")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Helicopter License", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyita Helicopter license milik %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Ambil Backpack")) {
		    Backpack_Delete(GetPlayerBackpack(PlayerData[playerid][pTakeItems]));
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Backpack", -1);

			SetAccessories(PlayerData[playerid][pTakeItems]);
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyita backpack milik %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
	}
	return 1;
}

Dialog:ServerPanel(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pAdmin] < 8)
		return 0;

	if (response)
	{
	    switch (listitem)
	    {
			case 0:
			{
				if (g_ServerLocked)
				{
				    g_ServerLocked = false;

				    SendRconCommand("password 0");
				    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah membuka kunci server.", ReturnName(playerid, 0));
				}
				else Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Kunci Server", "Harap masukkan kata sandi yang ditentukan di bawah ini untuk mengunci server:", "Kunci", "Kembali");
			}
			case 1:
			    Dialog_Show(playerid, SetHostname, DIALOG_STYLE_INPUT, "Ganti Hostname", "Harap masukan hostname server yang baru:", "Submit", "Kembali");

			case 2:
			    Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Query", "Harap masukan MySQL query yang ingin dilakukan:", "Lakukan", "Kembali");
	    }
	}
	return 1;
}

Dialog:LockServer(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pAdmin] < 8)
		return 0;

	if (response)
	{
	    if (isnull(inputtext) || !strcmp(inputtext, "0"))
	        return Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Kunci Server", "Harap masukkan kata sandi yang ditentukan di bawah ini untuk mengunci server:", "Kunci", "Kembali");

		if (strlen(inputtext) > 32)
		    return Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Kunci Server", "Error: Tidak bisa lebih dari 32 karakter.\n\nHarap masukkan kata sandi yang ditentukan di bawah ini untuk mengunci server:", "Kunci", "Kembali");

		static
		    str[48];

	    format(str, sizeof(str), "password %s", inputtext);
		g_ServerLocked = true;

		SendRconCommand(str);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah mengunci server (password: %s).", ReturnName(playerid, 0), inputtext);
	}
	else cmd_panel(playerid, "\1");
	return 1;
}

Dialog:SetHostname(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pAdmin] < 8)
		return 0;

	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, SetHostname, DIALOG_STYLE_INPUT, "Set Hostname", "Please enter the new server hostname below:", "Submit", "Back");

		static
		    str[128];

	    format(str, sizeof(str), "hostname %s", inputtext);

		SendRconCommand(str);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah mengubah hostname server menjadi \"%s\".", ReturnName(playerid, 0), inputtext);
	}
	else cmd_panel(playerid, "\1");
	return 1;
}

Dialog:ExecuteQuery(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pAdmin] < 8)
		return 0;

	if (response)
	{
        if (isnull(inputtext))
            return Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Please specify the MySQL query to execute below:", "Execute", "Back");

        if (strfind(inputtext, "DELETE", true) != -1 || strfind(inputtext, "DROP", true) != -1)
            return Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Error: You can't execute \"DROP\" or \"DELETE\" queries.\n\nPlease specify the MySQL query to execute below:", "Execute", "Back");

		PlayerData[playerid][pExecute] = 1;
		mysql_tquery(g_iHandle, inputtext, "OnQueryExecute", "ds", playerid, inputtext);
	}
	else cmd_panel(playerid, "\1");
	return 1;
}

Dialog:TuneVehicle(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !IsDoorVehicle(vehicleid))
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	            ShowModelSelectionMenu(playerid, "Ganti Ban", MODEL_SELECTION_WHEELS, {1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1096, 1097, 1098}, 17, 0.0, 0.0, 90.0);

			case 1:
			    Dialog_Show(playerid, AddNOS, DIALOG_STYLE_LIST, "Tambah Nitro", "2x NOS\n5x NOS\n10x NOS", "Select", "Batal");

			case 2:
			{
			    AddComponent(vehicleid, 1087);
			    SendServerMessage(playerid, "Kamu berhasil menambahkan hydraulics ke kendaraan ini.");
			}
	    }
	}
	return 1;
}

Dialog:AddNOS(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !IsDoorVehicle(vehicleid))
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
			{
			    AddComponent(vehicleid, 1009);
			    SendServerMessage(playerid, "Kamu berhasil menambahkan 2x NOS ke kendaraan ini.");
			}
			case 1:
			{
			    AddComponent(vehicleid, 1008);
			    SendServerMessage(playerid, "Kamu berhasil menambahkan 5x NOS ke kendaraan ini.");
			}
            case 2:
			{
			    AddComponent(vehicleid, 1010);
			    SendServerMessage(playerid, "Kamu berhasil menambahkan 10x NOS ke kendaraan ini.");
			}
		}
	}
	return 1;
}

Dialog:EntrancePass(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = (Entrance_Inside(playerid) == -1) ? (Entrance_Nearest(playerid)) : (Entrance_Inside(playerid));

		if (id == -1)
		    return SendErrorMessage(playerid, "Kamu tidak berada dalam jangkauan entrance manapun.");

		if (strcmp(EntranceData[id][entrancePass], inputtext) != 0)
            return SendErrorMessage(playerid, "Password salah");

	    if (!EntranceData[id][entranceLocked])
		{
			EntranceData[id][entranceLocked] = true;
			Entrance_Save(id);

			ShowPlayerFooter(playerid, "Kamu berhasil ~r~mengunci~w~ entrance!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else
		{
			EntranceData[id][entranceLocked] = false;
			Entrance_Save(id);

			ShowPlayerFooter(playerid, "Kamu berhasil ~g~melepas kunci ~w~ entrance!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}

Dialog:ReleaseCar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			carid = ListedVehicles[playerid][listitem],
			id = GetImpoundByID(CarData[carid][carImpounded]);

	    if (carid != -1 && id != -1 && CarData[carid][carExists] && CarData[carid][carImpounded] != -1)
	    {
	        if (GetMoney(playerid) < CarData[carid][carImpoundPrice])
	            return SendErrorMessage(playerid, "Kamu tidak bisa melepaskan kendaraan ini.");

            GiveMoney(playerid, -CarData[carid][carImpoundPrice]);

            CarData[carid][carPos][0] = ImpoundData[id][impoundRelease][0];
            CarData[carid][carPos][1] = ImpoundData[id][impoundRelease][1];
            CarData[carid][carPos][2] = ImpoundData[id][impoundRelease][2];
            CarData[carid][carPos][3] = ImpoundData[id][impoundRelease][3];

			SetVehiclePos(CarData[carid][carVehicle], CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2]);
			SetVehicleZAngle(CarData[carid][carVehicle], CarData[carid][carPos][3]);

			SendServerMessage(playerid, "Kamu berhasil melepaskan %s punyamu dengan harga %s.", ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(CarData[carid][carImpoundPrice]));

            CarData[carid][carImpounded] = -1;
            CarData[carid][carImpoundPrice] = 0;

            Car_Save(carid);
	    }
	}
	return 1;
}

Dialog:GiveItem(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    static
	        userid = -1,
			itemid = -1,
			string[32];

		if (sscanf(inputtext, "u", userid))
		    return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Berikan Item", "Tolong masukan nama atau ID player tersebut:", "Submit", "Batal");

		if (userid == INVALID_PLAYER_ID)
		    return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Berikan Item", "Error: Player tidak valid.\n\nTolong masukan nama atau ID player tersebut:", "Submit", "Batal");

	    if (!IsPlayerNearPlayer(playerid, userid, 6.0))
			return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Berikan Item", "Error: Kamu tidak didekat player itu.\n\nTolong masukan nama atau ID player tersebut:", "Submit", "Batal");

	    if (userid == playerid)
			return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Berikan Item", "Error: Kamu tidak bisa memberikan item ke dirimu sendiri.\n\nTolong masukan nama atau ID player tersebut:", "Submit", "Batal");

		itemid = PlayerData[playerid][pInventoryItem];

		if (itemid == -1)
		    return 0;

		strunpack(string, InventoryData[playerid][itemid][invItem]);

		if (InventoryData[playerid][itemid][invQuantity] == 1)
		{
			if (!strcmp(string, "Backpack") && Inventory_HasItem(userid, "Backpack"))
			    return SendErrorMessage(playerid, "Pemain itu sudah membawa backpack.");

		    new id = Inventory_Add(userid, string, InventoryData[playerid][itemid][invModel]);

		    if (id == -1)
				return SendErrorMessage(playerid, "Player tidak mempunyai slot lagi di inventorynya.");

			if (!strcmp(string, "Backpack") && (id = GetPlayerBackpack(playerid)) != -1)
			{
			    BackpackData[id][backpackPlayer] = PlayerData[userid][pID];
				Backpack_Save(id);

				SetAccessories(userid);
			    Inventory_Remove(playerid, "Backpack");
			}
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan sebuah \"%s\" dan memberikannya kepada %s.", ReturnName(playerid, 0), string, ReturnName(userid, 0));
		    SendServerMessage(userid, "%s telah memberikanmu sebuah \"%s\" (ditambahkan ke inventory).", ReturnName(playerid, 0), string);

			Inventory_Remove(playerid, string);
		    Log_Write("logs/give_log.txt", "[%s] %s (%s) telah memberikan sebuah %s kepada %s (%s).", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], string, ReturnName(userid, 0), PlayerData[userid][pIP]);
  		}
		else
		{
		    Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Beri Item", "Item: %s (Jumlah: %d)\n\nHarap masukkan jumlah barang yang ingin kamu berikan kepada %s:", "Berikan", "Batal", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));
		    PlayerData[playerid][pGiveItem] = userid;
		}
	}
	return 1;
}

Dialog:GiveQuantity(playerid, response, listitem, inputtext[])
{
	if (response && PlayerData[playerid][pGiveItem] != INVALID_PLAYER_ID)
	{
	    new
	        userid = PlayerData[playerid][pGiveItem],
	        itemid = PlayerData[playerid][pInventoryItem],
			string[32];

		strunpack(string, InventoryData[playerid][itemid][invItem]);

		if (isnull(inputtext))
			return Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Beri Item", "Item: %s (Jumlah: %d)\n\nHarap masukkan jumlah barang yang ingin kamu berikan kepada %s:", "Berikan", "Batal", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));

		if (strval(inputtext) < 1 || strval(inputtext) > InventoryData[playerid][itemid][invQuantity])
		    return  Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Beri Item", "Error: Kamu tidak memiliki sebanyak itu.\n\nItem: %s (Jumlah: %d)\n\nHarap masukkan jumlah barang yang ingin kamu berikan kepada %s:", "Berikan", "Batal", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));

        new id = Inventory_Add(userid, string, InventoryData[playerid][itemid][invModel], strval(inputtext));

	    if (id == -1)
			return SendErrorMessage(playerid, "Player tidak mempunyai slot di inventorynya.");

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan sebuah \"%s\" dan memberikannya kepada %s.", ReturnName(playerid, 0), string, ReturnName(userid, 0));
	    SendServerMessage(userid, "%s telah memberimu sebuah \"%s\" (ditambahkan ke inventory).", ReturnName(playerid, 0), string);

		Inventory_Remove(playerid, string, strval(inputtext));
	    Log_Write("logs/give_log.txt", "[%s] %s (%s) telah memberikan %d %s kepada %s (%s).", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], strval(inputtext), string, ReturnName(userid, 0), PlayerData[userid][pIP]);
	}
	return 1;
}

Dialog:BackpackLoot(playerid, response, listitem, inputtext[])
{
	static id = -1;

	if (response)
	{
	    if (!strcmp(inputtext, "Ambil Tas"))
	    {
	        if (Inventory_HasItem(playerid, "Backpack"))
	            return SendErrorMessage(playerid, "Kamu hanya bisa memiliki satu backpack.");

	        id = PlayerData[playerid][pBackpackLoot];

	        BackpackData[id][backpackPlayer] = PlayerData[playerid][pID];
	        BackpackData[id][backpackPos][0] = 0.0;
	        BackpackData[id][backpackPos][1] = 0.0;
	        BackpackData[id][backpackPos][2] = 0.0;

	        DestroyDynamic3DTextLabel(BackpackData[id][backpackText3D]);
	        DestroyDynamicObject(BackpackData[id][backpackObject]);

			Backpack_Save(id);
			Inventory_Add(playerid, "Backpack", 3026);

			SetAccessories(playerid);
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mengambil sebuah backpack.", ReturnName(playerid, 0));
		}
		else if ((id = BackpackListed[playerid][listitem]) != -1)
		{
			new
			    string[32];

			strcat(string, BackpackItems[id][bItemName]);

			Inventory_Add(playerid, string, BackpackItems[id][bItemModel], BackpackItems[id][bItemQuantity]);
			Backpack_Remove(BackpackItems[id][bItemBackpack], string, BackpackItems[id][bItemQuantity]);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mencapai isi dalam backpack dan mendapatkan sebuah \"%s\".", ReturnName(playerid, 0), string);
		}
	}
	return 1;
}

Dialog:BackpackDeposit(playerid, response, listitem, inputtext[])
{
	static
	    string[32];

	strunpack(string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invItem]);

	if (response)
	{
		new amount = strval(inputtext);

		if (amount < 1 || amount > InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity])
		    return Dialog_Show(playerid, BackpackDeposit, DIALOG_STYLE_INPUT, "Backpack Deposit", "Item: %s (Jumlah: %d)\n\nHarap masukkan jumlah yang ingin kamu simpan untuk item ini:", "Simpan", "Kembali", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);

		Backpack_Add(GetPlayerBackpack(playerid), string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invModel], amount);
		Inventory_Remove(playerid, string, amount);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyimpan sebuah \"%s\" kedalam backpacknya.", ReturnName(playerid, 0), string);
		Backpack_Open(playerid);
	}
	else Backpack_Open(playerid);
	return 1;
}

Dialog:BackpackTake(playerid, response, listitem, inputtext[])
{
	static
	    string[32],
		id = -1;

	if (response)
	{
		new amount = strval(inputtext);

		id = PlayerData[playerid][pStorageItem];

		strunpack(string, BackpackItems[id][bItemName]);

		if (amount < 1 || amount > BackpackItems[id][bItemQuantity])
		    return Dialog_Show(playerid, BackpackTake, DIALOG_STYLE_INPUT, "Backpack Take", "Item: %s (Jumlah: %d)\n\nHarap masukkan jumlah yang ingin kamu ambil untuk item ini:", "Ambil", "Kembali", string, BackpackItems[id][bItemQuantity]);

		Inventory_Add(playerid, string, BackpackItems[id][bItemModel], amount);
        Backpack_Remove(GetPlayerBackpack(playerid), string, amount);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mengambil sebuah \"%s\" dari dalam backpacknya.", ReturnName(playerid, 0), string);
		Backpack_Open(playerid);
	}
	else Backpack_Open(playerid);
	return 1;
}

Dialog:BackpackOptions(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pStorageItem], string[32];

	    switch (listitem)
	    {
	        case 0:
	        {
	            strcat(string, BackpackItems[id][bItemName]);

	            if (BackpackItems[id][bItemQuantity] == 1)
	            {
	                Inventory_Add(playerid, string, BackpackItems[id][bItemModel]);
					Backpack_Remove(GetPlayerBackpack(playerid), string);

					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mengambil sebuah \"%s\" dari backpacknya.", ReturnName(playerid, 0), string);
					Backpack_Open(playerid);
	            }
	            else
	            {
	                Dialog_Show(playerid, BackpackTake, DIALOG_STYLE_INPUT, "Backpack Take", "Item: %s (Jumlah: %d)\n\nHarap masukkan jumlah yang ingin kamu ambil untuk item ini:", "Ambil", "Kembali", string, BackpackItems[id][bItemQuantity]);
	            }
			}
	        case 1:
	        {
	            new itemid = Inventory_GetItemID(playerid, BackpackItems[id][bItemName]);

	            if (itemid == -1)
					return SendErrorMessage(playerid, "Kamu tidak lagi memiliki barang ini untuk disimpan!");

                strunpack(string, InventoryData[playerid][itemid][invItem]);

				if (IsFurnitureItem(string))
				    return SendErrorMessage(playerid, "Kamu tidak bisa menyimpan furniture di backpackmu.");

				if (InventoryData[playerid][itemid][invQuantity] == 1)
	            {
	                Backpack_Add(GetPlayerBackpack(playerid), string, InventoryData[playerid][itemid][invModel]);
					Inventory_Remove(playerid, string);

					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyimpan sebuah \"%s\" kedalam backpacknya.", ReturnName(playerid, 0), string);
					Backpack_Open(playerid);
	            }
	            else
	            {
	                PlayerData[playerid][pInventoryItem] = itemid;
	                Dialog_Show(playerid, BackpackDeposit, DIALOG_STYLE_INPUT, "Backpack Deposit", "Item: %s (Jumlah: %d)\n\nHarap masukkan jumlah yang ingin kamu simpan untuk item ini:", "Simpan", "Kembali", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
	            }
			}
   		}
	}
	else Backpack_Open(playerid);
	return 1;
}

Dialog:Backpack(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = -1, string[48];

	    if (!listitem)
		{
	        if (Backpack_GetItems(GetPlayerBackpack(playerid)) >= MAX_BACKPACK_CAPACITY)
	            return SendErrorMessage(playerid, "Backpack sudah mencapai kapasitasnya yaitu %d item.", MAX_BACKPACK_CAPACITY);

	        OpenInventory(playerid);

	        PlayerData[playerid][pStorageSelect] = 3;
	    }
	    else if ((id = BackpackListed[playerid][listitem-1]) != -1) {
	        PlayerData[playerid][pStorageItem] = id;

			format(string, sizeof(string), "%s (Jumlah: %d)", BackpackItems[id][bItemName], BackpackItems[id][bItemQuantity]);
	        Dialog_Show(playerid, BackpackOptions, DIALOG_STYLE_LIST, string, "Ambil Item\nSimpan Item\nBuang Item", "Pilih", "Kembali");
		}
	}
	return 1;
}

Dialog:Tutorial(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pTutorialStage] == 3)
	{
		PlayerData[playerid][pTutorialStage] = 4;
		SendClientMessage(playerid, COLOR_SERVER, "Tekan 'Y' dan pilihlah botol soda lalu buang item.");
	}
	else if (PlayerData[playerid][pTutorialStage] == 4)
	{
		PlayerData[playerid][pTutorialStage] = 5;

		SendClientMessage(playerid, COLOR_SERVER, "Silakan menuju pintu keluar dan tekan 'F'.");
		SetPlayerCheckpoint(playerid, -228.8403, 1401.1831, 27.7656, 1.0);
	}
	return 1;
}

Dialog:TutorialConfirm(playerid, response, listitem, inputtext[])
{
    PlayerData[playerid][pTutorialStage] = 0;

	if (!response)
	{
	    PlayerData[playerid][pCreated] = 1;
	    PlayerData[playerid][pTask] = 1;

  		PlayerData[playerid][pTutorial] = 0;
		PlayerData[playerid][pTutorialTime] = 0;

		SendServerMessage(playerid, "Ketik /tasks untuk melihat tugasmu saat ini lalu selesaikanlah.");
	}
	else
	{
	    StartTutorial(playerid);
	}
	return 1;
}

Dialog:MyTickets(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!TicketData[playerid][listitem][ticketExists])
	        return SendErrorMessage(playerid, "Tidak ada tiket di slot yang dipilih.");

		if (GetMoney(playerid) < TicketData[playerid][listitem][ticketFee])
		    return SendErrorMessage(playerid, "Kamu tidak mampu membayar tiket ini.");

		GiveMoney(playerid, -TicketData[playerid][listitem][ticketFee]);
        Tax_AddMoney(TicketData[playerid][listitem][ticketFee]);

		SendServerMessage(playerid, "Kamu telah melunasi tiket senilai %s  untuk \"%s\".", FormatNumber(TicketData[playerid][listitem][ticketFee]), TicketData[playerid][listitem][ticketReason]);
		Ticket_Remove(playerid, listitem);
	}
	return 1;
}

Dialog:MyInvoices(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!TicketData[playerid][listitem][ticketExists])
	        return SendErrorMessage(playerid, "Tidak ada tagihan di slot yang dipilih.");

		if (GetMoney(playerid) < TicketData[playerid][listitem][ticketFee])
		    return SendErrorMessage(playerid, "Kamu tidak dapat membayar tagihan ini.");

		GiveMoney(playerid, -TicketData[playerid][listitem][ticketFee]);
        Tax_AddMoney(TicketData[playerid][listitem][ticketFee]);

		SendServerMessage(playerid, "Kamu telah membayar sebuah tagihan %s untuk \"%s\".", FormatNumber(TicketData[playerid][listitem][ticketFee]), TicketData[playerid][listitem][ticketReason]);
		Ticket_Remove(playerid, listitem);
	}
	return 1;
}

Dialog:MainGPS(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	            Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Cari House", "Silahkan masukkan alamat rumah di bawah ini:", "Submit", "Batal");

			case 1:
			    Dialog_Show(playerid, FindBusiness, DIALOG_STYLE_LIST, "Cari Business", "Retail Store\nWeapon Store\nClothing Store\nFast Food\nDealership\nGas Station\nFurniture Store", "Submit", "Batal");

			case 2:
			    Dialog_Show(playerid, FindEntrance, DIALOG_STYLE_LIST, "Cari Entrance", "DMV terdekat\nBank terdekat\nWarehouse terdekat\nCity Hall terdekat", "Pilih", "Batal");

			case 3:
			    Dialog_Show(playerid, FindJob, DIALOG_STYLE_LIST, "Cari Pekerjaan", "Courier\nMechanic\nTaxi Driver\nCargo Unloader\nMiner\nFood Vendor\nGarbage Man\nPackage Sorter\nWeapon Smuggler (illegal)\nLumberjack", "Pilih", "Batal");

			case 4:
			{

				static
				    string[MAX_GPS_LOCATIONS * 32];

				string = "Tambahkan lokasi\n";

				for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (LocationData[playerid][i][locationExists]) {
				    format(string, sizeof(string), "%s%s\n", string, LocationData[playerid][i][locationName]);
				}
				Dialog_Show(playerid, CustomLocations, DIALOG_STYLE_LIST, "Kustom lokasi", string, "Pilih", "Kembali");
			}
		}
	}
	return 1;
}

Dialog:FindHouse(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (isnull(inputtext) || strlen(inputtext) > 32)
		    return Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Cari House", "Silahkan masukkan alamat rumah di bawah ini:", "Submit", "Batal");

		for (new i = 0; i != MAX_HOUSES; i ++)
		{
			if (HouseData[i][houseExists] && !strcmp(HouseData[i][houseAddress], inputtext, true))
	    	{
         		Waypoint_Set(playerid, HouseData[i][houseAddress], HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]);
	        	return SendServerMessage(playerid, "Waypoint disetting ke \"%s\" (ditandai di radar).", HouseData[i][houseAddress]);
			}
		}
        Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Find House", "Error: Tidak ada hasil yang ditemukan untuk \"%s\".\n\nSilahkan masukkan alamat rumah di bawah ini:", "Submit", "Batal", inputtext);
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:FindBusiness(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new bizid = GetClosestBusiness(playerid, listitem + 1);

		if (bizid != -1)
		{
		    Waypoint_Set(playerid, BusinessData[bizid][bizName], BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2]);
	        SendServerMessage(playerid, "Waypoint disetting ke %s (ditandai di radar).", inputtext);
		}
		else
		{
			SendErrorMessage(playerid, "GPS tidak dapat menemukan business apa pun.");
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:FindEntrance(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = GetClosestEntrance(playerid, listitem + 1);

		if (id != -1)
		{
		    Waypoint_Set(playerid, EntranceData[id][entranceName], EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
	        SendServerMessage(playerid, "Waypoint di setting ke %s (ditandai di radar).", inputtext);
		}
		else
		{
			SendErrorMessage(playerid, "GPS tidak dapat menemukan entrance apa pun.");
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:FindJob(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = GetClosestJob(playerid, listitem + 1);

		if (id != -1)
		{
		    static
				str[32];

		    format(str, 32, "%s Job", inputtext);

		    Waypoint_Set(playerid, str, JobData[id][jobPos][0], JobData[id][jobPos][1], JobData[id][jobPos][2]);
	        SendServerMessage(playerid, "Waypoint disetting ke %s (ditandai di radar).", str);
		}
		else
		{
			SendErrorMessage(playerid, "GPS tidak dapat menemukan job apa pun.");
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:CustomLocations(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!listitem) {
			Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Tambah lokasi", "Harap masukkan nama yang diinginkan dari lokasi di bawah ini:", "Submit", "Batal");
	    }
	    else
		{
		    new id = Location_GetID(playerid, inputtext);

		    if (id != -1) {
		        PlayerData[playerid][pSelectedSlot] = id;

		        Dialog_Show(playerid, LocationInfo, DIALOG_STYLE_LIST, inputtext, "Setting Waypoint\nHapus lokasi", "Pilih", "Kembali");
			}
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:AddLocation(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Tambah lokasi", "Harap masukkan nama yang diinginkan dari lokasi di bawah ini:", "Submit", "Batal");

		if (strlen(inputtext) > 32)
		    return Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Tambah lokasi", "Error: Nama tidak boleh lebih dari 3 karakter.\n\nHarap masukkan nama yang diinginkan dari lokasi di bawah ini:", "Submit", "Batal");

		static
		    Float:fX,
		    Float:fY,
		    Float:fZ,
			id = -1;

		if ((id = House_Inside(playerid)) != -1) {
		    fX = HouseData[id][housePos][0];
		    fY = HouseData[id][housePos][1];
		    fZ = HouseData[id][housePos][2];
		}
		else if ((id = Business_Inside(playerid)) != -1) {
		    fX = BusinessData[id][bizPos][0];
		    fY = BusinessData[id][bizPos][1];
		    fZ = BusinessData[id][bizPos][2];
		}
        else if ((id = Entrance_Inside(playerid)) != -1) {
		    fX = EntranceData[id][entrancePos][0];
		    fY = EntranceData[id][entrancePos][1];
		    fZ = EntranceData[id][entrancePos][2];
		}
		else GetPlayerPos(playerid, fX, fY, fZ);

		Location_Add(playerid, inputtext, fX, fY, fZ);
		SendServerMessage(playerid, "Kamu berhasil menambahkan \"%s\" ke GPS kamu.", inputtext);
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:LocationInfo(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pSelectedSlot];

	    switch (listitem)
	    {
	        case 0:
	        {
	            Waypoint_Set(playerid, LocationData[playerid][id][locationName], LocationData[playerid][id][locationPos][0], LocationData[playerid][id][locationPos][1], LocationData[playerid][id][locationPos][2]);
				SendServerMessage(playerid, "Waypoint disetting ke \"%s\" (ditandai di radar).", LocationData[playerid][id][locationName]);
			}
			case 1:
			{
			    SendServerMessage(playerid, "Kamu berhasil menghapus \"%s\" dari GPS kamu.", LocationData[playerid][id][locationName]);

				Location_Delete(playerid, LocationData[playerid][id][locationName]);
				dialog_MainGPS(playerid, 1, 4, "\1");
			}
	    }
	}
	else dialog_MainGPS(playerid, 1, 4, "\1");
	return 1;
}

Dialog:Warrants(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || !IsACruiser(GetPlayerVehicleID(playerid)))
	    return 0;

	if (response)
	{
	    static
	        name[64],
			targetid = INVALID_PLAYER_ID;

		strmid(name, inputtext, 0, strfind(inputtext, "(") - 1);

		if ((targetid = GetPlayerID(name, 0)) == INVALID_PLAYER_ID)
		    return SendErrorMessage(playerid, "Player tidak terkoneksi.");

		if (PlayerData[targetid][pWarrants] < 1)
		    return SendErrorMessage(playerid, "Pemain tidak lagi memiliki Warrant.");

		PlayerData[playerid][pMDCPlayer] = targetid;

		format(name, sizeof(name), "MDC: %s", name);
		Dialog_Show(playerid, WarrantList, DIALOG_STYLE_LIST, name, "Lacak Player\nHapus Warrant", "Pilih", "Kembali");
	}
	else cmd_mdc(playerid, "\1");
	return 1;
}

Dialog:WarrantList(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || !IsACruiser(GetPlayerVehicleID(playerid)) || PlayerData[playerid][pMDCPlayer] == INVALID_PLAYER_ID)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            SendServerMessage(playerid, "Sistem Satelit MDC sekarang mencoba untuk melacak %s...", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
	            PlayerData[playerid][pTrackTime] = 3;
			}
			case 1:
			{
			    PlayerData[PlayerData[playerid][pMDCPlayer]][pWarrants] = 0;

			    SendServerMessage(playerid, "Kamu menghapus warrant milik %s.", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
			    SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s telah menghampus warrant milik %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pMDCPlayer], 0));

			    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
			}
	    }
	}
	else
	{
	    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
	    dialog_MainMDC(playerid, 1, 0, "\1");
	}
	return 1;
}

Dialog:ChargeName(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || !IsACruiser(GetPlayerVehicleID(playerid)))
	    return 0;

	if (response)
	{
	    new targetid;

	    if (sscanf(inputtext, "u", targetid))
	        return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Error: Masukan user yang valid.\n\nHarap masukkan nama atau ID player:", "Submit", "Kembali");

		if (targetid == INVALID_PLAYER_ID)
		    return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Error: Pengguna tidak valid.\n\nHarap masukkan nama atau ID player:", "Submit", "Kembali");

        if (PlayerData[targetid][pWarrants] > 14)
		    return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Error: Pengguna sudah memiliki 15 waransi aktif.\n\nHarap masukkan nama atau ID player:", "Submit", "Kembali");

		PlayerData[playerid][pMDCPlayer] = targetid;
		Dialog_Show(playerid, PlaceCharge, DIALOG_STYLE_INPUT, "Place Charge", "Harap masukkan deskripsi kejahatan yang dilakukan oleh %s:", "Submit", "Kembali", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
	}
	else cmd_mdc(playerid, "\1");
	return 1;
}

Dialog:PlaceCharge(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || !IsACruiser(GetPlayerVehicleID(playerid)) || PlayerData[playerid][pMDCPlayer] == INVALID_PLAYER_ID)
	    return 0;

	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, PlaceCharge, DIALOG_STYLE_INPUT, "Place Charge", "Harap masukkan deskripsi kejahatan yang dilakukan oleh %s:", "Submit", "Kembali", ReturnName(PlayerData[playerid][pMDCPlayer], 0));

	    PlayerData[PlayerData[playerid][pMDCPlayer]][pWarrants]++;

	    AddWarrant(PlayerData[playerid][pMDCPlayer], playerid, inputtext);
	    SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s telah melaporkan untuk mengejar %s untuk kejahatan \"%s\".", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pMDCPlayer], 0), inputtext);

	    cmd_mdc(playerid, "\1");
	}
	else
	{
	    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
	    cmd_mdc(playerid, "\1");
	}
	return 1;
}

Dialog:MainMDC(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || !IsACruiser(GetPlayerVehicleID(playerid)))
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            static
	                string[512];

				string[0] = 0;

				foreach (new i : Player) if (PlayerData[i][pWarrants] > 0) {
				    format(string, sizeof(string), "%s%s (%d warrant)\n", string, ReturnName(i, 0), PlayerData[i][pWarrants]);
				}
				if (!strlen(string))
				    return SendErrorMessage(playerid, "Tidak ada warrant aktif.");

				Dialog_Show(playerid, Warrants, DIALOG_STYLE_LIST, "Warrant aktif", string, "Pilih", "Kembali");
    		}
    		case 1:
    		{
    		    Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Place Charges", "Harap masukkan nama atau ID player:", "Submit", "Kembali");
			}
			case 2:
    		{
    		    Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "View Charges", "Harap masukkan nama atau ID player", "Submit", "Kembali");
			}
	    }
	}
	return 1;
}

Dialog:FightingStyles(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	        	PlayerData[playerid][pFightStyle] = 4;
		        SetPlayerFightingStyle(playerid, 4);

      			SendClientMessage(playerid, COLOR_ORANGE, "[TRAINING]: kamu mereset fighting style milikmu.");
    		}
    		case 1:
	        {
       			PlayerData[playerid][pFightStyle] = 5;
		        SetPlayerFightingStyle(playerid, 5);

      			SendClientMessage(playerid, COLOR_ORANGE, "[TRAINING]: Kamu telah berhasil melewati pelatihanmu. Fighting style kamu yang baru adalah Boxing.");
      			GiveMoney(playerid, -1000);
    		}
			case 2:
	        {
	        	PlayerData[playerid][pFightStyle] = 6;
		        SetPlayerFightingStyle(playerid, 6);

      			SendClientMessage(playerid, COLOR_ORANGE, "[TRAINING]: Kamu telah berhasil melewati pelatihanmu. Fighting style kamu yang baru adalah Kung Fu.");
                GiveMoney(playerid, -1000);
    		}
    		case 3:
	        {
	        	PlayerData[playerid][pFightStyle] = 7;
		        SetPlayerFightingStyle(playerid, 7);

      			SendClientMessage(playerid, COLOR_ORANGE, "[TRAINING]: Kamu telah berhasil melewati pelatihanmu. Fighting style kamu yang baru adalah Knee Head.");
                GiveMoney(playerid, -1000);
    		}
    		case 4:
	        {
	        	PlayerData[playerid][pFightStyle] = 15;
		        SetPlayerFightingStyle(playerid, 15);

      			SendClientMessage(playerid, COLOR_ORANGE, "[TRAINING]: Kamu telah berhasil melewati pelatihanmu. Fighting style kamu yang baru adalah Grab Kicking.");
                GiveMoney(playerid, -1000);
    		}
    		case 5:
	        {
	        	PlayerData[playerid][pFightStyle] = 16;
		        SetPlayerFightingStyle(playerid, 16);

      			SendClientMessage(playerid, COLOR_ORANGE, "[TRAINING]: Kamu telah berhasil melewati pelatihanmu. Fighting style kamu yang baru adalah Elbow Master.");
                GiveMoney(playerid, -1000);
    		}
	    }
	}
	return 1;
}

Dialog:LicensesPurchase(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (Inventory_HasItem(playerid, "Car License"))
	    			return SendErrorMessage(playerid, "Kamu sudah memiliki sebuah Car License.");

	        	Inventory_Add(playerid, "Car License", 1581);
      			SendClientMessage(playerid, COLOR_ORANGE, "[LICENSE DEPARTMENT]: Kamu telah membayar dan menerima Car Licensemu. Kamu sekarang diizinkan untuk mengoperasikan Mobil.");
      			GiveMoney(playerid, -100);
    		}
    		case 1:
	        {
	            if (Inventory_HasItem(playerid, "Truck License"))
	    			return SendErrorMessage(playerid, "Kamu sudah memiliki sebuah Truck License.");

       			Inventory_Add(playerid, "Truck License", 1581);
      			SendClientMessage(playerid, COLOR_ORANGE, "[LICENSE DEPARTMENT]: Kamu telah membayar dan menerima Truck Licensemu. Kamu sekarang diizinkan untuk mengoperasikan Truck.");
      			GiveMoney(playerid, -200);
    		}
			case 2:
	        {
	            if (Inventory_HasItem(playerid, "Motorbike License"))
	    			return SendErrorMessage(playerid, "Kamu sudah memiliki sebuah Motorbike License.");

	        	Inventory_Add(playerid, "Motorbike License", 1581);
      			SendClientMessage(playerid, COLOR_ORANGE, "[LICENSE DEPARTMENT]: Kamu telah membayar dan menerima Motorbike Licensemu. Kamu sekarang diizinkan untuk mengoperasikan Motor.");
      			GiveMoney(playerid, -150);
    		}
    		case 3:
	        {
	            if (Inventory_HasItem(playerid, "Airplane License"))
	    			return SendErrorMessage(playerid, "Kamu sudah memiliki sebuah Airplane License.");

	        	Inventory_Add(playerid, "Airplane License", 1581);
      			SendClientMessage(playerid, COLOR_ORANGE, "[LICENSE DEPARTMENT]: Kamu telah membayar dan menerima Airplane Licensemu. Kamu sekarang diizinkan untuk mengoperasikan Pesawat.");
      			GiveMoney(playerid, -1000);
    		}
    		case 4:
	        {
	            if (Inventory_HasItem(playerid, "Helicopter License"))
	    			return SendErrorMessage(playerid, "Kamu sudah memiliki sebuah Helicopter License.");

	        	Inventory_Add(playerid, "Helicopter License", 1581);
      			SendClientMessage(playerid, COLOR_ORANGE, "[LICENSE DEPARTMENT]: Kamu telah membayar dan menerima Helicopter Licensemu. Kamu sekarang diizinkan untuk mengoperasikan Helicopter.");
      			GiveMoney(playerid, -1000);
    		}
	    }
	}
	return 1;
}

Dialog:ViewCharges(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || !IsACruiser(GetPlayerVehicleID(playerid)))
	    return 0;

	if (response)
	{
		if (isnull(inputtext) || strlen(inputtext) > 24)
		    return Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "View Charges", "Harap masukkan nama atau ID player:", "Submit", "Kembali");

		if (IsNumeric(inputtext) && IsPlayerConnected(strval(inputtext))) {
	        ViewCharges(playerid, ReturnName(strval(inputtext)));
		}
	    else if (!IsNumeric(inputtext)) {
	        ViewCharges(playerid, inputtext);
		}
		else {
		    Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "View Charges", "Error: Player tidak valid.\n\nHarap masukkan nama atau ID player:", "Submit", "Kembali");
		}
	}
	else cmd_mdc(playerid, "\1");
	return 1;
}

Dialog:Locker(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1 || !IsNearFactionLocker(playerid))
		return 0;

	if (response)
	{
	    static
	        skins[8],
	        string[512];

		string[0] = 0;

	    if (FactionData[factionid][factionType] != FACTION_GANG)
	    {
	        switch (listitem)
	        {
	            case 0:
	            {
	                if (!PlayerData[playerid][pOnDuty])
	                {
	                    PlayerData[playerid][pOnDuty] = true;
	                    SetPlayerArmour(playerid, 100.0);

	                    SetFactionColor(playerid);
	                    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah masuk dan sekarang bertugas.", ReturnName(playerid, 0));
	                    SendFactionMessage(factionid, COLOR_FACTIONCHAT, "**DISPATCH: %s %s sekarang bertugas.**", Faction_GetRank(playerid), ReturnName(playerid, 0));
	                }
	                else
	                {
	                    PlayerData[playerid][pOnDuty] = false;
	                    SetPlayerArmour(playerid, 0.0);

	                    SetPlayerColor(playerid, DEFAULT_COLOR);
	                    SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);

	                    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah keluar dan sekarang tidak bertugas lagi.", ReturnName(playerid, 0));
	                    SendFactionMessage(factionid, COLOR_FACTIONCHAT, "**DISPATCH: %s %s sudah tidak bertugas.**", Faction_GetRank(playerid), ReturnName(playerid, 0));
	                }
				}
				case 1:
				{
				    SetPlayerArmour(playerid, 100.0);
				    SetPlayerHealth(playerid, 100.0);
				    SendClientMessage(playerid, COLOR_WHITE, "Kamu telah berhasil mengisi darah (100.0) dan armor (100.0). ");
				}
				case 2:
				{
					for (new i = 0; i < sizeof(skins); i ++)
					    skins[i] = (FactionData[factionid][factionSkins][i]) ? (FactionData[factionid][factionSkins][i]) : (19300);

					ShowModelSelectionMenu(playerid, "Pilih skin", MODEL_SELECTION_FACTION_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
				}
				case 3:
				{
				    for (new i = 0; i < 10; i ++)
					{
				        if (FactionData[factionid][factionWeapons][i])
							format(string, sizeof(string), "%sSenjata %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));

						else format(string, sizeof(string), "%sSlot Kosong\n", string);
				    }
				    Dialog_Show(playerid, LockerWeapons, DIALOG_STYLE_LIST, "Loker senjata", string, "Pilih", "Batal");
				}
			}
	    }
	    else
	    {
	        switch (listitem)
	        {
				case 0:
				{
					for (new i = 0; i < sizeof(skins); i ++)
					    skins[i] = (FactionData[factionid][factionSkins][i]) ? (FactionData[factionid][factionSkins][i]) : (19300);

					ShowModelSelectionMenu(playerid, "Choose Skin", MODEL_SELECTION_FACTION_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
				}
				case 1:
				{
				    for (new i = 0; i < 10; i ++)
					{
				        if (FactionData[factionid][factionWeapons][i] && GetFactionType(playerid) != FACTION_GANG)
							format(string, sizeof(string), "%sSenjata %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));

						else if (FactionData[factionid][factionWeapons][i] && GetFactionType(playerid) == FACTION_GANG)
							format(string, sizeof(string), "%sSenjata %d: %s (%d peluru)\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]), FactionData[factionid][factionAmmo][i]);

						else format(string, sizeof(string), "%sSlot kosong\n", string);
				    }
				    Dialog_Show(playerid, LockerWeapons, DIALOG_STYLE_LIST, "Loker senjata", string, "Pilih", "Batal");
				}
			}
	    }
	}
	return 1;
}

Dialog:TrunkLocker(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1)
		return 0;

	if (response)
	{
	    static
	        string[512];

		string[0] = 0;

	    if (FactionData[factionid][factionType] != FACTION_GANG)
	    {
	        switch (listitem)
	        {
				case 0:
				{
				    SetPlayerArmour(playerid, 100.0);
				    SetPlayerHealth(playerid, 100.0);
				    SendClientMessage(playerid, COLOR_WHITE, "Kamu berhasil mengisi darah (100.0) dan armor (100.0). ");
				}
				case 1:
				{
				    for (new i = 0; i < 10; i ++)
					{
				        if (FactionData[factionid][factionWeapons][i])
							format(string, sizeof(string), "%sSenjata %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));

						else format(string, sizeof(string), "%sSlot kosong\n", string);
				    }
				    Dialog_Show(playerid, TrunkWeapons, DIALOG_STYLE_LIST, "Bagasi Senjata", string, "Pilih", "Batal");
				}
			}
	    }
	    else
	    {
	    }
	}
	return 1;
}

Dialog:TrunkWeapons(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1)
		return 0;

	if (response)
	{
	    new
	        weaponid = FactionData[factionid][factionWeapons][listitem],
	        ammo = FactionData[factionid][factionAmmo][listitem];

	    if (weaponid)
		{
	        if (PlayerHasWeapon(playerid, weaponid))
	            return SendErrorMessage(playerid, "Kamu sudah menggunakan senjata ini.");

	        GiveWeaponToPlayer(playerid, weaponid, ammo);
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mencapai bagian dalam bagasi dan meraih sebuah %s.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));

			if (GetFactionType(playerid) == FACTION_GANG)
		    {
		        FactionData[factionid][factionWeapons][listitem] = 0;
		        FactionData[factionid][factionAmmo][listitem] = 0;

		        Faction_Save(factionid);
			}
		}
		else
		{
		    if (GetFactionType(playerid) == FACTION_GANG)
		    {
		        if ((weaponid = GetWeapon(playerid)) == 0)
		            return SendErrorMessage(playerid, "Kamu tidak memegang senjata apapun.");

		        FactionData[factionid][factionWeapons][listitem] = weaponid;
		        FactionData[factionid][factionAmmo][listitem] = GetPlayerAmmo(playerid);

		        Faction_Save(factionid);

                ResetWeapon(playerid, weaponid);
		        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memegang sebuah %s dan menyimpannya di dalam bagasi.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));
			}
			else
			{
			    SendErrorMessage(playerid, "Slot senjata terpilih kosong.");
			}
	    }
	}
	else {
	    cmd_locker(playerid, "\1");
	}
	return 1;
}

Dialog:LockerWeapons(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1 || !IsNearFactionLocker(playerid))
		return 0;

	if (response)
	{
	    new
	        weaponid = FactionData[factionid][factionWeapons][listitem],
	        ammo = FactionData[factionid][factionAmmo][listitem];

	    if (weaponid)
		{
	        if (PlayerHasWeapon(playerid, weaponid))
	            return SendErrorMessage(playerid, "Kamu sudah menggunakan senjata ini.");

	        GiveWeaponToPlayer(playerid, weaponid, ammo);
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mencapai bagian dalam rak dan meraih sebuah %s.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));

			if (GetFactionType(playerid) == FACTION_GANG)
		    {
		        FactionData[factionid][factionWeapons][listitem] = 0;
		        FactionData[factionid][factionAmmo][listitem] = 0;

		        Faction_Save(factionid);
			}
		}
		else
		{
		    if (GetFactionType(playerid) == FACTION_GANG)
		    {
		        if ((weaponid = GetWeapon(playerid)) == 0)
		            return SendErrorMessage(playerid, "Kamu tidak memegang senjata apapun.");

		        FactionData[factionid][factionWeapons][listitem] = weaponid;
		        FactionData[factionid][factionAmmo][listitem] = GetPlayerAmmo(playerid);

		        Faction_Save(factionid);

                ResetWeapon(playerid, weaponid);
		        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memegang sebuah %s dan menyimpannya di loker.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));
			}
			else
			{
			    SendErrorMessage(playerid, "Slot senjata terpilih kosong.");
			}
	    }
	}
	else {
	    cmd_locker(playerid, "\1");
	}
	return 1;
}

Dialog:FactionLocker(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
			    static
			        Float:x,
			        Float:y,
			        Float:z;

				GetPlayerPos(playerid, x, y, z);

				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][0] = x;
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][1] = y;
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][2] = z;

				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerInt] = GetPlayerInterior(playerid);
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerWorld] = GetPlayerVirtualWorld(playerid);

				Faction_Refresh(PlayerData[playerid][pFactionEdit]);
				Faction_Save(PlayerData[playerid][pFactionEdit]);
				SendServerMessage(playerid, "Kamu telah menyesuaikan posisi loker Faction ID: %d.", PlayerData[playerid][pFactionEdit]);
			}
			case 1:
			{
				static
				    string[512];

				string[0] = 0;

			    for (new i = 0; i < 10; i ++)
				{
			        if (FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][i])
						format(string, sizeof(string), "%sSenjata %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][i]));

					else format(string, sizeof(string), "%sSlot Kosong\n", string);
			    }
			    Dialog_Show(playerid, FactionWeapons, DIALOG_STYLE_LIST, "Loker Senjata", string, "Pilih", "Batal");
			}
		}
	}
	return 1;
}

Dialog:FactionWeapons(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    PlayerData[playerid][pSelectedSlot] = listitem;
	    Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Menetapkan Senjata", "Tetapkan Senjata (%d)\nTetapkan Amunisi (%d)\nHapus Slot", "Pilih", "Batal", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]]);
	}
	return 1;
}

Dialog:FactionWeapon(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        	Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Tetapkan Senjata", "Senjata saat ini: %s (%d)\n\nMasukkan id senjata baru untuk slot %d:", "Submit", "Batal", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

			case 1:
	            Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Tetapkan Peluru", "Current Ammo: %d\n\nSilakan masukkan jumlah amunisi baru untuk senjata di slot %d:", "Submit", "Batal", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

			case 2:
			{
			    FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]] = 0;
				FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]] = 0;

				Faction_Save(PlayerData[playerid][pFactionEdit]);

				dialog_FactionLocker(playerid, 1, 1, "\1");
				SendServerMessage(playerid, "Kamu telah menghapus senjata di slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
			}
	    }
	}
	else {
	    dialog_FactionLocker(playerid, 1, 1, "\1");
	}
	return 1;
}

Dialog:FactionWeaponID(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    new weaponid = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Tetapkan Senjata", "Senjata saat ini: %s (%d)\n\nMasukkan id senjata baru untuk slot %d:", "Submit", "Batal", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

		if (weaponid < 0 || weaponid > 46)
		    return Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Tetapkan Senjata", "Error: ID senjata tidak boleh di bawah 0 atau di atas 46.\n\nSenjata saat ini: %s (%d)\n\nMasukkan id senjata baru untuk slot %d:", "Submit", "Batal", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]] = weaponid;
        Faction_Save(PlayerData[playerid][pFactionEdit]);

		Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Tetapkan Senjata", "Tetapkan senjata (%d)\nTetapkan Amunisi (%d)\nHapus slot", "Pilih", "Batal", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]]);

	    if (weaponid) {
		    SendServerMessage(playerid, "Kamu berhasil menetapkan senjata di slot %d menjadi %s.", PlayerData[playerid][pSelectedSlot] + 1, ReturnWeaponName(weaponid));
		}
		else {
		    SendServerMessage(playerid, "Kamu berhasil menghapus senjata di slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
		}
	}
	return 1;
}

Dialog:FactionWeaponAmmo(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    new ammo = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Tetapkan Amunisi", "Amunisi saat ini: %d\n\nPlease enter the new ammunition for the weapon in slot %d:", "Submit", "Batal", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

		if (ammo < 1 || ammo > 15000)
		    return Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Tetapkan Amunisi", "Error: Amunisi tidak bisa di bawah 1 atau di atas 15.000.\n\nAmunisi saat ini: %d\n\nSilakan masukkan jumlah amunisi baru untuk senjata di slot %d:", "Submit", "Batal", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]] = ammo;
        Faction_Save(PlayerData[playerid][pFactionEdit]);

		Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Tetapkan Senjata", "Tetapkan senjata (%d)\nTetapkan amunisi (%d)\nHapus slot", "Pilih", "Batal", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]]);
		SendServerMessage(playerid, "Kamu telah mengatur amunisi di slot %d menjadi %d.", PlayerData[playerid][pSelectedSlot] + 1, ammo);
	}
	return 1;
}

Dialog:FactionSkin(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    static
	        skins[30000];

		switch (listitem)
		{
		    case 0:
		        Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Tambah dengan Model ID", "Harap masukkan Model ID skin di bawah ini (0-311):", "Tambah", "Batal");

			case 1:
			{
			    for (new i = 0; i < sizeof(skins); i ++)
			        skins[i] = i + 1;

				ShowModelSelectionMenu(playerid, "Tambah Skin", MODEL_SELECTION_ADD_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
			}
			case 2:
			{
			    FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = 0;

			    Faction_Save(PlayerData[playerid][pFactionEdit]);
			    SendServerMessage(playerid, "Kamu menghapus skin di slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
			}
		}
	}
	return 1;
}

Dialog:FactionModel(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    new skin = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Tambah dengan Model ID", "Harap masukkan Model ID skin di bawah ini (0-311):", "Tambah", "Batal");

		if (skin < 0 || skin > 30000)
		    return Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Tambah dengan Model ID", "Error: ID skin tidak boleh di bawah 0 atau di atas 311.\n\nHarap masukkan Model ID skin di bawah ini (0-311):", "Tambah", "Batal");

        FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = skin;
		Faction_Save(PlayerData[playerid][pFactionEdit]);

		if (skin) {
		    SendServerMessage(playerid, "Kamu telah mengatur ID skin di slot %d menjadi %d.", PlayerData[playerid][pSelectedSlot] + 1, skin);
		}
		else {
		    SendServerMessage(playerid, "Kamu telah menghapus ID skin di slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
		}
	}
	return 1;
}

Dialog:JobList(playerid, response, listitem, inputtext[])
{
	/*
	    case 1: str = "Courier";
		case 2: str = "Mechanic";
		case 3: str = "Taxi Driver";
		case 4: str = "Cargo Unloader";
		case 5: str = "Miner";
		case 6: str = "Food Vendor";
		case 7: str = "Garbage Man";
		case 8: str = "Weapon Smuggler";
	*/
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Courier Job", "{FF6347}Courier{FFFFFF} job memungkinkan pemain mengantarkan produk ke sebuah bisnis.\nGunakan {FF6347}/startdelivery{FFFFFF} untuk mulai memuat dan {FF6347}/unload{FFFFFF} untuk membongkar barang.", "Tutup", "Kembali");

			case 1:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Mechanic Job", "{FF6347}Mechanic{FFFFFF} job memungkinkan pemain untuk memperbaiki kendaraan secara total.\nGunakan {FF6347}/hood{FFFFFF} untuk membuka kap dan {FF6347}/repair{FFFFFF} untuk memperbaiki kendaraan.", "Tutup", "Kembali");

            case 2:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Taxi Driver Job", "{FF6347}Taxi Driver{FFFFFF} job memungkinkan pemain untuk mengangkut pemain lain.\nGunakan {FF6347}/taxi{FFFFFF} sementara di dalam taksi untuk pergi bertugas di taksi.", "Tutup", "Kembali");

            case 3:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Cargo Unloader Job", "{FF6347}Cargo Unloader{FFFFFF} job memungkinkan pemain mengoperasikan forklift untuk memindahkan peti.\nGunakan {FF6347}/loadcrate{FFFFFF} untuk memuat peti dan mengirimkannya ke {FF6347}marker{FFFFFF}.", "Tutup", "Kembali");

            case 4:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Miner Job", "{FF6347}Miner{FFFFFF} job memungkinkan pemain untuk menambang batu dari tanah.\nGunakan {FF6347}/mine{FFFFFF} untuk memulai penambangan dan{FF6347} LMB{FFFFFF} untuk mulai menggali", "Tutup", "Kembali");

        	case 5:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Food Vendor Job", "{FF6347}Food Vendor{FFFFFF} job memungkinkan pemain menjual makanan ke pemain lain.\nGunakan {FF6347}/sellfood{FFFFFF} sementara di dalam truk makanan untuk menjual makanan.", "Tutup", "Kembali");

            case 6:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Garbage Man Job", "{FF6347}Garbage Man{FFFFFF} job memungkinkan pemain mengirimkan sampah sebagai imbalan uang.\nGunakan {FF6347}/takebag{FFFFFF} sementara di dekat tempat sampah untuk memuat sekantong sampah.", "Tutup", "Kembali");

            case 7:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Package Sorter Job", "{FF6347}Package Sorter{FFFFFF} job memungkinkan pemain untuk mengurutkan paket uang.\nGunakan {FF6347}/sorting{FFFFFF} di lokasi yang diinginkan untuk mulai menyortir.", "Tutup", "Kembali");

            case 8:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Weapon Smuggler Job", "{FF6347}Weapon Smuggler{FFFFFF} job memungkinkan pemain menyelundupkan senjata dari peti senjata.\nGunakan {FF6347}/craftparts{FFFFFF} sambil membawa peti senjata untuk menyelundupkan bagian-bagiannya.", "Tutup", "Kembali");

	    }
	}
	return 1;
}

Dialog:RestrictedFrequencies(playerid, response, listitem, inputtext[])
{
	/*
	    case 0: str = "PD";
		case 1: str = "FD";
		case 2: str = "GOV";
	*/
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	            Dialog_Show(playerid, RestrictedFrequencies, DIALOG_STYLE_MSGBOX, "Police Department", "Frekuensi Radio Kepolisian adalah 9-1-1.", "Tutup", "Kembali");

			case 1:
	            Dialog_Show(playerid, RestrictedFrequencies, DIALOG_STYLE_MSGBOX, "Fire Department", "Frekuensi Radio Pemadam Kebakaran adalah 9-1-2.", "Tutup", "Kembali");

   			case 2:
	            Dialog_Show(playerid, RestrictedFrequencies, DIALOG_STYLE_MSGBOX, "San Andreas Government", "Frekuensi Radio dari Pemerintah San Andreas adalah 9-1-3.", "Tutup", "Kembali");

	    }
	}
	return 1;
}

Dialog:ACC_POLICE(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	            SetPlayerAttachedObject(playerid,1,19142,1,0.1,0.05,0.0,0.0,0.0,0.0),
		        SendClientMessage(playerid, COLOR_WHITE,"Kamu telah berhasil mengenakan Kevlar Vest.");

			case 1:
			    SetPlayerAttachedObject(playerid,2,19141,2,0.11,0.0,0.0,0.0,0.0,0.0),
	            SendClientMessage(playerid, COLOR_WHITE,"Kamu telah berhasil mengenakan Police Helmet.");

   			case 2:
   				SetPlayerAttachedObject(playerid,3,18637,13,0.35,0.0,0.0,0.0,0.0,180.0),
	            SendClientMessage(playerid, COLOR_WHITE,"Kamu telah berhasil mengenakan Police Shield.");

			case 3:
				SetPlayerAttachedObject(playerid,4,18642,7,0.1,0.0,-0.11,0.0,-90.0,90.0),
				SendClientMessage(playerid, COLOR_WHITE,"Kamu telah berhasil mengenakan Police Taser.");

            case 4:
            	SetPlayerAttachedObject(playerid,1,19515,1,0.1,0.05,0.0,0.0,0.0,0.0),
		        SendClientMessage(playerid, COLOR_WHITE,"Kamu telah berhasil mengenakan Grey SWAT Vest.");

            case 5:
            	SetPlayerAttachedObject(playerid,2,19514,2,0.11,0.0,0.0,0.0,0.0,0.0),
		        SendClientMessage(playerid, COLOR_WHITE,"Kamu telah berhasil mengenakan SWAT Helmet");

	    }
	}
	return 1;
}

Dialog:JobHelp(playerid, response, listitem, inputtext[])
{
	if (!response) cmd_joblist(playerid, "\1");
	return 1;
}

Dialog:Crates(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pCarryCrate] != -1)
	        return SendErrorMessage(playerid, "kamu sudah membawa sebuah crate.");

	    new id = strfind(inputtext, "#");

	    if (id != -1) {
	        id = strval(inputtext[id + 1]);

	        CrateData[id][crateVehicle] = INVALID_VEHICLE_ID;
	        PlayerData[playerid][pCarryCrate] = id;

            SetPlayerAttachedObject(playerid, 4, 964, 1, -0.157020, 0.413313, 0.000000, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengambil crate keluar dari kendaraan.", ReturnName(playerid, 0));
			SendServerMessage(playerid, "Kamu mengambil sebuah crate %s dari dalam kendaraan.", Crate_GetType(CrateData[id][crateType]));
		}
	}
	return 1;
}

Dialog:AddVehicleModel(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
	        if (isnull(inputtext))
	            return Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Tambah Vehicle", "Harap masukkan nama atau ID kendaraan:", "Tambah", "Batal");

			new model = GetVehicleModelByName(inputtext);

			if (!model)
			    return Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Tambah Vehicle", "Error: Model tidak valid.\n\nHarap masukkan nama atau ID kendaraan:", "Tambah", "Batal");

        	for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
			{
				if (DealershipCars[id][i][vehModel] == model)
	            	return Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Add Vehicle", "Error: Model telah dijual di dealer.\n\nHarap masukkan nama atau ID kendaraan:", "Tambah", "Batal");
			}
			PlayerData[playerid][pDealerCar] = model;
			Dialog_Show(playerid, DealerCarPrice, DIALOG_STYLE_INPUT, "Masukan Harga", "Tolong masukan harga untuk '%s':", "Submit", "Batal", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));
	    }
	}
	return 1;
}

Dialog:AddVehicle(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
			if (!listitem)
			{
				Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Tambah Vehicle", "Harap masukkan nama atau ID kendaraan:", "Tambah", "Batal");
			}
		    else
			{
				static
					cars[212];

				for (new i = 0; i < sizeof(cars); i ++)
  					cars[i] = i + 400;

				ShowModelSelectionMenu(playerid, "Add Vehicle", MODEL_SELECTION_DEALER_ADD, cars, sizeof(cars), -16.0, 0.0, -55.0);
			}
		}
	}
	return 1;
}

Dialog:EnterNumber(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    static
	        name[32],
			string[128];

		strunpack(name, PlayerData[playerid][pEditingItem]);

	    if (isnull(inputtext) || !IsNumeric(inputtext))
	        return Dialog_Show(playerid, EnterNumber, DIALOG_STYLE_INPUT, "Nomor Kontak", "Nama kontak: %s\n\nHarap masukkan nomor telepon untuk kontak ini:", "Submit", "Kembali", name);

		for (new i = 0; i != MAX_CONTACTS; i ++)
		{
			if (!ContactData[playerid][i][contactExists])
			{
            	ContactData[playerid][i][contactExists] = true;
            	ContactData[playerid][i][contactNumber] = strval(inputtext);

				format(ContactData[playerid][i][contactName], 32, name);

				format(string, sizeof(string), "INSERT INTO `contacts` (`ID`, `contactName`, `contactNumber`) VALUES('%d', '%s', '%d')", PlayerData[playerid][pID], SQL_ReturnEscaped(name), ContactData[playerid][i][contactNumber]);
				mysql_tquery(g_iHandle, string, "OnContactAdd", "dd", playerid, i);

				SendServerMessage(playerid, "Kamu berhasil menambahkan \"%s\" ke dalam kontak milikmu.", name);
                return 1;
			}
	    }
	    SendErrorMessage(playerid, "Tidak ada tempat lagi untuk daftar kontak.");
	}
	else {
		ShowContacts(playerid);
	}
	return 1;
}

Dialog:NewContact(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "Kontak Baru", "Error: Tolong masukan nama kontak.\n\nHarap masukan nama kontak di bawah ini:", "Submit", "Kembali");

	    if (strlen(inputtext) > 32)
	        return Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "Kontak Baru", "Error: Nama kontak tidak boleh melebihi 32 karakter.\n\nHarap masukan nama kontak di bawah ini:", "Submit", "Kembali");

		strpack(PlayerData[playerid][pEditingItem], inputtext, 32);

	    Dialog_Show(playerid, EnterNumber, DIALOG_STYLE_INPUT, "Nomor Kontak", "Nama Kontak: %s\n\nHarap masukkan nomor telepon untuk kontak ini:", "Submit", "Kembali", inputtext);
	}
	else {
		ShowContacts(playerid);
	}
	return 1;
}

Dialog:ContactInfo(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			id = PlayerData[playerid][pContact],
			string[72];

		switch (listitem)
		{
		    case 0:
		    {
		        format(string, 16, "%d", ContactData[playerid][id][contactNumber]);
				cmd_call(playerid, string);
		    }
		    case 1:
		    {
		        format(string, sizeof(string), "DELETE FROM `contacts` WHERE `ID` = '%d' AND `contactID` = '%d'", PlayerData[playerid][pID], ContactData[playerid][id][contactID]);
		        mysql_tquery(g_iHandle, string);

		        SendServerMessage(playerid, "Kamu berhasil menghapus \"%s\" dari kontak milikmu.", ContactData[playerid][id][contactName]);

		        ContactData[playerid][id][contactExists] = false;
		        ContactData[playerid][id][contactNumber] = 0;
		        ContactData[playerid][id][contactID] = 0;

		        ShowContacts(playerid);
		    }
		}
	}
	else {
	    ShowContacts(playerid);
	}
	return 1;
}

Dialog:Contacts(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!listitem) {
	        Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "Kontak Baru", "Harap masukan nama kontak dibawah ini:", "Submit", "Kembali");
	    }
	    else {
		    PlayerData[playerid][pContact] = ListedContacts[playerid][listitem - 1];

	        Dialog_Show(playerid, ContactInfo, DIALOG_STYLE_LIST, ContactData[playerid][PlayerData[playerid][pContact]][contactName], "Telpon Kontak\nHapus Kontak", "Pilih", "Kembali");
	    }
	}
	else {
		cmd_phone(playerid, "\1");
	}
	for (new i = 0; i != MAX_CONTACTS; i ++) {
	    ListedContacts[playerid][i] = -1;
	}
	return 1;
}

Dialog:DialNumber(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
	        string[16];

	    if (isnull(inputtext) || !IsNumeric(inputtext))
	        return Dialog_Show(playerid, DialNumber, DIALOG_STYLE_INPUT, "Hubungi nomor", "Harap masukkan nomor yang ingin kamu hubungi di bawah ini:", "Hubungi", "Kembali");

        format(string, 16, "%d", strval(inputtext));
		cmd_call(playerid, string);
	}
	else {
		cmd_phone(playerid, "\1");
	}
	return 1;
}

Dialog:SendText(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new number = strval(inputtext);

	    if (isnull(inputtext) || !IsNumeric(inputtext))
	        return Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Kirim SMS", "Harap masukkan nomor yang ingin kamu kirimi pesan teks:", "Kirim", "Kembali");

        if (GetNumberOwner(number) == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Kirim SMS", "Error: Nomor itu tidak online sekarang.\n\nHarap masukkan nomor yang ingin kamu kirimi pesan teks:", "Kirim", "Kembali");

		PlayerData[playerid][pContact] = GetNumberOwner(number);
		Dialog_Show(playerid, TextMessage, DIALOG_STYLE_INPUT, "SMS", "Masukkan pesan untuk dikirim kepada %s:", "Kirim", "Kembali", ReturnName(PlayerData[playerid][pContact], 0));
	}
	else {
		cmd_phone(playerid, "\1");
	}
	return 1;
}

Dialog:TextMessage(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (isnull(inputtext))
			return Dialog_Show(playerid, TextMessage, DIALOG_STYLE_INPUT, "SMS", "Error: Harap masukan pesan untuk dikirim.\n\nMasukkan pesan untuk dikirim kepada %s:", "Kirim", "Kembali", ReturnName(PlayerData[playerid][pContact], 0));

		new targetid = PlayerData[playerid][pContact];

		if (!IsPlayerConnected(targetid) || !PlayerData[targetid][pPhone])
		    return SendErrorMessage(playerid, "Nomor telepon yang ditentukan pergi offline.");

		GiveMoney(playerid, -1);
		ShowPlayerFooter(playerid, "Kamu ~r~membayar~w~ $1 untuk mengirim sms.");

		SendClientMessageEx(targetid, COLOR_YELLOW, "[SMS]: %s - %s (%d)", inputtext, ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
		SendClientMessageEx(playerid, COLOR_YELLOW, "[SMS]: %s - %s (%d)", inputtext, ReturnName(playerid, 0), PlayerData[playerid][pPhone]);

        PlayerPlaySoundEx(targetid, 21001);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan teleponnya dan mengirim sebuah teks.", ReturnName(playerid, 0));
	}
	else {
        Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Kirim SMS", "Harap masukkan nomor yang ingin kamu kirimi pesan teks:", "Submit", "Kembali");
	}
	return 1;
}

Dialog:MyPhone(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch (listitem)
		{
		    case 0:
		    {
		        if (PlayerData[playerid][pPhoneOff])
		            return SendErrorMessage(playerid, "Ponselmu harus dihidupkan.");

				Dialog_Show(playerid, DialNumber, DIALOG_STYLE_INPUT, "Nomor Panggilan", "Harap masukkan nomor yang ingin kamu hubungi di bawah ini:", "Panggil", "Kembali");
			}
			case 1:
			{
			    if (PlayerData[playerid][pPhoneOff])
		            return SendErrorMessage(playerid, "Ponselmu harus dihidupkan.");

			    ShowContacts(playerid);
			}
		    case 2:
		    {
		        if (PlayerData[playerid][pPhoneOff])
		            return SendErrorMessage(playerid, "Ponselmu harus dihidupkan.");

		        Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Send Text Message", "Harap masukkan nomor yang ingin kamu hubungi di bawah ini:", "Panggil", "Kembali");
			}
			case 3:
			{
			    if (!PlayerData[playerid][pPhoneOff])
			    {
           			if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID) {
			        	CancelCall(playerid);
					}
					PlayerData[playerid][pPhoneOff] = 1;
			        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mematikan ponselnya.", ReturnName(playerid, 0));
				}
				else
				{
				    PlayerData[playerid][pPhoneOff] = 0;
			        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mematikan ponselnya.", ReturnName(playerid, 0));
				}
			}
		}
	}
	return 1;
}

Dialog:ListedFurniture(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = House_Inside(playerid);

	    if (id != -1 && House_IsOwner(playerid, id))
	    {
	        PlayerData[playerid][pEditFurniture] = ListedFurniture[playerid][listitem];

			Dialog_Show(playerid, FurnitureList, DIALOG_STYLE_LIST, FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName], "Ubah Posisi\nAmbil Furniture\nHancurkan Furniture", "Pilih", "Batal");
	    }
	}
	for (new i = 0; i != MAX_FURNITURE; i ++) {
	    ListedFurniture[playerid][i] = -1;
	}
	return 1;
}

Dialog:FurnitureList(playerid, response, listitem, inputtext[])
{
	if (response)
	{
        new id = House_Inside(playerid);

	    if (id != -1 && House_IsOwner(playerid, id))
	    {
	   		switch (listitem)
		    {
		        case 0:
				{
					EditDynamicObject(playerid, FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureObject]);
					SendServerMessage(playerid, "Kamu sekarang mengedit posisi item \"%s\".", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);
				}
				case 1:
				{
				    new item = Inventory_Add(playerid, FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName], FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureModel]);

				    if (item == -1)
        				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mengambil \"%s\".", ReturnName(playerid, 0), FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);
				    SendServerMessage(playerid, "Kamu mengambil \"%s\" milikmu. Item ditambahkan ke inventory.", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);

				    Furniture_Delete(PlayerData[playerid][pEditFurniture]);
					CancelEdit(playerid);

				    PlayerData[playerid][pEditFurniture] = -1;
				}
				case 2:
				{
				    Furniture_Delete(PlayerData[playerid][pEditFurniture]);
				    SendServerMessage(playerid, "Kamu berhasil menghancurkan furniture \"%s\".", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);

				    CancelEdit(playerid);
				    PlayerData[playerid][pEditFurniture] = -1;
				}
			}
		}
		else {
			PlayerData[playerid][pEditFurniture] = -1;
		}
	}
	else {
	    PlayerData[playerid][pEditFurniture] = -1;
	}
	return 1;
}

Dialog:Trunk(playerid, response, listitem, inputtext[])
{
    new carid = Car_Nearest(playerid);

	if (CarData[carid][carImpounded] != -1)
    	return SendErrorMessage(playerid, "Kendaraan ini disita dan kamu tidak bisa menggunakannya.");

	if (carid != -1 && !CarData[carid][carLocked])
 	{
		if (response)
		{
			if (!CarData[carid][carWeapons][listitem])
			{
			    if (!GetWeapon(playerid))
			        return SendErrorMessage(playerid, "Kamu tidak memegang senjata apapun.");

       			if (GetWeapon(playerid) == 23 && PlayerData[playerid][pTazer])
	    			return SendErrorMessage(playerid, "Kamu tidak bisa menyimpan sebuah tazer ke dalam bagasimu.");

                if (GetWeapon(playerid) == 25 && PlayerData[playerid][pBeanBag])
	    			return SendErrorMessage(playerid, "Kamu tidak bisa menyimpan shotgun beanbag ke dalam bagasimu.");

				if (!Car_IsOwner(playerid, carid) && GetFactionType(playerid) == FACTION_POLICE)
        			return SendErrorMessage(playerid, "Kamu tidak bisa menyimpan senjata karena kamu adalah seorang petugas polisi.");

	   			CarData[carid][carWeapons][listitem] = GetWeapon(playerid);
	            CarData[carid][carAmmo][listitem] = GetPlayerAmmo(playerid);

	            ResetWeapon(playerid, CarData[carid][carWeapons][listitem]);
	            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menyimpan sebuah %s ke dalam bagasi.", ReturnName(playerid, 0), ReturnWeaponName(CarData[carid][carWeapons][listitem]));

	            Car_Save(carid);
				Car_WeaponStorage(playerid, carid);
			}
			else
			{
			    GiveWeaponToPlayer(playerid, CarData[carid][carWeapons][listitem], CarData[carid][carAmmo][listitem]);
	            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengambil sebuah %s dari bagasi.", ReturnName(playerid, 0), ReturnWeaponName(CarData[carid][carWeapons][listitem]));

	            CarData[carid][carWeapons][listitem] = 0;
	            CarData[carid][carAmmo][listitem] = 0;

	            Car_Save(carid);
	            Car_WeaponStorage(playerid, carid);
			}
	    }
		else {
		    Car_ShowTrunk(playerid, carid);
		}
	}
	return 1;
}

Dialog:ConfirmCarBuy(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			bizid = Business_Inside(playerid),
			carid = PlayerData[playerid][pDealerCar],
			price = DealershipCars[bizid][carid][vehPrice];




		if (bizid != -1 && BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 5)
		{
			if (GetMoney(playerid) < price)
			    return SendErrorMessage(playerid, "Kamu memiliki dana yang tidak mencukupi untuk pembelian.");

			if (Car_GetCount(playerid) >= MAX_OWNABLE_CARS)
			    return SendErrorMessage(playerid, "Kamu sudah memiliki %d kendaraan (server limit).", MAX_OWNABLE_CARS);

			new id = Car_Create(PlayerData[playerid][pID], DealershipCars[bizid][carid][vehModel], BusinessData[bizid][bizSpawn][0], BusinessData[bizid][bizSpawn][1], BusinessData[bizid][bizSpawn][2], BusinessData[bizid][bizSpawn][3], 1, 1);

			if (id != -1)
			{
			    Tax_AddPercent(price);

			    BusinessData[bizid][bizVault] += Tax_Percent(price);
			    Business_Save(bizid);

				SendServerMessage(playerid, "Kamu membeli sebuah %s dengan harga %s!", ReturnVehicleModelName(DealershipCars[bizid][carid][vehModel]), FormatNumber(price));
				GiveMoney(playerid, -price);


				ShowPlayerFooter(playerid, "~w~Kendaraan ~p~terbeli!");
				Log_Write("logs/car_log.txt", "[%s] %s telah membeli sebuah %s seharga %s.", ReturnDate(), ReturnName(playerid, 0), ReturnVehicleModelName(DealershipCars[bizid][carid][vehModel]), FormatNumber(price));
			}
		}
	}
	return 1;
}

Dialog:DealerCarPrice(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
		    if (isnull(inputtext) || strval(inputtext) < 1)
		        return Dialog_Show(playerid, DealerCarPrice, DIALOG_STYLE_INPUT, "Masukan Harga", "Harap masukkan harga untuk '%s':", "Submit", "Batal", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));

		    Business_AddVehicle(id, PlayerData[playerid][pDealerCar], strval(inputtext));
	        Business_EditCars(playerid, id);

		    SendServerMessage(playerid, "Kamu telah menambahkan sebuah '%s' ke dealer.", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));
		    return 1;
		}
	}
	return 1;
}

Dialog:CarPrice(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
		    if (isnull(inputtext) || strval(inputtext) < 1)
		        return Dialog_Show(playerid, CarPrice, DIALOG_STYLE_INPUT, "Masukan Harga", "Harga saat ini untuk '%s' adalah %s.\n\nSilahkan masukkan harga baru untuk model kendaraan ini di bawah ini:", "Submit", "Batal", ReturnVehicleModelName(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel]), FormatNumber(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice]));

			new
			    string[128];

			DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice] = strval(inputtext);

			format(string, sizeof(string), "UPDATE `dealervehicles` SET `vehPrice` = '%d' WHERE `ID` = '%d' AND `vehID` = '%d'", strval(inputtext), BusinessData[id][bizID], DealershipCars[id][PlayerData[playerid][pDealerCar]][vehID]);
			mysql_tquery(g_iHandle, string);

			SendServerMessage(playerid, "Kamu telah menetapkan harga '%s' menjadi %s.", ReturnVehicleModelName(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel]), FormatNumber(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice]));
			Business_EditCars(playerid, id);
		}
		return 1;
	}
	return 1;
}

Dialog:CarOptions(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
		    if (listitem == 0)
		    {
		        Dialog_Show(playerid, CarPrice, DIALOG_STYLE_INPUT, "Masukan Harga", "Harga saat ini untuk '%s' adalah %s.\n\nSilahkan masukkan harga baru untuk model kendaraan berikut ini:", "Submit", "Batal", ReturnVehicleModelName(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel]), FormatNumber(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice]));
		    }
		    else if (listitem == 1)
		    {
			    new model = DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel];
			    Business_RemoveVehicle(id, model);

				SendServerMessage(playerid, "Kamu menghapus '%s' dari dealer.", ReturnVehicleModelName(model));
				Business_EditCars(playerid, id);
			}
		}
	}
	return 1;
}

Dialog:BankAccount(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
				Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Tarik dana", "Saldo rekening bankmu: %s\n\nHarap masukkan jumlah uang yang kamu inginkan untuk ditarik:", "Tarik", "Kembali", FormatNumber(PlayerData[playerid][pBankMoney]));
			}
	        case 1:
	        {
				Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Simpan dana", "Saldo rekening bankmu: %s\n\nHarap masukkan jumlah uang yang kamu inginkan untuk disimpan:", "Simpan", "Kembali", FormatNumber(PlayerData[playerid][pBankMoney]));
			}
			case 2:
			{
			    Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Transfer", "Saldo rekening bankmu: %s\n\nHarap masukkan nama atau ID player di bawah ini:", "Lanjut", "Kembali", FormatNumber(PlayerData[playerid][pBankMoney]));
			}
	    }
	}
	else
	{
	    Dialog_Show(playerid, Bank, DIALOG_STYLE_LIST, "Akun bank", "Saldo bank: %s\nSaldo Tabungan: %s", "Pilih", "Batal", FormatNumber(PlayerData[playerid][pBankMoney]), FormatNumber(PlayerData[playerid][pSavings]));
	}
	return 1;
}

Dialog:Transfer(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    static
	        userid;

		if (sscanf(inputtext, "u", userid))
		    return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Transfer", "Saldo rekening bankmu: %s\n\nHarap masukkan nama atau ID player di bawah ini:", "Lanjut", "Kembali", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (userid == INVALID_PLAYER_ID)
		    return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Transfer", "Error: Pemain tidak valid.\n\nSaldo rekening bankmu: %s\n\nHarap masukkan nama atau ID player di bawah ini:", "Lanjut", "Kembali", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (userid == playerid)
		    return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Transfer", "Error: Kamu tidak dapat mentransfer dana ke diri kamu sendiri.\n\nSaldo rekening bankmu: %s\n\nHarap masukkan nama atau ID player di bawah ini:", "Lanjut", "Kembali", FormatNumber(PlayerData[playerid][pBankMoney]));

		PlayerData[playerid][pTransfer] = userid;
		Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Transfer", "Saldo rekening bankmu: %s\n\nHarap masukkan jumlah uang yang akan ditransfer ke %s:", "Lanjut", "Kembali", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));
	}
    else {
	    Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Akun Bank", "Tarik dana\nSimpan dana\nTransfer", "Pilih", "Kembali");
	}
	return 1;
}

Dialog:TransferCash(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Transfer", "Saldo rekening bankmu: %s\n\nHarap masukkan jumlah uang yang akan ditransfer ke %s:", "Lanjut", "Back", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));

		if (amount < 1 || amount > PlayerData[playerid][pBankMoney])
			return Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Transfer", "Error: Dana tidak mencukupi!\n\nSaldo rekening bankmu: %s\n\nHarap masukkan jumlah uang yang akan ditransfer ke %s:", "Lanjut", "Back", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));

		if (!strcmp(PlayerData[playerid][pIP], PlayerData[PlayerData[playerid][pTransfer]][pIP])) {
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s (%s) telah menstransfer %s kepada %s (%s).", ReturnName(playerid, 0), PlayerData[playerid][pIP], FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer], 0), PlayerData[playerid][pIP]);
		}
		PlayerData[playerid][pBankMoney] -= amount;
		PlayerData[PlayerData[playerid][pTransfer]][pBankMoney] += amount;

	    SendServerMessage(playerid, "Kamu berhasil mentransfer %s ke akun bank milik %s.", FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer], 0));
	    SendServerMessage(PlayerData[playerid][pTransfer], "%s telah menstransfer %s ke akun bankmu.", ReturnName(playerid, 0), FormatNumber(amount));

        Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Akun Bank", "Tarik dana\nSimpan Dana\nTransfer", "Pilih", "Kembali");
        Log_Write("logs/transfer_log.txt", "[%s] %s (%s) telah menstransfer %s kepada %s (%s).", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer]), PlayerData[PlayerData[playerid][pTransfer]][pIP]);
	}
	else {
	    Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Akun Bank", "Tarik dana\nSimpan Dana\nTransfer", "Pilih", "Kembali");
	}
	return 1;
}

Dialog:Savings(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
				Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Tarik dana", "Saldo rekening tabunganmu: %s\n\nHarap masukkan jumlah uang yang ingin kamu tarik:", "Tarik", "Kembali", FormatNumber(PlayerData[playerid][pSavings]));
			}
	        case 1:
	        {
				Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Simpan dana", "Saldo rekening tabunganmu: %s\n\nHarap masukkan jumlah uang yang ingin kamu simpan:", "Simpan", "Kembali", FormatNumber(PlayerData[playerid][pSavings]));
			}
	    }
	}
	else
	{
	    Dialog_Show(playerid, Bank, DIALOG_STYLE_LIST, "Akun Bank", "Saldo bank: %s\nSaldo Tabungan: %s", "Pilih", "Batal", FormatNumber(PlayerData[playerid][pBankMoney]), FormatNumber(PlayerData[playerid][pSavings]));
	}
	return 1;
}

Dialog:Withdraw(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Tarik dana", "Saldo rekening bankmu: %s\n\nHarap masukkan jumlah uang yang ingin kamu tarik:", "Tarik", "Kembali", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (amount < 1 || amount > PlayerData[playerid][pBankMoney])
			return Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Tarik dana", "Error: Dana tidak mencukupi!\n\nSaldo rekening bankmu: %s\n\nHarap masukkan jumlah uang yang ingin kamu tarik:", "Tarik", "Kembali", FormatNumber(PlayerData[playerid][pBankMoney]));

		PlayerData[playerid][pBankMoney] -= amount;
	    GiveMoney(playerid, amount);

	    SendServerMessage(playerid, "Kamu berhasil menarik %s dari akun bank milikmu.", FormatNumber(amount));
        Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Tarik dana", "Saldo rekening bankmu: %s\n\nHarap masukkan jumlah uang yang ingin kamu tarik:", "Tarik", "Kembali", FormatNumber(PlayerData[playerid][pBankMoney]));
	}
	else {
	    Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Akun bank", "Tarik dana\nSimpan dana\nTransfer", "Pilih", "Kembali");
	}
	return 1;
}

Dialog:Deposit(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Simpan dana", "Saldo rekening bankmu: %s\n\nHarap masukkan jumlah uang yang ingin kamu simpan:", "Simpan", "Kembali", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (amount < 1 || amount > GetMoney(playerid))
			return Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Simpan dana", "Error: Kamu tidak punyau uang segitu.\n\nSaldo rekening bankmu: %s\n\nHarap masukkan jumlah uang yang ingin kamu simpan:", "Simpan", "Kembali", FormatNumber(PlayerData[playerid][pBankMoney]));

		PlayerData[playerid][pBankMoney] += amount;
	    GiveMoney(playerid, -amount);

	    SendServerMessage(playerid, "Kamu berhasil menyimpan %s ke dalam akun bank milikmu.", FormatNumber(amount));
        Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Simpan dana", "Saldo rekening bankmu: %s\n\nHarap masukkan jumlah uang yang ingin kamu simpan:", "Simpan", "Kembali", FormatNumber(PlayerData[playerid][pBankMoney]));
	}
	else {
	    Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Bank Account", "Tarik dana\nSimpan dana\nTransfer", "Pilih", "Kembali");
	}
	return 1;
}

Dialog:SavingsWithdraw(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Tarik dana", "Saldo rekening tabunganmu: %s\n\nHarap masukkan jumlah uang yang ingin kamu tarik:", "Tarik", "Kembali", FormatNumber(PlayerData[playerid][pSavings]));

		if (amount < 1 || amount > PlayerData[playerid][pSavings])
			return Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Tarik dana", "Error: Dana tidak mencukupi!\n\nSaldo rekening tabunganmu: %s\n\nHarap masukkan jumlah uang yang ingin kamu tarik:", "Tarik", "Kembali", FormatNumber(PlayerData[playerid][pSavings]));

		PlayerData[playerid][pSavings] -= amount;
	    GiveMoney(playerid, amount);

	    SendServerMessage(playerid, "Kamu menarik %s dari tabunganmu.", FormatNumber(amount));
        Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Tarik dana", "Saldo rekening tabunganmu: %s\n\nHarap masukkan jumlah uang yang ingin kamu tarik:", "Tarik", "Kembali", FormatNumber(PlayerData[playerid][pSavings]));
	}
	else {
	    Dialog_Show(playerid, Savings, DIALOG_STYLE_LIST, "Akun Tabungan", "Tarik dana\nSimpan dana", "Pilih", "Kembali");
	}
	return 1;
}

Dialog:SavingsDeposit(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Simpan dana", "Saldo rekening tabunganmu: %s\n\nHarap masukkan jumlah uang yang ingin kamu simpan:", "Simpan", "Kembali", FormatNumber(PlayerData[playerid][pSavings]));

		if (amount < 1 || amount > GetMoney(playerid))
			return Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Simpan dana", "Error: Kamu tidak memiliki uang sebanyak itu.\n\nSaldo rekening tabunganmu: %s\n\nHarap masukkan jumlah uang yang ingin kamu simpan:", "Simpan", "Kembali", FormatNumber(PlayerData[playerid][pSavings]));

		PlayerData[playerid][pSavings] += amount;
	    GiveMoney(playerid, -amount);

	    SendServerMessage(playerid, "Kamu berhasil menyimpan %s kedalam tabunganmu.", FormatNumber(amount));
        Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Simpan dana", "Saldo rekening tabunganmu: %s\n\nHarap masukkan jumlah uang yang ingin kamu depositkan:", "Simpan", "Kembali", FormatNumber(PlayerData[playerid][pSavings]));
	}
	else {
	    Dialog_Show(playerid, Savings, DIALOG_STYLE_LIST, "Akun Tabungan", "Tarik dana\nSimpan dana", "Pilih", "Kembali");
	}
	return 1;
}
Dialog:Bank(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
				Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Akun Bank", "Tarik dana\nSimpan dana\nTransfer", "Pilih", "Kembali");
			}
			case 1:
			{
				Dialog_Show(playerid, Savings, DIALOG_STYLE_LIST, "Akun Tabungan", "Tarik dana\nSimpan dana", "Pilih", "Kembali");
			}
		}
	}
	return 1;
}

Dialog:FAQ1(playerid, response, listitem, inputtext[])
{
	if (!response)
		cmd_faq(playerid, "\1");

	return 1;
}

Dialog:FAQ(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch (listitem)
		{
		    case 0:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext,
				"{FFFFFF}Kamu bisa masuk dan keluar dari gedung dengan menekan tombol {FFFF00}'F'.", "OK", "Kembali");
			}
            case 1:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext,
				"{FFFFFF}Kamu dapat mengakses inventory dengan menekan tombol {FFFF00}'Y'{FFFFFF}.\nKamu juga bisa mengetik{FFFF00} /inventory{FFFFFF} untuk mengakses inventorymu.", "OK", "Kembali");
			}
			case 2:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext,
				"{FFFFFF}Kamu bisa mengambil barang yang dijatuhkan dengan menekan tombol {FFFF00}'N'{FFFFFF}.\nKamu harus berjongkok dan dekat dengan barang itu.", "OK", "Kembali");
			}
			case 3:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext,
				"{FFFFFF}Ikon di sisi kanan layar kamu adalah sebagai berikut:\n\n{FFFF00}Ikon Pizza:{FFFFFF} Ikon ini mewakili rasa lapar. Jumlah di samping adalah persentase kelaparan.\n{FFFF00}Ikon Botol:{FFFFFF} Ikon ini merupakan haus. Jumlah di samping adalah persentase haus.\n\nJika kamu memiliki Armored Vest, itu juga akan tampil bersamaan dengan ikonnya.", "OK", "Kembali");
			}
			case 4:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext,
				"{FFFFFF}Kamu bisa mengisi kembali rasa laparmu dengan memasak makanan dan memakannya, atau dari sebuah{FFFF00}Fast Food{FFFFFF} business.\nUntuk memasak makanan, ketik {FFFF00}/cook{FFFFFF}. Kamu bisa membeli makanan beku kapan saja di {FFFF00}Retail Store{FFFFFF}.\n\nUntuk mengisi rasa hausmu, Kamu bisa membeli minuman dari siapa saja di {FFFF00}Retail Store{FFFFFF}.\nSelain itu, Kamu juga bisa membeli minuman di fast food business.", "OK", "Kembali");
			}
			case 5:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext,
				"{FFFFFF}Kamu dapat mencari area tertentu di sekitar peta menggunakan sebuah {FFFF00}GPS System{FFFFFF}.\nKamu bisa membeli Sistem GPS di {FFFF00}Retail Store{FFFFFF} di sekitar peta.", "OK", "Kembali");
			}
			case 6:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext,
				"{FFFFFF}Kamu bisa mengetik {FFFF00}/disablecp{FFFFFF} untuk berhenti bekerja.\nJika Kamu memasukkan crate ke dalam truk, gunakan{FFFF00} /stoploading{FFFFFF} untuk berhenti memuat.", "OK", "Kembali");
			}
			case 7:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext,
				"{FFFFFF}Kamu harus memilih senjata dari inventorymu dan tekan {FFFF00}Gunakan Item.\n{FFFFFF}Begitu Kamu memegang senjata, Kamu harus menggunakan magazine untuk memuatnya.\n\nKamu bisa membeli magazine di {FFFF00}Weapon Shop untuk senjatamu.\n{FFFFFF}Kamu juga bisa menekan {FFFF00}'N'{FFFFFF} untuk menyingkirkan senjata yang Kamu pegang.", "OK", "Kembali");
			}
			case 8:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext,
				"{FFFFFF}Setiap furniture yang Kamu beli akan muncul di dalam inventorymu.\nTekan {FFFF00}'Y'{FFFFFF}, spilih barang furniture dan tekan {FFFF00}Gunakan Item{FFFFFF} untuk menyebarkannya.\n\nJika Kamu ingin mengedit furniture yang ada, ketik {FFFF00}/furniture{FFFFFF} di dalam rumahmu.\nCukup pilih item pilihan untuk mengedit posisi atau menghancurkan item.", "OK", "Kembali");
			}
			case 9:
			{
			    Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext,
				"{FFFFFF}Tombol {FFFF00}'F'{FFFFFF} akan memungkinkan Kamu untuk berinteraksi dengan banyak hal di server.\nHal-hal ini meliputi vendor, senjata dan peti obat, gerbang dan pintu masuk.\n\nUntuk memasuki rumah atau bisnis, cukup tekan {FFFF00}'F'{FFFFFF} didekat pintu.\nKamu dapat membuka inventorymu dengan {FFFF00}'Y'{FFFFFF} dan mengambil item dengan tombol {FFFF00}'N'{FFFFFF}.", "OK", "Kembali");
			}
		}
	}
	return 1;
}

Dialog:TeleportInterior(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    SetPlayerInterior(playerid, g_arrInteriorData[listitem][e_InteriorID]);
	    SetPlayerPos(playerid, g_arrInteriorData[listitem][e_InteriorX], g_arrInteriorData[listitem][e_InteriorY], g_arrInteriorData[listitem][e_InteriorZ]);
	}
	return 1;
}

Dialog:LeaveTest(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    CancelDrivingTest(playerid);

	    SendErrorMessage(playerid, "Kamu telah gagal dalam tes mengemudi sejak kamu keluar.");
	}
	else
	{
	    PutPlayerInVehicle(playerid, PlayerData[playerid][pTestCar], 0);
	}
	return 1;
}

Dialog:Inventory(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			itemid = PlayerData[playerid][pInventoryItem],
			string[64];

	    strunpack(string, InventoryData[playerid][itemid][invItem]);

	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!strcmp(string, "Demo Soda") && PlayerData[playerid][pTutorialStage] == 3)
			    {
        			PlayerData[playerid][pThirst] = 100;
        			Dialog_Show(playerid, Tutorial, DIALOG_STYLE_MSGBOX, "Pesan Tutorial", "Kamu telah belajar bagaimana mengambil item dan menggunakannya.\nKamu baru saja mengambil botol soda dan menggunakannya untuk mengisi rasa hausmu.\n\nIkon lapar dan haus ditampilkan di sisi kanan layarmu.\nJika rasa lapar atau hausmu mencapai nol persen, karaktermu akan mulai kehilangan energi.", "OK", "");
			    }
			    else
			    {
		            CallLocalFunction("OnPlayerUseItem", "dds", playerid, itemid, string);
				}
	        }
	        case 1:
	        {
	            if (!strcmp(string, "Demo Soda"))
	                return 0;

				PlayerData[playerid][pInventoryItem] = itemid;
				Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Berikan Item", "Harap masukkan nama atau ID player:", "Submit", "Batal");
	        }
	        case 2:
	        {
	            new id = -1;

	            if (!strcmp(string, "Demo Soda") && PlayerData[playerid][pTutorialStage] != 4)
	                return 0;

				if (PlayerData[playerid][pTutorialStage] == 4)
				{
					Inventory_Remove(playerid, "Demo Soda");
					Dialog_Show(playerid, Tutorial, DIALOG_STYLE_MSGBOX, "Pesan Tutorial", "Kamu telah menjatuhkan botol soda. Kamu bisa mengambil barang yang terjatuh menggunakan 'N'.\nKamu juga bisa memberi atau memperdagangkan barang dari inventorymu ke pemain lain.\n\nKamu juga bisa menyimpan barang ke tempat penyimpanan rumah atau bagasi kendaraanmu.\nInventory karaktermu hanya dapat berisi hingga %d barang unik sekaligus.", "Lanjut", "", MAX_INVENTORY);
					return 1;
				}
	            if (IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawned(playerid))
	                return SendErrorMessage(playerid, "Kamu tidak bisa menjatuhkan item sekarang.");

				else if (!strcmp(string, "Backpack"))
					return cmd_dropbackpack(playerid, "\1");

				else if ((id = Garbage_Nearest(playerid)) != -1)
				{
				    if (GarbageData[id][garbageCapacity] >= 20)
				        return SendErrorMessage(playerid, "Tempat sampah ini penuh sudah sampah.");

                    GarbageData[id][garbageCapacity]++;
                    Garbage_Save(id);

					Inventory_Remove(playerid, string);
                    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s melempar sebuah \"%s\" ke tong sampah.", ReturnName(playerid, 0), string);

                    format(string, sizeof(string), "[Garbage %d]\n{FFFFFF}Kapasitas Sampah: %d/20", id, GarbageData[id][garbageCapacity]);
                    UpdateDynamic3DTextLabelText(GarbageData[id][garbageText3D], COLOR_DEPARTMENT, string);
				}
				else if (InventoryData[playerid][itemid][invQuantity] == 1)
					DropPlayerItem(playerid, itemid);

				else
					Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Buang Item", "Item: %s - Jumlah: %d\n\nHarap tentukan berapa banyak barang yang ingin Kamu buang:", "Buang", "Batal", string, InventoryData[playerid][itemid][invQuantity]);
	        }
	    }
	}
	return 1;
}
Dialog:DropItem(playerid, response, listitem, inputtext[])
{
	new
	    itemid = PlayerData[playerid][pInventoryItem],
	    string[32];

	strunpack(string, InventoryData[playerid][itemid][invItem]);

	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Buang Item", "Item: %s - Jumlah: %d\n\nHarap tentukan berapa banyak barang yang ingin Kamu jatuhkan:", "Buang", "Batal", string, InventoryData[playerid][itemid][invQuantity]);

		if (strval(inputtext) < 1 || strval(inputtext) > InventoryData[playerid][itemid][invQuantity])
		    return Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Buang Item", "Error: Jumlah tidak mencukupi.\n\nItem: %s - Quantity: %d\n\nHarap tentukan berapa banyak barang yang ingin Kamu jatuhkan:", "Buang", "Batal", string, InventoryData[playerid][itemid][invQuantity]);

		DropPlayerItem(playerid, itemid, strval(inputtext));
	}
	return 1;
}
Dialog:BusinessBuy(playerid, response, listitem, inputtext[])
{
	static
	    bizid = -1,
		price,
		string[64];

    if ((bizid = Business_Inside(playerid)) != -1 && response)
    {
        price = BusinessData[bizid][bizPrices][listitem];

        if (GetMoney(playerid) < price)
            return SendErrorMessage(playerid, "Kamu memiliki dana yang tidak mencukupi untuk pembelian.");

		if (BusinessData[bizid][bizProducts] < 1)
		    return SendErrorMessage(playerid, "Bisnis ini kehabisan stok.");

		if (BusinessData[bizid][bizType] == 1 || BusinessData[bizid][bizType] == 6)
		{
		    switch (listitem)
		    {
		        case 0:
		        {
		            if (Inventory_HasItem(playerid, "Cellphone"))
		                return SendErrorMessage(playerid, "Kamu sudah memiliki Cellphone.");

					new id = Inventory_Add(playerid, "Cellphone", 330);

					if (id == -1)
        				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

					PlayerData[playerid][pPhone] = random(90000) + 10000;

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah cellphone.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);

					format(string, sizeof(string), "Nomor barumu adalah ~p~%d.", PlayerData[playerid][pPhone]);
					ShowPlayerFooter(playerid, string);

					SendServerMessage(playerid, "Nomor barumu adalah %d.", PlayerData[playerid][pPhone]);
				}
				case 1:
		        {
		            if (Inventory_HasItem(playerid, "GPS System"))
		                return SendErrorMessage(playerid, "Kamu sudah memiliki GPS System.");

					new id = Inventory_Add(playerid, "GPS System", 18875);

					if (id == -1)
        				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah GPS System.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 2:
		        {
		            if (Inventory_Count(playerid, "Spray Can") >= 3)
		                return SendErrorMessage(playerid, "Kamu sudah memiliki 3 Spray Can, kamu tidak bisa memiliki lebih banya lagi.");

					new id = Inventory_Add(playerid, "Spray Can", 365);

					if (id == -1)
        				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah spray paint.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 3:
			    {
			        if (Inventory_HasItem(playerid, "Backpack"))
		                return SendErrorMessage(playerid, "Kamu sudah memiliki backpack.");

					new id = Inventory_Add(playerid, "Backpack", 3026);

					if (id == -1)
        				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

					if (Backpack_Create(playerid) == -1)
					    return SendErrorMessage(playerid, "Server telah mencapai batas limit backpack.");

					SetAccessories(playerid);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah backpack.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 4:
		        {
		            if (Inventory_Count(playerid, "Water Bottle") >= 10)
		                return SendErrorMessage(playerid, "Kamu sudah memiliki 10 Water Bottle , kamu tidak bisa memiliki lebih banyak lagi.");

					new id = Inventory_Add(playerid, "Water Bottle", 2958);

					if (id == -1)
        				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah Water Bottle.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 5:
		        {
              		if (Inventory_Count(playerid, "Soda") >= 5)
		                return SendErrorMessage(playerid, "Kamu sudah memiliki 5 Soda , kamu tidak bisa memiliki lebih banyak lagi.");

					new id = Inventory_Add(playerid, "Soda", 1543);

					if (id == -1)
        				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah Soda.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 6:
				{
				    if (PlayerData[playerid][pLottery])
				        return SendErrorMessage(playerid, "Kamu sudah memiliki lottery ticket.");

					Dialog_Show(playerid, LotteryNumber, DIALOG_STYLE_INPUT, "Lottery Number", "Silahkan masukkan nomor undian yang Kamu inginkan di bawah ini (dari 1-60):", "Submit", "Batal");
				}
				case 7:
		        {
		            if (Inventory_HasItem(playerid, "Portable Radio"))
		                return SendErrorMessage(playerid, "Kamu sudah memiliki item ini.");

					new id = Inventory_Add(playerid, "Portable Radio", 18868);

					if (id == -1)
        				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah portable radio.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 8:
		        {
		            if (Inventory_Count(playerid, "Fuel Can") >= 3)
		                return SendErrorMessage(playerid, "Kamu sudah memiliki 3 Fuel Can, kamu tidak bisa membeli lebih banyak lagi.");

					new id = Inventory_Add(playerid, "Fuel Can", 1650);

					if (id == -1)
        				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah Fuel Can.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 9:
		        {
		            if (Inventory_HasItem(playerid, "Crowbar"))
		                return SendErrorMessage(playerid, "Kamu sudah memiliki crowbaw.");

					new id = Inventory_Add(playerid, "Crowbar", 18634);

					if (id == -1)
        				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah crowbar.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 10:
		        {
		            if (Inventory_HasItem(playerid, "Boombox"))
		                return SendErrorMessage(playerid, "Kamu sudah memiliki boombox.");

					new id = Inventory_Add(playerid, "Boombox", 2226);

					if (id == -1)
        				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah boombox.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 11:
		        {
		            if (Inventory_HasItem(playerid, "Mask"))
		                return SendErrorMessage(playerid, "Kamu sudah memiliki mask.");

					if (PlayerData[playerid][pPlayingHours] < 5)
					    return SendErrorMessage(playerid, "You must have at least 5 playing hours.");

					new id = Inventory_Add(playerid, "Mask", 19036);

					if (id == -1)
        				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah mask.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 12:
		        {
		            if (Inventory_Count(playerid, "First Aid") >= 3)
		                return SendErrorMessage(playerid, "Kamu sudah memiliki 3 First Aid Kit , kamu tidak bisa memiliki lebih banyak lagi.");

					new id = Inventory_Add(playerid, "First Aid", 1580);

					if (id == -1)
        				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah first aid kit.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 13:
		        {
		            if (Inventory_Count(playerid, "Repair Kit") >= 3)
		                return SendErrorMessage(playerid, "Kamu sudah memiliki 3 Repair Kit, kamu tidak bisa memiliki lebih banyak lagi.");

					new id = Inventory_Add(playerid, "Repair Kit", 920);

					if (id == -1)
        				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah repair kit.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 14:
		        {
		            if (Inventory_Count(playerid, "NOS Canister") >= 5)
		                return SendErrorMessage(playerid, "Kamu sudah memiliki Nos Canister, kamu tidak bisa membeli lebih banyak lagi.");

					new id = Inventory_Add(playerid, "NOS Canister", 1010);

					if (id == -1)
        				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah NOS canister.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 15:
		        {
		            if (PlayerHasWeapon(playerid, 5))
		                return SendErrorMessage(playerid, "Kamu sudah memiliki item ini");

					GiveWeaponToPlayer(playerid, 5, 1);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah baseball bat.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 16:
		        {
		            if (Inventory_Count(playerid, "Frozen Pizza") >= 3)
		                return SendErrorMessage(playerid, "Kamu sudah memiliki 3 Frozen Pizza, kamu tidak bisa memiliki lebih banyak lagi.");

					new id = Inventory_Add(playerid, "Frozen Pizza", 2814);

					if (id == -1)
        				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah box frozen pizza.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 17:
		        {
		            if (Inventory_Count(playerid, "Frozen Burger") >= 5)
		                return SendErrorMessage(playerid, "Kamu sudah memiliki 5 Frozen Burger , kamu tidak bisa memiliki lebih banyak lagi.");

					new id = Inventory_Add(playerid, "Frozen Burger", 2768);

					if (id == -1)
        				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah frozen burger.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 18:
		        {
		            if (Inventory_Count(playerid, "Lighter") >= 3)
		                return SendErrorMessage(playerid, "Kamu sudah memiliki 3 Lighter, kamu tidak bisa memiliki lebih banyak lagi.");

					new id = Inventory_Add(playerid, "Lighter", 19998);

					if (id == -1)
        				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah black lighter.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			}
		}
		else if (BusinessData[bizid][bizType] == 2)
		{
		    switch (listitem)
	    	{
		        case 0:
		        {
		            if (Inventory_HasItem(playerid, "Weapon License A"))
					{
     					if (Inventory_Count(playerid, "Magazine") >= 30)
		                	return SendErrorMessage(playerid, "Kamu memiliki 30 magazine, Kamu tidak bisa membeli lagi.");

						new id = Inventory_Add(playerid, "Magazine", 2039);

						if (id == -1)
        					return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

						GiveMoney(playerid, -price);
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah weapon magazine.", ReturnName(playerid, 0), FormatNumber(price));

						BusinessData[bizid][bizProducts]--;
						BusinessData[bizid][bizVault] += Tax_Percent(price);

						Business_Save(bizid);
						Tax_AddPercent(price);
						return 1;
					}
		 			else if (Inventory_HasItem(playerid, "Weapon License B"))
					{
     					if (Inventory_Count(playerid, "Magazine") >= 30)
		                	return SendErrorMessage(playerid, "Kamu memiliki 30 magazine, Kamu tidak bisa membeli lagi.");

						new id = Inventory_Add(playerid, "Magazine", 2039);

						if (id == -1)
        					return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

						GiveMoney(playerid, -price);
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah weapon magazine.", ReturnName(playerid, 0), FormatNumber(price));

						BusinessData[bizid][bizProducts]--;
						BusinessData[bizid][bizVault] += Tax_Percent(price);

						Business_Save(bizid);
						Tax_AddPercent(price);
						return 1;
					}
					else if(Inventory_HasItem(playerid, "Weapon License C"))
					{
     					if (Inventory_Count(playerid, "Magazine") >= 30)
		                	return SendErrorMessage(playerid, "Kamu memiliki 30 magazine, Kamu tidak bisa membeli lagi.");

						new id = Inventory_Add(playerid, "Magazine", 2039);

						if (id == -1)
        					return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

						GiveMoney(playerid, -price);
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah weapon magazine.", ReturnName(playerid, 0), FormatNumber(price));

						BusinessData[bizid][bizProducts]--;
						BusinessData[bizid][bizVault] += Tax_Percent(price);

						Business_Save(bizid);
						Tax_AddPercent(price);
						return 1;
					}
					else return SendErrorMessage(playerid, "Kamu tidak diizinkan untuk membeli dari sini tanpa lisensi senjata.");
			    }
                case 1:
		        {
		            //if (!Inventory_HasItem(playerid, "Weapon License"))
		                //return SendErrorMessage(playerid, "This store only sells to people with a weapon license.");

		            if (Inventory_Count(playerid, "Ammo Cartridge") >= 30)
		                return SendErrorMessage(playerid, "Kamu memiliki 30 ammo cartridges, kamu tidak bisa membeli lagi.");

					new id = Inventory_Add(playerid, "Ammo Cartridge", 2358);

					if (id == -1)
        				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah ammo cartridge.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 2:
		        {
              		if (Inventory_HasItem(playerid, "Weapon License A"))
		  			{
		            	if (Inventory_Count(playerid, "Armored Vest") >= 3)
		                	return SendErrorMessage(playerid, "Kamu memiliki 3 armored vests, kamu tidak bisa membeli lagi.");

						new id = Inventory_Add(playerid, "Armored Vest", 19142);

						if (id == -1)
        					return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

						GiveMoney(playerid, -price);
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah armored vest.", ReturnName(playerid, 0), FormatNumber(price));

						BusinessData[bizid][bizProducts]--;
						BusinessData[bizid][bizVault] += Tax_Percent(price);

						Business_Save(bizid);
						Tax_AddPercent(price);
						return 1;
					}
					else if(Inventory_HasItem(playerid, "Weapon License B"))
					{
    					if (Inventory_Count(playerid, "Armored Vest") >= 3)
		                	return SendErrorMessage(playerid, "Kamu memiliki 3 armored vests, kamu tidak bisa membeli lagi.");

						new id = Inventory_Add(playerid, "Armored Vest", 19142);

						if (id == -1)
        					return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

						GiveMoney(playerid, -price);
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah armored vest.", ReturnName(playerid, 0), FormatNumber(price));

						BusinessData[bizid][bizProducts]--;
						BusinessData[bizid][bizVault] += Tax_Percent(price);

						Business_Save(bizid);
						Tax_AddPercent(price);
						return 1;
					}
					else if(Inventory_HasItem(playerid, "Weapon License C"))
					{
						if (Inventory_Count(playerid, "Armored Vest") >= 3)
    						return SendErrorMessage(playerid, "Kamu memiliki 3 armored vests, kamu tidak bisa membeli lagi.");

						new id = Inventory_Add(playerid, "Armored Vest", 19142);

						if (id == -1)
        					return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

						GiveMoney(playerid, -price);
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah armored vest.", ReturnName(playerid, 0), FormatNumber(price));

						BusinessData[bizid][bizProducts]--;
						BusinessData[bizid][bizVault] += Tax_Percent(price);

						Business_Save(bizid);
						Tax_AddPercent(price);
						return 1;
					}
					else return SendErrorMessage(playerid, "Kamu tidak diizinkan untuk membeli dari sini tanpa lisensi senjata.");
			    }
				case 3:
				{
				    if (!Inventory_HasItem(playerid, "Weapon License A"))
				        return SendErrorMessage(playerid, "Weapon License class A dibutuhkan untuk membeli sebuah Desert Eagle.");

				    if (PlayerData[playerid][pChannel4] < 3)
				        return SendErrorMessage(playerid, "Kamu membutuhkan setidaknya level 3.");

                    if (Inventory_Count(playerid, "Desert Eagle") > 5)
					    return SendErrorMessage(playerid, "Kamu tidak bisa lagi membawa senjata ini.");

					new Serial = 10000 + random(1000000);
					Inventory_Add(playerid, "Desert Eagle", 348);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah Desert Eagle.", ReturnName(playerid, 0), FormatNumber(price));
     				format(string, sizeof(string), "Senjata telah didaftarkan. Nomor seri: [%i].", Serial);
					SendClientMessage(playerid, COLOR_WHITE, string);

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 4:
				{
				    if (!Inventory_HasItem(playerid, "Weapon License B"))
				        return SendErrorMessage(playerid, "Weapon License class B dibutuhkan untuk membeli sebuah Shotgun.");

				    if (PlayerData[playerid][pChannel4] < 4)
				        return SendErrorMessage(playerid, "Kamu membutuhkan setidaknya membutuhkan level 4.");

                    if (Inventory_Count(playerid, "Shotgun") > 5)
					    return SendErrorMessage(playerid, "Kamu tidak bisa lagi membawa senjata ini.");

					new Serial = 10000 + random(1000000);
					Inventory_Add(playerid, "Shotgun", 349);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah Remington 870.", ReturnName(playerid, 0), FormatNumber(price));
					format(string, sizeof(string), "Senjata telah didaftarkan. Nomor seri: [%i].", Serial);
					SendClientMessage(playerid, COLOR_WHITE, string);

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 5:
				{
				    if (!Inventory_HasItem(playerid, "Weapon License C"))
				        return SendErrorMessage(playerid, "Weapon License class C dibutuhkan untuk membeli sebuah Rifle.");

				    if (PlayerData[playerid][pChannel4] < 5)
				        return SendErrorMessage(playerid, "Kamu membutuhkan setidaknya membutuhkan level 5.");

					if (Inventory_Count(playerid, "Rifle") > 5)
					    return SendErrorMessage(playerid, "Kamu tidak bisa lagi membawa senjata ini.");

                    new Serial = 10000 + random(1000000);
					Inventory_Add(playerid, "Rifle", 357);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah M14 Rifle.", ReturnName(playerid, 0), FormatNumber(price));
     				format(string, sizeof(string), "Senjata telah didaftarkan. Nomor seri: [%i].", Serial);
					SendClientMessage(playerid, COLOR_WHITE, string);

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 6:
				{
				    if (!Inventory_HasItem(playerid, "Weapon License A"))
				        return SendErrorMessage(playerid, "Weapon License class A dibutuhkan untuk membeli sebuah Desert Eagle.");

				    if (PlayerData[playerid][pChannel4] < 3)
				        return SendErrorMessage(playerid, "Kamu membutuhkan setidaknya membutuhkan level 3.");

                    if (Inventory_Count(playerid, "Colt 45") > 5)
					    return SendErrorMessage(playerid, "Kamu tidak bisa lagi membawa senjata ini.");

					new Serial = 10000 + random(1000000);
					Inventory_Add(playerid, "Colt 45", 346);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah Colt 45.", ReturnName(playerid, 0), FormatNumber(price));
     				format(string, sizeof(string), "Senjata telah didaftarkan. Nomor seri: [%i].", Serial);
					SendClientMessage(playerid, COLOR_WHITE, string);

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 7:
				{
				    if (!Inventory_HasItem(playerid, "Weapon License C"))
				        return SendErrorMessage(playerid, "Weapon License class C dibutuhkan untuk membeli sebuah MP5");

				    if (PlayerData[playerid][pChannel4] < 4)
				        return SendErrorMessage(playerid, "Kamu membutuhkan setidaknya membutuhkan level 4.");

					if (Inventory_Count(playerid, "MP5") > 5)
					    return SendErrorMessage(playerid, "Kamu tidak bisa lagi membawa senjata ini.");

                    new Serial = 10000 + random(1000000);
					Inventory_Add(playerid, "MP5", 353);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah MP5.", ReturnName(playerid, 0), FormatNumber(price));
     				format(string, sizeof(string), "Senjata telah didaftarkan. Nomor seri: [%i].", Serial);
					SendClientMessage(playerid, COLOR_WHITE, string);

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
		    }
		}
		else if (BusinessData[bizid][bizType] == 3)
		{
		    switch (listitem)
		    {
		        case 0:
				{
				    PlayerData[playerid][pClothesType] = 1;

					switch (PlayerData[playerid][pGender])
                    {
                        case 1:
                        	ShowModelSelectionMenu(playerid, "Pakaian", MODEL_SELECTION_CLOTHES, g_aMaleSkins, sizeof(g_aMaleSkins), -16.0, 0.0, -55.0);

						case 2:
                       		ShowModelSelectionMenu(playerid, "Pakaian", MODEL_SELECTION_CLOTHES, g_aFemaleSkins, sizeof(g_aFemaleSkins), -16.0, 0.0, -55.0);
                    }
				}
		        case 1:
				{
				    PlayerData[playerid][pClothesType] = 2;
					ShowModelSelectionMenu(playerid, "Kaca mata", MODEL_SELECTION_CLOTHES, {19006, 19007, 19008, 19009, 19010, 19011, 19012, 19013, 19014, 19015, 19016, 19017, 19018, 19019, 19020, 19021, 19022, 19023, 19024, 19025, 19026, 19027, 19028, 19029, 19030, 19031, 19032, 19033, 19034, 19035}, 30, 0.0, 0.0, 90.0);
				}
			    case 2:
				{
				    PlayerData[playerid][pClothesType] = 3;
					ShowModelSelectionMenu(playerid, "Topi", MODEL_SELECTION_CLOTHES, {18926, 18927, 18928, 18929, 18930, 18931, 18932, 18933, 18934, 18935, 18944, 18945, 18946, 18947, 18948, 18949, 18950, 18951, 18636, 18638, 19554, 19553, 19099}, 23, -20.0, -90.0, 0.0);
				}
				case 3:
				{
				    PlayerData[playerid][pClothesType] = 4;
					ShowModelSelectionMenu(playerid, "Bandana", MODEL_SELECTION_CLOTHES, {18911, 18912, 18913, 18914, 18915, 18916, 18917, 18918, 18919, 18920, 19801}, 11, 80.0, -173.0, 0.0);
				}
		    }
		}
		else if (BusinessData[bizid][bizType] == 4)
		{
			switch (listitem)
			{
			    case 0:
			    {
			        if (PlayerData[playerid][pThirst] > 90)
			            return SendErrorMessage(playerid, "Kamu tidak haus sekarang.");

					PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 10 > 100) ? (100) : (PlayerData[playerid][pThirst] + 10);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima water.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 1:
			    {
			        if (PlayerData[playerid][pThirst] > 90)
			            return SendErrorMessage(playerid, "Kamu tidak haus sekarang.");

					PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 20 > 100) ? (100) : (PlayerData[playerid][pThirst] + 20);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima soda.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 2:
			    {
			        if (PlayerData[playerid][pHunger] > 90)
			            return SendErrorMessage(playerid, "Kamu tidak lapar sekarang.");

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 20 > 100) ? (100) : (PlayerData[playerid][pHunger] + 20);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima french fries.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 3:
			    {
			        if (PlayerData[playerid][pHunger] > 90)
			            return SendErrorMessage(playerid, "Kamu tidak lapar sekarang.");

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 25 > 100) ? (100) : (PlayerData[playerid][pHunger] + 25);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan mendapatkan sebuah cheeseburger.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 4:
			    {
			        if (PlayerData[playerid][pHunger] > 90)
			            return SendErrorMessage(playerid, "Kamu tidak lapar sekarang.");

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 30 > 100) ? (100) : (PlayerData[playerid][pHunger] + 30);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan mendapatkan sebuah chicken burger.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 5:
			    {
			        if (PlayerData[playerid][pHunger] > 90)
			            return SendErrorMessage(playerid, "Kamu tidak lapar sekarang.");

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 25 > 100) ? (100) : (PlayerData[playerid][pHunger] + 25);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima chicken nuggets.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 6:
			    {
			        if (PlayerData[playerid][pHunger] > 90)
			            return SendErrorMessage(playerid, "Kamu tidak lapar sekarang.");

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 20 > 100) ? (100) : (PlayerData[playerid][pHunger] + 20);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah salad.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			}
		}
		else if (BusinessData[bizid][bizType] == 7)
		{
		    new
				items[50] = {-1, ...},
				count;

		    for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (g_aFurnitureData[i][e_FurnitureType] == listitem + 1) {
				items[count++] = g_aFurnitureData[i][e_FurnitureModel];
		    }
		    PlayerData[playerid][pFurnitureType] = listitem;

			if (listitem == 3) {
				ShowModelSelectionMenu(playerid, "Furniture", MODEL_SELECTION_FURNITURE, items, count, -12.0, 0.0, 0.0);
			}
			else {
			    ShowModelSelectionMenu(playerid, "Furniture", MODEL_SELECTION_FURNITURE, items, count);
			}
		}
		else if (BusinessData[bizid][bizType] == 8)
		{
		    switch (listitem)
	    	{
		        case 0:
		        {
              		if (Inventory_Count(playerid, "Screwdriver") >= 3)
		                return SendErrorMessage(playerid, "Kamu sudah memiliki 3 Screwdriver, kamu tidak bisa membeli lagi.");

					new id = Inventory_Add(playerid, "Screwdriver", 18644);

					if (id == -1)
        				return SendErrorMessage(playerid, "Tidak ada slot di inventory kamu lagi..");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan mendapatkan sebuah metal screwdriver.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 1:
		        {
		            if (PlayerHasWeapon(playerid, 46))
		                return SendErrorMessage(playerid, "Kamu sudah memiliki item ini.");

					GiveWeaponToPlayer(playerid, 46, 1);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan mendapatkan sebuah Parachute.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 2:
		        {
		            if (PlayerHasWeapon(playerid, 1))
		                return SendErrorMessage(playerid, "Kamu sudah memiliki item ini.");

					GiveWeaponToPlayer(playerid, 1, 1);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan mendapatkan sebuah Brass Knuckles.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 3:
		        {
		            if (Inventory_Count(playerid, "Golf Club") >= 3)
		                return SendErrorMessage(playerid, "Kamu sudah memiliki 3 Golf Club, kamu tidak bisa membeli lagi.");

					new id = Inventory_Add(playerid, "Golf Club", 333);

					if (id == -1)
        				return SendErrorMessage(playerid, "Tidak ada slot di inventory kamu lagi..");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan mendapatkan sebuah Golf Club.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 4:
		        {
		            if (PlayerHasWeapon(playerid, 3))
		                return SendErrorMessage(playerid, "Kamu sudah memiliki item ini.");

					GiveWeaponToPlayer(playerid, 3, 1);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan mendapatkan sebuah Nightstick.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 5:
		        {
		            if (Inventory_Count(playerid, "Knife") >= 3)
		                return SendErrorMessage(playerid, "Kamu sudah memiliki 3 Knives, kamu tidak bisa membveli lagi.");

					new id = Inventory_Add(playerid, "Knife", 335);

					if (id == -1)
        				return SendErrorMessage(playerid, "Tidak ada slot di inventory kamu lagi..");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan mendapatkan sebuah Knife.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 6:
		        {
		            if (Inventory_Count(playerid, "Shovel") >= 3)
		                return SendErrorMessage(playerid, "Kamu sudah memiliki 3 Shovel, kamu tidak bisa membeli lagi.");

					new id = Inventory_Add(playerid, "Shovel", 337);

					if (id == -1)
        				return SendErrorMessage(playerid, "Tidak ada slot di inventory kamu lagi..");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan mendapatkan sebuah Shovel.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 7:
		        {
		            if (PlayerHasWeapon(playerid, 7))
		                return SendErrorMessage(playerid, "Kamu sudah memiliki item ini.");

					GiveWeaponToPlayer(playerid, 7, 1);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan mendapatkan sebuah Pool Cue.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 8:
		        {
		            if (PlayerHasWeapon(playerid, 43))
		                return SendErrorMessage(playerid, "Kamu sudah memiliki item ini.");

					GiveWeaponToPlayer(playerid, 43, 50);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan mendapatkan sebuah Camera.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 9:
		        {
		            if (PlayerHasWeapon(playerid, 41))
		                return SendErrorMessage(playerid, "Kamu sudah memiliki item ini.");

					GiveWeaponToPlayer(playerid, 41, 500);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan mendapatkan sebuah Spray Can.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
				case 10:
		        {
		            if (PlayerHasWeapon(playerid, 5))
		                return SendErrorMessage(playerid, "Kamu sudah memiliki item ini.");

					GiveWeaponToPlayer(playerid, 5, 1);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan mendapatkan sebuah Baseball Bat.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
		    }
		}
		else if (BusinessData[bizid][bizType] == 9)
		{
		    switch (listitem)
	    	{
		        case 0:
		        {
		            if (Inventory_Count(playerid, "Sale Documents") >= 5)
		                return SendErrorMessage(playerid, "Kamu memiliki 5 Sale Documents, kamu tidak bisa membeli lagi.");

					new id = Inventory_Add(playerid, "Sale Documents", 19805);

					if (id == -1)
        				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah sale document.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
                case 1:
		        {
		            if (Inventory_Count(playerid, "Pen") >= 2)
		                return SendErrorMessage(playerid, "Kamu memiliki 2 pens, kamu tidak bisa membeli lagi.");

					new id = Inventory_Add(playerid, "Pen", 322);

					if (id == -1)
        				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah pen.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
		    }
		}
	}
    return 1;
}

Dialog:LotteryNumber(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new bizid = Business_Inside(playerid);

	    if (bizid != -1)
	    {
	        if (isnull(inputtext) || (strval(inputtext) < 1 || strval(inputtext) > 60)) {
	            return Dialog_Show(playerid, LotteryNumber, DIALOG_STYLE_INPUT, "Lottery Number", "Silahkan masukkan nomor undian yang Kamu inginkan di bawah ini (dari 1-60):", "Submit", "Batal");
			}
	        PlayerData[playerid][pLottery] = strval(inputtext);
	        PlayerData[playerid][pLotteryB] = 1;

		    GiveMoney(playerid, -BusinessData[bizid][bizPrices][6]);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membayar %s dan menerima sebuah lottery ticket.", ReturnName(playerid, 0), FormatNumber(BusinessData[bizid][bizPrices][6]));

			BusinessData[bizid][bizProducts]--;
			BusinessData[bizid][bizVault] += Tax_Percent(BusinessData[bizid][bizPrices][6]);

			Business_Save(bizid);
			Tax_AddPercent(BusinessData[bizid][bizPrices][6]);
		}
	}
	return 1;
}

Dialog:EditProduct(playerid, response, listitem, inputtext[])
{
	static
	    bizid = -1;

	if ((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid))
	{
		if (response)
		{
		    static
		        item[24];

		    strmid(item, inputtext, 0, strfind(inputtext, "-") - 1);
		    strpack(PlayerData[playerid][pEditingItem], item, 32 char);

            PlayerData[playerid][pProductModify] = listitem;
      		Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Business: Ganti Harga", "Harap masukkan harga produk yang baru untuk \"%s\":", "Ganti", "Kembali", item);
		}
	}
	return 1;
}

Dialog:PriceSet(playerid, response, listitem, inputtext[])
{
    static
	    bizid = -1,
		item[32];

	if ((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid))
	{
		if (response)
		{
		    strunpack(item, PlayerData[playerid][pEditingItem]);

			if (isnull(inputtext))
			    return Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Business: Ganti Harga", "Harap masukkan harga produk yang baru untuk \"%s\":", "Ubah", "Kembali", item);

			if (strval(inputtext) < 1 || strval(inputtext) > 100000)
			    return Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Business: Ganti Harga", "Harap masukkan harga produk yang baru untuk \"%s\" ($1 hingga $100,000):", "Ubah", "Kembali", item);

			BusinessData[bizid][bizPrices][PlayerData[playerid][pProductModify]] = strval(inputtext);
			Business_Save(bizid);

			SendServerMessage(playerid, "Kamu telah menyesuaikan harga \"%s\" menjadi: %s!", item, FormatNumber(strval(inputtext)));
			Business_ProductMenu(playerid, bizid);
		}
		else
		{
		    Business_ProductMenu(playerid, bizid);
		}
	}
	return 1;
}

Dialog:CarDeposit(playerid, response, listitem, inputtext[])
{
	static
	    carid = -1,
	    string[32];

    if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
	    strunpack(string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invItem]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity])
			    return Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Simpan", "Item: %s (Jumlah: %d)\n\nHarap masukkan jumlah yang ingin Kamu simpan untuk item ini:", "Simpan", "Kembali", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);

			Car_AddItem(carid, string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invModel], amount);
			Inventory_Remove(playerid, string, amount);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyimpan sebuah \"%s\" ke dalam bagasi.", ReturnName(playerid, 0), string);
			Car_ShowTrunk(playerid, carid);
		}
		else Car_ShowTrunk(playerid, carid);
	}
	return 1;
}

Dialog:CarTake(playerid, response, listitem, inputtext[])
{
	static
	    carid = -1,
	    string[32];

    if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
	    strunpack(string, CarStorage[carid][PlayerData[playerid][pStorageItem]][cItemName]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > CarStorage[carid][PlayerData[playerid][pStorageItem]][cItemQuantity])
			    return Dialog_Show(playerid, CarTake, DIALOG_STYLE_INPUT, "Ambil", "Item: %s (Jumlah: %d)\n\nHarap masukkan jumlah yang ingin Kamu ambil untuk item ini:", "Ambil", "Kembali", string, CarStorage[carid][PlayerData[playerid][pInventoryItem]][cItemQuantity]);

			new id = Inventory_Add(playerid, string, CarStorage[carid][PlayerData[playerid][pStorageItem]][cItemModel], amount);

			if (id == -1)
				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

			Car_RemoveItem(carid, string, amount);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mengambil sebuah \"%s\" dari dalam bagasi.", ReturnName(playerid, 0), string);
			Car_ShowTrunk(playerid, carid);
		}
		else Car_ShowTrunk(playerid, carid);
	}
	return 1;
}

Dialog:CarStorage(playerid, response, listitem, inputtext[])
{
	static
	    carid = -1,
		string[64];

	if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
		if (response)
		{
		    if (listitem == MAX_CAR_STORAGE) {
    			Car_WeaponStorage(playerid, carid);
		    }
		    else if (CarStorage[carid][listitem][cItemExists])
			{
   				PlayerData[playerid][pStorageItem] = listitem;
   				PlayerData[playerid][pInventoryItem] = listitem;

				strunpack(string, CarStorage[carid][listitem][cItemName]);

				format(string, sizeof(string), "%s (Jumlah: %d)", string, CarStorage[carid][listitem][cItemQuantity]);
				Dialog_Show(playerid, TrunkOptions, DIALOG_STYLE_LIST, string, "Ambil Item\nSimpan Item", "Pilih", "Kembali");
			}
			else {
   				OpenInventory(playerid);

				PlayerData[playerid][pStorageSelect] = 2;
			}
		}
	}
	return 1;
}

Dialog:TrunkOptions(playerid, response, listitem, inputtext[])
{
    static
	    carid = -1,
		itemid = -1,
		backpack = -1,
		string[32];

	if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
	    itemid = PlayerData[playerid][pStorageItem];

	    strunpack(string, CarStorage[carid][itemid][cItemName]);

		if (response)
		{
			switch (listitem)
			{
			    case 0:
			    {
			        if (CarStorage[carid][itemid][cItemQuantity] == 1)
			        {
			            if (!strcmp(string, "Backpack") && Inventory_HasItem(playerid, "Backpack"))
			                return SendErrorMessage(playerid, "Kamu sudah memiliki backpack di inventorymu.");

			            new id = Inventory_Add(playerid, string, CarStorage[carid][itemid][cItemModel], 1);

						if (id == -1)
        					return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

                        if (!strcmp(string, "Backpack") && (backpack = GetVehicleBackpack(carid)) != -1)
						{
						    BackpackData[backpack][backpackVehicle] = 0;
						    BackpackData[backpack][backpackPlayer] = PlayerData[playerid][pID];

						    Backpack_Save(backpack);
						    SetAccessories(playerid);
						}
			            Car_RemoveItem(carid, string);

			            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mengambil sebuah \"%s\" dari dalam bagasi.", ReturnName(playerid, 0), string);
						Car_ShowTrunk(playerid, carid);
			        }
			        else
			        {
			            Dialog_Show(playerid, CarTake, DIALOG_STYLE_INPUT, "Ambil", "Item: %s (Jumlah: %d)\n\nHarap masukkan jumlah yang ingin Kamu ambil untuk item ini:", "Ambil", "Kembali", string, CarStorage[carid][itemid][cItemQuantity]);
			        }
			    }
				case 1:
				{
					new id = Inventory_GetItemID(playerid, string);

					if (!strcmp(string, "Backpack")) {
					    Car_ShowTrunk(playerid, carid);

						return SendErrorMessage(playerid, "Kamu hanya bisa menyimpan satu backpack di bagasimu.");
					}
					else if (id == -1) {
						Car_ShowTrunk(playerid, carid);

						return SendErrorMessage(playerid, "Kamu tidak lagi memiliki barang ini untuk disimpan!");
					}
					else if (InventoryData[playerid][id][invQuantity] == 1)
					{
					    Car_AddItem(carid, string, InventoryData[playerid][id][invModel], 1);
						Inventory_Remove(playerid, string);

						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyimpan sebuah \"%s\" ke dalam bagasi.", ReturnName(playerid, 0), string);
						Car_ShowTrunk(playerid, carid);
					}
					else if (InventoryData[playerid][id][invQuantity] > 1) {
					    PlayerData[playerid][pInventoryItem] = id;

                        Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Simpan", "Item: %s (Jumlah: %d)\n\nHarap masukkan jumlah yang ingin Kamu simpan untuk item ini:", "Simpan", "Kembali", string, InventoryData[playerid][id][invQuantity]);
					}
				}
			}
		}
		else
		{
		    Car_ShowTrunk(playerid, carid);
		}
	}
	return 1;
}

Dialog:HouseWeapons(playerid, response, listitem, inputtext[])
{
	static
	    houseid = -1;

    if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
		if (response)
		{
		    if (HouseData[houseid][houseWeapons][listitem] != 0)
		    {
				GiveWeaponToPlayer(playerid, HouseData[houseid][houseWeapons][listitem], HouseData[houseid][houseAmmo][listitem]);

				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mengambil sebuah \"%s\" dari gudang senjatanya.", ReturnName(playerid, 0), ReturnWeaponName(HouseData[houseid][houseWeapons][listitem]));
                Log_Write("logs/storage_log.txt", "[%s] %s telah mengambil sebuah \"%s\" dari house ID: %d (pemilik: %s).", ReturnDate(), ReturnName(playerid, 0), ReturnWeaponName(HouseData[houseid][houseWeapons][listitem]), HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Yes") : ("No"));

				HouseData[houseid][houseWeapons][listitem] = 0;
				HouseData[houseid][houseAmmo][listitem] = 0;

				House_Save(houseid);
				House_WeaponStorage(playerid, houseid);
			}
			else
			{
			    new
					weaponid = GetWeapon(playerid),
					ammo = GetPlayerAmmo(playerid);

			    if (!weaponid)
			        return SendErrorMessage(playerid, "Kamu tidak memegang senjata apapun!");

       			if (weaponid == 23 && PlayerData[playerid][pTazer])
	    			return SendErrorMessage(playerid, "Kamu tidak bisa menyimpan tazer.");

                if (weaponid == 25 && PlayerData[playerid][pBeanBag])
	    			return SendErrorMessage(playerid, "Kamu tidak bisa menyimpan beanbag shotgun.");

                ResetWeapon(playerid, weaponid);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyimpan sebuah \"%s\" ke dalam gudang senjatanya.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));

				HouseData[houseid][houseWeapons][listitem] = weaponid;
				HouseData[houseid][houseAmmo][listitem] = ammo;

				House_Save(houseid);
				House_WeaponStorage(playerid, houseid);
			}
		}
		else
		{
		    House_OpenStorage(playerid, houseid);
		}
	}
	return 1;
}

Dialog:HouseDeposit(playerid, response, listitem, inputtext[])
{
	static
	    houseid = -1,
	    string[32];

    if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
	    strunpack(string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invItem]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity])
			    return Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Simpan", "Item: %s (Jumlah: %d)\n\nHarap masukkan jumlah yang ingin Kamu simpan untuk item ini:", "Simpan", "Kembali", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);

			House_AddItem(houseid, string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invModel], amount);
			Inventory_Remove(playerid, string, amount);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyimpan sebuah \"%s\" kedalam gudang rumahnya.", ReturnName(playerid, 0), string);
			House_ShowItems(playerid, houseid);
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseTake(playerid, response, listitem, inputtext[])
{
	static
	    houseid = -1,
	    string[32];

    if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
	    strunpack(string, HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemName]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemQuantity])
			    return Dialog_Show(playerid, HouseTake, DIALOG_STYLE_INPUT, "Ambil", "Item: %s (Jumlah: %d)\n\nHarap masukkan jumlah yang ingin Kamu ambil untuk item ini:", "Ambil", "Kembali", string, HouseStorage[houseid][PlayerData[playerid][pInventoryItem]][hItemQuantity]);

			new id = Inventory_Add(playerid, string, HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemModel], amount);

			if (id == -1)
				return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

			House_RemoveItem(houseid, string, amount);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mengambil sebuah \"%s\" dari gudang rumahnya.", ReturnName(playerid, 0), string);

			House_ShowItems(playerid, houseid);
			Log_Write("logs/storage_log.txt", "[%s] %s telah mengambil %d \"%s\" dari house ID: %d (pemilik: %s).", ReturnDate(), ReturnName(playerid, 0), amount, string, HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Yes") : ("No"));
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseWithdrawCash(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if (response)
		{
		    new amount = strval(inputtext);

		    if (isnull(inputtext))
		        return Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Withdraw", "Saldo yang Aman: %s\n\nHarap masukkan berapa banyak uang yang ingin kamu tarik dari brankas:", "Ambil", "Kembali", FormatNumber(HouseData[houseid][houseMoney]));

			if (amount < 1 || amount > HouseData[houseid][houseMoney])
			    return Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Withdraw", "Error: Dana tidak mencukupi.\n\nSaldo yang Aman: %s\n\nHarap masukkan berapa banyak uang yang ingin Kamu tarik dari brankas:", "Ambil", "Kembali", FormatNumber(HouseData[houseid][houseMoney]));

			HouseData[houseid][houseMoney] -= amount;
			GiveMoney(playerid, amount);

			House_Save(houseid);
			House_OpenStorage(playerid, houseid);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mengambil %s dari rumahnya.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Money Safe", "Withdraw\nDeposit", "Pilih", "Kembali");
	}
	return 1;
}

Dialog:HouseDepositCash(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if (response)
		{
		    new amount = strval(inputtext);

		    if (isnull(inputtext))
		        return Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Deposit", "Saldo yang Aman: %s\n\nHarap masukkan berapa banyak uang yang ingin Kamu setorkan ke brankas:", "Simpan", "Kembali", FormatNumber(HouseData[houseid][houseMoney]));

			if (amount < 1 || amount > GetMoney(playerid))
			    return Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Deposit", "Error: Dana tidak mencukupi.\n\nSaldo yang Aman: %s\n\nHarap masukkan berapa banyak uang yang ingin Kamu setorkan ke brankas:", "Simpan", "Kembali", FormatNumber(HouseData[houseid][houseMoney]));

			HouseData[houseid][houseMoney] += amount;
			GiveMoney(playerid, -amount);

			House_Save(houseid);
			House_OpenStorage(playerid, houseid);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyimpan %s kedalam rumahnya.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Money Safe", "Withdraw\nDeposit", "Pilih", "Kembali");
	}
	return 1;
}

Dialog:HouseMoney(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if (response)
		{
			switch (listitem)
			{
			    case 0: {
					Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Withdraw", "Saldo yang Aman: %s\n\nHarap masukkan berapa banyak uang yang ingin Kamu tarik dari brankas:", "Tarik", "Kembali", FormatNumber(HouseData[houseid][houseMoney]));
				}
				case 1: {
				    Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Deposit", "Saldo yang Aman: %s\n\nHarap masukkan berapa banyak uang yang ingin Kamu simpan ke brankas:", "Ambil", "Kembali", FormatNumber(HouseData[houseid][houseMoney]));
				}
			}
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseItems(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1,
		string[64];

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
		if (response)
		{
    		if (HouseStorage[houseid][listitem][hItemExists])
			{
   				PlayerData[playerid][pStorageItem] = listitem;
   				PlayerData[playerid][pInventoryItem] = listitem;

				strunpack(string, HouseStorage[houseid][listitem][hItemName]);

				format(string, sizeof(string), "%s (Jumlah: %d)", string, HouseStorage[houseid][listitem][hItemQuantity]);
				Dialog_Show(playerid, StorageOptions, DIALOG_STYLE_LIST, string, "Ambil Item\nSimpan Item", "Pilih", "Kembali");
			}
			else {
   				OpenInventory(playerid);

				PlayerData[playerid][pStorageSelect] = 1;
			}
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseStorage(playerid, response, listitem, inputtext[])
{
	static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
		if (response)
		{
		    if (listitem == 0) {
		        House_ShowItems(playerid, houseid);
		    }
      		else if (listitem == 1) {
				House_WeaponStorage(playerid, houseid);
		    }
		    else if (listitem == 2) {
		        Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Money Safe", "Withdraw\nDeposit", "Pilih", "Kembali");
			}
		}
	}
	return 1;
}

Dialog:StorageOptions(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1,
		itemid = -1,
		backpack = -1,
		string[32];

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
	    itemid = PlayerData[playerid][pStorageItem];

	    strunpack(string, HouseStorage[houseid][itemid][hItemName]);

		if (response)
		{
			switch (listitem)
			{
			    case 0:
			    {
			        if (HouseStorage[houseid][itemid][hItemQuantity] == 1)
			        {
			            if (!strcmp(string, "Backpack") && Inventory_HasItem(playerid, "Backpack"))
           					return SendErrorMessage(playerid, "Kamu sudah memiliki backpack di inventorymu.");

			            new id = Inventory_Add(playerid, string, HouseStorage[houseid][itemid][hItemModel], 1);

						if (id == -1)
        					return SendErrorMessage(playerid, "Kamu tidak memiliki sisa slot yang tersisa.");

                        if (!strcmp(string, "Backpack") && (backpack = GetHouseBackpack(houseid)) != -1)
						{
						    BackpackData[backpack][backpackHouse] = 0;
						    BackpackData[backpack][backpackPlayer] = PlayerData[playerid][pID];

						    Backpack_Save(backpack);
						    SetAccessories(playerid);
						}
			            House_RemoveItem(houseid, string);
			            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mengambil sebuah \"%s\" dari gudang rumahnya.", ReturnName(playerid, 0), string);

						House_ShowItems(playerid, houseid);
						Log_Write("logs/storage_log.txt", "[%s] %s telah mengambil sebuah \"%s\" dari house ID: %d (pemilik: %s).", ReturnDate(), ReturnName(playerid, 0), string, HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Yes") : ("No"));
			        }
			        else
			        {
			            Dialog_Show(playerid, HouseTake, DIALOG_STYLE_INPUT, "Ambil", "Item: %s (Jumlah: %d)\n\nHarap masukkan jumlah yang ingin Kamu ambil untuk item ini:", "Ambil", "Kembali", string, HouseStorage[houseid][itemid][hItemQuantity]);
			        }
			    }
				case 1:
				{
					new id = Inventory_GetItemID(playerid, string);

					if (!strcmp(string, "Backpack")) {
					    House_ShowItems(playerid, houseid);

						return SendErrorMessage(playerid, "Kamu hanya bisa menyimpan satu backpack di rumah Kamu.");
					}
					else if (id == -1) {
						House_ShowItems(playerid, houseid);

						return SendErrorMessage(playerid, "Kamu tidak memiliki item ini lagi untuk disimpan!");
					}
					else if (InventoryData[playerid][id][invQuantity] == 1)
					{
					    House_AddItem(houseid, string, InventoryData[playerid][id][invModel]);
						Inventory_Remove(playerid, string);

						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyimpan \"%s\" ke dalam gudang rumahnya.", ReturnName(playerid, 0), string);
						House_ShowItems(playerid, houseid);
					}
					else if (InventoryData[playerid][id][invQuantity] > 1) {
					    PlayerData[playerid][pInventoryItem] = id;

                        Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Simpan", "Item: %s (Jumlah: %d)\n\nHarap masukkan jumlah yang ingin Kamu simpan untuk item ini:", "Simpan", "Kembali", string, InventoryData[playerid][id][invQuantity]);
					}
				}
			}
		}
		else
		{
		    House_ShowItems(playerid, houseid);
		}
	}
	return 1;
}

Dialog:EditGlasses(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!IsPlayerAttachedObjectSlotUsed(playerid, 0))
	            {
	                PlayerData[playerid][pToggleGlasses] = 0;
	                SetPlayerAttachedObject(playerid, 0, PlayerData[playerid][pGlasses], 2, AccessoryData[playerid][0][0], AccessoryData[playerid][0][1], AccessoryData[playerid][0][2], AccessoryData[playerid][0][3], AccessoryData[playerid][0][4], AccessoryData[playerid][0][5], AccessoryData[playerid][0][6], AccessoryData[playerid][0][7], AccessoryData[playerid][0][8]);
					ShowPlayerFooter(playerid, "Kamu telah ~g~menggunakan~w~ kacamatamu.");
				}
				else
				{
				    PlayerData[playerid][pToggleGlasses] = 1;
	                RemovePlayerAttachedObject(playerid, 0);
					ShowPlayerFooter(playerid, "Kamu telah ~r~melepaskan~w~ kacamatamu.");
				}
			}
			case 1:
			{
			    PlayerData[playerid][pToggleGlasses] = 0;
       			SetPlayerAttachedObject(playerid, 0, PlayerData[playerid][pGlasses], 2, AccessoryData[playerid][0][0], AccessoryData[playerid][0][1], AccessoryData[playerid][0][2], AccessoryData[playerid][0][3], AccessoryData[playerid][0][4], AccessoryData[playerid][0][5], AccessoryData[playerid][0][6], AccessoryData[playerid][0][7], AccessoryData[playerid][0][8]);

			    EditAttachedObject(playerid, 0);
			    PlayerData[playerid][pEditType] = 1;
			}
			case 2:
			{
			    RemovePlayerAttachedObject(playerid, 0);
			    PlayerData[playerid][pGlasses] = 0;
			    SendServerMessage(playerid, "Kamu telah menghapus kacamatamu.");
			}
		}
	}
	return 1;
}

Dialog:EditHat(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!IsPlayerAttachedObjectSlotUsed(playerid, 1))
            	{
	                PlayerData[playerid][pToggleHat] = 0;
	                SetPlayerAttachedObject(playerid, 1, PlayerData[playerid][pHat], 2, AccessoryData[playerid][1][0], AccessoryData[playerid][1][1], AccessoryData[playerid][1][2], AccessoryData[playerid][1][3], AccessoryData[playerid][1][4], AccessoryData[playerid][1][5], AccessoryData[playerid][1][6], AccessoryData[playerid][1][7], AccessoryData[playerid][1][8]);
					ShowPlayerFooter(playerid, "Kamu telah ~g~menggunakan~w~ topimu.");
				}
				else
				{
				    PlayerData[playerid][pToggleHat] = 1;
	                RemovePlayerAttachedObject(playerid, 1);
					ShowPlayerFooter(playerid, "Kamu telah ~r~melepaskan~w~ topimu.");
				}
			}
			case 1:
			{
			    PlayerData[playerid][pToggleHat] = 0;
	            SetPlayerAttachedObject(playerid, 1, PlayerData[playerid][pHat], 2, AccessoryData[playerid][1][0], AccessoryData[playerid][1][1], AccessoryData[playerid][1][2], AccessoryData[playerid][1][3], AccessoryData[playerid][1][4], AccessoryData[playerid][1][5], AccessoryData[playerid][1][6], AccessoryData[playerid][1][7], AccessoryData[playerid][1][8]);

			    EditAttachedObject(playerid, 1);
			    PlayerData[playerid][pEditType] = 2;
			}
			case 2:
			{
			    RemovePlayerAttachedObject(playerid, 1);
			    PlayerData[playerid][pHat] = 0;
			    SendServerMessage(playerid, "Kamu telah menghapus topimu.");
			}
		}
	}
	return 1;
}

Dialog:EditBandana(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!IsPlayerAttachedObjectSlotUsed(playerid, 2))
	            {
	                PlayerData[playerid][pToggleBandana] = 0;
	                SetPlayerAttachedObject(playerid, 2, PlayerData[playerid][pBandana], 2, AccessoryData[playerid][2][0], AccessoryData[playerid][2][1], AccessoryData[playerid][2][2], AccessoryData[playerid][2][3], AccessoryData[playerid][2][4], AccessoryData[playerid][2][5], AccessoryData[playerid][2][6], AccessoryData[playerid][2][7], AccessoryData[playerid][2][8]);
					ShowPlayerFooter(playerid, "Kamu telah ~g~memasang~w~ bandanamu.");
				}
				else
				{
				    PlayerData[playerid][pToggleBandana] = 1;
	                RemovePlayerAttachedObject(playerid, 2);
					ShowPlayerFooter(playerid, "Kamu telah ~r~melepaskan~w~ bandanamu.");
				}
			}
			case 1:
			{
			    PlayerData[playerid][pToggleBandana] = 0;
       			SetPlayerAttachedObject(playerid, 2, PlayerData[playerid][pBandana], 2, AccessoryData[playerid][2][0], AccessoryData[playerid][2][1], AccessoryData[playerid][2][2], AccessoryData[playerid][2][3], AccessoryData[playerid][2][4], AccessoryData[playerid][2][5], AccessoryData[playerid][2][6], AccessoryData[playerid][2][7], AccessoryData[playerid][2][8]);

			    EditAttachedObject(playerid, 2);
			    PlayerData[playerid][pEditType] = 3;
			}
			case 2:
			{
			    RemovePlayerAttachedObject(playerid, 2);
			    PlayerData[playerid][pBandana] = 0;
			    SendServerMessage(playerid, "Kamu telah menghapus bandanamu.");
			}
		}
	}
	return 1;
}

Dialog:Accessory(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!PlayerData[playerid][pGlasses])
	                return SendErrorMessage(playerid, "Kamu tidak memiliki sepasang kacamata.");

	            Dialog_Show(playerid, EditGlasses, DIALOG_STYLE_LIST, "Glasses", "Pasang/Lepas Kacamata\nEdit Kacamata\nHapus Kacamata", "Pilih", "Batal");
			}
			case 1:
			{
			    if (!PlayerData[playerid][pHat])
	                return SendErrorMessage(playerid, "Kamu tidak memiliki topi.");

			    Dialog_Show(playerid, EditHat, DIALOG_STYLE_LIST, "Hat", "Pasang/Lepas Topi\nEdit Topi\nHapus Topi", "Pilih", "Batal");
			}
			case 2:
			{
			    if (!PlayerData[playerid][pBandana])
	                return SendErrorMessage(playerid, "Kamu tidak memiliki bandana.");

			    Dialog_Show(playerid, EditBandana, DIALOG_STYLE_LIST, "Bandana", "Pasang/Lepas Bandana\nEdit Bandana\nHapus Bandana", "Pilih", "Batal");
			}
		}
	}
	return 1;
}

Dialog:CharList(playerid, response, listitem, inputtext[])
{
    SetTimerEx("SelectTD", 200, false, "d", playerid);

	if (response)
	{
		if (!PlayerCharacters[playerid][listitem][0])
		    return SendErrorMessage(playerid, "Slot karakter yang dipilih kosong.");

		new
		    string[160];

		format(string, sizeof(string), "SELECT `Admin`, `Skin`, `CreateDate`, `LastLogin` FROM `characters` WHERE `Username` = '%s' AND `Character` = '%s'", PlayerData[playerid][pUsername], PlayerCharacters[playerid][listitem]);
		mysql_tquery(g_iHandle, string, "OnCharacterLookup", "dds", playerid, listitem + 1, PlayerCharacters[playerid][listitem]);
	}
	return 1;
}

Dialog:RegisterScreen(playerid, response, listitem, inputtext[])
{
	if (!response)
		return Kick(playerid);

	else if (isnull(inputtext))
	    return Dialog_Show(playerid, RegisterScreen, DIALOG_STYLE_PASSWORD, "Pendaftaran akun", "Selamat datang di South Central Roleplay, %s.\n\nInfo: Akunmu belum terdaftar Silahkan masukkan kata sandi yang kamu inginkan:", "Daftar", "Batal", ReturnName(playerid));

	else
	{
		SQL_CreateAccount(PlayerData[playerid][pUsername], inputtext);

		ShowCharacterMenu(playerid);
		SendServerMessage(playerid, "Akunmu telah berhasil dibuat dan berhasil disimpan.");
	}
	return 1;
}

Dialog:LoginScreen(playerid, response, listitem, inputtext[])
{
	if (!response)
	    return Kick(playerid);

	else if (isnull(inputtext))
	    return Dialog_Show(playerid, LoginScreen, DIALOG_STYLE_PASSWORD, "Masuk Akun", "Selamat datang kembali ke Vandora Ravens!\n\nAkunmu terakhir login pada: %s.\n\nSilahkan masukkan kata sandimu di bawah ini untuk login ke akunmu:", "Masuk", "Batal", PlayerData[playerid][pLoginDate]);

	else
	{
	    SQL_AttemptLogin(playerid, inputtext);
	}
	return 1;
}

Dialog:DeleteChar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new query[128];

	    format(query, sizeof(query), "DELETE FROM `characters` WHERE `Username` = '%s' AND `Character` = '%s'", PlayerData[playerid][pUsername], PlayerCharacters[playerid][PlayerData[playerid][pCharacter] - 1]);
		mysql_tquery(g_iHandle, query);

		SendServerMessage(playerid, "Kamu menghapus \"%s\" dari akunmu.", PlayerCharacters[playerid][PlayerData[playerid][pCharacter] - 1]);
        PlayerCharacters[playerid][PlayerData[playerid][pCharacter] - 1][0] = 0;

        ShowCharacterMenu(playerid);
	}
	return 1;
}

Dialog:DeleteCharacter(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new query[128];

	    format(query, sizeof(query), "DELETE FROM `characters` WHERE `Username` = '%s' AND `Character` = '%s'", PlayerData[playerid][pUsername], PlayerCharacters[playerid][PlayerData[playerid][pCharacterMenu] - 1]);
		mysql_tquery(g_iHandle, query);

		SendServerMessage(playerid, "Kamu menghapus \"%s\" dari akunmu.", PlayerCharacters[playerid][PlayerData[playerid][pCharacterMenu] - 1]);
        PlayerCharacters[playerid][PlayerData[playerid][pCharacterMenu] - 1][0] = 0;

        for (new i = 50; i < 58; i ++) {
        	PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		PlayerData[playerid][pDisplayStats] = false;
		CancelSelectTextDraw(playerid);
	}
	return 1;
}

Dialog:CreateChar(playerid, response, listitem, inputtext[])
{
	if (!response)
	    return PlayerData[playerid][pCharacter] = 0;

	else if (isnull(inputtext) || strlen(inputtext) > 20)
        return Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Buat Karakter", "Harap masukkan nama karakter baru kamu di bawah ini:\n\nInfo: Namamu harus memiliki format Namadepan_Namabelakang dan tidak melebihi 20 karakter.", "Buat", "Batal");

	else if (!IsValidRoleplayName(inputtext))
	    return Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Buat Karakter", "Error: Kamu telah memasukkan nama roleplay yang tidak benar.\n\nHarap masukkan nama karakter baru kamu di bawah ini:\n\nInfo: Namamu harus berada dalam format Firstname_Lastname dan tidak melebihi 20 karakter.", "Buat", "Batal");

	else
	{
	    static
	        query[128];

		format(query, sizeof(query), "SELECT `ID` FROM `characters` WHERE `Character` = '%s'", inputtext);
		mysql_tquery(g_iHandle, query, "OnCharacterCheck", "ds", playerid, inputtext);
	}
	return 1;
}

Dialog:Gender(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    PlayerData[playerid][pGender] = listitem + 1;

	    switch (listitem) {
	        case 0: {
				PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][16], "~r~Kelamin:~w~ Pria");
				PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][13], 98);

				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][13]);
				PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][13]);
			}
	        case 1: {
				PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][16], "~r~Kelamin:~w~ Wanita");
				PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][13], 233);

				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][13]);
				PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][13]);
			}
		}
		PlayerData[playerid][pSkin] = (listitem) ? (233) : (98);
		SetTimerEx("SelectTD", 200, false, "d", playerid);
	}
	else SetTimerEx("SelectTD", 200, false, "d", playerid);
	return 1;
}

Dialog:DateBirth(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			iDay,
			iMonth,
			iYear,
			str[64];

	    static const
	        arrMonthDays[] = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

	    if (sscanf(inputtext, "p</>ddd", iDay, iMonth, iYear)) {
	        Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Tanggal Lahir", "Error: Format tidak valid!\n\nHarap masukkan tanggal lahirmu di bawah ini (HH/BB/TTTT):", "Submit", "Batal");
		}
		else if (iYear < 1900 || iYear > 2014) {
		    Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Tanggal Lahir", "Error: Tahun tidak valid!\n\nHarap masukkan tanggal lahirmu di bawah ini (HH/BB/TTTT):", "Submit", "Batal");
		}
		else if (iMonth < 1 || iMonth > 12) {
		    Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Tanggal Lahir", "Error: Bulan tidak valid!\n\nHarap masukkan tanggal lahirmu di bawah ini (HH/BB/TTTT):", "Submit", "Batal");
		}
		else if (iDay < 1 || iDay > arrMonthDays[iMonth - 1]) {
		    Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Tanggal Lahir", "Error: Tanggal tidak valid!\n\nHarap masukkan tanggal lahirmu di bawah ini (HH/BB/TTTT):", "Submit", "Batal");
		}
		else {
		    format(PlayerData[playerid][pBirthdate], 24, inputtext);

		    format(str, sizeof(str), "~r~Tanggal Lahir:~w~ %s", inputtext);
		    PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][15], str);
		}
	}
	return 1;
}

Dialog:Origin(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new str[64];

	    if (isnull(inputtext) || strlen(inputtext) > 32) {
	        Dialog_Show(playerid, Origin, DIALOG_STYLE_INPUT, "Asal", "Harap masukkan asal geografis karaktermu di bawah ini:", "Submit", "Batal");
		}
		else for (new i = 0, len = strlen(inputtext); i != len; i ++) {
		    if ((inputtext[i] >= 'A' && inputtext[i] <= 'Z') || (inputtext[i] >= 'a' && inputtext[i] <= 'z') || (inputtext[i] >= '0' && inputtext[i] <= '9') || (inputtext[i] == ' ') || (inputtext[i] == ',') || (inputtext[i] == '.'))
				continue;

			else return Dialog_Show(playerid, Origin, DIALOG_STYLE_INPUT, "Asal", "Error: Hanya huruf dan angka yang diterima.\n\nHanya huruf dan angka yang diterima di titik asal:", "Submit", "Batal");
		}
		format(PlayerData[playerid][pOrigin], 32, inputtext);

  		format(str, sizeof(str), "~r~Asal:~w~ %s", inputtext);
  		PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][17], str);
	}
	return 1;
}

Dialog:NewPass(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, NewPass, DIALOG_STYLE_PASSWORD, "Masukan kata sandi baru", "Masukkan kata sandi baru kamu di bawah ini.\n\nNote: Harap gunakan kata sandi yang kuat dan aman untuk keamanan tambahan.", "Ganti", "Batal");

		static
		    buffer[129],
		    query[256];

		WP_Hash(buffer, sizeof(buffer), inputtext);
		inputtext[0] = '\0';

		format(query, sizeof(query), "UPDATE `accounts` SET `Password` = '%s' WHERE `Username` = '%s'", buffer, PlayerData[playerid][pUsername]);
		mysql_tquery(g_iHandle, query);

		SendServerMessage(playerid, "Kamu berhasil mengganti kata sandi.");
	}
	return 1;
}

Dialog:ChangePassword(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
	        return cmd_changepass(playerid, "\1");

		static
		    buffer[129],
			query[256];

		WP_Hash(buffer, sizeof(buffer), inputtext);
		inputtext[0] = '\0';

		format(query, sizeof(query), "SELECT `Password` FROM `accounts` WHERE `Username` = '%s' AND `Password` = '%s'", PlayerData[playerid][pUsername], buffer);
		mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_VERIFY_PASS);
	}
	return 1;
}
CMD:ame(playerid, params[])
{
	new result[100], string[140];
	if(sscanf(params, "s[100]", result))
	{
		SendClientMessage(playerid, COLOR_ERROR, "USAGE:{FFFFFF} /ame [deksripsi] - Text akan muncul di kepalamu.");
		SendClientMessage(playerid, COLOR_ERROR, "HINT:{FFFFFF} Gunakan (/ame off) untuk menghapus teksnya!");
		return 1;
	}
	if(strlen(result) >100) return SendClientMessage(playerid, COLOR_ERROR, "Deskripsi tidak boleh lebih dari 100 karakter!");
	if(strcmp(result, "off", true) == 0)
	{
		if(amestatus[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "Tidak ada /ame yang aktif!");
		DestroyDynamic3DTextLabel(ame[playerid]);
		SendClientMessage(playerid, COLOR_ME, "AME dihapus!");
		amestatus[playerid] = 0;
		return 1;
	}
	if(amestatus[playerid] == 0)
	{
		format(string, sizeof(string), "* %s %s *", GetRPName(playerid), result);
		ame[playerid] = CreateDynamic3DTextLabel(string, COLOR_ME, 0.0, 0.0, 0.0, 40.0, playerid);
		amestatus[playerid] = 1;
	}
	else
	{
		format(string, sizeof(string), "* %s %s *", GetRPName(playerid), result);
		UpdateDynamic3DTextLabelText(ame[playerid], COLOR_ME, string);
		return 1;
	}
	return 1;
}

CMD:ado(playerid, params[])
{
	new result[100], string[140];
	if(sscanf(params, "s[200]", result))
	{
		SendClientMessage(playerid, COLOR_ERROR, "USAGE:{FFFFFF} /ado [deksripsi] - Teks akan berada ditempat kamu melakukan command.");
		SendClientMessage(playerid, COLOR_ERROR, "HINT:{FFFFFF} Gunakan (/ado off) untuk menghapus teks!");
		return 1;
	}
	if(strlen(result) >100) return SendClientMessage(playerid, COLOR_ERROR, "Deksripsi tidak boleh lebih dari 100 karakter!");
	if(strcmp(result, "off", true) == 0)
	{
		if(adostatus[playerid] == 0) return SendClientMessage(playerid, COLOR_ERROR, "Kamu tidak memiliki /ado aktif!");
		DestroyDynamic3DTextLabel(ado[playerid]);
		SendClientMessage(playerid, COLOR_ME, "ADO dihapus!");
		adostatus[playerid] = 0;
		return 1;
	}
	if(adostatus[playerid] == 0)
	{
		new Float:AdoX, Float:AdoY, Float:AdoZ;
		GetPlayerPos(playerid, AdoX, AdoY, AdoZ);
		format(string, sizeof(string), "* %s *\n(( %s ))", result, GetRPName(playerid));
		ado[playerid] = CreateDynamic3DTextLabel(string, COLOR_ME, AdoX, AdoY, AdoZ, 40.0);
		adostatus[playerid] = 1;
	}
	else
	{
		format(string, sizeof(string), "* %s *\n(( %s ))", result, GetRPName(playerid));
		UpdateDynamic3DTextLabelText(ado[playerid], COLOR_ME, string);
		return 1;
	}
	return 1;
}
CMD:x(playerid, params[])
{
	new Float:x, Float:y, Float:z, Float:npos;
	if(PlayerData[playerid][pAdmin] >= 2)
	{
		if(sscanf(params, "f", npos)) return SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE: /x [Koordinat]");
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x+npos, y, z);
		return 1;
	}
	else return SendErrorMessage(playerid, "Kamu tidak diperbolehkan.");
}
COMMAND:y(playerid, params[])
{
	new Float:x, Float:y, Float:z, Float:npos;
	if(PlayerData[playerid][pAdmin] >= 2)
	{
		if(sscanf(params, "f", npos)) return SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE: /y [Koordinat]");
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x, y+npos, z);
		return 1;
	}
	else return SendErrorMessage(playerid, "Kamu tidak diperbolehkan.");
}
COMMAND:z(playerid, params[])
{
	new Float:x, Float:y, Float:z, Float:npos;
	if(PlayerData[playerid][pAdmin] >= 2)
	{
		if(sscanf(params, "f", npos)) return SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE: /z [Koordinat]");
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x, y, z+npos);
		return 1;
	}
	else return SendErrorMessage(playerid, "Kamu tidak diperbolehkan.");
}

CMD:callsign(playerid, params[])
{
    new vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
	new string[32];
	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Kamu tidak berada di kendaraan.");
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_NEWS && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_COMPANY)
		return SendErrorMessage(playerid, "Kamu tidak diperbolehkan menggunakan perintah ini.");
	if (!IsACruiser(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Kamu harus berada di dalam sebuah mobil polisi.");
	if(vehiclecallsign[GetPlayerVehicleID(playerid)] == 1)
	{
 		Delete3DTextLabel(vehicle3Dtext[vehicleid]);
	    vehiclecallsign[vehicleid] = 0;
	    SendClientMessage(playerid, COLOR_RED, "Callsign dihapus.");
	    return 1;
	}
	if(sscanf(params, "s[32]",string)) return SendErrorMessage(playerid, "Kamu harus memasukkan sebuah callsign.");
	if(vehiclecallsign[GetPlayerVehicleID(playerid)] == 0)
	{
		vehicle3Dtext[vehicleid] = Create3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.0, 25.0, 0, 1);
		Attach3DTextLabelToVehicle(vehicle3Dtext[vehicleid], vehicleid, 0.0, -2.8, 0.0);
		vehiclecallsign[vehicleid] = 1;
	}
	return 1;
}

CMD:setforsale(playerid, params[])
{
    new
    	carid = GetPlayerVehicleID(playerid);

	if (!carid)
	    return SendErrorMessage(playerid, "Kamu harus berada didekat kendaraanmu.");

    if (!Inventory_HasItem(playerid, "Sale Documents"))
    	return SendErrorMessage(playerid, "Kamu butuh sale documents untuk ditulis, dapatkan di Post Office.");

    if (!Inventory_HasItem(playerid, "Pen"))
    	return SendErrorMessage(playerid, "Kamu butu pulpen untuk menulis informasi penjualan. beli sebuah pulpen di Post Office.");

    new vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
	new string[32];
	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "Kamu tidak di dalam kendaraan.");
	if(vehiclecallsign[GetPlayerVehicleID(playerid)] == 1)
	{
 		Delete3DTextLabel(vehicle3Dtext[vehicleid]);
	    vehiclecallsign[vehicleid] = 0;
	    SendClientMessage(playerid, COLOR_RED, "Sign berhasil di hapus.");
	    return 1;
	}
	if(sscanf(params, "s[32]",string)) return SendErrorMessage(playerid, "Kamu harus menulis informasi penjualan.");
	if(vehiclecallsign[GetPlayerVehicleID(playerid)] == 0)
	{
		vehicle3Dtext[vehicleid] = Create3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.0, 25.0, 0, 1);
		Attach3DTextLabelToVehicle(vehicle3Dtext[vehicleid], vehicleid, 0.0, -1.5, 0.6);
		vehiclecallsign[vehicleid] = 1;
		Inventory_Remove(playerid, "Sale Documents");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengisi dokumen informasi penjualan dan meletakkannya di jendela belakang.", ReturnName(playerid, 0));
	}
	return 1;
}


CMD:aremovecall(playerid, params[])
{
	new vehicleid;
	if (PlayerData[playerid][pAdmin] < 1)
		return SendErrorMessage(playerid, "Kamu bukan seorang administrator.");
	if(sscanf(params, "i", vehicleid)) return SendErrorMessage(playerid, "Harus memasukkan ID kendaraan.");
    if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "Kamu telah mengisi ID kendaraan yang salah.");
	Delete3DTextLabel(vehicle3Dtext[vehicleid]);
	return 1;
}
//

CMD:b(playerid, params[])
{
	new string[128];
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/b [lokal OOC]");
	if (strlen(params) > 64)
	{
        if(PlayerData[playerid][pEventDuty] == 1)
		{
			SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "{FFFF00}[Event] %s{FFFFFF} [%d]: (( %.64s", ReturnName(playerid, 0), playerid, params);
	 		SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "...%s ))", params[64]);
			return 1;
		}
		else if(PlayerData[playerid][pAdminDuty] == 1 && PlayerData[playerid][pHelperDuty] == 1)
	    {
	        SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "{33EE33}Staff %s{FFFFFF} [%d]: (( %.64s", ReturnName(playerid, 0), playerid, params);
	    	SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "...%s ))", params[64]); 
	        return 1;
		}
		else if(PlayerData[playerid][pDonatorDuty] == 1)
		{
			SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "{DAA520}Donator{FFFFFF} %s [%d]: (( %.64s", ReturnName(playerid, 0), playerid, params);
			SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "...%s ))", params[64]);
			return 1;
		}

	    SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "%s [%d]: (( %.64s", ReturnName(playerid, 0), playerid, params);
	    SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "...%s ))", params[64]);
	}
	else
	{
	    if(PlayerData[playerid][pAdminDuty] == 1 && PlayerData[playerid][pHelperDuty] == 1)
	    {
	        SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "{33EE33}Staff %s{FFFFFF} [%d]: (( %.64s ))", ReturnName(playerid, 0), playerid, params);
			return 1;
		}
		if(PlayerData[playerid][pDonatorDuty] == 1)
		{
			SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "{DAA520}Donator{FFFFFF} %s [%d]: (( %.64s ))", ReturnName(playerid, 0), playerid, params);
			return 1;
		}
		if(PlayerData[playerid][pEventDuty] == 1)
		{
			SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "{FFFF00}[Event] %s{FFFFFF} [%d]: (( %.64s ))", ReturnName(playerid, 0), playerid, params);
			return 1;
		}
	    SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "%s [%d]: (( %s ))", ReturnName(playerid, 0), playerid, params);
	}
	format(string, sizeof(string), "(( %s ))", params);
	SetPlayerChatBubble(playerid, string, COLOR_WHITE, 25.0, 6000);
	return 1;
}

CMD:me(playerid, params[])
{
	new string[128];
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/me [action]");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "...%s", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s %s", ReturnName(playerid, 0), params);
	}
	format(string, sizeof(string), "* %s %s", ReturnName(playerid, 0), params);
 	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 6000);
	return 1;
}

CMD:do(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/do [deksripsi]");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %.64s", params);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "...%s (( %s ))", params[64], ReturnName(playerid, 0));
	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s (( %s ))", params, ReturnName(playerid, 0));
	}
	return 1;
}

CMD:s(playerid, params[])
{
	new string[128];
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(s)hout [teks]");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 30.0, COLOR_WHITE, "%s berteriak: %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 30.0, COLOR_WHITE, "...%s!", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_WHITE, "%s berteriak: %s!", ReturnName(playerid, 0), params);
	}
 	format(string, sizeof(string), "shouts: %s", params);
	SetPlayerChatBubble(playerid, string, COLOR_WHITE, 30.0, 6000);
	return 1;
}


//planech

CMD:pt(playerid, params[])
{

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/pt [plane to atc chat]");

	if (IsPlayerInRangeOfPoint(playerid, 5.0, 233.6600, 2535.0500, 22.3200) || IsAPlane(GetPlayerVehicleID(playerid)))// ini error
	{
	    static
	    string[128];
	    if(PlayerData[playerid][pChannel] == 14777)
	    {
			PlayerPlaySound(playerid, 4, 0, 0, 0);
	        if(strlen(params) > 64)
	        {
		     	format(string, sizeof(string), "** [FLIGHT RADIO: %d] %s: %.64s",PlayerData[playerid][pChannel],ReturnName(playerid, 0), params);
				SendRadioMessage(PlayerData[playerid][pChannel], COLOR_INTERCOM, string);
				format(string, sizeof(string), "...%s **",params[64]);
				SendRadioMessage(PlayerData[playerid][pChannel], COLOR_INTERCOM, string);
				StopAudioStreamForPlayer(playerid);
			}
			else
			{
			    format(string, sizeof(string), "** [FLIGHT RADIO: %d] %s: %s",PlayerData[playerid][pChannel],ReturnName(playerid, 0), params);
				SendRadioMessage(PlayerData[playerid][pChannel], COLOR_INTERCOM, string);
				StopAudioStreamForPlayer(playerid);
			}
	    }
	    else
	    {
	        SendErrorMessage(playerid, "Kamu belum terhubung di jaringan Air Traffic Controller, gunakan /startcom");
	        StopAudioStreamForPlayer(playerid);
	    }
	}
	else
	{
	    SendErrorMessage(playerid, "Kamu tidak berada di Air Traffic Controller");
	    StopAudioStreamForPlayer(playerid);
	    
	}
	return 1;
}

CMD:startcom(playerid, params[])
{

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 233.6600, 2535.0500, 22.3200) || IsAPlane(GetPlayerVehicleID(playerid)))
	{
		planech[playerid] = 1;
		PlayerData[playerid][pChannel] = 14777;
		PlayerPlaySound(playerid, 3600, 0, 0, 0);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengaktifkan radio komunikasi Air Traffic Controller", ReturnName(playerid, 0));
		SendClientMessage(playerid, COLOR_WHITE, "Kamu sudah tersambung di jaringan Komunikasi Air Traffic Controller, gunakan /pt untuk berkomunikasi");
	}
	else
	{
	    SendErrorMessage(playerid, "Kamu tidak berada di Air Traffic Controller atau di dalam pesawat");
	}
	return 1;
}

CMD:pc(playerid, params[])
{

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/pintercom [plane intercom]");

    if (!IsAPlane(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Kamu harus berada dalam pesawat untuk menggunakan intercom.");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 30.0, COLOR_INTERCOM, "[PLANE INTERCOM] %s berkata: %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 30.0, COLOR_INTERCOM, "...%s!", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_INTERCOM, "[PLANE INTERCOM] %s berkata: %s!", ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:l(playerid, params[])
{
	new string[128];
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(l)ow [low text]");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "[low] %s berkata: %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "...%s", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "[low] %s berkata: %s", ReturnName(playerid, 0), params);
	}
 	format(string, sizeof(string), "[low] berkata: %s", params);
	SetPlayerChatBubble(playerid, string, COLOR_WHITE, 5.0, 6000);
	return 1;
}
CMD:o(playerid, params[])
{
	if (g_StatusOOC && PlayerData[playerid][pAdmin] == 0 && PlayerData[playerid][pHelper] == 0)
		return SendErrorMessage(playerid, "Administrator telah menonaktifkan obrolan OOC global.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/o [global OOC]");

	if (PlayerData[playerid][pDisableOOC])
	    return SendErrorMessage(playerid, "Kamu harus mengaktifkan obrolan OOC terlebih dahulu.");

    if (strlen(params) < 90)
	{
        foreach (new i : Player) if (!PlayerData[i][pDisableOOC] && PlayerData[i][pCreated]) // Detek
 		{
			if (PlayerData[playerid][pAdminDuty]) // Cek Admin Duty
				SendClientMessageEx(i, COLOR_WHITE, "(( [Global OOC] [%s] {FF0000}%s{FFFFFF} : %s ))", AdminRankName(playerid), PlayerData[playerid][pForumName], params);

			else if (PlayerData[playerid][pHelperDuty]) // Cek Helper Duty
				SendClientMessageEx(i, COLOR_WHITE, "(( [Global OOC] [%s] {FF0000}%s{FFFFFF} : %s ))", HelperRankName(playerid), PlayerData[playerid][pForumName], params);

			else if (PlayerData[playerid][pDonator] != 0) // Cek status donator
		 		SendClientMessageEx(i, COLOR_WHITE, "(( [Global OOC] [%s] {CCCC33}%s{FFFFFF} : %s ))", DonatorRankName(playerid), ReturnName(playerid, 0), params);

			else // Kalau ga duty
			{
				SendClientMessageEx(i, COLOR_WHITE, "(( [Global OOC] {86C6FF}%s: {FFFFFF}%.64s ))", ReturnName(playerid, 0), params);
			}
		}
	}
	else
		return SendErrorMessage(playerid, "Text tidak boleh melebihi 64 Karakter!");

	return 1; // Return sukses
}

CMD:radio(playerid, params[])
	return cmd_r(playerid, params);

CMD:ooc(playerid, params[])
	return cmd_o(playerid, params);
	
CMD:wa(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

    if (!Inventory_HasItem(playerid, "Cellphone"))
	    return SendErrorMessage(playerid, "Kamu tidak punya HP untuk menggunakan Whatsapp.");

    if (PlayerData[playerid][pPhoneOff])
		return SendErrorMessage(playerid, "HP kamu harus dihidupkan terlebih dahulu untuk menggunakan Whatsapp.");

 	if (GetFactionType(playerid) != FACTION_GANG)
	    return SendErrorMessage(playerid, "Kamu bukan anggota faction illegal.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/wa [pesan]");

	SendFactionMessage(factionid, COLOR_WHATSAPP, "[Whatsapp] [%s]: {FFFFFF}%s", ReturnName(playerid, 0), params);
	Log_Write("logs/wa_logs.txt", "[%s] %s: %s", ReturnDate(), ReturnName(playerid, 0), params);
	return 1;
}
CMD:frespawn(playerid, params[])
{
	new vehicleid;

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/frespawn [ID]");

    if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	    return SendErrorMessage(playerid, "Kamu setidaknya harus rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "Kamu memasukan id kendaraan yang salah. Gunakana /dl untuk melihat id kendaraan.");

    new id = Car_GetID(vehicleid);

	if (CarData[id][carFaction] > 0 && GetFactionType(playerid) != CarData[id][carFaction])
	    return SendErrorMessage(playerid, "Kamu tidak memiliki akses untuk kendaraan ini.");

	RespawnVehicle(vehicleid);
	SendServerMessage(playerid, "Kamu berhasil merespawn kendaraan: %d.", vehicleid);

	return 1;
}
CMD:f(playerid, params[])
	return cmd_fac(playerid, params);

CMD:d(playerid, params[])
	return cmd_dept(playerid, params);
CMD:ah(playerid, params[])
	return cmd_ahelp(playerid, params);

CMD:hh(playerid, params[])
	return cmd_hhelp(playerid, params);

CMD:megaphone(playerid, params[])
	return cmd_m(playerid, params);

CMD:shout(playerid, params[])
	return cmd_s(playerid, params);

CMD:low(playerid, params[])
	return cmd_l(playerid, params);

CMD:admin(playerid, params[])
	return cmd_a(playerid, params);

CMD:w(playerid, params[])
	return cmd_whisper(playerid, params);
CMD:health(playerid, params[])
{
	new id;
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, 0xFFFF0000, "USAGE: {FFFFFF}/health [playerid]");
 	if (id == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, id, 6.0))
	    return SendErrorMessage(playerid, "Player tidak konek atau tidak berada didekatmu.");
	DisplayDamages(playerid, id);
	return 1;
}
CMD:donasi(playerid,params[])
{
	new string[2000];
	strcat(string, "{00FF00}Apa yang kamu dapatkan dari berdonasi?\n");
	strcat(string, "{FFFFFF}- Label donator\n");
	strcat(string, "{FFFFFF}- Menggunakan command khusus donator\n");
	strcat(string, "{FFFFFF}- 4x ganti nama ingame\n");
	strcat(string, "{FFFFFF}- 4x mengganti umur karakter\n");
	strcat(string, "{FFFFFF}- Bisa dibebaskan dari CK\n");
	strcat(string, "{FFFFFF}- Free 1 Biz\n");
	strcat(string, "{FFFFFF}- Free 1 Big House\n");
	strcat(string, "{FFFFFF}- Izin bermain jika terjadi banned, jika alasan bukan karena hacking\n");
	strcat(string, "{00FF00}Ingin mengetahui lebih banyak ?\n");
	strcat(string, "{FFFFFF}- Cek listnya di www.vandoraravens.xyz/forum/\n");
	Dialog_Show(playerid, DonatorList, DIALOG_STYLE_MSGBOX, "Donasi", string, "Tutup", "");
	return 1;
}
CMD:safe(playerid, params[])
{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(IsPlayerInAnyVehicle(playerid) && Seatbelt[playerid] == 0)
		{
		    if(IsABike(vehicleid))
		    {
		        Seatbelt[playerid] = 1;
		        Dialog_Show(playerid,Helmet,DIALOG_STYLE_LIST,"Pilih Helm.", "Helmet 1 - Fire Stripes. \n Helmet 2 - Blue and white motocross style. \n Helmet 3 - Red. \n Helmet 4 - White. \n Helmet 5 - Purple / Pink.", "Pilih", "Tutup");
		        return 1;
			}
			else
			{
			    Seatbelt[playerid] = 1;
			    SendClientMessage(playerid, COLOR_GREEN, "Kamu mengenakan sabuk pengaman. Ini akan sedikit mengamankan dirimu dari kecelakaan berat.");
       			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengenakan sabuk pengaman miliknya.", ReturnName(playerid, 0));
				return 1;
			}
		}
		if(IsPlayerInAnyVehicle(playerid) && Seatbelt[playerid] == 1)
		{
		    if(IsABike(vehicleid))
		    {
		        Seatbelt[playerid] = 0;
		        SendClientMessage(playerid, COLOR_GREEN, "Kamu melepaskan helm milikmu.");
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s melepaskan helm miliknya.", ReturnName(playerid, 0));
		        if(IsPlayerAttachedObjectSlotUsed(playerid, 17)) RemovePlayerAttachedObject(playerid, 17);
				return 1;
			}
			else
			{
			    Seatbelt[playerid] = 0;
			    SendClientMessage(playerid, COLOR_GREEN, "Kamu melepaskan sabuk pengaman milikmu.");
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s melepaskan sabuk pengaman miliknya.", ReturnName(playerid, 0));
				return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_RED, "Kamu tidak berada di kendaraan.");
		}
		return 1;
}
CMD:checkseatbelt(playerid, params[])
{
		new giveplayerid, string[128];
		if (sscanf(params, "ud", giveplayerid))
			return SendSyntaxMessage(playerid, "/checkseatbelt [playerid]");
		if(GetFactionType(playerid) == FACTION_POLICE)
		{
			if(IsPlayerConnected(giveplayerid))
			{
		    	if(giveplayerid != INVALID_PLAYER_ID)
				{
					new Float:x, Float:y, Float:z;
					new PlayerName[24];
					GetPlayerPos(giveplayerid, x, y, z);
					GetPlayerName(giveplayerid, PlayerName, 24);
					if(IsPlayerNearPlayer(playerid, giveplayerid, 6.0) && Seatbelt[giveplayerid] == 1)
					{
						format(string, sizeof(string), "%s mengenakan sabuk pengaman miliknya.", PlayerName);
					    SendClientMessage(playerid, COLOR_GREEN, string);
					    return 1;
					}
					else if(IsPlayerNearPlayer(playerid, giveplayerid, 6.0) && Seatbelt[giveplayerid] == 0)
					{
						format(string, sizeof(string), "%s tidak mengenakan sabuk pengaman miliknya.", PlayerName);
						SendClientMessage(playerid, COLOR_GREEN, string);
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_RED, "Kamu tidak berada didekat player tersebut.");
						return 1;
					}
				}
				else
				{
			    	SendClientMessage(playerid, COLOR_RED, "Playerid salah.");
			    	return 1;
				}
			}
			else
			{
		    	SendClientMessage(playerid, COLOR_RED, "Kamu bukan seorang polisi.");
		    	return 1;
			}
		}
		return 1;
}
CMD:news(playerid,params[])
{
	new string[2000];
	strcat(string, "\n{009900}Semua update ditulis di forum!\n");
	ShowPlayerDialog(playerid, DIALOG_GENERAL, DIALOG_STYLE_MSGBOX, "Server News", string, "Tutup", "");
	return 1;
}
CMD:1(playerid, params[])
	return cmd_bank(playerid, params);
CMD:2(playerid, params[])
	return cmd_report(playerid, params);
CMD:3(playerid, params[])
	return cmd_assistance(playerid, params);
CMD:4(playerid, params[])
	return cmd_boombox(playerid, params);
CMD:5(playerid, params[])
	return cmd_acc(playerid, params);
CMD:6(playerid, params[])
	return cmd_buy(playerid, params);
CMD:7(playerid, params[])
	return cmd_engine(playerid, params);
CMD:codes(playerid,params[])
{
	new string[700];
	strcat(string, "{00FF00}Kode Vandora Ravens Roleplay :\n");
	strcat(string, "{FFFFFF}1. /bank\n");
	strcat(string, "{FFFFFF}2. /report\n");
	strcat(string, "{FFFFFF}3. /assistance\n");
	strcat(string, "{FFFFFF}4. /boombox\n");
	strcat(string, "{FFFFFF}5. /acc\n");
	strcat(string, "{FFFFFF}6. /buy\n");
	strcat(string, "{FFFFFF}7. /engine\n");
	strcat(string, "{00FF00}Kode sewaktu-waktu akan ditambah lebih banyak");
	ShowPlayerDialog(playerid, DIALOG_CHAT, DIALOG_STYLE_MSGBOX, "Kode", string, "Tutup", "");
}
CMD:help(playerid, params[])
{
	Dialog_Show(playerid, HelpDialog, DIALOG_STYLE_LIST, "{00FF00}Help", "General\nPercakapan\nFaction\nBisnis\nRumah\nKendaraan\nPekerjaan\nAnimasi\nPonsel\nDonator\nBank\nRadio", "Pilih", "Tutup");
	return 1;
}
CMD:changepass(playerid, params[])
{
	Dialog_Show(playerid, ChangePassword, DIALOG_STYLE_PASSWORD, "Ganti Password", "Harap masukkan kata sandi yang ada di bawah ini:", "Submit", "Batal");
	return 1;
}

CMD:lastlogged(playerid, params[])
{
	if (isnull(params) || strlen(params) > 24)
	    return SendSyntaxMessage(playerid, "/lastlogged [username]");

	static
	    query[128];

	format(query, sizeof(query), "SELECT `LoginDate` FROM `accounts` WHERE `Username` = '%s'", SQL_ReturnEscaped(params));
	mysql_tquery(g_iHandle, query, "OnLoginDate", "ds", playerid, params);

 	return 1;
}

CMD:engine(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsEngineVehicle(vehicleid))
		return SendErrorMessage(playerid, "Kamu tidak berada dalam kendaraan apapun.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Kamu tidak bisa melakukan ini karena Kamu bukan pengemudi.");

	if (CoreVehicles[vehicleid][vehFuel] < 1)
	    return SendErrorMessage(playerid, "Bensin habis.");

	if (ReturnVehicleHealth(vehicleid) <= 300)
	    return SendErrorMessage(playerid, "Kendaraan ini rusak parah dan tidak bisa dikemudi.");

	switch (GetEngineStatus(vehicleid))
	{
	    case false:
	    {
	        SetEngineStatus(vehicleid, true);
	        ShowPlayerFooter(playerid, "Kamu telah ~g~menghidupkan~w~ mesin!");
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memasukkan kunci ke dalam kunci kontak dan menyalakan mesin.", ReturnName(playerid, 0));
		}
		case true:
		{
		    SetEngineStatus(vehicleid, false);
		    ShowPlayerFooter(playerid, "Kamu telah ~r~mematikan~w~ mesin!");
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memasukkan kunci ke dalam kunci kontak dan menghentikan mesin.", ReturnName(playerid, 0));
		}
	}
	return 1;
}

CMD:lights(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsEngineVehicle(vehicleid))
		return SendErrorMessage(playerid, "Kamu tidak berada dalam kendaraan apapun.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Kamu tidak bisa melakukan ini karena Kamu bukan pengemudi.");

	switch (GetLightStatus(vehicleid))
	{
	    case false:
	    {
	        SetLightStatus(vehicleid, true);
	        ShowPlayerFooter(playerid, "Kamu telah ~g~menghidupkan~w~ lampu kendaraan!");
		}
		case true:
		{
		    SetLightStatus(vehicleid, false);
		    ShowPlayerFooter(playerid, "Kamu telah ~r~mematikan~w~ lampu kendaraan!");
		}
	}
	return 1;
}

CMD:hood(playerid, params[])
{
	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{
	    if (!IsDoorVehicle(i))
	        return SendErrorMessage(playerid, "Kendaraan ini tidak memiliki kap mesin.");

	    if (!GetHoodStatus(i))
		{
	        SetHoodStatus(i, true);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membuka kap kendaraan.", ReturnName(playerid, 0));
	        ShowPlayerFooter(playerid, "Kamu telah ~g~menutup~w~ kap kendaraan!");
		}
		else
		{
			SetHoodStatus(i, false);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menutup kap kendaraan.", ReturnName(playerid, 0));
	        ShowPlayerFooter(playerid, "Kamu telah ~g~menutup~w~ kap kendaraan!");
		}
	    return 1;
	}
	SendErrorMessage(playerid, "Kamu tidak berada dalam jangkauan kendaraan apapun.");
	return 1;
}

CMD:windows(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsWindowedVehicle(vehicleid))
		return SendErrorMessage(playerid, "Kamu tidak berada dalam kendaraan yang memiliki jendela.");

	switch (CoreVehicles[vehicleid][vehWindowsDown])
	{
	    case false:
	    {
	        CoreVehicles[vehicleid][vehWindowsDown] = true;
	        ShowPlayerFooter(playerid, "Kamu telah ~g~menurunkan~w~ jendela kendaraan!");
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menekan sebuah tombol dan membuka jendela.", ReturnName(playerid, 0));
		}
		case true:
		{
		    CoreVehicles[vehicleid][vehWindowsDown] = false;
		    ShowPlayerFooter(playerid, "Kamu telah ~r~menaikan~w~ jendela kendaraan!");
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menekan sebuah tombol dan menutup jendela.", ReturnName(playerid, 0));
		}
	}
	return 1;
}

CMD:window(playerid,params[])
{
		if(GetPlayerState(playerid) != 2)
		return SendErrorMessage(playerid, "Kamu tidak berada dalam kendaraan yang memiliki jendela.");
        if(sscanf(params, "d", params[0]))
        {
                SendClientMessage(playerid,-1,"/window [1-2-3-4]");
                SendClientMessage(playerid,-1,"1 - Jendela driver | 2 - Jendela penumpang | 3 - Jendela kiri belakang | 4 - Jendela belakang kanan");
                return 1;
        }
        if(params[0] > 4 || params[0] < 1) return SendClientMessage(playerid,-1,"1 - Jendela driver | 2 - Jendela penumpang | 3 - Jendela kiri belakang | 4 - Jendela belakang kanan");
        new driver, passenger, backleft, backright;
        GetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), driver, passenger, backleft, backright);
        switch(params[0])
        {
            case 1: driver = !driver ? (1) : (0);
            case 2: passenger = !passenger ? (1) : (0);
            case 3: backleft = !backleft ? (1) : (0);
            case 4: backright = !backright ? (1) : (0);
        }
		switch(params[0])
		{
			case 1:
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menekan sebuah tombol dan mengatur jendela kiri depan.", ReturnName(playerid, 0));
	        case 2:
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menekan sebuah tombol dan menggulung jendela kanan depan.", ReturnName(playerid, 0));
	        case 3:
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menekan sebuah tombol dan menggulung jendela kiri belakang.", ReturnName(playerid, 0));
	        case 4:
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menekan sebuah tombol dan menggulung jendela kanan belakang.", ReturnName(playerid, 0));
		}
        SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), driver, passenger, backleft, backright);
        return 1;
}
CMD:setrep(playerid, params[])
{
	static
		userid,
	    rep;

	if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ud", userid, rep))
		return SendSyntaxMessage(playerid, "/setrep [playerid/nama] [total rep]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Kamu telah menentukan player yang tidak valid.");

    if (rep > PlayerData[userid][pRep])
	{
	    SendAdminAction(playerid, "Kamu menambahkan reputasi milik %s. Total reputasinya sekarang adalah [%d].", ReturnName(userid, 0), rep);
	    SendAdminAction(userid, "%s telah menambah reputasi milikmu. Total reputasimu sekarang adalah [%d].", ReturnName(playerid, 0), rep);
	}
	else
	{
	    SendAdminAction(playerid, "Kamu telah mengurangi reputasi mmilik %s. Total reputasinya sekarang adalah [%d].", ReturnName(userid, 0), rep);
	    SendAdminAction(userid, "%s telah mengurangi reputasi milikmu. Total reputasinya sekarang adalah [%d].", ReturnName(playerid, 0), rep);
	}
	PlayerData[userid][pRep] = rep;
 	Log_Write("logs/admin_log.txt", "[%s] %s telah menambah reputasi milik %s menjadi [%d].", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), rep);

	return 1;
}
CMD:setmoney(playerid, params[])
{
	static
		userid,
	    money;

	if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ud", userid, money))
		return SendSyntaxMessage(playerid, "/setmoney [playerid/nama] [total]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Kamu telah menentukan player yang tidak valid.");

	PlayerData[userid][pMoney] = money;
	SetPlayerMoney(playerid, money);
	SendSyntaxMessage(playerid, "Kamu telah mengatur uang %s menjadi %s", ReturnName(userid, 0), money);
	SendSyntaxMessage(userid, "Uangmu telah diatur oleh %s menjadi %s", ReturnName(playerid, 0), money);
	Log_Write("logs/admin_log.txt", "[%s] %s telah mengatur uang %s menjadi %s.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), money);
	return 1;
}
CMD:setadmin(playerid, params[]) // bentar w mau upoad dulu
{
	static
		userid,
	    level;

	if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ud", userid, level))
		return SendSyntaxMessage(playerid, "/setadmin [playerid/nama] [level]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Kamu telah menentukan player yang tidak valid.");

	if (level < 0 || level > 11)
	    return SendErrorMessage(playerid, "Admin level salah. Tingkat berkisar dari 0 ke 10.");

    if (level >= PlayerData[userid][pAdmin])
	{
	    SendAdminAction(playerid, "Kamu telah mempromosikan %s. Menjadi %s [%d].", ReturnName(userid, 0), AdminRankName(userid), level);
	    SendAdminAction(userid, "%s telah mempromosikan dirimu Menjadi %s [%d].", ReturnName(playerid, 0), AdminRankName(userid), level);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN] %s telah mempromosikan %s Menjadi %s [%d].", ReturnName(playerid, 0), ReturnName(userid, 0), AdminRankName(userid), level);
	}
	else
	{
	    SendAdminAction(playerid, "Kamu telah menurunkan jabatan %s Menjadi %s [%d].", ReturnName(userid, 0), AdminRankName(userid), level);
	    SendAdminAction(userid, "%s telah menurunkan jabatanmuMenjadi %s [%d].", ReturnName(playerid, 0), AdminRankName(userid), level);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN] %s telah menurunkan %s Menjadi %s [%d].", ReturnName(playerid, 0), ReturnName(userid, 0), AdminRankName(userid), level);
	}
	PlayerData[userid][pAdmin] = level;
 	Log_Write("logs/admin_log.txt", "[%s] %s telah mengubah level admin milik %s Menjadi %s [%d].", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), AdminRankName(userid), level);

	return 1;
}

CMD:setdonator(playerid, params[])
{
	static
		userid,
	    level,
		bulan;

	if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "udd", userid, level, bulan))
		return SendSyntaxMessage(playerid, "/setdonator [playerid/nama] [level] [1-12 bulan]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (level < 0 || level > 7)
	    return SendErrorMessage(playerid, "Level donatur tidak valid. Level berkisar antara 0 sampai 6.");

	if(bulan > 12)
		return SendErrorMessage(playerid, "Tidak boleh lebih dari 12 bulan, jika ingin lifetime ketik (/setdonator playerid 0)");
		
	switch(bulan)// ALTER TABLE `characters` ADD `DonatorTime` INT(52) DEFAULT '0'
	{
		case 1: PlayerData[playerid][pDonatorTime] = gettime()+60*60*24*30;
		case 2: PlayerData[playerid][pDonatorTime] = gettime()+60*60*24*60;
		case 3: PlayerData[playerid][pDonatorTime] = gettime()+60*60*24*90;
		case 4: PlayerData[playerid][pDonatorTime] = gettime()+60*60*24*120;
		case 5: PlayerData[playerid][pDonatorTime] = gettime()+60*60*24*150;
		case 6: PlayerData[playerid][pDonatorTime] = gettime()+60*60*24*180;
		case 7: PlayerData[playerid][pDonatorTime] = gettime()+60*60*24*210;
		case 8: PlayerData[playerid][pDonatorTime] = gettime()+60*60*24*240;
		case 9: PlayerData[playerid][pDonatorTime] = gettime()+60*60*24*270;
		case 10: PlayerData[playerid][pDonatorTime] = gettime()+60*60*24*300;
		case 11: PlayerData[playerid][pDonatorTime] = gettime()+60*60*24*330;
		case 12: PlayerData[playerid][pDonatorTime] = gettime()+60*60*24*360;
		default: PlayerData[playerid][pDonatorTime] = gettime()+60*60*24*1000;
	}
    if (level > PlayerData[userid][pDonator])
	{
	    SendAdminAction(playerid, "Kamu telah mengatur level donator %s menjadi %d selama %d bulan.", ReturnName(userid, 0), level, bulan);
	    SendAdminAction(userid, "%s telah menetapkan level donatormu menjadi %d selama %d bulan.", ReturnName(playerid, 0), level, bulan);
	}
	else
	{
	    SendAdminAction(playerid, "Kamu telah mengatur level donator %s menjadi %d selama %d bulan.", ReturnName(userid, 0), level, bulan);
     	SendAdminAction(userid, "%s telah menetapkan level donatormu menjadi %d selama %d bulan.", ReturnName(playerid, 0), level, bulan);
	}
	PlayerData[userid][pDonator] = level;
 	Log_Write("logs/donator_log.txt", "[%s] %s telah mengatur level donator %s menjadi %d selama %d bulan.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), level, bulan);
	return 1;
}

CMD:a(playerid, params[])
{
	if (!PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Kamu bukan seorang admin.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/a [admin text]");

    SendAdminAlert(0xF50E4EFF, "[ADMIN CHAT] %s %s: %s", AdminRankName(playerid), ReturnName(playerid, 0), params);
	return 1;
}


CMD:h(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1)
	    return SendErrorMessage(playerid, "Kamu bukan seorang helper.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/h [Tesk helper]");

    SendHelperMessage(COLOR_NEWGREEN, "[HELPER CHAT] %s %s: %s", HelperRankName(playerid), ReturnName(playerid, 0), params);
	return 1;
}



CMD:togevent(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (g_StatusEvent)
	{
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah mengaktifkan mode event.", PlayerData[playerid][pForumName]);
	    g_StatusEvent = false;
		new string[120];
	 	format( string, sizeof(string), "EVENT MODE ~n~ /joinevent untuk mengikuti");
    	GameTextForAll(string, 5000, 1 );
	}
	else
	{

    	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menonaktifkan mode event.", PlayerData[playerid][pForumName]);
	    g_StatusEvent = true;
	}
	return 1;
}

CMD:endevent(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	foreach (new i : Player)
	{
    	 if(PlayerData[i][pEventDuty] == 1)
		 {
      				new string[64];

					SendClientMessageToAllEx(COLOR_RED, "[OOC EVENT]: %s Telah keluar dari event. ", ReturnName(i, 0), params);
					SetPlayerSkin(i, GetPVarInt(playerid, "LastSkin"));
					SetPlayerPos(i, 1529.6,-1691.2,13.3);
					SetPlayerVirtualWorld(i, 0);
					SetPlayerInterior(i, 0);
					PlayerData[i][pInjured] = 0;
					PlayerData[i][pBleeding] = 0;
                    Delete3DTextLabel(event[i]);
					ClearAnimations(i);
					TextDrawHideForPlayer(i, gServerTextdraws[2]);
					TextDrawHideForPlayer(i, Textdraw37);
					SetPlayerHealth(i, 100);
					SetPlayerArmour(i, 0);
					PlayerData[i][pEventDuty] = 0;
	                SetPlayerColor(i, COLOR_WHITE);
				 	format( string, sizeof(string), "Terimakasih %s Telah Mengikuti event", ReturnName(i, 0));
			    	GameTextForPlayer(i, string, 5000, 4 );
		 }
	}
	return 1;
}

CMD:joinevent(playerid, params[]) // ubah
{
		if (!g_StatusEvent)
			{
			if(PlayerData[playerid][pEventDuty] == 0)
				{
    				new string[64];
    				new Float:X, Float:Y, Float:Z;
    				GetPlayerPos( playerid, X, Y, Z );
					SendClientMessageToAllEx(COLOR_RED, "[OOC EVENT]: %s Telah memasuki event", ReturnName(playerid, 0), params);
					SetPVarInt(playerid, "LastSkin", GetPlayerSkin(playerid));
					event[playerid] = Create3DTextLabel("[EVENT MODE]", COLOR_RED,30.0,40.0,50.0,40.0,0);
					Attach3DTextLabelToPlayer(event[playerid], playerid, 0.0, 0.0, 0.5);
					SetPlayerSkin(playerid, 16);
					PlayerData[playerid][pEventDuty] = 1;
					SetPlayerPos(playerid, 1529.6,-1691.2,13.3);
					SetPlayerVirtualWorld(playerid, 999);
					SetPlayerInterior(playerid, 0);
					SetPlayerHealth(playerid, 100);
					SetPlayerArmour(playerid, 100);
	                SetPlayerColor(playerid, COLOR_YELLOW);
				 	format( string, sizeof(string), "EVENT MODE ~n~ /joinevent untuk keluar");
			    	GameTextForPlayer(playerid, string, 9000, 4 );
				}
				else
				{
    				new string[64];
					SendClientMessageToAllEx(COLOR_RED, "[OOC EVENT]: %s Telah keluar dari event. ", ReturnName(playerid, 0), params);
					SetPlayerSkin(playerid, GetPVarInt(playerid, "LastSkin"));
					SetPlayerPos(playerid, 1529.6,-1691.2,13.3);
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerInterior(playerid, 0);
					PlayerData[playerid][pInjured] = 0;
					PlayerData[playerid][pBleeding] = 0;
                    Delete3DTextLabel(event[playerid]);
					ClearAnimations(playerid);
					TextDrawHideForPlayer(playerid, gServerTextdraws[2]);
					TextDrawHideForPlayer(playerid, Textdraw37);
					SetPlayerHealth(playerid, 100);
					SetPlayerArmour(playerid, 0);
					PlayerData[playerid][pEventDuty] = 0;
	                SetPlayerColor(playerid, COLOR_WHITE);
				 	format( string, sizeof(string), "Terimakasih %s Telah Mengikuti event", ReturnName(playerid, 0));
			    	GameTextForPlayer(playerid, string, 5000, 4 );

				}
			}
		else
		{
		SendErrorMessage(playerid, "Administrator telah menonaktifkan mode event");
		}
	return 1;
}

// Event System Started by Lilx9.
CMD:event(playerid, params[]) //buat perintah event.
{
	if(isnull(params)) //pengganti sscanf karena cuma 1 doang.
	{
		if(PlayerData[playerid][pAdmin] >= 8) //kalau player admin.
		{
			SendSyntaxMessage(playerid, "/event [create/join/start/stop]");
			SendSyntaxMessage(playerid, "Ketikkan perintah tersebut ketika ingin hendak membuat event!");
		}
		else // kalau bukan admin.
		{
		    SendServerMessage(playerid, "Comming Soon!");
			//SendSyntaxMessage(playerid, "/event [join]");
			//SendSyntaxMessage(playerid, "Ketikkan perintah tersebut ketika ingin join event!");
		}
	}
	if (!strcmp(params, "create", true)) //klo misalkan terdeteksi ada kata create di params.
	{
		if(PlayerData[playerid][pAdmin] < 8) //cek lagi kalau player adalah admin yang levelnya dari 4.
			return SendErrorMessage(playerid, "Comming soon!.");

		Dialog_Show(playerid, MenuEvent, DIALOG_STYLE_LIST,  "Event Control Panel", "Event Name\nEvent Mode\nEvent Status\nAnnounce Event!", "Okay", "Close");
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: Administrator %s sepertinya akan membuat event", PlayerData[playerid][pForumName]);
	}
	if(!strcmp(params, "join", true)) //klo misalkan terdeteksi ada kata join di params.
	{
		if(EventData[StatusEvent] || EventSetup[playerid] == 1) //cek lagi kalau status event terbuka untuk umum.
		{
			if(PlayerData[playerid][pEventDuty] != 1) //cek lagi kalau player lagi ga ngikut event sama sekali.
			{
				//akan mengeksekusi pesan, menyimpan data skin sama color, tambahan di text 3d dikepala.
				SendClientMessageToAllEx(COLOR_RED, "[%s EVENT]: %s Telah memasuki event", ReturnName(playerid, 0), params);
				SetPVarInt(playerid, "LastSkin", GetPlayerSkin(playerid)); //save player variable skin!.
				SetPVarInt(playerid, "LastColor", GetPlayerColor(playerid)); //save player variable color!.

				PlayerData[playerid][pEventDuty] = 1; //toggle Event Duty

				//kalau event mode nya Team Deathmatch
				if(EventData[EventMode] == 1)
				{
					switch(random(2)) //spawn ngacak dan bakal kepilih mau di tim red atau blue!.
					{
						case 1:
						{
							SetPlayerSkin(playerid, EventData[EventSkinBlue]);
							SetPlayerPos(playerid, EventData[EventPosBlue][0], EventData[EventPosBlue][1], EventData[EventPosBlue][2]);
							SetPlayerHealth(playerid, EventData[EventHealth]);
							SetPlayerArmour(playerid, EventData[EventArmor]);
							SetPlayerFacingAngle(playerid, EventData[EventPosBlue][3]);
							EventData[PlayerInfo] = Create3DTextLabel("[Blue Team]", COLOR_RED,30.0,40.0,50.0,40.0,0);
							Attach3DTextLabelToPlayer(EventData[PlayerInfo], playerid, 0.0, 0.0, 0.5);
							SetPlayerColor(playerid, COLOR_BLUE);
							EventTeam[playerid][blue] = true;
						}
						default:
						{
							SetPlayerSkin(playerid, EventData[EventSkinRed]);
							SetPlayerPos(playerid, EventData[EventPosRed][0], EventData[EventPosRed][1], EventData[EventPosRed][2]);
							SetPlayerHealth(playerid, EventData[EventHealth]);
							SetPlayerArmour(playerid, EventData[EventArmor]);
							SetPlayerFacingAngle(playerid, EventData[EventPosRed][3]);
							EventData[PlayerInfo] = Create3DTextLabel("[Red Team]", COLOR_RED,30.0,40.0,50.0,40.0,0);
							Attach3DTextLabelToPlayer(EventData[PlayerInfo], playerid, 0.0, 0.0, 0.5);
							SetPlayerColor(playerid, COLOR_RED);
							EventTeam[playerid][red] = true;
						}
					}
				}
				else //kalau bukan.
				{
				    //set di tempat yang sama!.
					SetPlayerSkin(playerid, EventData[EventSkin]);
					SetPlayerPos(playerid, EventData[EventPos][0], EventData[EventPos][1], EventData[EventPos][2]);
					SetPlayerHealth(playerid, EventData[EventHealth]);
					SetPlayerArmour(playerid, EventData[EventArmor]);
					SetPlayerFacingAngle(playerid, EventData[EventPosRed][3]);
				}
			}
			else SendErrorMessage(playerid, "Kamu sudah berada didalam sebuah event!"); //klo udah ada di event kasih tau.
		}
		else SendErrorMessage(playerid, "Kamu tidak bisa mengikuti event yang sedang berjalan!"); //kalau dah mulai eventnya kasih tau.
	}
	if(!strcmp(params, "stop", true)) //klo misalkan terdeteksi adanya kata stop di params.
	{
		static //deklarasikan variabel static karena hanya dipakai sementara.
			reason[32];

		if(PlayerData[playerid][pAdmin] < 8)
			return SendServerMessage(playerid, "Comming Soon!.");

		if(sscanf(params, "s[32]", reason)) // Kalau sscanf gaada kata tambahan yaitu reason!
			return SendSyntaxMessage(playerid, "/event [stop] [reason]");

		if(strlen(reason) > 32) // Kalau reason kurang dari 32 kata
			return SendErrorMessage(playerid, "Alasan kamu menghentikan event tidak boleh lebih dari 32 karakter");


		foreach(new i : Player) // Cek semua player!
		{
			if(PlayerData[i][pEventDuty] != 0) // Kalau lagi pada di event duty.
			{
			    //Kasih tau player, teleport semua ke tempat asalnya!.
				SendClientMessageToAllEx(COLOR_RED, "[%s EVENT] Event dihentikan oleh Administrator %s karena %s", EventData[EventMode], PlayerData[playerid][pForumName], reason);
				SetPlayerSkin(i, GetPVarInt(i, "LastSkin"));
				SetPlayerPos(i, PlayerData[i][pPos][0], PlayerData[i][pPos][1], PlayerData[i][pPos][2]);
				SetPlayerVirtualWorld(i, PlayerData[i][pWorld]);
				SetPlayerInterior(i, PlayerData[i][pInterior]);
				PlayerData[i][pInjured] = 0;
				PlayerData[i][pBleeding] = 0;
				Delete3DTextLabel(EventData[PlayerInfo]);
	        	ClearAnimations(i);
				TextDrawHideForPlayer(i, gServerTextdraws[2]);
				TextDrawHideForPlayer(i, Textdraw37);
				SetPlayerHealth(i, 100);
				SetPlayerArmour(i, 0);
				PlayerData[i][pEventDuty] = 0;
				SetPlayerColor(i, GetPVarInt(i, "LastColor"));
				SendServerMessage(i, "Terimakasih %s Telah Mengikuti event", ReturnName(i, 0));
				EventData[StatusEvent] = false;
			}
			else return 0; // Kalau ngga, script gaakan di eksekusi!.
		}
	}
	return 1; //return sukses!.
}
CMD:confirmpos(playerid, params[]) //confirmpos hanya bisa dipakai disaat tertentu saja!
{
	new // Deklarasikan semua float.
		Float:x,
		Float:y,
		Float:z,
		Float:a,
		int,
		vw;

	if(AllowCMD[playerid] != 1) //Kalau AllowCMD tidak valid..
		return SendClientMessage(playerid, 0xFFFFFFFF, "[SERVER] {8CED15}Maaf command tidak diketahui. Ketik {FFFFFF}/help {8CED15}untuk melihat list command.");

	if(EventData[EventMode] == 1) // Kalau event mode type Team Deathmatch
	{
		if(!isnull(params)) // Kalau params nya ga kosong.
		{
			if(!strcmp(params, "red", true)) // Kalau ada kata params red!
			{
				GetPlayerPos(playerid, x, y, z); // Get Player Posisi
				GetPlayerFacingAngle(playerid, a); // Get posisi arah pandang.
				int = GetPlayerInterior(playerid); // Get player interior.
				vw = GetPlayerVirtualWorld(playerid); // Get Player Virtual.

   				// Save Variale
				EventData[EventPosRed][0] = x;
				EventData[EventPosRed][1] = y;
				EventData[EventPosRed][2] = z;
				EventData[EventPosRed][3] = a;
				EventData[EventInterior] = int;
				EventData[EventVirtual] = vw;

				// Lanjut ke tim blue!
				SendServerMessage(playerid, "Carilah lokasi untuk tim blue, kemudian ketikkan perintah /confirmpos [blue]");
			}
			if(!strcmp(params, "blue", true)) // Kalau di params kedetek kata blue
			{
				GetPlayerPos(playerid, x, y, z); // Get Player Posisi
				GetPlayerFacingAngle(playerid, a); // Get posisi arah pandang.
				int = GetPlayerInterior(playerid); // Get player interior.
				vw = GetPlayerVirtualWorld(playerid); // Get Player Virtual.

   				// Save Variale
				EventData[EventPosBlue][0] = x;
				EventData[EventPosBlue][1] = y;
				EventData[EventPosBlue][2] = z;
				EventData[EventPosBlue][3] = a;
				EventData[EventInterior] = int;
				EventData[EventVirtual] = vw;
				
				// Toggle ke false biar nanti gaada yang bisa make!
				AllowCMD[playerid] = 0;
				SendServerMessage(playerid, "Sukses menyimpan data posisi player!");
				Dialog_Show(playerid, EventEditor, DIALOG_STYLE_LIST, "Event Editor", "Player Health\nPlayer Armor\nPlayer Gun\nPlayer Position", "Oke", "");
			}
		}
		else SendErrorMessage(playerid, "/confirmpos [red/blue]"); // Kasih tau player cmdnya gimana!.
	}
	else
	{
		if(!isnull(params)) // Kalau params nya ga kosong.
		{
			if(!strcmp(params, "player", true))
			{
				GetPlayerPos(playerid, x, y, z); // Get Player Posisi
				GetPlayerFacingAngle(playerid, a); // Get posisi arah pandang.
				int = GetPlayerInterior(playerid); // Get player interior.
				vw = GetPlayerVirtualWorld(playerid); // Get Player Virtual.

   				// Save Variale
				EventData[EventPos][0] = x;
				EventData[EventPos][1] = y;
				EventData[EventPos][2] = z;
				EventData[EventPos][3] = a;
				EventData[EventInterior] = int;
				EventData[EventVirtual] = vw;

				// Toggle ke false biar nanti gaada yang bisa make!
				AllowCMD[playerid] = false;
				SendServerMessage(playerid, "Sukses menyimpan data posisi player!");
				Dialog_Show(playerid, EventEditor, DIALOG_STYLE_LIST, "Event Editor", "Player Health\nPlayer Armor\nPlayer Gun\nPlayer Position", "Oke", "");
			}
		}
		else SendErrorMessage(playerid, "/confirmpos [player]"); // Kasih tau player cmdnya gimana!.
	}
	return 1;
}
Dialog:MenuEvent(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
		EventData[EventName][0] = '\0';
		EventData[EventMode] = 0;
		EventData[EventModeName][0] = '\0';
		EventData[EventHealth] = 0;
		EventData[EventArmor] = 0;
		EventData[EventGun1] = 0;
 		EventData[EventGun2] = 0;
  		EventData[EventGun3] = 0;
		EventData[EventScore] = 0;
		EventData[TeamRedScore] = 0;
		EventData[TeamRedScore] = 0;
		EventData[EventMoney] = 0;
		EventData[EventSkin] = 0;
		EventData[EventSkinRed] = 0;
		EventData[EventSkinBlue] = 0;
		EventData[EventLMS] = 0;
		EventData[EventPos][0] = 0;
 		EventData[EventPos][1] = 0;
  		EventData[EventPos][2] = 0;
   		EventData[EventPos][3] = 0;
		EventData[EventPosRed][0] = 0;
 		EventData[EventPosRed][1] = 0;
  		EventData[EventPosRed][2] = 0;
   		EventData[EventPosRed][3] = 0;
		EventData[EventPosBlue][0] = 0;
  		EventData[EventPosBlue][1] = 0;
  		EventData[EventPosBlue][2] = 0;
  		EventData[EventPosBlue][3] = 0;
		EventData[EventInterior] = 0;
		EventData[EventVirtual] = 0;
		EventData[StatusEvent] = false;
		SendServerMessage(playerid, "Kamu membatalkan pembuatan event!");
	}
	else
	{
		switch(listitem)
		{
			case 1: Dialog_Show(playerid, ModeEvent, DIALOG_STYLE_LIST, "Event Mode", "Team Deathmatch\nDeathmatch\nDerby\nLast Man Standing\nBattle Royale (Comming Soon)", "Oke", "Kembali");
			case 2: Dialog_Show(playerid, StatusEvent, DIALOG_STYLE_MSGBOX, "Event Status", "Klik salah satu dibawah ini", "Buka", "Tutup");
			case 3: Dialog_Show(playerid, EventEditor, DIALOG_STYLE_LIST, "Event Editor", "Player Health\nPlayer Armor\nPlayer Gun\nPlayer Position", "Oke", "");
			case 4: Dialog_Show(playerid, LaunchEvent, DIALOG_STYLE_MSGBOX, "Event Announcement", "Sukses memberitahukan event ke semua pemain", "Oke", "");
			default: Dialog_Show(playerid, NamaEvent, DIALOG_STYLE_INPUT, "Event Name", "Masukkan nama event yang akan kamu buat.", "Oke", "Kembali");
		}
	}
	return 1;
}

Dialog:NamaEvent(playerid, response, listitem, inputtext[])
{
	if(!response)
		return Dialog_Show(playerid, MenuEvent, DIALOG_STYLE_LIST,  "Event Control Panel", "Event Name\nEvent Mode\nEvent Status\nAnnounce Event!", "Oke", "Kembali");

	if(strlen(inputtext) > 52)
	{
		SendErrorMessage(playerid, "Nama event tidak boleh lebih dari 52 kata!");
		Dialog_Show(playerid, NamaEvent, DIALOG_STYLE_INPUT, "Event Name", "Masukkan nama event yang akan kamu buat.", "Oke", "");
	}
	else if(isnull(inputtext))
	{
		SendErrorMessage(playerid, "Nama event wajib diisi!");
		Dialog_Show(playerid, NamaEvent, DIALOG_STYLE_INPUT, "Event Name", "Masukkan nama event yang akan kamu buat.", "Oke", "");
	}
	else
	{
		strcat(EventData[EventName], inputtext);
		SendServerMessage(playerid, "Sukses membuat nama event!");
		Dialog_Show(playerid, MenuEvent, DIALOG_STYLE_LIST, "Event Control Panel", "Event Name\nEvent Mode\nEvent Status\nAnnounce Event!", "Oke", "Kembali");
	}
	return 1;
}
Dialog:EventMode(playerid, response, listitem, inputtext[])
{
	if(!response)
		return Dialog_Show(playerid, MenuEvent, DIALOG_STYLE_LIST, "Event Control Panel", "Event Name\nEvent Mode\nEvent Status\nAnnounce Event!", "Okay", "Kembali");

	switch(listitem)
	{
		case 1:
		{
			SendServerMessage(playerid, "Kamu telah menganti mode event menjadi %s", inputtext);
			EventData[EventMode] = 2;
			strcat(EventData[EventModeName], inputtext);
			Dialog_Show(playerid, MenuEvent, DIALOG_STYLE_LIST, "Event Control Panel", "Event Name\nEvent Mode\nEvent Status\nAnnounce Event!", "Oke", "Kembali");
		}
		case 2:
		{
			SendServerMessage(playerid, "Akan segera hadir sesaat lagi!");
			Dialog_Show(playerid, MenuEvent, DIALOG_STYLE_LIST, "Event Control Panel", "Event Name\nEvent Mode\nEvent Status\nAnnounce Event!", "Oke", "Kembali");
		}
		case 3:
		{
			SendServerMessage(playerid, "Kamu telah menganti mode event menjadi %s", inputtext);
			EventData[EventMode] = 4;
			strcat(EventData[EventModeName], inputtext);
			Dialog_Show(playerid, MenuEvent, DIALOG_STYLE_LIST, "Event Control Panel", "Event Name\nEvent Mode\nEvent Status\nAnnounce Event!", "Oke", "Kembali");
		}
		case 4:
		{
			SendServerMessage(playerid, "Akan segera hadir sesaat lagi!");
			Dialog_Show(playerid, MenuEvent, DIALOG_STYLE_LIST, "Event Control Panel", "Event Name\nEvent Mode\nEvent Status\nAnnounce Event!", "Oke", "Kembali");
		}
		default:
		{
			SendServerMessage(playerid, "Kamu telah menganti mode event menjadi %s", inputtext);
			EventData[EventMode] = 1;
			strcat(EventData[EventModeName], inputtext);
			Dialog_Show(playerid, MenuEvent, DIALOG_STYLE_LIST, "Event Control Panel", "Event Name\nEvent Mode\nEvent Status\nAnnounce Event!", "Oke", "Kembali");
		}
	}
	return 1;
}

Dialog:EventStatus(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
		SendServerMessage(playerid, "Berhasil mengubah status event menjadi terkunci");
		EventData[StatusEvent] = false;
		Dialog_Show(playerid, MenuEvent, DIALOG_STYLE_LIST, "Event Control Panel", "Event Name\nEvent Mode\nEvent Status\nAnnounce Event!", "Oke", "Kembali");
	}
	else
	{
		SendServerMessage(playerid, "Berhasil mengubah status event menjadi terbuka");
		EventData[StatusEvent] = true;
		Dialog_Show(playerid, MenuEvent, DIALOG_STYLE_LIST, "Event Control Panel", "Event Name\nEvent Mode\nEvent Status\nEvent Editor\nAnnounce Event!", "Oke", "Kembali");
	}
	return 1;
}

Dialog:EventEditor(playerid, response, listitem, inputtext[])
{
	if(!response)
		return Dialog_Show(playerid, MenuEvent, DIALOG_STYLE_LIST, "Event Control Panel", "Event Name\nEvent Mode\nEvent Status\nEvent Editor\nAnnounce Event!", "Oke", "Kembali");

	switch(listitem)
	{
		case 1: Dialog_Show(playerid, EventArmor, DIALOG_STYLE_INPUT, "Event Armor", "Isikan nominal armor minimal player!", "Oke", "");
		case 2: Dialog_Show(playerid, EventGun1, DIALOG_STYLE_INPUT, "Event Gun #1", "Isikan nominal senjata untuk player!", "Oke", "");
		case 3:
		{
			SendServerMessage(playerid, "Ketik /confirmpos untuk mententukan posisi tim!");
			AllowCMD[playerid] = 1;
		}
		default: Dialog_Show(playerid, EventHealth, DIALOG_STYLE_INPUT, "Event Health", "Isikan nominal darah minimal player!", "Oke", "");
	}
	return 1;
}

Dialog:EventHealth(playerid, response, listitem, inputtext[])
{
	if(!response)
		return Dialog_Show(playerid, EventEditor, DIALOG_STYLE_LIST, "Event Editor", "Player Health\nPlayer Armor\nPlayer Gun\nPlayer Position", "Oke", "Kembali");

	if((strval(inputtext) < 10 && strval(inputtext) > 150) || isnull(inputtext))
	{
		SendErrorMessage(playerid, "Masukkan nominal darah minimal 10 sampai 150!");
		Dialog_Show(playerid, EventHealth, DIALOG_STYLE_INPUT, "Event Health", "Isikan nominal darah minimal player!", "Oke", "");
	}
	else
	{
		EventData[EventHealth] = strval(inputtext);
		SendServerMessage(playerid, "Sukses mengatur darah player!");
		Dialog_Show(playerid, EventEditor, DIALOG_STYLE_LIST, "Event Editor", "Player Health\nPlayer Armor\nPlayer Gun\nPlayer Position", "Oke", "Kembali");
	}
	return 1;
}

Dialog:EventArmor(playerid, response, listitem, inputtext[])
{
	if(!response)
		return Dialog_Show(playerid, EventEditor, DIALOG_STYLE_LIST, "Event Editor", "Player Health\nPlayer Armor\nPlayer Gun\nPlayer Position", "Oke", "Kembali");

	if((strval(inputtext) < 10 && strval(inputtext) > 150) || isnull(inputtext))
	{
		SendErrorMessage(playerid, "Masukkan nominal darah minimal 10 sampai 150!");
		Dialog_Show(playerid, EventHealth, DIALOG_STYLE_INPUT, "Event Health", "Isikan nominal darah minimal player!", "Oke", "");
	}
	else
	{
		EventData[EventArmor] = strval(inputtext);
		SendServerMessage(playerid, "Sukses mengatur armor player!");
		Dialog_Show(playerid, EventEditor, DIALOG_STYLE_LIST, "Event Editor", "Player Health\nPlayer Armor\nPlayer Gun\nPlayer Position", "Oke", "Kembali");
	}
	return 1;
}
Dialog:EventGun1(playerid, response, listitem, inputtext[])
{
	if(!response)
		return Dialog_Show(playerid, EventEditor, DIALOG_STYLE_LIST, "Event Editor", "Player Health\nPlayer Armor\nPlayer Gun\nPlayer Position", "Oke", "Kembali");

	if (1 <= strval(inputtext) <= 46)
	{
		EventData[EventGun2] = strval(inputtext);
		Dialog_Show(playerid, EventGun3, DIALOG_STYLE_INPUT, "Event Gun #2", "Isikan nominal senjata untuk player!", "Oke", "");
	}
	else
	{
		SendErrorMessage(playerid, "Masukkan model senjata yang valid!");
		Dialog_Show(playerid, EventGun3, DIALOG_STYLE_INPUT, "Event Gun #1", "Isikan nominal senjata untuk player!", "Oke", "");
	}
	return 1;
}

Dialog:EventGun2(playerid, response, listitem, inputtext[])
{
	if(!response)
		return Dialog_Show(playerid, EventGun1, DIALOG_STYLE_INPUT, "Event Gun #1", "Isikan nominal senjata untuk player!", "Oke", "");

	if (1 <= strval(inputtext) <= 46)
	{
		EventData[EventGun2] = strval(inputtext);
		Dialog_Show(playerid, EventGun3, DIALOG_STYLE_INPUT, "Event Gun #3", "Isikan nominal senjata untuk player!", "Oke", "");
	}
	else
	{
		SendErrorMessage(playerid, "Masukkan model senjata yang valid!");
		Dialog_Show(playerid, EventGun3, DIALOG_STYLE_INPUT, "Event Gun #2", "Isikan nominal senjata untuk player!", "Oke", "");
	}
	return 1;
}

Dialog:EventGun3(playerid, response, listitem, inputtext[])
{
	if(!response)
		return Dialog_Show(playerid, EventGun3, DIALOG_STYLE_INPUT, "Event Gun #3", "Isikan nominal senjata untuk player!", "Oke", "");

	if (1 <= strval(inputtext) <= 46)
	{
		EventData[EventGun3] = strval(inputtext);
		SendServerMessage(playerid, "Sukses mengatur senjata player!");
		Dialog_Show(playerid, EventEditor, DIALOG_STYLE_LIST, "Event Editor", "Player Health\nPlayer Armor\nPlayer Gun\nPlayer Position", "Oke", "Kembali");
	}
	else
	{
		SendErrorMessage(playerid, "Masukkan model senjata yang valid!");
		Dialog_Show(playerid, EventGun3, DIALOG_STYLE_INPUT, "Event Gun #3", "Isikan nominal senjata untuk player!", "Oke", "");
	}
	return 1;
}

Dialog:LaunchEvent(playerid, response, listitem, inputtext[])
{
	EventSetup[playerid] = 0;
	SendEventMessage(playerid, "Administrator %s telah membuka event %s dengan mode %s!", PlayerData[playerid][pForumName], EventData[EventName], EventData[EventModeName]);
	SendEventMessage(playerid, "ketik /event join untuk mengikuti event ini!.", EventData[EventMode], ReturnName(playerid, 0));
	return 1;
}

forward OnEventStarted(playerid);
public OnEventStarted(playerid)
{
	foreach(new i : Player)
	{
		if(PlayerData[playerid][pEventDuty] != 0)
		{
			for(new j = 0; j < 4; j++)
				return TextDrawShowForPlayer(playerid, EventTextDraws[i]);

			SetPlayerVirtualWorld(i, EventData[EventVirtual]);
			SetPlayerInterior(i, EventData[EventInterior]);

			GivePlayerWeapon(i, EventData[EventGun1], 2000);
			GivePlayerWeapon(i, EventData[EventGun2], 2000);
			GivePlayerWeapon(i, EventData[EventGun3], 2000);

			SendEventMessage(playerid, "%s Event has been Started!, GoGoGo!!!");
		}
		else return 0;
	}
	return 1;
}

//Fishing Steps
forward OnPlayerMancing(playerid);
public OnPlayerMancing(playerid)
{
    new fish = randomEx(1,5), str[128], moneybag = randomEx(10,200),string[128],fweight = randomEx(1,50);
    RemovePlayerAttachedObject(playerid,0);
    if(!IsPlayerInRangeOfPoint(playerid,3.0, FishingPosX[playerid],FishingPosY[playerid],FishingPosZ[playerid]))
	    return SendClientMessage(playerid, COLOR_ERROR,"You have moved from your fishing spot. You failed catching the fish");

	switch(fish)
	{
	    case 1: 
		{   
			str = "Umpan kamu {FF0000}terlepas {FFFFFF}saat mencoba untuk menangkap ikan.";
			PlayerData[playerid][pRod] = 0; 
		}
	    case 2:	
		{	
			format(string,sizeof(string),"Kamu telah mendapatkan tas yang berisi uang sejumlah: {FF0000}%i$", moneybag); 
			str = string; GiveMoney(playerid, moneybag); 
		}
		case 3: 
		{   
			FishData[playerid][FishName][FishData[playerid][FishList]] = GetFishSpecie();
			FishData[playerid][FishKG][FishData[playerid][FishList]] = fweight; 
			str = string;
			format(string,sizeof(string),"Kamu telah mendapatkan {FF0000}Ikan %s {FFFFFF}dengan berat mencapai {FF0000}%i {FFFFFF}kilograms", FishData[playerid][FishName][FishData[playerid][FishList]], FishData[playerid][FishKG][FishData[playerid][FishList]]); 
			FishData[playerid][FishList] += 1; 
		}
		case 4: str = "Kamu menarik pancingan untuk mencari tahu yang kamu dapatkan adalah {FF0000}Tidak ada!";
		case 5: str = "Kamu menarik pancingan untuk mencari tahu yang kamu dapatkan adalah {FF0000}Sepatu";
	}
	return SendFishingMessage(playerid, str);
}

stock LoadEventTextdraws()
{
	EventTextDraws[0] = TextDrawCreate(-0.483071, 163.166641, "box");
	TextDrawLetterSize(EventTextDraws[0], 0.000000, 9.953147);
	TextDrawTextSize(EventTextDraws[0], 127.000000, 0.000000);
	TextDrawAlignment(EventTextDraws[0], 1);
	TextDrawColor(EventTextDraws[0], -1);
	TextDrawUseBox(EventTextDraws[0], 1);
	TextDrawBoxColor(EventTextDraws[0], -5963680);
	TextDrawSetShadow(EventTextDraws[0], 0);
	TextDrawSetOutline(EventTextDraws[0], 0);
	TextDrawBackgroundColor(EventTextDraws[0], -5963664);
	TextDrawFont(EventTextDraws[0], 1);
	TextDrawSetProportional(EventTextDraws[0], 1);
	TextDrawSetShadow(EventTextDraws[0], 0);

	EventTextDraws[1] = TextDrawCreate(20.883575, 161.983245, "Statistik_Tim");
	TextDrawLetterSize(EventTextDraws[1], 0.400000, 1.600000);
	TextDrawAlignment(EventTextDraws[1], 1);
	TextDrawColor(EventTextDraws[1], -1);
	TextDrawSetShadow(EventTextDraws[1], 0);
	TextDrawSetOutline(EventTextDraws[1], 0);
	TextDrawBackgroundColor(EventTextDraws[1], 255);
	TextDrawFont(EventTextDraws[1], 1);
	TextDrawSetProportional(EventTextDraws[1], 1);
	TextDrawSetShadow(EventTextDraws[1], 0);

	EventTextDraws[2] = TextDrawCreate(5.439113, 189.133346, "Red: ~w~00");
	TextDrawLetterSize(EventTextDraws[2], 0.435607, 1.833331);
	TextDrawAlignment(EventTextDraws[2], 1);
	TextDrawColor(EventTextDraws[2], -16776961);
	TextDrawSetShadow(EventTextDraws[2], 0);
	TextDrawSetOutline(EventTextDraws[2], 0);
	TextDrawBackgroundColor(EventTextDraws[2], 255);
	TextDrawFont(EventTextDraws[2], 1);
	TextDrawSetProportional(EventTextDraws[2], 1);
	TextDrawSetShadow(EventTextDraws[2], 0);

	EventTextDraws[3] = TextDrawCreate(5.307634, 218.083297, "Blue: ~w~00");
	TextDrawLetterSize(EventTextDraws[3], 0.435607, 1.833331);
	TextDrawAlignment(EventTextDraws[3], 1);
	TextDrawColor(EventTextDraws[3], 65535);
	TextDrawSetShadow(EventTextDraws[3], 0);
	TextDrawSetOutline(EventTextDraws[3], 0);
	TextDrawBackgroundColor(EventTextDraws[3], 255);
	TextDrawFont(EventTextDraws[3], 1);
	TextDrawSetProportional(EventTextDraws[3], 1);
	TextDrawSetShadow(EventTextDraws[3], 0);
	return 1;
}

//Fishing system!
stock GetFishSpecie()
{
	new fishspecie = randomEx(0,10), strz[64];
    switch(fishspecie)
	{
	    case 0: strz = "Tuna";
	    case 1: strz = "Kakap";
	    case 2: strz = "Marlin";
	    case 3: strz = "Bass";
	    case 4: strz = "Silverfish";
	    case 5: strz = "Catfish";
	    case 6: strz = "Black Tetra";
	    case 7: strz = "Black Dragonfish";
	    case 8: strz = "Swordfish";
	    case 9: strz = "Boga";
	    case 10: strz = "Arwana";
	}
	return str;
}
stock randomEx(minnum = cellmin, maxnum = cellmax) return random(maxnum - minnum + 1) + minnum;

stock OnEventFinished(playerid, eventmode)
{
	switch(eventmode)
	{
		case 1:
		{
			SendClientMessageToAllEx(COLOR_RED, "[%s EVENT]: %s Telah keluar dari event.", EventData[EventMode], ReturnName(playerid, 0));
			SetPlayerSkin(playerid, GetPVarInt(playerid, "LastSkin"));
			SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
			SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
			SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);

			PlayerData[playerid][pInjured] = 0;
			PlayerData[playerid][pBleeding] = 0;

			Delete3DTextLabel(EventData[PlayerInfo]);
			ClearAnimations(playerid);
			TextDrawHideForPlayer(playerid, gServerTextdraws[2]);
			TextDrawHideForPlayer(playerid, Textdraw37);
			SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);

			SetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]);
			PlayerData[playerid][pEventDuty] = 0;
			SetPlayerColor(playerid, GetPVarInt(playerid, "LastColor"));
			SendServerMessage(playerid, "Event telah berakhir, dan kamu mendapatkan $%s", EventData[EventMoney]);
			PlayerData[playerid][pMoney] += EventData[EventMoney];
			SetPlayerMoney(playerid, PlayerData[playerid][pMoney]);
		}
		case 2:
		{
			SendClientMessageToAllEx(COLOR_RED, "[%s EVENT]: %s Telah keluar dari event.", EventData[EventMode], ReturnName(playerid, 0));
			SetPlayerSkin(playerid, GetPVarInt(playerid, "LastSkin"));
			SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
			SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
			SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);

			PlayerData[playerid][pInjured] = 0;
			PlayerData[playerid][pBleeding] = 0;

			Delete3DTextLabel(EventData[PlayerInfo]);
			ClearAnimations(playerid);
			TextDrawHideForPlayer(playerid, gServerTextdraws[2]);
			TextDrawHideForPlayer(playerid, Textdraw37);
			SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);

			SetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]);
			PlayerData[playerid][pEventDuty] = 0;
			SetPlayerColor(playerid, GetPVarInt(playerid, "LastColor"));
			SendServerMessage(playerid, "Event telah berakhir, dan kamu mendapatkan %s", FormatNumber(EventData[EventMoney]));
			PlayerData[playerid][pMoney] += EventData[EventMoney];
			SetPlayerMoney(playerid, PlayerData[playerid][pMoney]);
		}
		case 3: //unused
		{
			SendClientMessageToAllEx(COLOR_RED, "[%s EVENT]: %s Telah keluar dari event.", EventData[EventMode], ReturnName(playerid, 0));
			SetPlayerSkin(playerid, GetPVarInt(playerid, "LastSkin"));
			SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
			SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
			SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);

			PlayerData[playerid][pInjured] = 0;
			PlayerData[playerid][pBleeding] = 0;

			Delete3DTextLabel(EventData[PlayerInfo]);
			ClearAnimations(playerid);
			TextDrawHideForPlayer(playerid, gServerTextdraws[2]);
			TextDrawHideForPlayer(playerid, Textdraw37);
			SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);

			SetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]);
			PlayerData[playerid][pEventDuty] = 0;
			SetPlayerColor(playerid, GetPVarInt(playerid, "LastColor"));
			SendServerMessage(playerid, "Event telah berakhir, dan kamu mendapatkan %s", FormatNumber(EventData[EventMoney]));
			PlayerData[playerid][pMoney] += EventData[EventMoney];
			SetPlayerMoney(playerid, PlayerData[playerid][pMoney]);
		}
		case 4:
		{
			SetPlayerSkin(playerid, GetPVarInt(playerid, "LastSkin"));
			SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
			SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
			SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);

			PlayerData[playerid][pInjured] = 0;
			PlayerData[playerid][pBleeding] = 0;

			Delete3DTextLabel(EventData[PlayerInfo]);
			ClearAnimations(playerid);
			TextDrawHideForPlayer(playerid, gServerTextdraws[2]);
			TextDrawHideForPlayer(playerid, Textdraw37);
			SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);

			SetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]);
			PlayerData[playerid][pEventDuty] = 0;
			SetPlayerColor(playerid, GetPVarInt(playerid, "LastColor"));
			SendServerMessage(playerid, "Event telah berakhir, dan kamu mendapatkan %s", FormatNumber(EventData[EventMoney]));
			PlayerData[playerid][pMoney] += EventData[EventMoney];
			SetPlayerMoney(playerid, PlayerData[playerid][pMoney]);
		}
		case 99:
		{
			SendClientMessageToAllEx(COLOR_RED, "[%s EVENT]: %s Telah keluar dari event.", EventData[EventMode], ReturnName(playerid, 0));
			SetPlayerSkin(playerid, GetPVarInt(playerid, "LastSkin"));
			SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
			SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
			SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);

			PlayerData[playerid][pInjured] = 0;
			PlayerData[playerid][pBleeding] = 0;

			Delete3DTextLabel(EventData[PlayerInfo]);
			ClearAnimations(playerid);
			TextDrawHideForPlayer(playerid, gServerTextdraws[2]);
			TextDrawHideForPlayer(playerid, Textdraw37);
			SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);

			SetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]);
			PlayerData[playerid][pEventDuty] = 0;
			SetPlayerColor(playerid, GetPVarInt(playerid, "LastColor"));
			for(new j = 0; j < 4; j++) TextDrawHideForPlayer(playerid, EventTextDraws[j]);
		}
  		default:
		{
			SendClientMessageToAllEx(COLOR_RED, "[%s EVENT]: %s Telah keluar dari event.", EventData[EventMode], ReturnName(playerid, 0));
			SetPlayerSkin(playerid, GetPVarInt(playerid, "LastSkin"));
			SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
			SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
			SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);

			PlayerData[playerid][pInjured] = 0;
			PlayerData[playerid][pBleeding] = 0;

			Delete3DTextLabel(EventData[PlayerInfo]);
			ClearAnimations(playerid);
			TextDrawHideForPlayer(playerid, gServerTextdraws[2]);
			TextDrawHideForPlayer(playerid, Textdraw37);
			SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);

			SetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]);
			PlayerData[playerid][pEventDuty] = 0;
			SetPlayerColor(playerid, GetPVarInt(playerid, "LastColor"));
			SendServerMessage(playerid, "Event masih berlanjut, dan kamu dikeluarkan paksa karena menggunakan program illegal!");
		}
	}
	return 1;
}

CMD:aduty(playerid, params[])
{
	new
	    emel = PlayerData[playerid][pCharacter] - 1;

	if(PlayerData[playerid][pAdmin] >= 1)
	{
		//new oldname[MAX_PLAYER_NAME];
		if(PlayerData[playerid][pAdminDuty] == 0)
		{
			SendClientMessageToAllEx(COLOR_RED, "[ADMIN]: %s sedang bertugas. silahkan gunakan /report untuk meminta bantuan", PlayerData[playerid][pForumName], params);
			SetPVarInt(playerid, "LastSkin", GetPlayerSkin(playerid));
			PlayerData[playerid][pClothesType] = 1;
    		ShowModelSelectionMenu(playerid, "ADMIN SKIN", MODEL_SELECTION_ADMINCLOTHES, g_hAdminSkins, sizeof(g_hAdminSkins), -16.0, 0.0, -55.0);
			PlayerData[playerid][pAdminDuty] = 1;
			SetPlayerName(playerid, PlayerData[playerid][pForumName]);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, 100);
   			SetPlayerColor(playerid, COLOR_RED);
		}
		else
		{
			SetPlayerName(playerid, PlayerCharacters[playerid][emel]);
			SendClientMessageToAllEx(COLOR_RED, "[ADMIN]: %s sedang tidak bertugas. ", PlayerData[playerid][pForumName], params);
			SetPlayerSkin(playerid, GetPVarInt(playerid, "LastSkin"));
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, 0);
			PlayerData[playerid][pAdminDuty] = 0;
	   	    SetPlayerColor(playerid, COLOR_WHITE);
       }
   }
  return 1;
}

CMD:ahelp(playerid, params[])
{
	if (!PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Kamu bukan seorang admin.");
	if (PlayerData[playerid][pAdmin] >= 1)
	{
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Admin level 1]:{FFFFFF} /a /sendto(ls,sf,bank,bay,RC,mall,flint) /aremovecall /reports /ar /dr /spectate /jail /unjail /slap /kick .");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Admin level 1]:{FFFFFF} /aduty /assistances /assist /endassistance /ac /mute /unmute /freeze /unfreeze /revive /setskin.");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Admin level 1]:{FFFFFF} /setarmor /disarm /getcar /entercar /gotocar /respawncar /baninfo /jetpack /flipcar /warn /billboards.");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Admin level 1]:{FFFFFF} /ban /cstats /gethere /setinterior /setvw /atalk /sendto /unban /getip /togooc /sethealth.");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Admin level 1]:{FFFFFF} /gotoplayer /asshelp /listguns.");
	}
	if (PlayerData[playerid][pAdmin] >= 2)
	{
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Admin level 2]:{FFFFFF} /giverep /takerep /respawn  /masked.");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Admin level 2]:{FFFFFF} /setclothes /shooter /respawncars /gotopos.");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Admin level 2]:{FFFFFF} /listguns /x /y /z.");
 	}
	if (PlayerData[playerid][pAdmin] >= 3)
	{
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Admin level 3]:{FFFFFF} /announce /removefstyle /setfstyle /goto /respawnnear /near /robpermission /setcarhp /listwarns /afire");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Admin level 3]:{FFFFFF} /akillfire.");
	}
	if (PlayerData[playerid][pAdmin] >= 4)
	{
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Senior Admin - Helper]:{FFFFFF} /send /createentrance /editentrance /destroyentrance /fine /destroyatm /setweather /creategarbage.");
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Senior Admin - Helper]:{FFFFFF} /destroygarbage /createvendor /destroyvendor /atune /acolorcar /apaintjob /createrack /editrack.");
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Senior Admin - Helper]:{FFFFFF} /destroyrack /checknumber /destroyspeed .");
	}
	if (PlayerData[playerid][pAdmin] >= 5)
	{
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Senior Admin - Faction & Familly]:{FFFFFF} /setrep /bleeding /arefill /agrantlicense /arevokelicense /arepair /anos /createpump /destroypump.");
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Senior Admin - Faction & Familly]:{FFFFFF} /setpump /createjob /destroyjob /editjob /createcrate /destroycrate /createfaction /destroyfaction.");
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Senior Admin - Faction & Familly]:{FFFFFF} /editfaction /setleader /asetfaction /asetrank /asetdiv /createarrest /destroyarrest /creategate.");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Senior Admin - Faction & Familly]:{FFFFFF} /destroygate /editgate /createcar /destroycar /createimpound /destroyimpound /editimpound /editcar.");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Senior Admin - Faction & Familly]:{FFFFFF} /creategraffiti /destroygraffiti /createdetector /destroydetector.");
	}
	if (PlayerData[playerid][pAdmin] >= 7)
	{
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Vice Head Admin]:{FFFFFF} /setmoney /setadmin /setdonator /dynamichelp /givegun /setplayer /sethelper /factionmod /setname .");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Vice Head Admin]:{FFFFFF} /bizstate /destroybiz /acceptname /declinename /deleteaccount /setitem /createatm /restart /asellhouse .");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Vice Head Admin]:{FFFFFF} /panel /spawnitem /setfuel /setquantity /destroyitem /adestroybox /deletechar /clearinventory /clearwarns.");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Vice Head Admin]:{FFFFFF} /destroyplant /givecar /createtree /saveall /setinventory /asellbiz /clearchat /healall.");
	}
	if (PlayerData[playerid][pAdmin] >= 8)
	{
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Head Admin & Developer]:{FFFFFF} /setmoney /setadmin /setdonator /dynamichelp /givegun /setplayer /sethelper /factionmod /setname .");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Head Admin & Developer]:{FFFFFF} /bizstate /destroybiz /acceptname /declinename /deleteaccount /setitem /createatm /restart /asellhouse .");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Head Admin & Developer]:{FFFFFF} /panel /spawnitem /setfuel /setquantity /destroyitem /adestroybox /deletechar /clearinventory /clearwarns.");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Head Admin & Developer]:{FFFFFF} /destroyplant /givecar /createtree /saveall /setinventory /asellbiz /clearchat /healall.");
	}
	if (PlayerData[playerid][pFactionMod])
	{
	    SendClientMessage(playerid, COLOR_GREY, "-------------------ADDITIONAL----------------------------");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "FACTION MANAGEMENT:{FFFFFF} /createfaction, /editfaction, /destroyfaction, /setleader.");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "FACTION MANAGEMENT:{FFFFFF} /asetrank, /asetfaction, /asetdiv.");
	}
	return 1;
}
CMD:hhelp(playerid, params[])
{
	new pDialog[9999];
	if (!PlayerData[playerid][pHelper])
	    return SendErrorMessage(playerid, "Kamu bukanlah seorang helper.");

	if (PlayerData[playerid][pHelper] >= 1)
	{
   		strcat(pDialog, "{00FF00}[Junior Helper]:{FFFFFF} /hduty, /ar, /dr, /spectate , /h , /reports\n", sizeof(pDialog));
		Dialog_Show(playerid, HELPER_HELP, DIALOG_STYLE_MSGBOX, "{00FF00}List", pDialog, "Tutup", "");
	}
	if (PlayerData[playerid][pHelper] >= 2)
	{
		strcat(pDialog, "{00FF00}[General Helper]:{FFFFFF} /kick, /freeze, /warn /unfreeze, /gotoid, /jail, /asshelp, /resf\n", sizeof(pDialog));
		Dialog_Show(playerid, HELPER_HELP, DIALOG_STYLE_MSGBOX, "{00FF00}List", pDialog, "Tutup", "");
	}
	if (PlayerData[playerid][pHelper] >= 3)
	{
		strcat(pDialog, "{00FF00}[Senior Helper]:{FFFFFF} /ban , /unban, /unwarn, /goto, /jail, /unjail\n", sizeof(pDialog));
		Dialog_Show(playerid, HELPER_HELP, DIALOG_STYLE_MSGBOX, "{00FF00}List", pDialog, "Tutup", "");
	}
	if (PlayerData[playerid][pHelper] == 6 && PlayerData[playerid][pAdmin] == 4 )
	{
		strcat(pDialog, "{00FF00}[Helper Management]:{FFFFFF}/sethelper, /hname \n", sizeof(pDialog));
		Dialog_Show(playerid, HELPER_HELP, DIALOG_STYLE_MSGBOX, "{00FF00}List", pDialog, "Tutup", "");
	}
	return 1;
}

CMD:dynamichelp(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 7)
	    return 1;

	SendClientMessage(playerid, COLOR_CLIENT, "BUSSINESS:{FFFFFF} /createbiz, /editbiz, destroybiz, /bizstate.");
    SendClientMessage(playerid, COLOR_CLIENT, "HOUSE:{FFFFFF} /createhouse, /destroyhouse, /edithouse.");
	SendClientMessage(playerid, COLOR_CLIENT, "PUMP:{FFFFFF} /createpump, /setpump, /destroypump.");
	SendClientMessage(playerid, COLOR_CLIENT, "ATM:{FFFFFF} /createatm, /destroyatm.");
	SendClientMessage(playerid, COLOR_CLIENT, "DETECTOR:{FFFFFF} /createdetector, /destroydetector.");
	SendClientMessage(playerid, COLOR_CLIENT, "ARREST:{FFFFFF} /createarrest, /destroyarrest.");
	SendClientMessage(playerid, COLOR_CLIENT, "BILLBOARD:{FFFFFF} /createbillboard, /destroybillboard, /editbillboard.");
	SendClientMessage(playerid, COLOR_CLIENT, "ENTRANCE:{FFFFFF} /createentrance, /editentrance, /destroyentrance.");
	SendClientMessage(playerid, COLOR_CLIENT, "CRATE:{FFFFFF} /createcrate, /destroycrate.");
	SendClientMessage(playerid, COLOR_CLIENT, "GATE:{FFFFFF} /creategate, /editgate, /destroygate.");
	SendClientMessage(playerid, COLOR_CLIENT, "CAR:{FFFFFF} /createcar, /destroycar, /editcar.");
	SendClientMessage(playerid, COLOR_CLIENT, "FACTION:{FFFFFF} /createfaction, /editfaction, /destroyfaction.");
	SendClientMessage(playerid, COLOR_CLIENT, "EVENDOR:{FFFFFF} /createvendor, /destroyvendor.");
	SendClientMessage(playerid, COLOR_CLIENT, "GARBAGE:{FFFFFF} /creategarbage, /destroygarbage.");
	SendClientMessage(playerid, COLOR_CLIENT, "GUNRACK:{FFFFFF} /createrack, /editrack, /destroyrack.");
	SendClientMessage(playerid, COLOR_CLIENT, "JOB:{FFFFFF} /createjob, /destroyjob, /editjob.");
	SendClientMessage(playerid, COLOR_CLIENT, "IMPOUND:{FFFFFF} /createimpound, /destroyimpound, /editimpound.");
	SendClientMessage(playerid, COLOR_CLIENT, "GRAFFITI:{FFFFFF} /creategraffiti, /destroygraffiti.");
	SendClientMessage(playerid, COLOR_CLIENT, "SPEEDCAMERA:{FFFFFF} /createspeed, /destroyspeed.");
	return 1;
}

CMD:mywarnings(playerid, params[])
{
	new string[512];
	SendClientMessage(playerid, COLOR_ORANGE, "----------PERINGATAN----------");
	format(string, sizeof(string), "Peringatan[1]: %s", Player_Warn1(playerid));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Peringatan[2]: %s", Player_Warn2(playerid));
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:myclothes(playerid, params[])
{
	new string[64];
	SendClientMessage(playerid, COLOR_ORANGE, "----------Inventory Pakaian----------");
	format(string, sizeof(string), "Pakaian Slot [1]: %d", PlayerData[playerid][pClothes1]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Pakaian Slot [2]: %d", PlayerData[playerid][pClothes2]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Pakaian Slot [3]: %d", PlayerData[playerid][pClothes3]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:changeclothes(playerid, params[])
{
	static
	    type[16],
	    string[32];

 	if (sscanf(params, "S()", type))
	{
	    SendSyntaxMessage(playerid, "/changeclothes [slot] [SLOT: 1-2-3]");
	    return 1;
	}
	if (!strcmp(type, "1", true))
	{
		SetPlayerSkin(playerid, PlayerData[playerid][pClothes1]);
		format(string, sizeof(string), "Kamu mengganti pakaianmu");
    	ShowPlayerFooter(playerid, string);
    	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengganti pakaiannya.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "2", true))
	{
		SetPlayerSkin(playerid, PlayerData[playerid][pClothes2]);
		format(string, sizeof(string), "Kamu mengganti pakaianmu");
    	ShowPlayerFooter(playerid, string);
    	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengganti pakaiannya.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "3", true))
	{
		SetPlayerSkin(playerid, PlayerData[playerid][pClothes3]);
		format(string, sizeof(string), "Kamu mengganti pakaianmu");
    	ShowPlayerFooter(playerid, string);
    	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengganti pakaiannya.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:buyclothes(playerid, params[])
{
	if(PlayerData[playerid][pMoney] >= 25)
	{
		if(IsPlayerInRangeOfPoint(playerid, 18, 161.4801,-96.5368,1001.8047) || IsPlayerInRangeOfPoint(playerid, 5.0, 207.8768,-101.4137,1005.2578))
		{
  			new id, slot, string[128];
			if(sscanf(params, "dd", id, slot)) return SendClientMessage(playerid, COLOR_GREY, "Usage: /buyclothes [skin ID] [slot 1-4]");
			{
   				if(id == 280 || id == 281 || id == 282 || id == 283 || id == 288 || id == 284 || id == 285 || id == 286 || id == 287)return SendClientMessage(playerid, COLOR_GREY, "Skin ini dibatasi, oleh karena itu kamu tidak bisa menggunakannya.");
				if(id == 277 || id == 278 || id == 279 || id == 274 || id == 275 || id == 276)return SendClientMessage(playerid, COLOR_GREY, "Skin ini dibatasi, oleh karena itu kamu tidak bisa menggunakannya.");
				if(id == 300 || id == 301 || id == 302 || id == 306 || id == 307 || id == 308 || id == 309 || id == 310 || id == 311)return SendClientMessage(playerid, COLOR_GREY, "Skin ini dibatasi, oleh karena itu kamu tidak bisa menggunakannya.");
    			if(slot == 1)PlayerData[playerid][pClothes1] = id;
			    else if(slot == 2)PlayerData[playerid][pClothes2] = id;
			    else if(slot == 3)PlayerData[playerid][pClothes3] = id;
			    else return SendClientMessage(playerid, COLOR_GREY, "Slot pakaian berada dikisaran 1 - 311.");

			    format(string, sizeof(string), "[Clothes]: Kamu berhasil membeli skin ID: %d dan membayar senilai $25, ini disimpan di slot pakaian nomor %d.", id, slot);
			    SendClientMessage(playerid, COLOR_WHITE, string);
			    PlayerData[playerid][pMoney] -= 25;
			}
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "Kamu harus berada di dekat clothing store untuk mengganti pakaianmu.");
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "Kamu harus memiliki $25{FFFFFF} untuk membeli pakaian.");
	return 1;
}

CMD:aname(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak diperbolehkan menggunakan command ini!.");

	new
		userid,
		name[30];

	if(sscanf(params, "us[30]", userid, name))
		return SendSyntaxMessage(playerid, "/aname [playerid] [admin name]");

	if(strlen(name) > 30)
		return SendClientMessage(playerid, COLOR_GREY, "Kamu harus memilih nama admin yang tidak melebihi panjang 30 karakter.");

	new msg[120];
	format(PlayerData[userid][pForumName], 30, "%s", name);
	if(PlayerData[userid][pAdmin])
	{
		format(msg, sizeof(msg), "[ADMIN]: %s %s telah memperbarui nama adminnya menjadi '%s'.", AdminRankName(playerid), ReturnName(playerid, 0), PlayerData[userid][pForumName]);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s %s telah memperbarui nama adminnya menjadi '%s'.", AdminRankName(playerid), ReturnName(playerid, 0), PlayerData[userid][pForumName]);

	}
	return 1;
}

CMD:hname(playerid, params[])
{
	new
		userid,
		name[30];

	if (PlayerData[playerid][pAdmin] < 4 && PlayerData[playerid][pHelper] < 6)
	    return SendErrorMessage(playerid, "Kamu tidak diperbolehkan menggunakan command ini!.");

	if(sscanf(params, "us[30]", userid, name))
		return SendSyntaxMessage(playerid, "/hname [playerid] [helper name]");

	if(strlen(name) > 30)
		return SendClientMessage(playerid, COLOR_GREY, "Kamu harus memilih nama helper yang tidak melebihi panjang 30 karakter.");

	new msg[120];
	format(PlayerData[playerid][pForumName], 30, "%s", name);
	if(PlayerData[playerid][pHelper] > 0)
	{
		format(msg, sizeof(msg), "[HELPER]: %s telah memperbarui nama helpernya menjadi '%s'.", ReturnName(playerid, 0), PlayerData[userid][pForumName]);
		SendHelperMessage(COLOR_NEWGREEN, msg);
		//SendHelperMessage(COLOR_NEWGREEN, "** %s %s: %.64s", AdminRankName(i), ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:report(playerid, params[])
{
	new reportid = -1;

	if (isnull(params))
	{
	    SendSyntaxMessage(playerid, "/report [laporan]");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[WARNING]:{FFFFFF} Harap hanya menggunakan perintah ini hanya untuk tujuan yang valid.");
	    return 1;
	}
	if (Report_GetCount(playerid) > 5)
	    return SendErrorMessage(playerid, "Kamu sudah memiliki 5 laporan aktif!");

	if (PlayerData[playerid][pReportTime] >= gettime())
	    return SendErrorMessage(playerid, "Kamu harus menunggu %d detik sebelum mengirim laporan.", PlayerData[playerid][pReportTime] - gettime());

	if ((reportid = Report_Add(playerid, params)) != -1)
	{
		ShowPlayerFooter(playerid, "~g~Laporan~w~ kamu berhasil terkirim!");

		foreach (new i : Player)
		{
			if (PlayerData[i][pAdmin] > 0) {
				SendClientMessageEx(i, COLOR_LIGHTYELLOW, "[LAPORAN %d]: %s (ID: %d) laporan: %s", reportid, ReturnName(playerid, 0), playerid, params);
			}
			else if (PlayerData[i][pHelper] > 0) {
				SendClientMessageEx(i, COLOR_LIGHTYELLOW, "[LAPORAN %d]: %s (ID: %d) laporan: %s", reportid, ReturnName(playerid, 0), playerid, params);
			}
		}
		PlayerData[playerid][pReportTime] = gettime() + 180;
		SendServerMessage(playerid, "Laporanmu berhasil terkirim ke admin.");
	}
	else
	{
	    SendErrorMessage(playerid, "Daftar laporan sudah penuh. Mohon tunggu sebentar.");
	}
	return 1;
}

CMD:reports(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	new
	    string[1200],
		szDialog[1100],
		text[128],
		count;

	for (new i = 0; i != MAX_REPORTS; i ++)
	{
	    if (!ReportData[i][rExists])
			continue;

		strunpack(text, ReportData[i][rText]);
		format(string, sizeof(string), "[RID: %d] %s (ID: %d) Melaporkan : %s\n", i, ReturnName(ReportData[i][rPlayer]), ReportData[i][rPlayer], text);
		strcat(szDialog, string);
		count++;
	}
	strcat(szDialog, "\nGunakan /ar untuk menerima , /dr untuk menolak");
	if (!count)
	    return SendErrorMessage(playerid, "Tidak ada laporan aktif yang bisa ditampilkan.");
	else Dialog_Show(playerid, DIALOG_REP,DIALOG_STYLE_MSGBOX, "Laporan", szDialog, "Tutup", "");
	return 1;
}

CMD:ar(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1)
	    return SendErrorMessage(playerid, "Anda tidak memiliki izin untuk menggunakan perintah ini.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/ar [report id] (/reports untuk list laporan)");

	new
		reportid = strval(params),
		string[64];

	if ((reportid < 0 || reportid >= MAX_REPORTS) || !ReportData[reportid][rExists])
	    return SendErrorMessage(playerid, "ID laporan tidak valid. Daftar laporan yaitu dari 0 hingga %d.", MAX_REPORTS);

	format(string, sizeof(string), "Kamu ~g~menerima~w~ laporan ID: %d.", reportid);
	ShowPlayerFooter(playerid, string);

	SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) telah menerima laporanmu.", PlayerData[playerid][pForumName], playerid);
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menerima laporan %s.", PlayerData[playerid][pForumName], ReturnName(ReportData[reportid][rPlayer], 0));

	Report_Remove(reportid);
	return 1;
}

CMD:dr(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/dr [report id] (/reports for a list)");

	new
		reportid = strval(params),
		string[64];

	if ((reportid < 0 || reportid >= MAX_REPORTS) || !ReportData[reportid][rExists])
	    return SendErrorMessage(playerid, "ID laporan tidak valid. Daftar laporan yaitu dari 0 hingga %d.", MAX_REPORTS);

	format(string, sizeof(string), "Kamu ~r~menolak~w~ laporan ID: %d.", reportid);
	ShowPlayerFooter(playerid, string);

	SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) telah menolak laporanmu.", PlayerData[playerid][pForumName], playerid);
    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menolak laporan %s.", PlayerData[playerid][pForumName], ReturnName(ReportData[reportid][rPlayer], 0));

    Report_Remove(reportid);
	return 1;
}
CMD:spec(playerid, params[])
	return cmd_spectate(playerid, params);
CMD:spectate(playerid, params[])
{
	new userid;

	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (!isnull(params) && !strcmp(params, "off", true))
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
			return SendErrorMessage(playerid, "Kamu tidak memantau pemain manapun.");

	    PlayerSpectatePlayer(playerid, INVALID_PLAYER_ID);
	    PlayerSpectateVehicle(playerid, INVALID_VEHICLE_ID);

	    SetSpawnInfo(playerid, 0, PlayerData[playerid][pSkin], PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2], PlayerData[playerid][pPos][3], 0, 0, 0, 0, 0, 0);
	    TogglePlayerSpectating(playerid, false);

	    return SendServerMessage(playerid, "Kamu tidak lagi dalam mode spectate.");
	}
	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/spectate [playerid/nama] - Ketik \"/spectate off\" untuk berhenti memantau.");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

		PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
		PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
	}
	SetPlayerInterior(playerid, GetPlayerInterior(userid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(userid));

	TogglePlayerSpectating(playerid, 1);

	if (IsPlayerInAnyVehicle(userid))
	    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(userid));

	else
		PlayerSpectatePlayer(playerid, userid);

	SendServerMessage(playerid, "Kamu sekarang memantau %s (ID: %d).", ReturnName(userid, 0), userid);
	PlayerData[playerid][pSpectator] = userid;

	return 1;
}

CMD:jail(playerid, params[])
{
	static
		userid,
		minutes,
		reason[128];

	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "uds[128]", userid, minutes, reason))
	    return SendSyntaxMessage(playerid, "/jail [playerid/nama] [menit] [alasan]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (minutes < 1)
		return SendErrorMessage(playerid, "Kamu tidak bisa memenjarakan player selama kurang dari 0 menit.");

	if (minutes > 60 && PlayerData[playerid][pHelper] && !PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Helper tidak bisa memenjarakan player lebih dari 60 menit.");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin] || PlayerData[userid][pHelper] > PlayerData[playerid][pHelper])
	    return SendErrorMessage(playerid, "Pemain yang ditentukan memiliki otoritas yang lebih tinggi.");

	ClearAnimations(userid);
	PlayerTextDrawShow(userid, PlayerData[userid][pTextdraws][70]);

    SetPlayerPos(userid, 197.6346, 175.3765, 1003.0234);
    SetPlayerInterior(userid, 3);

	SetPlayerVirtualWorld(userid, (playerid + 100));
 	SetPlayerFacingAngle(userid, 0.0);

	SetCameraBehindPlayer(userid);
	ResetWeapons(userid);
	
	SetPlayerColor(userid, COLOR_BROWN);

    ShowHungerTextdraw(userid, 0);
	ResetPlayer(userid);

	PlayerData[userid][pJailTime] = minutes * 60;
	PlayerData[userid][pPrisoned] = 0;

	SendAdminAction(playerid, "Kamu memenjarakan %s untuk %d menit (ALASAN : %s).", ReturnName(userid, 0), minutes, reason);
	SendAdminAction(userid, "%s telah memenjarakanmu selama %d menit (ALASAN : %s).", PlayerData[playerid][pForumName], minutes, reason);

	SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s telah memenjarakan %s selama %d menit untuk: %s", PlayerData[playerid][pForumName], ReturnName(userid, 0), minutes, reason);
	SendNearbyMessage(userid, 30.0, COLOR_RED, "[Jail Info] %s telah meninggalkan mode RolePlay karena Di Penjara Administrator", ReturnName(userid, 0));
	Log_Write("logs/jail_log.txt", "[%s] %s telah memenjarakan %s selama %d menit, alasan: %s.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), minutes, reason);
	return 1;
}

CMD:unjail(playerid, params[])
{
	static
	    userid,
	    reason[128];

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid, reason))
	    return SendSyntaxMessage(playerid, "/unjail [playerid/nama] alasan");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (!PlayerData[userid][pJailTime])
	    return SendErrorMessage(playerid, "Kamu tidak bisa melepaskan pemain yang tidak dipenjara.");

	PlayerData[userid][pJailTime] = 1;
	SetPlayerColor(userid, COLOR_WHITE);

	SendAdminAction(playerid, "Kamu melepaskan %s dari penjara.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s telah melepaskanmu dari penjara.", PlayerData[playerid][pForumName]);
    SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s telah membebaskan %s dari penjara alasan : %s", PlayerData[playerid][pForumName], ReturnName(userid, 0), reason);
	Log_Write("logs/jail_log.txt", "[%s] %s telah melepaskan %s dari penjara.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:bleeding(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 4 )
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/bleeding [playerid/name]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	switch (PlayerData[userid][pBleeding])
	{
	    case 0:
	    {
	        PlayerData[userid][pBleeding] = 1;
	        PlayerData[userid][pBleedTime] = 10;

            CreateBlood(userid);
			SetTimerEx("HidePlayerBox", 500, false, "dd", userid, _:ShowPlayerBox(userid, 0xFF000066));

			SendServerMessage(playerid, "Kamu telah mengaktifkan mode bleeding untuk %s.", ReturnName(userid, 0));
		}
		case 1:
	    {
	        PlayerData[userid][pBleeding] = 0;
	        PlayerData[userid][pBleedTime] = 0;

			SendServerMessage(playerid, "Kamu telah mematikan mode bleeding untuk %s.", ReturnName(userid, 0));
		}
	}
	return 1;
}
CMD:giverep(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/giverep [playerid/nama]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	PlayerData[userid][pRep]++;
	if(PlayerData[userid][pRep] == 20)
	{
     	Update3DTextLabelText(mylabel[playerid], 0xFFFFFFFF, "Grade {FF0000}E");
	}
	else if(PlayerData[userid][pRep] == 40)
	{
     	Update3DTextLabelText(mylabel[playerid], 0xFFFFFFFF, "Grade {FF0000}D");
	}
	else if(PlayerData[userid][pRep] == 60)
	{
     	Update3DTextLabelText(mylabel[playerid], 0xFFFFFFFF, "Grade {FF0000}C");
	}
	else if(PlayerData[userid][pRep] == 80)
	{
     	Update3DTextLabelText(mylabel[playerid], 0xFFFFFFFF, "Grade {FF0000}B");
	}
	else if(PlayerData[userid][pRep] == 100)
	{
     	Update3DTextLabelText(mylabel[playerid], 0xFFFFFFFF, "Grade {FF0000}A");
	}
	else if(PlayerData[userid][pRep] == 120)
	{
     	Update3DTextLabelText(mylabel[playerid], 0xFFFFFFFF, "Grade {FF0000}A+");
	}
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menambah reputasi milik %s. Total reputasinya sekarang adalah %d.", ReturnName(playerid, 0), ReturnName(userid, 0), PlayerData[userid][pRep]);
	return 1;
}
CMD:takerep(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/takerep [playerid/nama]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");
	if(PlayerData[userid][pRep] < 20)
	{
     	Update3DTextLabelText(mylabel[playerid], 0xFFFFFFFF, "Grade {FF0000}F");
	}
	else if(PlayerData[userid][pRep] < 40)
	{
     	Update3DTextLabelText(mylabel[playerid], 0xFFFFFFFF, "Grade {FF0000}E");
	}
	else if(PlayerData[userid][pRep] < 60)
	{
     	Update3DTextLabelText(mylabel[playerid], 0xFFFFFFFF, "Grade {FF0000}D");
	}
	else if(PlayerData[userid][pRep] < 80)
	{
     	Update3DTextLabelText(mylabel[playerid], 0xFFFFFFFF, "Grade {FF0000}C");
	}
	else if(PlayerData[userid][pRep] < 100)
	{
     	Update3DTextLabelText(mylabel[playerid], 0xFFFFFFFF, "Grade {FF0000}B");
	}
	else if(PlayerData[userid][pRep] < 120)
	{
     	Update3DTextLabelText(mylabel[playerid], 0xFFFFFFFF, "Grade {FF0000}A");
	}
	PlayerData[userid][pRep] = PlayerData[userid][pRep] - 1;
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah mengurangi reputasi milik %s. Total reputasinya sekarang adalah %d.", ReturnName(playerid, 0), ReturnName(userid, 0), PlayerData[userid][pRep]);
	return 1;
}
CMD:slap(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/slap [playerid/nama]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	static
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(userid, x, y, z);
	SetPlayerPos(userid, x, y, z + 5);

	PlayerPlaySound(userid, 1130, 0.0, 0.0, 0.0);
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah melambungkan %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:kick(playerid, params[])
{
	static
	    userid,
	    reason[128];

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "us[128]", userid, reason))
	    return SendSyntaxMessage(playerid, "/kick [playerid/nama] [alasan]");

	if (userid == INVALID_PLAYER_ID || (IsPlayerConnected(userid) && PlayerData[userid][pKicked]))
	    return SendErrorMessage(playerid, "Player tidak valid.");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Pemain yang ditentukan memiliki otoritas yang lebih tinggi.");

	SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s telah mengeluarkan %s dari server karena: %s.", PlayerData[playerid][pForumName], ReturnName(userid, 0), reason);
	SendNearbyMessage(userid, 30.0, COLOR_RED, "[Disconnect] %s telah keluar dari server, Alasan : Kicked", ReturnName(userid, 0));
	Log_Write("logs/kick_log.txt", "[%s] %s telah mengeluarkan %s dari server karena: %s.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), reason);

	KickEx(userid);
	return 1;
}
CMD:gotoid(playerid, params[])
{
	new userid;
	new string[128];
	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");
	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/gotoplayer [playerid]");
	SendPlayerToPlayer(playerid, userid);
	format(string, sizeof(string), "Kamu melakukan ~y~teleport~w~ ke %s.", ReturnName(userid, 0));
	ShowPlayerFooter(playerid, string);
	return 1;
}
CMD:asshelp(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	SendClientMessage(playerid, COLOR_CLIENT, "Informasi perintah Assistance dengan penjelasan");
	SendClientMessage(playerid, COLOR_CLIENT,"/assist ID - Menerima bantuan pemain tertentu.");
	SendClientMessage(playerid, COLOR_CLIENT,"/assistances - Memeriksa semua orang yang meminta bantuan.");
	SendClientMessage(playerid, COLOR_CLIENT,"/ac - Berbicara di channel bantuan.");
	SendClientMessage(playerid, COLOR_CLIENT,"/endassistance - Mengakhiri mode assistance.");
	SendClientMessage(playerid, COLOR_CLIENT,"====================================================================================================");
	return 1;
}

CMD:assistance(playerid, params[])
{
	if(AssistanceNeeded[playerid] == 0)
	{
		ShowPlayerDialog(playerid, 12211, DIALOG_STYLE_INPUT, "Permintaan bantuan", "Mohon masukan di dalam kotak di bawah alasanmu ingin meminta bantuan:", "OK", "Batal");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "Kamu sudah melakukan permintaan bantuan yang belum diterima sebelumnya. Tolong gunakan /cancelassistance untuk membatalkannya.");
	return 1;
}

CMD:assistances(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1)
		return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");
	{
		new count = 0, string[1024];
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
  			if(IsPlayerConnected(i))
  			{
     			if(AssistanceNeeded[i] == 1)
     			{
        			format(string, sizeof(string), "%s\n%s (ID: %d)", string, i);
           			count++;
           		}
        	}
	    }
		if(count == 0)SendClientMessage(playerid, COLOR_CLIENT, "Tidak ada permintaan bantuan yang menunggu saat ini.");
		else ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_LIST, "Permintaan bantuan", string, "Tutup", "");
	}
	return 1;
}

CMD:assist(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");
	{
 		new id, string[128];
		if(sscanf(params, "u", id)) return SendSyntaxMessage(playerid, "/assist [playerid/nama]");
  		{
			if(AssistanceNeeded[id] == 0)return SendClientMessage(playerid, COLOR_WHITE, "Player tersebut tidak membutuhkan bantuan.");

			AssistanceNeeded[id] = 0;
			Assisted[id] = playerid;
			Assisted[playerid] = id;

			format(string, sizeof(string), "Admin %s sekarang menolongmu. Ketik /ac untuk mendiskusikan masalahmu.", ReturnName(playerid, 0), playerid);
			SendClientMessage(id, COLOR_NEWGREEN, string);
			format(string, sizeof(string), "Kamu sekarang menolong %s. Ketik /ac untuk mendiskusikan masalah dia.", ReturnName(playerid, 0), (id));
			SendClientMessage(playerid, COLOR_NEWGREEN, string);
   		}
	}
	return 1;
}

CMD:endassistance(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");
	{
		new id, reason[56], string[128];
		if(sscanf(params, "us[56]", id, reason)) return SendSyntaxMessage(playerid, "/endassistance [playerid/name] [alasan]");
  		{
   			if(Assisted[id] != playerid)return SendClientMessage(playerid, COLOR_WHITE, "Pemain itu tidak terbantu olehmu.");
	    	format(string, sizeof(string), "%s telah mengakhiri sesi bantuanmu. [ALASAN: %s]", ReturnName(playerid, 0), reason);
	    	SendClientMessage(id, COLOR_NEWGREEN, string);
	    	format(string, sizeof(string), "Kamu mengakhiri permintaan bantuan %s. [ALASAN: %s]", ReturnName(playerid, 0), reason);
	    	SendClientMessage(playerid, COLOR_NEWGREEN, string);
	    	Assisted[id] = -1;
			Assisted[playerid] = -1;
		}
	}
	return 1;
}

CMD:ac(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1 && Assisted[playerid] < 0 && PlayerData[playerid][pHelper] < 1)
		return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");
	{
		new msg[128], string[150];
		if(Assisted[playerid] == -1) return SendClientMessage(playerid, COLOR_WHITE, "Kamu tidak membantu siapa pun saat ini.");
		if(sscanf(params, "s[128]", msg)) return SendSyntaxMessage(playerid, "/ac [teks]");
		{
			format(string, sizeof(string), "[Assistance] %s(%d): %s", ReturnName(playerid, 0), playerid, msg);
			SendClientMessage(playerid, COLOR_NEWGREEN, string);
			SendClientMessage(Assisted[playerid], COLOR_NEWGREEN, string);
		}
	}
	return 1;
}

CMD:cancelassistance(playerid, params[])
{
	if(AssistanceNeeded[playerid] == 1)
	{
 		SendClientMessage(playerid, COLOR_NEWBLUE, "Kamu telah membatalkan permintaan bantuanmu.");
   		AssistanceNeeded[playerid] = 0;
	}
	else SendClientMessage(playerid, COLOR_WHITE, "Kamu telah membatalkan permintaan bantuanmu.");
	return 1;
}


CMD:mute(playerid, params[])
{
    static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/mute [playerid/nama]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Kamu tidak bisa memute diri sendiri!");

	if (PlayerData[userid][pMuted])
	    return SendErrorMessage(playerid, "Pemain yang kamu coba untuk mute sudah tidak aktif lagi.");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Pemain yang ditentukan memiliki otoritas yang lebih tinggi.");

	PlayerData[userid][pMuted] = 1;

	SendAdminAction(playerid, "You have muted %s from using text and commands.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s has muted you from using text and commands.", ReturnName(playerid, 0));
	SendAdminAlert(COLOR_RED, "[ADMIN] %s melakukan mute kepada %s ", ReturnName(playerid, 0),ReturnName(userid, 0));

	return 1;
}
CMD:announce(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");
	new message[145];
	if(sscanf(params, "dds[145]", params[0], params[1], message)) return SendClientMessage(playerid, -1, "{996600}ERROR: /announce [SECONDS] [TIPE 0-6] [PESAN]");
	if(params[1] < 0 || params[1] == 2 || params[1] > 6) return SendClientMessage(playerid, -1, "{996600}ERROR: /announce [SECONDS] [TIPE 0-6] [PESAN]");
	GameTextForAll(message, params[0]*1000, params[1]);
	return 1;
}
CMD:unmute(playerid, params[])
{
    static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/unmute [playerid/nama]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (!PlayerData[userid][pMuted])
	    return SendErrorMessage(playerid, "Player yang ingin kamu unmute tidak sedang di mute.");

	PlayerData[userid][pMuted] = 0;

	SendAdminAction(playerid, "Kamu berhasil melakukan unmute untuk %s.", ReturnName(userid, 0));
	SendAdminAction(userid, "Kamu telah di unmute oleh %s.", ReturnName(playerid, 0));
	SendAdminAlert(COLOR_RED, "[ADMIN] %s melakukan Unmute kepada %s ", ReturnName(playerid, 0),ReturnName(userid, 0));

	return 1;
}

CMD:freeze(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2 )
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/freeze [playerid/nama]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	TogglePlayerControllable(userid, 0);
	SendAdminAction(playerid, "Kamu melakukan freeze terhadap %s.", ReturnName(userid, 0));
	SendAdminAlert(COLOR_RED, "[ADMIN] %s melakukan freeze kepada %s ", ReturnName(playerid, 0),ReturnName(userid, 0));
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/unfreeze [playerid/nama]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

    PlayerData[playerid][pFreeze] = 0;

	TogglePlayerControllable(userid, 1);
	SendAdminAction(playerid, "Kamu melakukan unfreeze terhadap %s.", ReturnName(userid, 0));
	SendAdminAlert(COLOR_RED, "[ADMIN] %s melakukan Unfreeze kepada %s ", ReturnName(playerid, 0),ReturnName(userid, 0));
	return 1;
}

CMD:revive(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/revive [playerid/nama]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (!PlayerData[userid][pInjured])
	    return SendErrorMessage(playerid, "Kamu tidak bisa mengobati player ini.");

	ShowHungerTextdraw(userid, 1);
	PlayerData[userid][pInjured] = 0;

	ClearAnimations(userid);
	TextDrawHideForPlayer(userid, gServerTextdraws[2]);
 	TextDrawHideForPlayer(userid, Textdraw37);

	ResetDamages(userid);
	SendAdminAction(playerid, "Kamu mengobati karakter %s.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s telah mengobati karaktermu.", ReturnName(playerid, 0));
	return 1;
}

CMD:heal(playerid, params[]) // ini kemarin yang gua buat.. buat MD
{
	static
	    userid,
	    Float:health;

	GetPlayerHealth(playerid, health); // susah w jelasinnya wkwk

    if (GetFactionType(playerid) != FACTION_MEDIC)
	    return SendErrorMessage(playerid, "Kamu harus menjadi bagian dari faction medis.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/heal [playerid/nama]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (!PlayerData[userid][pInjured])
	    return SendErrorMessage(playerid, "Kamu tidak bisa mengobati player ini.");
	    
 	if (IsPlayerInRangeOfPoint(playerid, 6.0, 1174.5050,-1294.5243,14.4251) || IsPlayerInRangeOfPoint (playerid, 6.0, 1174.4449,-1299.4932,14.4251) ) // ini yg kemarin gua buat sendiri :v
	{
	
		SetPlayerHealth(userid, 50.0); // karena sudah di set ini

		ShowHungerTextdraw(userid, 1);
		PlayerData[userid][pInjured] = 0;
		PlayerData[playerid][pBleeding] = 0;

		ClearAnimations(userid);
		TextDrawHideForPlayer(userid, gServerTextdraws[2]); // kan udah jadi nih
	 	TextDrawHideForPlayer(userid, Textdraw37);

		ResetDamages(userid);
		SendClientMessageEx(playerid, COLOR_DONATOR, "Kamu telah mengobati %s, berikan obat kepada pasien untuk pemulihan", ReturnName(userid, 0));
		SendClientMessageEx(userid, COLOR_DONATOR, "%s telah mengobati kamu. Segera meminum obat dari dokter untuk pemulihan maksimal", ReturnName(playerid, 0));
	}
	else
	{
        SendErrorMessage(playerid, "Kamu harus berada didalam UGD untuk melakukan penyembuhan");
	}
	return 1;
}

CMD:respawn(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/respawn [playerid/nama]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (!IsPlayerSpawned(userid))
	    return SendErrorMessage(playerid, "Kamu tidak bise merespawn player yang tidak spawn.");

	RespawnPlayer(userid);

	SendAdminAction(playerid, "Kamu merespawn %s.", ReturnName(userid, 0));
	SendAdminAction(userid, "Kamu telah direspawn oleh %s.", ReturnName(playerid, 0));

	return 1;
}

CMD:arefill(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/arefill [playerid/nama]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	PlayerData[userid][pHunger] = 100;
	PlayerData[userid][pThirst] = 100;

	SendAdminAction(playerid, "Kamu telah mengisi kelaparan dan kehausan %s.", ReturnName(userid, 0));
	SendAdminAction(userid, "Kahausan dan kelaparanmu telah diisi oleh %s.", ReturnName(playerid, 0));

	return 1;
}

CMD:setskin(playerid, params[])
{
	static
	    userid,
		skinid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ud", userid, skinid))
	    return SendSyntaxMessage(playerid, "/setskin [playerid/nama] [skin id]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (skinid < 0 || skinid > 30000)
	    return SendErrorMessage(playerid, "Skin ID tidak valid. Skin ID hanya berkisar 0 hingga 312 dan custom skin berkisar 25000 - 30000.");

	SetPlayerSkin(userid, skinid);
	PlayerData[userid][pSkin] = skinid;

	SendAdminAlert(COLOR_RED, "%s telah mengubah skin milik %s menjadi skin ID: %d.", ReturnName(playerid, 0), ReturnName(userid, 0), skinid); // sendadminaction
	SendAdminAction(userid, "Administrator %s telah mengubah skin mu menjadi skin ID: %d.", ReturnName(playerid, 0), skinid);
	return 1;
}

CMD:dskin(playerid, params[])
{
	static
		skinid;
		
		if (PlayerData[playerid][pDonator] < 2)
	    return SendErrorMessage(playerid, "Kamu bukan seorang donator.");
	    
	    if (sscanf(params, "d", skinid))
	    return SendSyntaxMessage(playerid, "/dskin [skin id]");
	    
	    SetPlayerSkin(playerid, skinid);
	    PlayerData[playerid][pSkin] = skinid;
	    
	    SendClientMessage(playerid, COLOR_DONATOR, "Kamu telah mengubah skin mu");
		return 1;
}

CMD:setclothes(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	static
	    userid,
	    type[16],
	    skinid[512];

	if (sscanf(params, "ud", userid, type, skinid))
 	{
	 	SendSyntaxMessage(playerid, "/setclothes [playerid/nama] [slot] [skin ID]");
	 	SendClientMessage(playerid, COLOR_ORANGE, "[slot]:{FFFFFF} clothes1, clothes2, clothes3.");
		return 1;
	}
	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (!strcmp(type, "clothes1", true))
	{
	    if (isnull(skinid))
	        return SendSyntaxMessage(playerid, "/setclothes [playerid/nama] [slot] [skin ID]");

		PlayerData[userid][pClothes1] = strval(skinid);
		SendAdminAction(playerid, "Kamu mengubah pakaian Slot 1 milik %s menjadi %s.", ReturnName(userid, 0), skinid);
		SendAdminAction(userid, "Administrator %s telah mengubah slot Pakaian 1 milimu menjadi: %d.", ReturnName(playerid, 0), skinid);
	}
	else if (!strcmp(type, "clothes2", true))
	{
	    if (isnull(skinid))
	        return SendSyntaxMessage(playerid, "/setclothes [playerid/nama] [slot] [skin ID]");

		PlayerData[userid][pClothes2] = strval(skinid);
		SendAdminAction(playerid, "Kamu mengubah pakaian Slot 2 milik %s menjadi %s.", ReturnName(userid, 0), skinid);
		SendAdminAction(userid, "Administrator %s telah mengubah slot Pakaian 2 milimu menjadi: %d.", ReturnName(playerid, 0), skinid);
	}
	else if (!strcmp(type, "clothes3", true))
	{
	    if (isnull(skinid))
	        return SendSyntaxMessage(playerid, "/setclothes [playerid/nama] [slot] [skin ID]");

		PlayerData[userid][pClothes3] = strval(skinid);
		SendAdminAction(playerid, "Kamu mengubah pakaian Slot 3 milik %s menjadi %s.", ReturnName(userid, 0), skinid);
		SendAdminAction(userid, "Administrator %s telah mengubah slot Pakaian 3 milimu menjadi: %d.", ReturnName(playerid, 0), skinid);
	}
	return 1;
}

CMD:agrantlicense(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	static
	    userid,
	    type[16];

	if (sscanf(params, "us[16]S()[32]", userid, type))
 	{
	 	SendSyntaxMessage(playerid, "/agrantlicense [playerid/nama] [type]");
	 	SendClientMessage(playerid, COLOR_ORANGE, "[TYPE]:{FFFFFF} car, weaponA, weaponB, weaponC motorbike, truck, airplane, helicopter. ");
		return 1;
	}
	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (!strcmp(type, "car", true))
	{
	    if (Inventory_HasItem(userid, "Car License"))
	    	return SendErrorMessage(playerid, "Player sudah memiliki Car License.");

		Inventory_Add(userid, "Car License", 1581);
		SendAdminAction(playerid, "Kamu telah memberikan %s sebuah Car license.", ReturnName(userid, 0));
		SendAdminAction(userid, "Administrator %s telah memberikanmu sebuah Car license.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "weaponA", true))
	{
	    if (Inventory_HasItem(userid, "Weapon License A"))
 			return SendErrorMessage(playerid, "Player sudah memiliki sebuah Weapon license class A.");

		Inventory_Add(userid, "Weapon License A", 1581);
		SendAdminAction(playerid, "Kamu telah memberikan %s sebuah Weapon license class A.", ReturnName(userid, 0));
		SendAdminAction(userid, "Administrator %s telah memberikanmu sebuah Weapon license class A.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "weaponB", true))
	{
	    if (Inventory_HasItem(userid, "Weapon License B"))
 			return SendErrorMessage(playerid, "Player sudah memiliki sebuah Weapon license class B.");

		Inventory_Add(userid, "Weapon License B", 1581);
		SendAdminAction(playerid, "Kamu telah memberikan %s sebuah Weapon license class B.", ReturnName(userid, 0));
		SendAdminAction(userid, "Administrator %s telah memberikanmu sebuah Weapon license class B.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "weaponC", true))
	{
	    if (Inventory_HasItem(userid, "Weapon License C"))
 			return SendErrorMessage(playerid, "Player sudah memiliki sebuah Weapon license class C.");

		Inventory_Add(userid, "Weapon License C", 1581);
		SendAdminAction(playerid, "Kamu telah memberikan %s sebuah Weapon license class C.", ReturnName(userid, 0));
		SendAdminAction(userid, "Administrator %s telah memberikanmu sebuah Weapon license class C.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "motorbike", true))
	{
	    if (Inventory_HasItem(userid, "Motorbike License"))
 			return SendErrorMessage(playerid, "Player sudah memiliki sebuah Motorbike license.");

		Inventory_Add(userid, "Motorbike License", 1581);
		SendAdminAction(playerid, "Kamu telah memberikan %s sebuah Motorbike license.", ReturnName(userid, 0));
		SendAdminAction(userid, "Administrator %s telah memberikanmu sebuah Motorbike license.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "truck", true))
	{
	    if (Inventory_HasItem(userid, "Truck License"))
 			return SendErrorMessage(playerid, "Player sudah memiliki sebuah Truck license.");

		Inventory_Add(userid, "Truck License", 1581);
		SendAdminAction(playerid, "Kamu telah memberikan %s sebuah Truck license.", ReturnName(userid, 0));
		SendAdminAction(userid, "Administrator %s telah memberikanmu sebuah Truck license.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "airplane", true))
	{
	    if (Inventory_HasItem(userid, "Airplane License"))
 			return SendErrorMessage(playerid, "Player sudah memiliki sebuah Airplane license.");

		Inventory_Add(userid, "Airplane License", 1581);
		SendAdminAction(playerid, "Kamu telah memberikan %s sebuah Airplane license.", ReturnName(userid, 0));
		SendAdminAction(userid, "Administrator %s telah memberikanmu sebuah Airplane license.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "helicopter", true))
	{
	    if (Inventory_HasItem(userid, "Helicopter License"))
 			return SendErrorMessage(playerid, "Player sudah memiliki sebuah Helicopter license.");

		Inventory_Add(userid, "Helicopter License", 1581);
		SendAdminAction(playerid, "Kamu telah memberikan %s sebuah Helicopter license.", ReturnName(userid, 0));
		SendAdminAction(userid, "Administrator %s telah memberikanmu sebuah Helicopter license.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:arevokelicense(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	static
	    userid,
	    type[16];

	if (sscanf(params, "us[16]S()[32]", userid, type))
 	{
	 	SendSyntaxMessage(playerid, "/arevokelicense [playerid/name] [type]");
	 	SendClientMessage(playerid, COLOR_ORANGE, "[type]:{FFFFFF} car, weaponA, weaponB, weaponC motorbike, truck, airplane, helicopter. ");
		return 1;
	}
	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (!strcmp(type, "car", true))
	{
		Inventory_Remove(userid, "Car License");
		SendAdminAction(playerid, "Kamu telah mengambil Car license milik %s.", ReturnName(userid, 0));
		SendAdminAction(userid, "Car license kamu telah diambil oleh Administrator %s.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "weaponA", true))
	{
		Inventory_Remove(userid, "Weapon License A");
		SendAdminAction(playerid, "Kamu telah mengambil Weapon license class A milik %s.", ReturnName(userid, 0));
		SendAdminAction(userid, "Weapon license class A kamu telah diambil oleh Administrator %s.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "weaponB", true))
	{
		Inventory_Remove(userid, "Weapon License B");
		SendAdminAction(playerid, "Kamu telah mengambil Weapon license class B milik %s.", ReturnName(userid, 0));
		SendAdminAction(userid, "Weapon license class B kamutelah diambil oleh Administrator %s.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "weaponC", true))
	{
		Inventory_Remove(userid, "Weapon License C");
		SendAdminAction(playerid, "Kamu telah mengambil Weapon license class C milik %s.", ReturnName(userid, 0));
		SendAdminAction(userid, "Weapon license class C kamu telah diambil oleh Administrator %s.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "motorbike", true))
	{
		Inventory_Remove(userid, "Motorbike License");
		SendAdminAction(playerid, "Kamu telah mengambil Motorbike license milik %s.", ReturnName(userid, 0));
		SendAdminAction(userid, "Motorbike license kamu telah diambil oleh Administrator %s.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "truck", true))
	{
		Inventory_Remove(userid, "Truck License");
		SendAdminAction(playerid, "Kamu telah mengambil Truck license milik %s.", ReturnName(userid, 0));
		SendAdminAction(userid, "Truck license kamu telah diambil oleh Administrator %s.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "airplane", true))
	{
		Inventory_Remove(userid, "Airplane License");
		SendAdminAction(playerid, "Kamu telah mengambil Airplane license milik %s.", ReturnName(userid, 0));
		SendAdminAction(userid, "Airplane license kamu telah diambil oleh Administrator %s.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "helicopter", true))
	{
		Inventory_Remove(userid, "Helicopter License");
		SendAdminAction(playerid, "telah mengambil Helicopter license milik %s.", ReturnName(userid, 0));
		SendAdminAction(userid, "Helicopter license kamu telah diambil oleh Administrator %s.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:removefstyle(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 3) return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");
	{
	    new id, string[128];
	    if(sscanf(params, "ud", id))
		{
			SendSyntaxMessage(playerid, "/removefstyle [player id atau nama]");
		}
		else
		{
		    PlayerData[id][pFightStyle] = 4;
      		SetPlayerFightingStyle(id, 4);
      		format(string, sizeof(string), "Administrator %s telah menghapus fightstyle milikmu.", ReturnName(playerid, 0));
        	SendClientMessage(id, COLOR_ORANGE, string);
		}
	}
	return 1;
}

CMD:setfstyle(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 3) return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");
	{
 		new id, style, string[128];
		if(sscanf(params, "ud", id, style))
		{
			SendSyntaxMessage(playerid, "/setfightstyle [player id or name] [style]");
			SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} 1 - Normal 2 - Boxing 3 - Kung Fu 4 - Kneehead 5 - Grab kick 6 - Elbow");
		}
		else
		{
			switch(style)
			{
   				case 0:
			    {
	     			SendSyntaxMessage(playerid, "/setfightstyle [player id or name] [style]");
					SendClientMessage(playerid, COLOR_WHITE, "Style: 1 - Normal 2 - Boxing 3 - Kung Fu 4 - Kneehead 5 - Grab kick 6 - Elbow");
  				}
		    	case 1:
			    {
       				PlayerData[id][pFightStyle] = 4;
			        SetPlayerFightingStyle(id, 4);

					format(string, sizeof(string), "Telah mengubah fight style milik %s menjadi Normal.", ReturnName(id, 0));
     				SendClientMessage(playerid, COLOR_WHITE, string);
	        		format(string, sizeof(string), "Administrator %s telah mengubah fighting style kamu menjadi Normal.", ReturnName(playerid, 0));
			        SendClientMessage(id, COLOR_WHITE, string);
	    		}
			    case 2:
			    {
       				PlayerData[id][pFightStyle] = 5;
			        SetPlayerFightingStyle(id, 5);

					format(string, sizeof(string), "Telah mengubah fight style milik %s menjadi Boxing.", ReturnName(id, 0));
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "Administrator %s telah mengubah fighting style kamu menjadi Boxing.", ReturnName(playerid, 0));
					SendClientMessage(id, COLOR_WHITE, string);
	    		}
			    case 3:
			    {
			        PlayerData[id][pFightStyle] = 6;
			        SetPlayerFightingStyle(id, 6);

					format(string, sizeof(string), "Telah mengubah fight style milik %s menjadi Kung Fu.", ReturnName(id, 0));
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "Administrator %s telah mengubah fighting style kamu menjadi Kung Fu.", ReturnName(playerid, 0));
					SendClientMessage(id, COLOR_WHITE, string);
	    		}
			    case 4:
			    {
			        PlayerData[id][pFightStyle] = 7;
			        SetPlayerFightingStyle(id, 7);

					format(string, sizeof(string), "Telah mengubah fight style milik %s menjadi Knee Head.", ReturnName(id, 0));
					SendClientMessage(playerid, COLOR_WHITE, string);
     				format(string, sizeof(string), "Administrator %s telah mengubah fighting style kamu menjadi Knee Head.", ReturnName(playerid, 0));
     				SendClientMessage(id, COLOR_WHITE, string);
  				}
		    	case 5:
			    {
					PlayerData[id][pFightStyle] = 15;
			        SetPlayerFightingStyle(id, 15);

					format(string, sizeof(string), "Telah mengubah fight style milik %s menjadi Grab Kick.", ReturnName(id, 0));
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "Administrator %s telah mengubah fighting style kamu menjadi Grab Kick.", ReturnName(playerid, 0));
					SendClientMessage(id, COLOR_WHITE, string);
	    		}
			    case 6:
			    {
       				PlayerData[id][pFightStyle] = 16;
			        SetPlayerFightingStyle(id, 16);

					format(string, sizeof(string), "Telah mengubah fight style milik %s menjadi Elbow.", ReturnName(id, 0));
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "Administrator %s telah mengubah fighting style kamu menjadi Elbow.", ReturnName(playerid, 0));
					SendClientMessage(id, COLOR_WHITE, string);
	    		}
			    default:
			    {
       				SendSyntaxMessage(playerid, "/setfightstyle [player id or name] [style]");
					SendClientMessage(playerid, COLOR_WHITE, "Style: 1 - Normal 2 - Boxing 3 - Kung Fu 4 - Kneehead 5 - Grab kick 6 - Elbow");
					return SetPlayerFightingStyle(id, pFightStyle);
	    		}
			}
		}
	}
	return 1;
}

CMD:ban(playerid, params[])
{
	static
	    userid,
		reason[128],
		ip[24],
		string[128];

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 3)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "us[128]", userid, reason))
	    return SendSyntaxMessage(playerid, "/ban [playerid] [reason]");

    if (userid == INVALID_PLAYER_ID || (IsPlayerConnected(userid) && PlayerData[userid][pKicked]))
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Kamu tidak bisa membanned dirimu sendiri.");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin] || PlayerData[userid][pHelper] > PlayerData[playerid][pHelper])
	    return SendErrorMessage(playerid, "Pemain yang ditentukan memiliki otoritas yang lebih tinggi.");

	format(string, sizeof(string),"ban %s", userid);
	SendAdminAlert(COLOR_LIGHTRED, "%s telah membaned %s dengan alasan %s", ReturnName(playerid, 0), userid, reason);
	
	Dialog_Show(userid, ShowOnly, DIALOG_STYLE_MSGBOX, "Banned", "Akunmu telah dibanned dari server.\n\nUsername: %s\nAlasan: %s\nAdmin yang membanned kamu: %s\n\nTekan F8 dan kirim screenshot ke forum/group.", "Tutup", "", PlayerData[userid][pUsername], reason, ReturnName(playerid, 0));
	SendNearbyMessage(userid, 30.0, COLOR_RED, "[Disconnect] %s telah keluar dari server, Alasan : Banned", ReturnName(userid, 0));
	SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s telah dibanned oleh %s untuk alasan: %s.", ReturnName(userid, 0), ReturnName(playerid, 0), reason);
	SendServerMessage(userid, "Administrator %s telah membanned kamu dengan alasan: %s.", ReturnName(playerid, 0), reason);
	Log_Write("logs/ban_log.txt", "[%s] %s telah dibanned oleh %s untuk alasan: %s.", ReturnDate(), ReturnName(userid, 0), ReturnName(playerid, 0), reason);

	Blacklist_Add("0", PlayerData[userid][pUsername], PlayerData[playerid][pUsername], reason);
	KickEx(userid);
	
	GetPlayerIp(userid, ip, sizeof(ip));
	foreach (new i : Player)
	{
		if(!strcmp(PlayerData[i][pIP], ip, true))
		{
			KickEx(i);
			SendServerMessage(playerid, "Administrator %s telah membanned teman kamu dengan alasan: %s.", ReturnName(playerid, 0), reason);
		}
	}
	return 1;
}

CMD:unban(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 3)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (isnull(params) || strlen(params) > 24)
	{
		SendSyntaxMessage(playerid, "/unban [username]");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[NOTE]:{FFFFFF} Ketik \"/username\" untuk mencari username dari sebuah karakter.");
	}
	else
	{
	    Blacklist_Remove(params);

	    SendServerMessage(playerid, "Kamu melalukan unban untuk \"%s\".", params);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah melakukan unban kepada \"%s\".", ReturnName(playerid, 0), params);

	    Log_Write("logs/ban_log.txt", "[%s] %s telah melakukan unban untuk akun \"%s\".", ReturnDate(), ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:banip(playerid, params[])
{
	new
		type[128],
		string[128];
		
	if(PlayerData[playerid][pAdmin] >= 2)
	{
		if(sscanf(params, "s[128]", type)) 
			return SendClientMessage(playerid, -1, "Usage: /banip [IP]");
		
		if (!IsAnIP(type))
			return SendErrorMessage(playerid, "IP address yang kamu masukan tidak valid.");
			
		format(string, sizeof(string),"banip %s", type);
		SendRconCommand(string);
		SendRconCommand("reloadbans");
		SendAdminAlert(COLOR_RED, "%s telah membaned IP %s", ReturnName(playerid, 0), type);
	}
	else SendErrorMessage(playerid, "Kamu bukan Admin atau Admin Level kurang tinggi");
	return 1;
}

CMD:unbanip(playerid, params[])
{
	new 
		type[128],
		string[128];
	
	if(sscanf(params, "s[128]", type))
		return SendClientMessage(playerid, -1, "USAGE: /unbanip [Players IP]");
		
	if (!IsAnIP(type))
		return SendErrorMessage(playerid, "IP address yang kamu masukan tidak valid.");

	if(PlayerData[playerid][pAdmin] >= 2)
	{
		format(string, sizeof(string),"unbanip %s", type);
		SendRconCommand(string);
		SendRconCommand("reloadbans");
		Blacklist_RemoveIP(type);
		SendAdminAlert(COLOR_RED, "%s telah meng-UNbaned IP %s", ReturnName(playerid, 0), type);
	}
	else
		return SendClientMessage(playerid, -1 ,"Kamu tidak memiliki ijin untuk menggunakan perintah ini!");
		
	return 1;
}


CMD:username(playerid, params[])
{
	if (isnull(params) || strlen(params) > 24)
		return SendSyntaxMessage(playerid, "/username [character name]");

	static
	    query[128];

	format(query, sizeof(query), "SELECT `Username` FROM `characters` WHERE `Character` = '%s'", SQL_ReturnEscaped(params));
	mysql_tquery(g_iHandle, query, "OnResolveUsername", "ds", playerid, params);

	return 1;
}

CMD:stats(playerid, params[])
{
	ShowStatsForPlayer(playerid, playerid);
	return 1;
}
CMD:cstats(playerid, params[])
{
    static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/cstats [playerid/nama]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (!PlayerData[userid][pLogged] && !PlayerData[userid][pCharacter])
	    return SendErrorMessage(playerid, "Player tidak login.");

	ShowStatsForPlayer(playerid, userid);
	SendAdminAction(playerid, "Kamu sekarang melihat statistik milik %s (ketik /stats untuk menutupnya).", ReturnName(userid, 0));
	return 1;
}

CMD:acc(playerid, params[])
{
	new
	    string[128];

	format(string, sizeof(string), "Kacamata: %s\nTopi: %s\nBandana: %s", (PlayerData[playerid][pGlasses]) ? ("Ya") : ("Tidak"), (PlayerData[playerid][pHat]) ? ("Ya") : ("Tidak"), (PlayerData[playerid][pBandana]) ? ("Ya") : ("Tidak"));
	Dialog_Show(playerid, Accessory, DIALOG_STYLE_LIST, "Aksesoris", string, "Pilih", "Batal");

	return 1;
}

CMD:shooter(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/shooter [playerid/nama]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (PlayerData[userid][pLastShot] == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player itu tidak tertembak oleh siapapun sejak dia masuk server.");

    SendServerMessage(playerid, "%s terakhir ditembak oleh %s (%s).", ReturnName(userid, 0), ReturnName(PlayerData[userid][pLastShot]), GetDuration(gettime() - PlayerData[userid][pShotTime]));
    return 1;
}

CMD:goto(playerid, params[])
{
	static
	    id,
	    type[24],
		string[64];

	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", id))
 	{
	 	SendSyntaxMessage(playerid, "/goto [player or type]");
		SendClientMessage(playerid, COLOR_ORANGE, "[type]:{FFFFFF} spawn, prison, house, business, entrance, job, gate, interior, billboard");
		return 1;
	}
    if (id == INVALID_PLAYER_ID)
	{
	    if (sscanf(params, "s[24]S()[64]", type, string))
		{
		    SendSyntaxMessage(playerid, "/goto [player or type]");
			SendClientMessage(playerid, COLOR_ORANGE, "[type]:{FFFFFF} spawn, prison, house, business, entrance, job, gate, interior, billboard");
			return 1;
	    }
	    if (!strcmp(type, "spawn", true)) {
	        SetDefaultSpawn(playerid);

	        return SendServerMessage(playerid, "Kamu berhasil teleport ke spawn place.");
		}
		else if (!strcmp(type, "prison", true))
		{
	        SetPlayerPos(playerid, 283.5930, 1413.3511, 10.4078);
	        SetPlayerFacingAngle(playerid, 180.0000);

	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);

	        return SendServerMessage(playerid, "Kamu berhasil teleport ke prison facility.");
		}
		//
		else if (!strcmp(type, "billboard", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/goto [billboard] [billboard ID]");

			if ((id < 0 || id >= MAX_BILLBOARDS) || !BillBoardData[id][bbExists])
			    return SendErrorMessage(playerid, "Billboard ID tidak valid.");

		    SetPlayerPos(playerid, BillBoardData[id][bbPos][0], BillBoardData[id][bbPos][1], BillBoardData[id][bbPos][2]);
		    SendServerMessage(playerid, "Kamu berhasil melakukan teleport ke Billboard ID: %d.", id);
		    return 1;
		}
		//
		else if (!strcmp(type, "house", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/goto [house] [house ID]");

			if ((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
			    return SendErrorMessage(playerid, "House ID tidak valid.");

		    SetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
		    SetPlayerInterior(playerid, HouseData[id][houseExterior]);

			SetPlayerVirtualWorld(playerid, HouseData[id][houseExteriorVW]);
		    SendServerMessage(playerid, "Kamu berhasil teleport ke house ID: %d.", id);
		    return 1;
		}
		else if (!strcmp(type, "business", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/goto [business] [business ID]");

			if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
			    return SendErrorMessage(playerid, "Business ID tidak valid.");

		    SetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
		    SetPlayerInterior(playerid, BusinessData[id][bizExterior]);

			SetPlayerVirtualWorld(playerid, BusinessData[id][bizExteriorVW]);
		    SendServerMessage(playerid, "Kamu berhasil teleport ke business ID: %d.", id);
		    return 1;
		}
		else if (!strcmp(type, "entrance", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/goto [entrance] [entrance ID]");

			if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
			    return SendErrorMessage(playerid, "Entrance ID tidak valid.");

		    SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
		    SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);

			SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);
		    SendServerMessage(playerid, "Kamu berhasil teleport ke entrance ID: %d.", id);
		    return 1;
		}
		else if (!strcmp(type, "job", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/goto [job] [job ID]");

			if ((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
			    return SendErrorMessage(playerid, "Job ID tidak valid.");

		    SetPlayerPos(playerid, JobData[id][jobPos][0], JobData[id][jobPos][1], JobData[id][jobPos][2]);
		    SetPlayerInterior(playerid, JobData[id][jobInterior]);

			SetPlayerVirtualWorld(playerid, JobData[id][jobWorld]);
		    SendServerMessage(playerid, "Kamu berhasil teleport ke job ID: %d.", id);
		    return 1;
		}
		else if (!strcmp(type, "gate", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/goto [gate] [gate ID]");

			if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
			    return SendErrorMessage(playerid, "Gate ID tidak valid.");

		    SetPlayerPos(playerid, GateData[id][gatePos][0] - (2.5 * floatsin(-GateData[id][gatePos][3], degrees)), GateData[id][gatePos][1] - (2.5 * floatcos(-GateData[id][gatePos][3], degrees)), GateData[id][gatePos][2]);
		    SetPlayerInterior(playerid, GateData[id][gateInterior]);

			SetPlayerVirtualWorld(playerid, GateData[id][gateWorld]);
		    SendServerMessage(playerid, "Kamu berhasil teleport ke gate ID: %d.", id);
		    return 1;
		}
		else if (!strcmp(type, "interior", true))
		{
		    static
		        str[1536];

			str[0] = '\0';

			for (new i = 0; i < sizeof(g_arrInteriorData); i ++) {
			    strcat(str, g_arrInteriorData[i][e_InteriorName]);
			    strcat(str, "\n");
		    }
		    Dialog_Show(playerid, TeleportInterior, DIALOG_STYLE_LIST, "Teleport: List Interior", str, "Pilih", "Batal");
		    return 1;
		}
	    else return SendErrorMessage(playerid, "Player tidak valid.");
	}
	if (!IsPlayerSpawned(id))
		return SendErrorMessage(playerid, "Kamu tidak bisa teleport ke player yang tidak spawn.");

	SendPlayerToPlayer(playerid, id);

	format(string, sizeof(string), "Kamu melakukan ~y~teleport~w~ ke %s.", ReturnName(id, 0));
	ShowPlayerFooter(playerid, string);

	return 1;
}

CMD:send(playerid, params[])
{
	static
	    userid,
	    type[24];

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "us[32]", userid, type))
 	{
	 	SendSyntaxMessage(playerid, "/send [player] [type]");
		SendClientMessage(playerid, COLOR_ORANGE, "[type]:{FFFFFF} spawn, prison");
		return 1;
	}
    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

 	if (!strcmp(type, "spawn", true))
	 {
  		SetDefaultSpawn(userid);

		SendServerMessage(playerid, "Kamu melakukan teleportasi untuk %s ke default spawn.", ReturnName(userid, 0));
		SendServerMessage(userid, "%s menteleport kamu ke default spawn.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "prison", true))
	{
		SetPlayerPos(playerid, 283.5930, 1413.3511, 10.4078);
  		SetPlayerFacingAngle(playerid, 180.0000);

		SetPlayerInterior(playerid, 0);
  		SetPlayerVirtualWorld(playerid, 0);

		SendServerMessage(playerid, "Kamu melakukan teleportasi untuk %s ke prison facility.", ReturnName(userid, 0));
		SendServerMessage(userid, "%s menteleport kamu ke prison facility.", ReturnName(playerid, 0));
	}
	return 1;
}

/*CMD:gotopos(playerid, params[])
{
	new Float:x, Float:y, Float:z;
	if(PlayerData[playerid][pAdmin] < 4)
		return SendErrorMessage(playerid,"Unauthorized.");
	if(sscanf(params, "fff", x,y,z))
		return SendSyntaxMessage(playerid,"/gotopos [X] [Y] [Z]");

	SetPlayerPos(playerid, x, y, z);
	return 1;
}*/

CMD:gethere(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/gethere [playerid/nama]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (!IsPlayerSpawned(userid))
		return SendErrorMessage(playerid, "Kamu tidak bisa menarik player ke posisimu ketika dia tidak spawn.");
		
    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin] || PlayerData[userid][pHelper] > PlayerData[playerid][pHelper])
	    return SendErrorMessage(playerid, "Pemain yang ditentukan memiliki otoritas yang lebih tinggi.");

	SendPlayerToPlayer(userid, playerid);
	SendServerMessage(playerid, "Kamu menarik player %s ke posisimu.", ReturnName(userid, 0));
	return 1;
}

CMD:inventory(playerid, params[])
{
	if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa membuka inventory saat ini.");

	if (PlayerData[playerid][pJailTime] > 0)
		return SendErrorMessage(playerid, "Kamu tidak bisa membuka inventory saat dipenjara.");

	OpenInventory(playerid);
	return 1;
}

CMD:checkitems(playerid, params[])
{
	static
		userid;

	if (PlayerData[playerid][pAdmin] < 3 && PlayerData[playerid][pHelper] < 3 )
	return SendErrorMessage(playerid, "Kamu tidak memiliki ijin untuk menggunakan perintah ini.");
	
	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/checkitems [playerid/nama]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");
	    
    OpenInventory(userid);
	SendAdminAction(playerid, "Kamu telah membuka inventory milik %s", ReturnName(userid, 0));
	return 1;
	
}

CMD:setinterior(playerid, params[])
{
	static
		userid,
	    interior;

	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ud", userid, interior))
		return SendSyntaxMessage(playerid, "/setinterior [playerid/nama] [interior]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	SetPlayerInterior(userid, interior);
	PlayerData[userid][pInterior] = interior;

	SendServerMessage(playerid, "Kamu mengubah %s interior menjadi %d.", ReturnName(userid, 0), interior);
	return 1;
}

CMD:setvw(playerid, params[])
{
	static
		userid,
	    world;

	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ud", userid, world))
		return SendSyntaxMessage(playerid, "/setvw [playerid/nama] [world]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	SetPlayerVirtualWorld(userid, world);
	PlayerData[userid][pWorld] = world;

	SendServerMessage(playerid, "Kamu telah mengubah %s virtual world menjadi %d.", ReturnName(userid, 0), world);
	return 1;
}

CMD:atalk(playerid, params[])
{
	static
	    userid,
	    text[128];

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "us[128]", userid, text))
		return SendSyntaxMessage(playerid, "/atalk [playerid/nama] [pesan]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	SendClientMessageEx(userid, COLOR_YELLOW, "[ADMIN]: %s berkata: %s", ReturnName(playerid, 0), text);

	if (playerid != userid) {
		SendClientMessageEx(playerid, COLOR_YELLOW, "[ADMIN]: %s says to %s : %s", ReturnName(playerid, 0), ReturnName(userid, 0), text);
	}
	return 1;
}

CMD:sendto(playerid, params[])
{
	static
	    userid,
	    targetid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "uu", userid, targetid))
	    return SendSyntaxMessage(playerid, "/sendto [playerid/nama] [playerid/nama]");

	if (userid == INVALID_PLAYER_ID || targetid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Salah satu user tidak valid.");
	    
    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin] || PlayerData[userid][pHelper] > PlayerData[playerid][pHelper])
	    return SendErrorMessage(playerid, "Pemain yang ditentukan memiliki otoritas yang lebih tinggi.");

	SendPlayerToPlayer(userid, targetid);

	SendServerMessage(playerid, "Kamu melakukan teleport %s ke posisi %s.", ReturnName(userid, 0), ReturnName(targetid));
	SendServerMessage(userid, "%s telah menteleportasi dirimu ke posisi %s.", ReturnName(playerid, 0), ReturnName(targetid));
	return 1;
}


CMD:sendtols(playerid, params[])
{
 	if (PlayerData[playerid][pAdmin] >= 1 && PlayerData[playerid][pHelper] >= 1)
	{
		static
		    userid;
		if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "USAGE: /sendtols [playerid]");

		if(IsPlayerConnected(userid))
		{
		    new string[128];
		    format(string, sizeof(string), "Kamu berhasil mengirim %s ke Los Santos", ReturnName(userid, 0));
		    SendClientMessageEx(playerid, COLOR_PINK, string);
			SetPlayerPos(userid, 1529.6,-1691.2,13.3);
			SetPlayerVirtualWorld(userid, 0);
			SetPlayerInterior(userid, 0);
			SendServerMessage(userid, "Kamu berhasil teleport ke Los Santos");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Anda tidak berhak memakai command ini!");
	}
	return 1;
}

CMD:sendtolv(playerid, params[])
{
 	if (PlayerData[playerid][pAdmin] >= 1 && PlayerData[playerid][pHelper] >= 1)
	{
		static
		    userid;
		if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "USAGE: /sendtolv [playerid]");
		
		if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin] || PlayerData[userid][pHelper] > PlayerData[playerid][pHelper])
	    return SendErrorMessage(playerid, "Pemain yang ditentukan memiliki otoritas yang lebih tinggi.");

		if(IsPlayerConnected(userid))
		{
		    new string[128];
		    format(string, sizeof(string), "Kamu berhasil mengirim %s ke Las Venturas", ReturnName(userid, 0));
		    SendClientMessageEx(playerid, COLOR_PINK, string);
			SetPlayerPos(userid, 1696.0568,1449.4135,10.7622);
			SetPlayerVirtualWorld(userid, 0);
			SetPlayerInterior(userid, 0);
			SendServerMessage(userid, "Kamu berhasil teleport ke Las Venturas");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Anda tidak berhak memakai command ini!");
	}
	return 1;
}

CMD:sendtomall(playerid, params[]) // udah w coba semua bisa // ga tau cara gabung
{
 	if (PlayerData[playerid][pAdmin] >= 1 && PlayerData[playerid][pHelper] >= 1)
	{
		static
		    userid;
		if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "USAGE: /sendtomall [playerid]");
		
		if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin] || PlayerData[userid][pHelper] > PlayerData[playerid][pHelper])
	    return SendErrorMessage(playerid, "Pemain yang ditentukan memiliki otoritas yang lebih tinggi.");

		if(IsPlayerConnected(userid))
		{
		    new string[128];
		    format(string, sizeof(string), "Kamu berhasil mengirim %s ke Market", ReturnName(userid, 0));
		    SendClientMessageEx(playerid, COLOR_PINK, string);
			SetPlayerPos(userid, 1123.2501,-1385.9479,13.7206);
			SetPlayerVirtualWorld(userid, 0);
			SetPlayerInterior(userid, 0);
			SendServerMessage(userid, "Kamu berhasil teleport ke Market");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Anda tidak berhak memakai command ini!");
	}
	return 1;
}

CMD:sendtosf(playerid, params[])
{
 	if (PlayerData[playerid][pAdmin] >= 1 && PlayerData[playerid][pHelper] >= 1)
	{
		static
		    userid;
		if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "USAGE: /sendtosf [playerid]");
		
		if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin] || PlayerData[userid][pHelper] > PlayerData[playerid][pHelper])
	    return SendErrorMessage(playerid, "Pemain yang ditentukan memiliki otoritas yang lebih tinggi.");

		if(IsPlayerConnected(userid))
		{
		    new string[128];
		    format(string, sizeof(string), "Kamu berhasil mengirim %s ke San Fiero", ReturnName(userid, 0));
		    SendClientMessageEx(playerid, COLOR_PINK, string);
			SetPlayerPos(userid, -1421.1937,-291.6473,14.1484);
			SetPlayerVirtualWorld(userid, 0);
			SetPlayerInterior(userid, 0);
			SendServerMessage(userid, "Kamu berhasil teleport ke San Fiero");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Anda tidak berhak memakai command ini!");
	}
	return 1;
}

CMD:sendtorc(playerid, params[])
{
 	if (PlayerData[playerid][pAdmin] >= 1 && PlayerData[playerid][pHelper] >= 1)
	{
		static
		    userid;
		if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "USAGE: /sendtorc [playerid]");
		
		if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin] || PlayerData[userid][pHelper] > PlayerData[playerid][pHelper])
	    return SendErrorMessage(playerid, "Pemain yang ditentukan memiliki otoritas yang lebih tinggi.");

		if(IsPlayerConnected(userid))
		{
		    new string[128];
		    format(string, sizeof(string), "Kamu berhasil mengirim %s ke Montgomery", ReturnName(userid, 0));
		    SendClientMessageEx(playerid, COLOR_PINK, string);
			SetPlayerPos(userid, 1248.1580,336.8560,19.5547);
			SetPlayerVirtualWorld(userid, 0);
			SetPlayerInterior(userid, 0);
			SendServerMessage(userid, "Kamu berhasil teleport ke Montgomery");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Anda tidak berhak memakai command ini!");
	}
	return 1;
}

CMD:sendtobay(playerid, params[])
{
 	if (PlayerData[playerid][pAdmin] >= 1 && PlayerData[playerid][pHelper] >= 1)
	{
		static
		    userid;
		if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "USAGE: /sendtobay [playerid]");
		
		if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin] || PlayerData[userid][pHelper] > PlayerData[playerid][pHelper])
	    return SendErrorMessage(playerid, "Pemain yang ditentukan memiliki otoritas yang lebih tinggi.");

		if(IsPlayerConnected(userid))
		{
		    new string[128];
		    format(string, sizeof(string), "Kamu berhasil mengirim %s ke Bay Side", ReturnName(userid, 0));
		    SendClientMessageEx(playerid, COLOR_PINK, string);
			SetPlayerPos(userid, -2506.1487,2409.9607,16.7436);
			SetPlayerVirtualWorld(userid, 0);
			SetPlayerInterior(userid, 0);
			SendServerMessage(userid, "Kamu berhasil teleport ke Bay Side");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Anda tidak berhak memakai command ini!");
	}
	return 1;
}

CMD:sendtobank(playerid, params[])
{
 	if (PlayerData[playerid][pAdmin] >= 1 && PlayerData[playerid][pHelper] >= 1)
	{
		static
		    userid;
		if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "USAGE: /sendtobank [playerid]");
		
		if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin] || PlayerData[userid][pHelper] > PlayerData[playerid][pHelper])
	    return SendErrorMessage(playerid, "Pemain yang ditentukan memiliki otoritas yang lebih tinggi.");

		if(IsPlayerConnected(userid))
		{
		    new string[128];
		    format(string, sizeof(string), "Kamu berhasil mengirim %s ke Los Santos Bank", ReturnName(userid, 0));
		    SendClientMessageEx(playerid, COLOR_PINK, string);
			SetPlayerPos(userid, 1461.7726,-1039.9537,23.8281);
			SetPlayerVirtualWorld(userid, 0);
			SetPlayerInterior(userid, 0);
			SendServerMessage(userid, "Kamu berhasil teleport ke Los Santos Bank");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Anda tidak berhak memakai command ini!");
	}
	return 1;
}

CMD:sendtoflint(playerid, params[])
{
 	if (PlayerData[playerid][pAdmin] >= 1 && PlayerData[playerid][pHelper] >= 1)
	{
		static
		    userid;
		if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "USAGE: /sendtoflint [playerid]");
		
		if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin] || PlayerData[userid][pHelper] > PlayerData[playerid][pHelper])
	    return SendErrorMessage(playerid, "Pemain yang ditentukan memiliki otoritas yang lebih tinggi.");

		if(IsPlayerConnected(userid))
		{
		    new string[128];
		    format(string, sizeof(string), "Kamu berhasil mengirim %s ke Flint Country", ReturnName(userid, 0));
		    SendClientMessageEx(playerid, COLOR_PINK, string);
			SetPlayerPos(userid, -106.0474,-1168.1271,2.8906);
			SetPlayerVirtualWorld(userid, 0);
			SetPlayerInterior(userid, 0);
			SendServerMessage(userid, "Kamu berhasil teleport ke Flint Country");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Anda tidak berhak memakai command ini!");
	}
	return 1;
}
/*
CMD:blacklist(playerid, params[])
{
	static
		type[24];

    if (PlayerData[playerid][pAdmin] >= 1 || PlayerData[playerid][pHelper] >= 1)
    {
		if (sscanf(params, "s[24]s[128]", type, params))
	 	{
		 	SendSyntaxMessage(playerid, "/blacklist [name] [parameter]");
		 	SendClientMessage(playerid, COLOR_ORANGE, "[name]:{FFFFFF} ban, banip, unbanip");
		 	return 1;
		}
			if (!strcmp(type, "ban", true))
			{
			    if (!IsValidPlayerName(params))
			        return SendErrorMessage(playerid, "Nama yang kamu masukan tidak valid.");

				foreach (new i : Player) if (!strcmp(PlayerData[i][pUsername], params) || !strcmp(ReturnName(i), params, true)) {
				    KickEx(i);
				}
				Blacklist_Add("0.0.0.0", params, PlayerData[playerid][pUsername], "Nama dibanned (/blacklist)");

			    SendServerMessage(playerid, "Kamu telah membanned \"%s\".", params);
			    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah membanned \"%s\".", PlayerData[playerid][pForumName], params);

			    Log_Write("logs/ban_log.txt", "[%s] %s has banned \"%s\".", ReturnDate(), ReturnName(playerid, 0), params);
			}
			else if (!strcmp(type, "banip", true))
			{
			    if (!IsAnIP(params))
			        return SendErrorMessage(playerid, "IP address yang kamu masukan tidak valid.");

				foreach (new i : Player) if (!strcmp(PlayerData[i][pIP], params, true))
			 	{
				    KickEx(i);
				}
				Blacklist_Add(params, "", PlayerData[playerid][pUsername], "IP Ban (/blacklist)");

			    SendServerMessage(playerid, "Kamu membanned IP \"%s\" .", params);
			    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah mebanned IP \"%s\".", PlayerData[playerid][pForumName], params);

			    Log_Write("logs/ban_log.txt", "[%s] %s telah membanned IP \"%s\".", ReturnDate(), ReturnName(playerid, 0), params);
			}
			else if (!strcmp(type, "unbanip", true))
				{
				    if (!IsAnIP(params))
				        return SendErrorMessage(playerid, "IP address yang kamu masukan tidak valid.");

					Blacklist_RemoveIP(params);

				    SendServerMessage(playerid, "Kamu mengunban \"%s\".", params);
				    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah mengunban IP \"%s\".", PlayerData[playerid][pForumName], params);

				    Log_Write("logs/ban_log.txt", "[%s] %s telah mengunban IP \"%s\".", ReturnDate(), ReturnName(playerid, 0), params);
				}
		}
	else {
		SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");
	}
	return 1;
}*/

CMD:getip(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/getip [playerid/nama]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	SendServerMessage(playerid, "IP Address %s adalah %s.", ReturnName(userid, 0), PlayerData[userid][pIP]);
	return 1;
}

CMD:togooc(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (!g_StatusOOC)
	{
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menonaktifkan obrolan Global OOC.", PlayerData[playerid][pForumName]);
	    g_StatusOOC = true;
	}
	else
	{
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah mengaktifkan obrolan Global OOC.", PlayerData[playerid][pForumName]);
	    g_StatusOOC = false;
	}
	return 1;
}
/*CMD:lasercol(playerid, params[])
{
	if(PlayerData[playerid][pDonator] >= 3)
	{
    	new color[16];
    	if(sscanf(params, "s[15]", color)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /lasercol [red/blue/pink/orange/green/yellow]");

    	if(!strcmp(color, "red", true)) SetPVarInt(playerid, "color", CreateDynamicObject(18643,0,0,0,0,0,0));
    	else if(!strcmp(color, "blue", true)) SetPVarInt(playerid, "color", CreateDynamicObject(19080,0,0,0,0,0,0));
    	else if(!strcmp(color, "pink", true)) SetPVarInt(playerid, "color", CreateDynamicObject(19081,0,0,0,0,0,0));
    	else if(!strcmp(color, "orange", true)) SetPVarInt(playerid, "color", CreateDynamicObject(19082,0,0,0,0,0,0));
    	else if(!strcmp(color, "green", true)) SetPVarInt(playerid, "color", CreateDynamicObject(19083,0,0,0,0,0,0));
    	else if(!strcmp(color, "yellow", true)) SetPVarInt(playerid, "color", CreateDynamicObject(19084,0,0,0,0,0,0));
    	else SendClientMessage(playerid, COLOR_GREY, "Warna tidak ada!");
	}
	else return SendClientMessage(playerid, COLOR_GREY, DonatorOnly);
	return 1;
}
CMD:laseroff(playerid, params[])
{
	if(PlayerData[playerid][pDonator] >= 3)
	{
		SetPVarInt(playerid, "laser", 0);
 		RemovePlayerAttachedObject(playerid, 17);
	}
	else return SendClientMessage(playerid, COLOR_GREY, DonatorOnly);
	return 1;
}
CMD:laseron(playerid, params[])
{
	if(PlayerData[playerid][pDonator] >= 3)
	{
		SetPVarInt(playerid, "laser", 1);
 		SetPVarInt(playerid, "color", GetPVarInt(playerid, "color"));
	}
	else return SendClientMessage(playerid, COLOR_GREY, DonatorOnly);
	return 1;
}*/

CMD:toggold(playerid, params[])
{
	if(PlayerData[playerid][pDonator] >= 1)
	{
		if(PlayerData[playerid][pDonatorDuty] == 0)
		{
			PlayerData[playerid][pDonatorDuty] = 1;
			SetPlayerColor(playerid, COLOR_DONATOR);
			SendClientMessage(playerid, COLOR_GREY, "Kamu mengaktifkan Duty Mode Donator.");
		}
		else
		{
  			PlayerData[playerid][pDonatorDuty] = 0;
			SetPlayerColor(playerid, DEFAULT_COLOR);
			SendClientMessage(playerid, COLOR_GREY, "Kamu menonaktifkan Duty Mode Donator");
		}
	}
	else return SendClientMessage(playerid, COLOR_GREY, DonatorOnly);
	return 1;
}

CMD:dooc(playerid, params[])
{
	if (PlayerData[playerid][pDonator] < 1)
	    return SendClientMessage(playerid, COLOR_GREY, DonatorOnly);

	if (isnull(params))
 		return SendSyntaxMessage(playerid, "/dooc [pesan]");
    if(PlayerData[playerid][pDisableDonator] == 0)
    {
    	SendDonatorAlert(COLOR_DONATORCHAT, "[DONATOR CHAT] %s %s: %s", DonatorRankName(playerid), ReturnName(playerid, 0), params);
	}
	return 1;
}

//====================Neon System===================//By AFA
CMD:neon(playerid, params[])
{
	if(PlayerData[playerid][pDonator] < 2) return SendClientMessage(playerid, COLOR_RED, "   Kamu harus menjadi Donator");
	{
    	if(IsPlayerInAnyVehicle(playerid))
		{
    		ShowPlayerDialog(playerid, 1997, DIALOG_STYLE_LIST, "Neon System Donator", "DarkBlue\nRed\nGreen\nWhite\nViolet\nYellow\nCyan\nLightBlue\nPink\nOrange\nLightGreen\nLightYellow\nDelete Neon", "Select", "Cancel");
		}
  	}
	return 1;
}
//======================================================

CMD:travel(playerid, params[])
{
		if(PlayerData[playerid][pDonator] > 0)
		{
			if(isnull(params))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /travel [location]");
				SendClientMessageEx(playerid, COLOR_DONATOR, "Locations: LS, SF, LV, RC");
				return 1;
			}

			if(strcmp(params,"ls",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
				    new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
					//SetPlayerPos(playerid, 1529.6,-1691.2,13.3);
					SendClientMessageEx(playerid, COLOR_DONATOR, "DONATOR: You have traveled to Los Santos.");
					SetPlayerInterior(playerid,0);
					SetPlayerVirtualWorld(playerid, 0);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_DONATOR, "   You are not in a vehicle!");
				}
			}

			if(strcmp(params,"sf",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
				    new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -1417.0,-295.8,14.1);
					//SetPlayerPos(playerid, -1417.0,-295.8,14.1);
					SendClientMessageEx(playerid, COLOR_DONATOR, "DONATOR: You have traveled to San Fierro.");
					SetPlayerInterior(playerid,0);
					SetPlayerVirtualWorld(playerid, 0);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_DONATOR, "   You are not in a vehicle!");
				}
			}
			if(strcmp(params,"lv",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
                    new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
					//SetPlayerPos(playerid, 1699.2, 1435.1, 10.7);
					SendClientMessageEx(playerid, COLOR_DONATOR, "DONATOR: You have traveled to Las Venturas.");
					SetPlayerInterior(playerid,0);
					SetPlayerVirtualWorld(playerid, 0);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_DONATOR, "   You are not in a vehicle!");
				}
			}
			if(strcmp(params,"rc",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
				    new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1253.70, 343.73, 19.41);
					//SetPlayerPos(playerid, 1253.70, 343.73, 19.41);
					SendClientMessageEx(playerid, COLOR_DONATOR, "DONATOR: You have traveled to Red County.");
					SetPlayerInterior(playerid,0);
					SetPlayerVirtualWorld(playerid, 0);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_DONATOR, "   You are not in a vehicle!");
				}
			}
		}
		return 1;
}

CMD:sethp(playerid, params[])
{
	static
		userid,
	    Float:amount;

	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "uf", userid, amount))
		return SendSyntaxMessage(playerid, "/sethealth [playerid/nama] [jumlah]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	SetPlayerHealth(userid, amount);
	SendAdminAction(playerid, "Telah mengubah darah milik %s menjadi %.2f.", ReturnName(userid, 0), amount);
	SendAdminAction(userid, "Administrator %s Telah mengubah darah milikmu menjadi %.2f.", ReturnName(playerid, 0), amount);
	return 1;
}

CMD:swat(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Kamu bukan seorang petugas polisi.");

    if (PlayerData[playerid][pSwatMember])
	{
		SetPlayerArmour(playerid, 200.0);
		SetPlayerHealth(playerid, 100.0);
	  	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menggunakan SWAT equipment miliknya.", ReturnName(playerid, 0));
	   	SendFactionMessage(factionid, COLOR_FACTIONCHAT, "**DISPATCH: %s %s sekarang dalam SWAT Duty.**", Faction_GetRank(playerid), ReturnName(playerid, 0));
	}
	else return SendErrorMessage(playerid, "Kamu tidak diperbolehkan melaksanakan S.W.A.T duty.");
	return 1;
}

CMD:bomb(playerid, params[])
{
	new
		idx,
		szParameters[2][128 - 6];

	szParameters[0] = strtok(params, idx);

	if(isnull(szParameters[0]))
	{
		SendClientMessage(playerid, COLOR_GREY, "USAGE: /bomb [Parameter]");
		SendClientMessage(playerid, COLOR_GREY, "[Paramater]: {E6E6E6}put{AFAFAF}, {E6E6E6}activate{AFAFAF}");

        if(PlayerData[playerid][pSwatMember])
		{
			SendClientMessage(playerid, COLOR_FACTIONCHAT, "[SWAT]: {E6E6E6}check{AFAFAF}, {E6E6E6}disarm{AFAFAF}");
		}

		return 1;
	}

	szParameters[1] = strtok(params, idx);

	if(!strcmp(szParameters[0], "put", true, 4))
	{
		new
			BombTimerID = GetPVarInt(playerid, "PuttingBomb"),
			szSetting[20],
			iTimer;

		if(BombTimerID)
		{
			KillTimer(BombTimerID);
			DeletePVar(playerid, "PuttingBomb");
			GameTextForPlayer(playerid, "~r~Berhenti mempersenjatai bom", 2000, 3);
			TogglePlayerControllable(playerid, 1);
			return 1;
		}

		if (!Inventory_HasItem(playerid, "Bomb"))
    		return SendErrorMessage(playerid, "Kamu tidak punya bom . Kunjungi Blackmarket dan beli satu atau hubungi anggota ilegal.");

		szSetting = strtok(params, idx);
		iTimer = strval(strtok(params, idx));

		if(isnull(szParameters[1]))
		{
			SendClientMessage(playerid, COLOR_GREY, "USAGE: /bomb put [{E6E6E6}Vehicle ID{AFAFAF}] [{E6E6E6}Setting{AFAFAF}] [{E6E6E6}Timer (Seconds){AFAFAF}]");
			SendClientMessage(playerid, COLOR_WHITE, "Settingan yang ada: {E6E6E6}Ignition, timer, speed, remote"),
			SendClientMessage(playerid, COLOR_GREY, "NOTE: Gunakan \"{E6E6E6}/bomb put help{AFAFAF}\" untuk penjalasan cara penggunaan.");
			return 1;
		}

		if(!strcmp(szParameters[1], "help", true, 5))
		{
			SendClientMessage(playerid, COLOR_WHITE, "Setting 1: IGNITION {AAAAAA}- Mengaktifkan timer bom setelah {E6E6E6}bom{AAAAAA} sudah terpasang.");
			SendClientMessage(playerid, COLOR_WHITE, "Setting 2: TIMER {AAAAAA}- {E6E6E6}Jumlah{AAAAAA} waktu untuk bom bisa meledak.");
			SendClientMessage(playerid, COLOR_WHITE, "Setting 3: SPEED {AAAAAA}- Bom akan meledak sesuai {E6E6E6}kecepatan kendaraan{AAAAAA}");
			SendClientMessage(playerid, COLOR_WHITE, "dibawah {E6E6E6}40{AAAAAA} km/h. Bom akan aktif {E6E6E6}segera ketika kendaraan dinyalakan{AAAAAA}.");
			SendClientMessage(playerid, COLOR_WHITE, "Setting 4: REMOTE {AAAAAA}- Bom diaktifkan melalui \"{E6E6E6}/bomb activate{AAAAAA}\". Catatan : jarak {E6E6E6}remote terbatas{AAAAAA}.");
			SendClientMessage(playerid, COLOR_WHITE, "Waktunya: {AAAAAA}- Kamu dapat memutuskan berapa lama waktu yang dibutuhkan untuk bom tersebut {E6E6E6}meledak{AAAAAA} dari saat bom itu diaktifkan.");
			SendClientMessage(playerid, COLOR_WHITE, "Kamu bisa mendapatkan {E6E6E6}ID{AAAAAA} dari kendaraan dengan menggunakan perintah \"{E6E6E6}/dl{AAAAAA}\".");
			return 1;
		}

		if( !GetVehicleModel( strval( szParameters[1] ) ) ) // The car isn't spawned
		{
			SendClientMessage(playerid, COLOR_GREY, "ERROR: Vehicle ID tidak valid.");
			SendClientMessage(playerid, COLOR_GREY, "TISP: Kamu bisa menggunakan \"{E6E6E6}/dl{AFAFAF}\" untuk melihat ID kendaraan terdekat.");
			return 1;
		}

		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "ERROR: Kamu harus berdiri dekat dengan kendaraan, bukan di dalamnya.");
			return 1;
		}

		new
					iVehicleID = strval(szParameters[1]),
			Float: 	f_Pos[3];

		GetVehiclePos(iVehicleID, f_Pos[0], f_Pos[1], f_Pos[2]);

		if(!IsPlayerInRangeOfPoint(playerid, BOMB_USE_DISTANCE, f_Pos[0], f_Pos[1], f_Pos[2]))
		{
			SendClientMessage(playerid, COLOR_GREY, "ERROR: Kamu tidak cukup dekat dengan kendaraan ini.");
			return 1;
		}

		new
			iSetting;

		if(!strcmp(szSetting, "ignition", true, 9))
		{
			if(iTimer < 1 || iTimer > 60)
			{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: Timer tidak valid . Harus antara {E6E6E6}1{AFAFAF} hingga {E6E6E6}60{AFAFAF} detik.");
				return 1;
			}
			iSetting = VEHICLE_BOMB_TYPE_IGNITION;
			Inventory_Remove(playerid, "Bomb");
		}

		else if(!strcmp(szSetting, "timer", true, 6))
		{
			if(iTimer < 10 || iTimer > 120)
			{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: Timer tidak valid. Harus antara {E6E6E6}10{AFAFAF} hingga {E6E6E6}120{AFAFAF} detik.");
				return 1;
			}
			iSetting = VEHICLE_BOMB_TYPE_TIMER;
			Inventory_Remove(playerid, "Bomb");
		}

		else if(!strcmp(szSetting, "speed", true, 6))
		{
			if(iTimer < 15 || iTimer > 60)
			{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: Timer tidak valid. Harus antara {E6E6E6}15{AFAFAF} hingga {E6E6E6}60{AFAFAF} detik.");
				return 1;
			}
			iSetting = VEHICLE_BOMB_TYPE_SPEED;
			Inventory_Remove(playerid, "Bomb");
		}

		else if(!strcmp(szSetting, "remote", true, 6))
		{
			if(iTimer < 1 || iTimer > 60)
			{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: Timer tidak valid. Harus antara {E6E6E6}1{AFAFAF} hingga {E6E6E6}60{AFAFAF} detik.");
				return 1;
			}
			iSetting = VEHICLE_BOMB_TYPE_REMOTE;
			Inventory_Remove(playerid, "Bomb");
		}

		else
		{
			SendClientMessage(playerid, COLOR_GREY, "ERROR: Pengaturan tidak valid. Silakan lihat panduan dengan cara \"{E6E6E6}/bomb put help{AFAFAF}\".");
			return 1;
		}

		ResetBombInfo(iVehicleID);

		ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 2.0, 0, 0, 0, 0, BOMB_ARMTIME * 1100, 0);

		SetPVarInt(playerid, "PuttingBomb", SetTimerEx("PlayerPutBombInVehicle", 0, 0, "ddddd", BOMB_ARMTIME, playerid, iVehicleID, iSetting, iTimer));

		return 1;

	}

	if(!strcmp(szParameters[0], "activate", true, 4))
	{
		new
			Float: 	f_vPos[3],
					iHasAnyRemoteBombs;

		for(new i; i < MAX_VEHICLES; i++)
		{
			if(g_Bomb_Vehicles[i][bv_i_ArmedType] == VEHICLE_BOMB_TYPE_REMOTE && g_Bomb_Vehicles[i][bv_i_BombOwner] == playerid)
			{
				iHasAnyRemoteBombs = 1;
				GetVehiclePos(i, f_vPos[0], f_vPos[1], f_vPos[2]);
				if(IsPlayerInRangeOfPoint(playerid, 100.0, f_vPos[0], f_vPos[1], f_vPos[2]))
				{
					g_Bomb_Vehicles[i][bv_i_BombOwner] = INVALID_PLAYER_ID;
					BombActivated(i);
				}
			}
		}

		if(!iHasAnyRemoteBombs)
		{
			SendClientMessage(playerid, COLOR_GREY, "ERROR: Kamu belum menanam bom apapun.");
			return 1;
		}

		new
			Float:	f_Pos[3];

		GetPlayerPos(playerid, f_Pos[0], f_Pos[1], f_Pos[2]);

		PlayerPlaySound(playerid, 6400, f_Pos[0], f_Pos[1], f_Pos[2]);

		SendClientMessage(playerid, COLOR_ORANGE, "Kamu bisa menekan trigger di remotemu untuk meledakan bom.");
		SendClientMessage(playerid, COLOR_GREY, "NOTE: Jarak untuk meremote terbatas.");

		return 1;
	}

	if(PlayerData[playerid][pSwatMember])
	{
		if(!strcmp(szParameters[0], "check", true, 4))
		{
			new
				BombCheckingTimerID = GetPVarInt(playerid, "CheckingForBombs");

			if(BombCheckingTimerID)
			{
				KillTimer(BombCheckingTimerID);
				DeletePVar(playerid, "CheckingForBombs");
				GameTextForPlayer(playerid, "~r~Berhenti mencari bom", 2000, 3);
				return 1;
			}

			if(GetPVarInt(playerid, "DisarmingBomb"))
			{
				SendClientMessage(playerid, COLOR_GREY, "Kamu sibuk melucuti senjata bom tersebut.");
				return 1;
			}

			if(isnull(szParameters[1]))
			{
				SendClientMessage(playerid, COLOR_GREY, "USAGE: /bomb check [Vehicle ID]");
				return 1;
			}

			new
				iVehicleID = strval(szParameters[1]);

			if(!GetVehicleModel(iVehicleID))
			{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: Vehicle ID tidak valid.");
				SendClientMessage(playerid, COLOR_GREY, "TIP: Kamu bisa menggunakan \"{E6E6E6}/dl{AFAFAF}\" untuk melihat ID Kendaraan terdekat.");
				return 1;
			}

			if(IsPlayerInAnyVehicle(playerid))
			{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: Kamu harus berdiri dekat dengan kendaraan, bukan di dalamnya.");
				return 1;
			}

			new
				Float: f_vPos[3];

			GetVehiclePos(iVehicleID, f_vPos[0], f_vPos[1], f_vPos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, BOMB_USE_DISTANCE, f_vPos[0], f_vPos[1], f_vPos[2]))
			{
				SendClientMessage(playerid, COLOR_GREY, "Kamu tidak cukup dekat dengan kendaraan.");
				return 1;
			}

			GameTextForPlayer(playerid, "~g~Mengecek bom... ~n~ ~y~Ketik ~r~/bomb check~y~ lagi untuk berhenti.", BOMB_CHECKTIME * 1100, 3);

			ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 2.0, 0, 0, 0, 0, BOMB_CHECKTIME * 1100, 0);

			SetPVarInt(playerid, "CheckingForBombs", SetTimerEx("CheckForBombs", BOMB_CHECKTIME * 1000, 0, "dd", playerid, iVehicleID));

			return 1;
		}

		if(!strcmp(szParameters[0], "disarm", true, 4))
		{
			new
				DisarmingBombTimerID = GetPVarInt(playerid, "DisarmingBomb");

			if(DisarmingBombTimerID)
			{
				KillTimer(DisarmingBombTimerID);
				DeletePVar(playerid, "DisarmingBomb");
				GameTextForPlayer(playerid, "~r~Berhenti melucuti bom", 2000, 3);
				return 1;
			}

			if(GetPVarInt(playerid, "CheckingForBombs"))
			{
				SendClientMessage(playerid, COLOR_GREY, "Kamu sibuk memeriksa bom.");
				return 1;
			}

			if(isnull(szParameters[1]))
			{
				SendClientMessage(playerid, COLOR_GREY, "USAGE: /bomb disarm [Vehicle ID]");
				SendClientMessage(playerid, COLOR_GREY, "TIPS: Kamu bisa menggunakan \"{E6E6E6}/dl{AFAFAF}\" untuk melihat ID Kendaraan terdekat.");
				return 1;
			}

			new
				iVehicleID = strval(szParameters[1]);

			if(!GetVehicleModel(iVehicleID))
			{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: ID kendaraan tidak valid.");
				SendClientMessage(playerid, COLOR_GREY, "TIPS: Kamu bisa menggunakan \"{E6E6E6}/dl{AFAFAF}\" untuk melihat ID Kendaraan terdekat.");
				return 1;
			}

			if(IsPlayerInAnyVehicle(playerid))
			{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: Kamu harus berdiri dekat dengan kendaraan, bukan di dalamnya.");
				return 1;
			}

			new
				Float: f_vPos[3];

			GetVehiclePos(iVehicleID, f_vPos[0], f_vPos[1], f_vPos[2]);

			if(!IsPlayerInRangeOfPoint(playerid, BOMB_USE_DISTANCE, f_vPos[0], f_vPos[1], f_vPos[2]))
			{
				SendClientMessage(playerid, COLOR_GREY, "Kamu tidak cukup dekat dengan kendaraan.");
				return 1;
			}

			if(GetPVarInt(playerid, "CheckedCarForBombs") != iVehicleID)
			{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: Kamu belum memeriksa bom mobil ini, Kamu perlu melihat di mana dulu letak bom.");
				return 1;
			}

			if(GetPVarInt(playerid, "FoundBombInCar") != iVehicleID)
			{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: Kamu belum menemukan bom pada kendaraan ini.");
				return 1;
			}

			GameTextForPlayer(playerid, "~g~Melucuti bom...~n~ ~y~Ketik ~r~/bomb disarm~y~ untuk berhenti.", BOMB_DISARMTIME * 1000, 3);

			ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 2.0, 0, 0, 0, 0, BOMB_DISARMTIME * 1100, 0);

			SetPVarInt(playerid, "DisarmingBomb", SetTimerEx("DisarmBomb", BOMB_DISARMTIME * 1000, 0, "dd", playerid, iVehicleID));

			return 1;
		}
	}

	SendClientMessage(playerid, COLOR_GREY, "ERROR: Parameter tidak valid. Untuk daftar lengkap parameter yang tersedia, ketik \"/bomb\".");
	return 1;
}

CMD:plantbomb(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "Bomb"))
    		return SendErrorMessage(playerid, "Kamu tidak punya bom. Kunjungi Black market dan beli satu atau hubungi anggota ilegal.");

	if(checkPlayerExplosives(playerid) < MAX_EXPLOSIVES_PER_PLAYER) // can the player use more C4 or have they reached the limit defined above?
	{
		new slotToUse 		= findExplosiveSlot();
		new individualSlot 	= checkPlayerExplosives(playerid);
		new labelText[128];
		new pName[MAX_PLAYER_NAME];

		GetPlayerName(playerid, pName, sizeof(pName));

		format(labelText, sizeof(labelText), "C4 Terpasang.\nID: %i", individualSlot);

		explosiveData[slotToUse][explosiveOwner] = playerid;
		explosiveData[slotToUse][explosiveSlot] = individualSlot;
		GetPlayerPos(playerid, explosiveData[slotToUse][explosivePosition][0], explosiveData[slotToUse][explosivePosition][1], explosiveData[slotToUse][explosivePosition][2]);
		explosiveData[slotToUse][explosiveObject] = CreateDynamicObject(1654, explosiveData[slotToUse][explosivePosition][0], explosiveData[slotToUse][explosivePosition][1], (explosiveData[slotToUse][explosivePosition][2] - 0.6), 0, 0.00000, 0);
		explosiveData[slotToUse][explosiveLabel] = Create3DTextLabel(labelText, COLOR_YELLOW, explosiveData[slotToUse][explosivePosition][0], explosiveData[slotToUse][explosivePosition][1], (explosiveData[slotToUse][explosivePosition][2] - 0.5), 30, GetPlayerVirtualWorld(playerid), 0);

		SendClientMessage(playerid, COLOR_RED, "C4 berhasil dipasang! untuk meledakan, gunakan /detonate [slot]");
		Inventory_Remove(playerid, "Bomb");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Kamu tidak bisa menempatkan bahan peledak lagi, coba ledakan salah satu.");
	}

	return 1;
}

CMD:detonate(playerid, params[])
{
	new explosivesID, count = 0;
	if(!sscanf(params, "i", explosivesID))
	{
		for(new i = 0; i < MAX_EXPLOSIVES; i++)
		{
			if(explosiveData[i][explosiveOwner] == playerid)
			{
				if(explosiveData[i][explosiveSlot] == explosivesID)
				{
					detonateExplosive(playerid, explosivesID);
					count++;
				}
			}
		}
	}
	else
	{
		return SendSyntaxMessage(playerid, "/detonate [slot]");
	}
	return 1;
}

CMD:defuse(playerid, params[])
{
    if (PlayerData[playerid][pSwatMember])
    {
		new bool:anyLocated = false;
		for(new i = 0; i < MAX_EXPLOSIVES; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 5.0, explosiveData[i][explosivePosition][0], explosiveData[i][explosivePosition][1], explosiveData[i][explosivePosition][2]))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Kamu sekarang mencoba mendefuse C4. Mohon bersabar dan awasi kabelnya.");
				ApplyAnimation(playerid, "BOMBER", "BOM_PLANT_LOOP", 4.0, 1, 0, 0, 0, -1);

				SetTimerEx("DefuseC4", 3000, false, "ii", playerid, i);
				anyLocated = true;

				break;
			}
		}

		if(!anyLocated)
		{
			return SendClientMessage(playerid, COLOR_ORANGE, "Kamu tidak berada di dekat C4 manapun.");
		}
	}
	return 1;
}

CMD:setarmor(playerid, params[])
{
	static
		userid,
	    Float:amount;

	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "uf", userid, amount))
		return SendSyntaxMessage(playerid, "/setarmor [playerid/nama] [jumlah]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

    SetPlayerArmour(userid, amount);
	SendAdminAction(playerid, "Kamu telah mengubah jumlah armor milik %s menjadi %.2f.", ReturnName(userid, 0), amount);
	SendAdminAction(userid, "Administrator %s telah mengubah jumlah armormu menjadi %.2f.", ReturnName(playerid, 0), amount);
	return 1;
}

forward darmors(playerid);
public darmors(playerid)
{
	donatorarmor[playerid] = 0;
	return 1;
}

CMD:darmor(playerid, params[])
{

	if (PlayerData[playerid][pDonator] < 4)
	    return SendErrorMessage(playerid, "Kamu bukan seorang donator atau kamu bukan seorang platinum donator");
	if (donatorarmor[playerid] == 0)
		{
			donatorarmor[playerid] = 1;
		    SetPlayerArmour(playerid, 70.0);
			SendClientMessage(playerid, COLOR_DONATOR, "Armor kamu menambah sebanyak 70 persen");
			SetTimerEx("darmors", 600000, 0, "d", playerid);
	 	}
 	else
	 	{
	    	SendClientMessage(playerid, COLOR_RED, "Tunggu 10 Menit lagi untuk menggunakan command ini");
	    }
	return 1;
}

CMD:disarm(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/disarm [playerid/nama]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	ResetWeapons(userid);
	SendAdminAction(playerid, "Kamu telah mereset senjata milik %s.", ReturnName(userid, 0));
	SendAdminAction(userid, "Administrator %s telah mereset senjatamu.", ReturnName(playerid, 0));

	return 1;
}

CMD:arepair(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (vehicleid > 0 && isnull(params))
	{
		RepairVehicle(vehicleid);
		SendServerMessage(playerid, "Kamu telah memperbaiki kendaraanmu saat ini.");
	}
	else
	{
		if (sscanf(params, "d", vehicleid))
	    	return SendSyntaxMessage(playerid, "/arepair [ID Kendaraan]");

		else if (!IsValidVehicle(vehicleid))
	    	return SendErrorMessage(playerid, "ID Kendaraan tidak valid.");

		RepairVehicle(vehicleid);
		SendServerMessage(playerid, "Kamu membetulkan kendaraan ID: %d.", vehicleid);
	}
	return 1;
}

CMD:anos(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	AddComponent(vehicleid, 1010);
	SendServerMessage(playerid, "Kamu telah menambahkan 10x NOS ke kendaraanmu.");
	return 1;
}

CMD:getcar(playerid, params[])
{
	new vehicleid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/getcar [VEHICLE ID]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "ID Kendaraan tidak valid.");

	static
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetVehiclePos(vehicleid, x + 2, y - 2, z);

 	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	return 1;
}

CMD:entercar(playerid, params[])
{
	new vehicleid, seatid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/entercar [ID Kendaraan]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "ID Kendaraan tidak valid");

	seatid = GetAvailableSeat(vehicleid, 0);

	if (seatid == -1)
	    return SendErrorMessage(playerid, "Tidak ada kursi yang tersisa untuk masuk.");

	PutPlayerInVehicle(playerid, vehicleid, seatid);
	return 1;
}

CMD:gotocar(playerid, params[])
{
	new vehicleid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/gotocar [ID Kendaraan]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "ID Kendaraan tidak valid.");

	static
	    Float:x,
	    Float:y,
	    Float:z;

	GetVehiclePos(vehicleid, x, y, z);
	SetPlayerPos(playerid, x, y - 2, z + 2);

	return 1;
}

CMD:respawncar(playerid, params[])
{
	new vehicleid;

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/respawncar [ID Kendaraan]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

	RespawnVehicle(vehicleid);
	SendServerMessage(playerid, "Kamu merespawn kendaraan ID: %d.", vehicleid);

	return 1;
}

CMD:respawncars(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 2)
    	return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");
   	for (new x = 0 ; x < MAX_PLAYERS ; x++) {
     		SendServerMessage(x, "Semua kendaraan akan direspawn dalam 10 detik.");
	}
	SetTimer("racxx", 10000, false); // 10000 ms = 10 detik
	return 1;
}

CMD:respawnnear(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	new count;

	for (new i = 1; i != MAX_VEHICLES; i ++)
	{
	    static
	        Float:fX,
	        Float:fY,
	        Float:fZ;

	    if (IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID)
		{
			GetVehiclePos(i, fX, fY, fZ);

			if (IsPlayerInRangeOfPoint(playerid, 50.0, fX, fY, fZ))
			{
		        RespawnVehicle(i);
				count++;
			}
		}
	}
	if (!count)
	    return SendErrorMessage(playerid, "Tidak ada kendaraan terdekat untuk direspawn.");

	SendServerMessage(playerid, "Kamu merespawn %d kendaraan terdekat.", count);
	return 1;
}
CMD:spawndrone(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

    if (PlayerData[playerid][pSwatMember])
	{
	 	static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:a,
			vehicleid;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		vehicleid = CreateVehicle(465, x, y + 2, z, a, 0, 0, 0);

		if (GetPlayerInterior(playerid) != 0)
		    LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

		if (GetPlayerVirtualWorld(playerid) != 0)
			SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));

	 	PutPlayerInVehicle(playerid, vehicleid, 0);

		ResetVehicle(vehicleid);

	    SetEngineStatus(vehicleid, true);
		CoreVehicles[vehicleid][vehTemporary] = true;
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s gunakan remote untuk memulai mesin dari SWAT drone.", ReturnName(playerid, 0));
		SendFactionMessage(factionid, COLOR_FACTIONCHAT, "**DISPATCH: %s %s sekarang mengendalikan SWAT drone.**", Faction_GetRank(playerid), ReturnName(playerid, 0));
	}
	else return SendErrorMessage(playerid, "Kamu tidak berwenang membuat drone karena Kamu bukan bagian dari tim SWAT.");
	return 1;
}

CMD:despawndrone(playerid, params[])
{
    if (PlayerData[playerid][pSwatMember])
    {
		if (IsPlayerInAnyVehicle(playerid))
		{
		    new vehicleid = GetPlayerVehicleID(playerid);

		    if (CoreVehicles[vehicleid][vehTemporary])
			{
		        CoreVehicles[vehicleid][vehTemporary] = false;
		        DestroyVehicle(vehicleid);

		        ResetVehicle(vehicleid);
		        SendServerMessage(playerid, "Kamu telah menonaktifkan drone dan sekarang Kamu kembali ke posisi terdahulu.");
			}
		}
	}
	else return SendErrorMessage(playerid, "Kamu tidak boleh menggunakan command ini karena kamu bukanlah seorang SWAT.");
	return 1;
}
CMD:givegun(playerid, params[])
{
	static
	    userid,
	    weaponid,
	    ammo;

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "udI(500)", userid, weaponid, ammo))
	    return SendSyntaxMessage(playerid, "/givegun [playerid/nama] [id senjata] [peluru]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Kamu tidak bisa memberikan senjata kepada pemain yang tidak terkoneksi.");

	if (!IsPlayerSpawned(userid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa memberikan senjata kepada orang yang tidak spawn.");

	if (weaponid <= 0 || weaponid > 46 || (weaponid >= 19 && weaponid <= 21))
		return SendErrorMessage(playerid, "ID senjata tidak valid.");

	GiveWeaponToPlayer(userid, weaponid, ammo);
	SendAdminAction(playerid, "Kamu memberikan %s sebuah %s dengan %d peluru.", ReturnName(userid, 0), ReturnWeaponName(weaponid), ammo);
	SendAdminAction(userid, "Administrator %s telah memberikanmu sebuah %s dengan %d peluru.", ReturnName(playerid, 0), ReturnWeaponName(weaponid), ammo);
    Log_Write("logs/admin_log.txt", "[%s] %s telah memberi %s senjata ID %s dengan peluru %s", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), ReturnWeaponName(weaponid), ammo);
	return 1;
}

CMD:setplayer(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 8) // (PlayerData[playerid][pAdmin] < 2) (!IsPlayerAdmin(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	static
	    userid,
	    type[16],
	    amount[32];

	if (sscanf(params, "us[16]S()[32]", userid, type, amount))
 	{
	 	SendSyntaxMessage(playerid, "/setplayer [playerid/nama] [type]");
	 	SendClientMessage(playerid, COLOR_ORANGE, "[type]:{FFFFFF} gender, birthdate, origin, bank, savings, hunger, thirst, playinghours.");
		SendClientMessage(playerid, COLOR_ORANGE, "[type]:{FFFFFF} job, warrants, channel, channel2, channel3, clothes1, clothes2, clothes3.");
		return 1;
	}
	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (!strcmp(type, "gender", true))
	{
	    if (isnull(amount) || strval(amount) < 1 || strval(amount) > 2)
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/nama] [kelamin] [1: pria - 2: wanita]");

		PlayerData[userid][pGender] = strval(amount);

		if (PlayerData[userid][pGender] == 1)
			SendAdminAction(playerid, "Kamu mengubah kelamin %s menjadi pria.", ReturnName(userid, 0));

		else if (PlayerData[userid][pGender] == 2)
			SendAdminAction(playerid, "Kamu mengubah kelamin %s menjadi wanita.", ReturnName(userid, 0));
	}
	else if (!strcmp(type, "birthdate", true))
	{
	    if (isnull(amount) || strlen(amount) > 24)
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/nama] [birthdate] [tanggal]");

		format(PlayerData[userid][pBirthdate], 24, amount);
		SendAdminAction(playerid, "Kamu mengubah tanggal lahir milik %s menjadi \"%s\".", ReturnName(userid, 0), amount);
	}
	else if (!strcmp(type, "origin", true))
	{
	    if (isnull(amount) || strlen(amount) > 32)
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/nama] [origin] [asal yang baru]");

		format(PlayerData[userid][pOrigin], 32, amount);
		SendAdminAction(playerid, "Kamu mengubah asal %s menjadi \"%s\".", ReturnName(userid, 0), amount);
	}
	else if (!strcmp(type, "bank", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/nama] [bank] [rekening bank]");

		PlayerData[userid][pBankMoney] = strval(amount);
		SendAdminAction(playerid, "Kamu mengubah saldo bank milik %s menjadi %s.", ReturnName(userid, 0), FormatNumber(strval(amount)));
	}
	else if (!strcmp(type, "savings", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/nama] [savings] [jumlah tabungan]");

		PlayerData[userid][pSavings] = strval(amount);
		SendAdminAction(playerid, "Kamu mengubah saldo tabungan milik %s menjadi %s.", ReturnName(userid, 0), FormatNumber(strval(amount)));
	}
	else if (!strcmp(type, "hunger", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/nama] [hunger] [jumlah]");

		if (strval(amount) < 0 || strval(amount) > 1000)
		    return SendErrorMessage(playerid, "Kamu tidak dapat menentukan jumlah di bawah 0 atau di atas 1.000.");

		PlayerData[userid][pHunger] = strval(amount);
		SendAdminAction(playerid, "Kamu mengubah kelaparan milik %s menjadi %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "thirst", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/nama] [thirst] [jumlah]");

        if (strval(amount) < 0 || strval(amount) > 1000)
		    return SendErrorMessage(playerid, "Kamu tidak dapat menentukan jumlah di bawah 0 atau di atas 1.000.");

		PlayerData[userid][pThirst] = strval(amount);
		SendAdminAction(playerid, "Kamu mengubah kehausan milik %s menjadi %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "playinghours", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [playinghours] [amount]");

		PlayerData[userid][pPlayingHours] = strval(amount);
		SendAdminAction(playerid, "Kamu mengubah exp milik %s menjadi %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
    else if (!strcmp(type, "job", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [job] [amount]");

		if (strval(amount) < 0 || strval(amount) > 10)
		    return SendErrorMessage(playerid, "You have specified an invalid job ID.");

		PlayerData[userid][pJob] = strval(amount);
		SendAdminAction(playerid, "Kamu mengubah perkerjaan %s menjadi %s.", ReturnName(userid, 0), Job_GetName(PlayerData[userid][pJob]));
	}
    else if (!strcmp(type, "warrants", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [warrants] [amount]");

		PlayerData[userid][pWarrants] = strval(amount);
		SendAdminAction(playerid, "Kamu mengubah warrants milik %s menjadi %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "channel", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [channel] [radio channel]");

		PlayerData[userid][pChannel] = strval(amount);
		SendAdminAction(playerid, "Kamu mengubah radio channel milik %s menjadi %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "channel2", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [channel2] [radio channel]");

		PlayerData[userid][pChannel2] = strval(amount);
		SendAdminAction(playerid, "Kamu mengubah radio channel (Slot 2) milik %s menjadi %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "channel3", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [channel3] [radio channel]");

		PlayerData[userid][pChannel3] = strval(amount);
		SendAdminAction(playerid, "Kamu mengubah radio channel (Slot 3) milik %s menjadi %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "clothes1", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [clothes1] [skin ID]");

		PlayerData[userid][pClothes1] = strval(amount);
		SendAdminAction(playerid, "Kamu mengubah pakaian milik %s menjadi %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "clothes2", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [clothes2] [skin ID]");

		PlayerData[userid][pClothes2] = strval(amount);
		SendAdminAction(playerid, "Kamu mengubah pakaian milik (Slot 2) %s menjadi %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "clothes3", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [clothes3] [skin ID]");

		PlayerData[userid][pClothes3] = strval(amount);
		SendAdminAction(playerid, "Kamu mengubah pakaian milik (Slot 2) %s menjadi %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	return 1;
}

CMD:baninfo(playerid, params[])
{
    static
		string[128];

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (isnull(params) || strlen(params) > 24)
	{
		SendSyntaxMessage(playerid, "/baninfo [username]");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[NOTE]:{FFFFFF} Ketik \"/username\" untuk mengetahui username dari sebuah karakter.");
	}
	else
	{
	    format(string, sizeof(string), "SELECT * FROM `blacklist` WHERE `Username` = '%s'", SQL_ReturnEscaped(params));
	    mysql_tquery(g_iHandle, string, "OnBanLookup", "ds", playerid, params);
	}
	return 1;
}

CMD:sethelper(playerid, params[]) // bentar w mau upoad dulu
{
	static
		userid,
	    level;

	if (PlayerData[playerid][pAdmin] < 8 && PlayerData[playerid][pHelper] < 6)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ud", userid, level))
		return SendSyntaxMessage(playerid, "/sethelper [playerid/nama] [level]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Kamu telah menentukan player yang tidak valid.");

	if (level < 0 || level > 7)
	    return SendErrorMessage(playerid, "Helper level salah. Tingkat berkisar dari 0 ke 3.");

    if (level >= PlayerData[userid][pHelper])
	{
	    SendAdminAction(playerid, "Kamu telah mempromosikan %s. Menjadi %s [%d].", ReturnName(userid, 0), HelperRankName(userid), level);
	    SendAdminAction(userid, "%s telah mempromosikan dirimu Menjadi %s [%d].", ReturnName(playerid, 0), HelperRankName(userid), level);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN] %s telah mempromosikan %s Menjadi %s [%d].", ReturnName(playerid, 0), ReturnName(userid, 0), HelperRankName(userid), level);
	}
	else
	{
	    SendAdminAction(playerid, "Kamu telah menurunkan jabatan %s Menjadi %s [%d].", ReturnName(userid, 0), HelperRankName(userid), level);
	    SendAdminAction(userid, "%s telah menurunkan jabatanmu Menjadi %s [%d].", ReturnName(playerid, 0), HelperRankName(userid), level);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN] %s telah menurunkan %s Menjadi %s [%d].", ReturnName(playerid, 0), ReturnName(userid, 0), HelperRankName(userid), level);
	}
	PlayerData[userid][pHelper] = level;
 	Log_Write("logs/helper_log.txt", "[%s] %s telah mengubah level helper milik %s..", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:factionmod(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/factionmod [playerid/nama]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (PlayerData[userid][pFactionMod])
	{
	    PlayerData[userid][pFactionMod] = false;
	    SendAdminAction(playerid, "Kamu telah mengeluarkan %s sebagai seorang faction management.", ReturnName(userid, 0));
		SendAdminAction(userid, "%s telah melepas jabatanmu sebagai seorang faction magement.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[userid][pFactionMod] = true;

        SendAdminAction(playerid, "Kamu telah mengundang %s untuk menjadi faction management team.", ReturnName(userid, 0));
		SendAdminAction(userid, "%s telah mengundang kamu untuk menjadi anggota faction management.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:setname(playerid, params[])
{
	static
	    userid,
	    newname[24],
		query[128];

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "us[24]", userid, newname))
	    return SendSyntaxMessage(playerid, "/setname [playerid/nama] [nama baru]");

	if (userid == INVALID_PLAYER_ID)
		return SendErrorMessage(playerid, "Player tidak valid.");

	if (!PlayerData[userid][pLogged] && !PlayerData[userid][pCharacter])
	    return SendErrorMessage(playerid, "Player ini tidak memiliki karakter.");

	if (!IsValidPlayerName(newname))
	    return SendErrorMessage(playerid, "Format nama salah.");

	foreach (new i : Player) if (!strcmp(ReturnName(i), newname)) {
	    return SendErrorMessage(playerid, "Nama sudah digunakan.");
	}
	format(query, sizeof(query), "SELECT `ID` FROM `characters` WHERE `Character` = '%s'", SQL_ReturnEscaped(newname));
	mysql_tquery(g_iHandle, query, "OnNameChange", "dds", playerid, userid, newname);
	Log_Write("logs/admin_log.txt", "[%s] %s telah mengubah nama milik %s menjadi %s", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), newname);

	return 1;
}

CMD:clearchat(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4)
    	return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

		for (new i = 0; i < 100; i ++) {
		    SendClientMessageToAll(-1, "");
		}
	return 1;
}

CMD:dclearchat(playerid, params[])
{
    if (PlayerData[playerid][pDonator] < 5)
    	return SendErrorMessage(playerid, "Kamu bukan seorang donator.");

		for(new i=0; i<200; i++)
	 	{
        SendClientMessage(playerid, -1, " ");
		}
	return 1;
}

CMD:gotopos(playerid, params[])
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
		interior;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "dfff", interior, x, y, z))
	    return SendSyntaxMessage(playerid, "/gotopos [interior] [x] [y] [z]");

	SetPlayerPos(playerid, x, y, z);
	SetPlayerInterior(playerid, interior);

	return 1;
}

CMD:createhouse(playerid, params[])
{
	static
	    price,
	    id,
	    address[32];

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ds[32]", price, address))
	    return SendSyntaxMessage(playerid, "/createhouse [harga] [alamat]");

	for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && !strcmp(HouseData[i][houseAddress], address, true)) {
	    return SendErrorMessage(playerid, "Alamat \"%s\" sudah digunakan (ID: %d).", address, i);
	}
	id = House_Create(playerid, address, price);

	if (id == -1)
	    return SendErrorMessage(playerid, "Kapasitas rumah diserver sudah penuh.");

	SendServerMessage(playerid, "Kamu berhasil membuat rumah dengan ID: %d.", id);
	Log_Write("logs/admin_log.txt", "[%s] %s has created a house %s.", ReturnDate(), ReturnName(playerid, 0), id);
	return 1;
}

CMD:destroyhouse(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyhouse [house id]");

	if ((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
	    return SendErrorMessage(playerid, "House id tidak valid.");

	House_Delete(id);
	SendServerMessage(playerid, "%s berhasil menghancurkan rumah dengan ID: %d.", id);
	Log_Write("logs/admin_log.txt", "[%s] %s has destroyed a house %s.", ReturnDate(), ReturnName(playerid, 0), id);
	return 1;
}

CMD:bizcmds(playerid, params[])
{
	SendClientMessage(playerid, COLOR_CLIENT, "BUSINESSES:{FFFFFF} /buy, /abandon, /lock, /vault, /products, /binfo, /bname, /bmessage, /bshipment.");
	return 1;
}

CMD:housecmds(playerid, params[])
{
	SendClientMessage(playerid, COLOR_CLIENT, "HOUSES:{FFFFFF} /buy, /abandon, /lock, /storage, /furniture, /buyrack, /gunrack, /deleterack.");
	SendClientMessage(playerid, COLOR_CLIENT, "HOUSES:{FFFFFF} /doorbell, /switch.");
	return 1;
}

CMD:buy(playerid, params[])
{
	static
		id = -1;

	if ((id = House_Nearest(playerid)) != -1)
	{
		if (House_GetCount(playerid) >= MAX_OWNABLE_HOUSES)
			return SendErrorMessage(playerid, "Kamu hanya bisa memiliki %d rumah saat ini.", MAX_OWNABLE_HOUSES);

		if (HouseData[id][houseOwner] != 0)
		    return SendErrorMessage(playerid, "Rumah ini sudah dimiliki orang lain.");

		if (HouseData[id][housePrice] > GetMoney(playerid))
		    return SendErrorMessage(playerid, "Kamu tidak memiliki cukup uang untuk membeli rumah ini.");

	    HouseData[id][houseOwner] = GetPlayerSQLID(playerid);

		House_Refresh(id);
		House_Save(id);

	    GiveMoney(playerid, -HouseData[id][housePrice]);
	    SendServerMessage(playerid, "Kamu membeli rumah \"%s\" dengan harga %s!", HouseData[id][houseAddress], FormatNumber(HouseData[id][housePrice]));

		ShowPlayerFooter(playerid, "Kamu ~g~membeli~w~ sebuah rumah!");
	    Log_Write("logs/house_log.txt", "[%s] %s membeli house ID: %d seharga %s.", ReturnDate(), ReturnName(playerid), id, FormatNumber(HouseData[id][housePrice]));
	}
	else if ((id = Business_Nearest(playerid)) != -1)
	{
	    if (Business_GetCount(playerid) >= MAX_OWNABLE_BUSINESSES)
			return SendErrorMessage(playerid, "Kamu hanya bisa memiliki %d bisnis saat ini.", MAX_OWNABLE_BUSINESSES);

		if (BusinessData[id][bizOwner] != 0)
		    return SendErrorMessage(playerid, "Bisnis ini sudah dimiliki orang lain.");

		if (BusinessData[id][bizPrice] > GetMoney(playerid))
		    return SendErrorMessage(playerid, "Kamu tidak memiliki cukup uang untuk membeli bisnis ini.");

	    BusinessData[id][bizOwner] = GetPlayerSQLID(playerid);

		Business_Refresh(id);
		Business_Save(id);

	    GiveMoney(playerid, -BusinessData[id][bizPrice]);
	    SendServerMessage(playerid, "Kamu membeli \"%s\" seharga %s!", BusinessData[id][bizName], FormatNumber(BusinessData[id][bizPrice]));

		ShowPlayerFooter(playerid, "Kamu ~g~membeli~w~ sebuah bisnis!");
	    Log_Write("logs/biz_log.txt", "[%s] %s telah membeli sebuah bisnis dengan ID: %d seharga %s.", ReturnDate(), ReturnName(playerid), id, FormatNumber(BusinessData[id][bizPrice]));
	}
	else if ((id = Business_Inside(playerid)) != -1)
	{
		if (BusinessData[id][bizLocked] != 0 || !BusinessData[id][bizOwner])
		    return SendErrorMessage(playerid, "Bisnis ini ditutup!");

		if (BusinessData[id][bizType] == 5) {
		    Business_CarMenu(playerid, id);
		} else {
   			Business_PurchaseMenu(playerid, id);
		}
	}
	return 1;
}

CMD:abandon(playerid, params[])
{
	static
	    id = -1;

    if (!IsPlayerInAnyVehicle(playerid) && (id = House_Nearest(playerid)) != -1 && House_IsOwner(playerid, id))
	{
	    if (isnull(params) || (!isnull(params) && strcmp(params, "confirm", true) != 0))
	    {
	        SendSyntaxMessage(playerid, "/abandon [confirm]");
	        SendClientMessage(playerid, COLOR_LIGHTRED, "[WARNING]:{FFFFFF} Tidak ada refund jika menghancurkan rumahmu.");
		}
		else if (!strcmp(params, "confirm", true))
		{
			HouseData[id][houseOwner] = 0;

			House_Refresh(id);
			House_Save(id);

			SendServerMessage(playerid, "Kamu menghancurkan rumahmu yang beralamat: %s.", HouseData[id][houseAddress]);
			Log_Write("logs/house_log.txt", "[%s] %s telah mengahancurkan rumah ID: %d.", ReturnDate(), ReturnName(playerid), id);
		}
	}
	else if (!IsPlayerInAnyVehicle(playerid) && (id = Business_Nearest(playerid)) != -1 && Business_IsOwner(playerid, id))
	{
	    if (isnull(params) || (!isnull(params) && strcmp(params, "confirm", true) != 0))
	    {
	        SendSyntaxMessage(playerid, "/abandon [confirm]");
	        SendClientMessage(playerid, COLOR_LIGHTRED, "[WARNING]:{FFFFFF} Tidak ada refund jika menghancurkan bisnismu.");
		}
		else if (!strcmp(params, "confirm", true))
		{
			BusinessData[id][bizOwner] = 0;

			Business_Refresh(id);
			Business_Save(id);

			SendServerMessage(playerid, "Kamu menghancurkan bisnis %s milikmu.", BusinessData[id][bizName]);
			Log_Write("logs/biz_log.txt", "[%s] %s telah menghancurkan bisnis ID: %d.", ReturnDate(), ReturnName(playerid), id);
		}
	}
	else if ((id = Car_Inside(playerid)) != -1 && Car_IsOwner(playerid, id))
	{
	    if (isnull(params) || (!isnull(params) && strcmp(params, "confirm", true) != 0))
	    {
	        SendSyntaxMessage(playerid, "/abandon [confirm]");
	        SendClientMessage(playerid, COLOR_LIGHTRED, "[WARNING]:{FFFFFF} Tidak ada refund jika menghancurkan kendaraanmu.");
		}
		else if (CarData[id][carImpounded] != -1)
    		return SendErrorMessage(playerid, "Kendaraan sedang disita dan kamu tidak dapat menggunakannya.");

		else if (!strcmp(params, "confirm", true))
		{
			new
			    model = CarData[id][carModel];

			Car_Delete(id);

			SendServerMessage(playerid, "Kamu menghancurkan %s milikmu.", ReturnVehicleModelName(model));
			Log_Write("logs/car_log.txt", "[%s] %s telah menghancurkan %s kepunyaannya.", ReturnDate(), ReturnName(playerid), ReturnVehicleModelName(model));
		}
	}
	else SendErrorMessage(playerid, "Kamu tidak didekat apa yang ingin kamu hancurkan.");
	return 1;
}

CMD:switch(playerid, params[])
{
	static
	    id = -1;

	if ((id = House_Inside(playerid)) != -1)
	{
		if (!HouseData[id][houseLights])
		{
		    foreach (new i : Player) if (House_Inside(i) == id) {
		        PlayerTextDrawHide(i, PlayerData[i][pTextdraws][62]);
		    }
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menghidupkan lampu.", ReturnName(playerid, 0));
		    HouseData[id][houseLights] = true;
		}
		else
		{
		    foreach (new i : Player) if (House_Inside(i) == id) {
		        PlayerTextDrawShow(i, PlayerData[i][pTextdraws][62]);
		    }
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mematikan lampu.", ReturnName(playerid, 0));
		    HouseData[id][houseLights] = false;
		}
	}
	else {
	    SendErrorMessage(playerid, "Kamu harus berada didalam rumah untuk mematikan/menghidupkan lampu.");
	}
	return 1;
}

CMD:lock(playerid, params[])
{
	static
	    id = -1;

	if (!IsPlayerInAnyVehicle(playerid) && (id = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1 && House_IsOwner(playerid, id))
	{
		if (!HouseData[id][houseLocked])
		{
			HouseData[id][houseLocked] = true;
			House_Save(id);

			ShowPlayerFooter(playerid, "Kamu ~r~mengunci~w~ rumahmu!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else
		{
			HouseData[id][houseLocked] = false;
			House_Save(id);

			ShowPlayerFooter(playerid, "Kamu ~g~melepas kunci~w~ rumahmu!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
	}
	else if (!IsPlayerInAnyVehicle(playerid) && (id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
	{
		if (Business_IsOwner(playerid, id))
		{
			if (!BusinessData[id][bizLocked])
			{
				BusinessData[id][bizLocked] = true;

				Business_Refresh(id);
				Business_Save(id);

				ShowPlayerFooter(playerid, "Kamu ~r~mengunci~w~ bisnismu!");
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			}
  			else
			{
				BusinessData[id][bizLocked] = false;

				Business_Refresh(id);
				Business_Save(id);

				ShowPlayerFooter(playerid, "Kamu ~g~melepas kunci~w~ bisnismu!");
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			}
		}
	}
	else if (!IsPlayerInAnyVehicle(playerid) && (id = (Entrance_Inside(playerid) == -1) ? (Entrance_Nearest(playerid)) : (Entrance_Inside(playerid))) != -1)
	{
		if (strlen(EntranceData[id][entrancePass]))
		{
			Dialog_Show(playerid, EntrancePass, DIALOG_STYLE_INPUT, "Entrance Pass", "Silahkan masukkan kata sandi untuk pintu masuk ini:", "Submit", "Batal");
		}
	}
	else if ((id = Car_Nearest(playerid)) != -1)
	{
	    static
	        engine,
	        lights,
	        alarm,
	        doors,
	        bonnet,
	        boot,
	        objective;

	    GetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);

	    if (Car_IsOwner(playerid, id) || (PlayerData[playerid][pFaction] != -1 && CarData[id][carFaction] == GetFactionType(playerid)) || GetFactionType(playerid) == FACTION_POLICE)
	    {
			if (!CarData[id][carLocked])
			{
				CarData[id][carLocked] = true;
				Car_Save(id);

				ShowPlayerFooter(playerid, "You have ~r~locked~w~ the vehicle!");
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

				SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
			}
			else
			{
				CarData[id][carLocked] = false;
				Car_Save(id);

				ShowPlayerFooter(playerid, "You have ~g~unlocked~w~ the vehicle!");
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

				SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 0, bonnet, boot, objective);
			}
		}
	}
	else SendErrorMessage(playerid, "Kamu tidak didekat apapun yang bisa kamu kunci.");
	return 1;
}

CMD:sell(playerid, params[])
{
	static
	    targetid,
	    type[24],
	    string[128];

	if (sscanf(params, "us[24]S()[128]", targetid, type, string))
	{
	    SendSyntaxMessage(playerid, "/sell [playerid/nama] [type]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[type]:{FFFFFF} house, business, vehicle");
	    return 1;
	}
	if (targetid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, targetid, 5.0))
	{
		SendErrorMessage(playerid, "Player tidak terkoneksi atau tidak didekatmu.");
		return 1;
	}
	if (targetid == playerid)
	{
		SendErrorMessage(playerid, "Kamu tidak dapat menjual kedirimu sendiri.");
		return 1;
	}
	if (!strcmp(type, "house", true))
	{
		static
		    price,
			houseid = -1;

		if (sscanf(string, "d", price))
			return SendSyntaxMessage(playerid, "/sell [playerid/nama] [house] [harga]");

		if (price < 1)
		    return SendErrorMessage(playerid, "Harga tidak bisa dibawah $1.");

		if ((houseid = House_Nearest(playerid)) != -1 && House_IsOwner(playerid, houseid)) {
			PlayerData[targetid][pHouseSeller] = playerid;
			PlayerData[targetid][pHouseOffered] = houseid;
			PlayerData[targetid][pHouseValue] = price;

		    SendServerMessage(playerid, "Kamu menawarkan %s untuk membeli rumahmu dengan harga (%s).", ReturnName(targetid, 0), FormatNumber(price));
            SendServerMessage(targetid, "%s telah menawarkan rumahnya seharga %s (ketik \"/approve house\" untuk menerima).", ReturnName(playerid, 0), FormatNumber(price));
		}
		else SendErrorMessage(playerid, "Kamu tidak berada dirumah manapun.");
	}
	else if (!strcmp(type, "business", true))
	{
		static
		    price,
			bizid = -1;

		if (sscanf(string, "d", price))
			return SendSyntaxMessage(playerid, "/sell [playerid/nama] [business] [harga]");

		if (price < 1)
		    return SendErrorMessage(playerid, "Harga tidak bisa dibawah $1.");

		if ((bizid = Business_Nearest(playerid)) != -1 && Business_IsOwner(playerid, bizid)) {
			PlayerData[targetid][pBusinessSeller] = playerid;
			PlayerData[targetid][pBusinessOffered] = bizid;
			PlayerData[targetid][pBusinessValue] = price;

		    SendServerMessage(playerid, "Kamu menawarkan %s untuk membeli bisnismu dengan harga (%s).", ReturnName(targetid, 0), FormatNumber(price));
            SendServerMessage(targetid, "%s telah menawarkanmu bisnisnya seharga %s (ketik \"/approve business\" untuk menerima).", ReturnName(playerid, 0), FormatNumber(price));
		}
		else SendErrorMessage(playerid, "Kamu tidak sedang berada di bisnis manapun.");
	}
	else if (!strcmp(type, "vehicle", true))
	{
		static
		    price,
			carid = -1;

		if (sscanf(string, "d", price))
			return SendSyntaxMessage(playerid, "/sell [playerid/nama] [veh] [harga]");

		if (price < 1)
		    return SendErrorMessage(playerid, "Harga tidak bisa dibawah $1.");

		if ((carid = Car_Inside(playerid)) != -1 && Car_IsOwner(playerid, carid)) {
			PlayerData[targetid][pCarSeller] = playerid;
			PlayerData[targetid][pCarOffered] = carid;
			PlayerData[targetid][pCarValue] = price;

		    SendServerMessage(playerid, "Kamu menawarkan %s untuk membeli %s milikmu dengan harga (%s).", ReturnName(targetid, 0), ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(price));
            SendServerMessage(targetid, "%s telah menawarkanmu sebuah %s seharga %s (ketik \"/approve car\" untuk menerima).", ReturnName(playerid, 0), ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(price));
		}
		else SendErrorMessage(playerid, "Kamu tidak berada didalam kendaraan manapun.");
	}
	return 1;
}

CMD:approve(playerid, params[])
{
	if (isnull(params))
 	{
	 	SendSyntaxMessage(playerid, "/approve [name]");
		SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} house, business, car, food, faction, greet, frisk, loan");
		return 1;
	}
	if (!strcmp(params, "house", true) && PlayerData[playerid][pHouseSeller] != INVALID_PLAYER_ID)
	{
	    new
	        sellerid = PlayerData[playerid][pHouseSeller],
	        houseid = PlayerData[playerid][pHouseOffered],
	        price = PlayerData[playerid][pHouseValue];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		    return SendErrorMessage(playerid, "Kamu tidak didekat player itu.");

		if (GetMoney(playerid) < price)
		    return SendErrorMessage(playerid, "Kamu tidak memiliki cukup dana untuk membeli rumah ini.");

		if (House_Nearest(playerid) != houseid)
		    return SendErrorMessage(playerid, "Kamu harus berada didekat rumah untuk membelinya.");

		if (!House_IsOwner(sellerid, houseid))
		    return SendErrorMessage(playerid, "Penawaran rumah ini sudah tidak berlaku lagi.");

		SendServerMessage(playerid, "Kamu berhasil membeli rumah milik %s seharga %s.", ReturnName(sellerid, 0), FormatNumber(price));
		SendServerMessage(sellerid, "%s telah membeli rumahmu seharga %s.", ReturnName(playerid, 0), FormatNumber(price));

		HouseData[houseid][houseOwner] = GetPlayerSQLID(playerid);
		House_Save(houseid);

		GiveMoney(playerid, -price);
		GiveMoney(playerid, price);

		Log_Write("logs/offer_log.txt", "[%s] %s (%s) menjual rumah  ke %s (%s) seharga %s.", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], ReturnName(sellerid, 0), PlayerData[sellerid][pIP], FormatNumber(price));

		PlayerData[playerid][pHouseSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pHouseOffered] = -1;
		PlayerData[playerid][pHouseValue] = 0;
	}
	if (!strcmp(params, "business", true) && PlayerData[playerid][pBusinessSeller] != INVALID_PLAYER_ID)
	{
	    new
	        sellerid = PlayerData[playerid][pBusinessSeller],
	        bizid = PlayerData[playerid][pBusinessOffered],
	        price = PlayerData[playerid][pBusinessValue];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		    return SendErrorMessage(playerid, "Kamu tidak didekat player itu.");

		if (GetMoney(playerid) < price)
		    return SendErrorMessage(playerid, "Kamu tidak memiliki cukup dana untuk membeli business ini.");

		if (Business_Nearest(playerid) != bizid)
		    return SendErrorMessage(playerid, "Kamu harus berada didekat business untuk membelinya.");

		if (!Business_IsOwner(sellerid, bizid))
		    return SendErrorMessage(playerid, "Penawaran bisnis ini sudah tidak berlaku lagi.");

		SendServerMessage(playerid, "Kamu berhasil membeli bisnis milik si %s seharga %s.", ReturnName(sellerid, 0), FormatNumber(price));
		SendServerMessage(sellerid, "%s telah membeli bisnismu seharga %s.", ReturnName(playerid, 0), FormatNumber(price));

		BusinessData[bizid][bizOwner] = GetPlayerSQLID(playerid);
		Business_Save(bizid);

		GiveMoney(playerid, -price);
		GiveMoney(playerid, price);

		Log_Write("logs/offer_log.txt", "[%s] %s (%s) menjual bisnis ke %s (%s) seharga %s.", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], ReturnName(sellerid, 0), PlayerData[sellerid][pIP], FormatNumber(price));

		PlayerData[playerid][pBusinessSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pBusinessOffered] = -1;
		PlayerData[playerid][pBusinessValue] = 0;
	}
	if (!strcmp(params, "car", true) && PlayerData[playerid][pCarSeller] != INVALID_PLAYER_ID)
	{
	    new
	        sellerid = PlayerData[playerid][pCarSeller],
	        carid = PlayerData[playerid][pCarOffered],
	        price = PlayerData[playerid][pCarValue];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		    return SendErrorMessage(playerid, "Kamu tidak didekat player itu.");

		if (GetMoney(playerid) < price)
		    return SendErrorMessage(playerid, "Kamu tidak memiliki cukup dana untuk membeli kendaraan ini.");
		    
  		if (Car_GetCount(playerid) >= MAX_OWNABLE_CARS)
	    	return SendErrorMessage(playerid, "Player ini sudah memiliki terlalu banyak kendaraan.");

		if (Car_Nearest(playerid) != carid)
		    return SendErrorMessage(playerid, "Kamu harus berada didekat vehicle untuk membelinya.");

		if (!Car_IsOwner(sellerid, carid))
		    return SendErrorMessage(playerid, "Penawaran kendaraan ini sudah tidak berlaku lagi.");

		SendServerMessage(playerid, "Kamu berhasil membeli kendaraan %s yaitu %s seharga %s.", ReturnName(sellerid, 0), ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(price));
		SendServerMessage(sellerid, "%s telah membeli %s milikmu seharga %s.", ReturnName(playerid, 0), ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(price));

		CarData[carid][carOwner] = GetPlayerSQLID(playerid);
		Car_Save(carid);

		GiveMoney(playerid, -price);
		GiveMoney(playerid, price);

		Log_Write("logs/offer_log.txt", "[%s] %s (%s) menjual kendaraan ke %s seharga %s (%s) for %s.", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], ReturnVehicleModelName(CarData[carid][carModel]), ReturnName(sellerid, 0), PlayerData[sellerid][pIP], FormatNumber(price));

		PlayerData[playerid][pCarSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pCarOffered] = -1;
		PlayerData[playerid][pCarValue] = 0;
	}
	if (!strcmp(params, "food", true) && PlayerData[playerid][pFoodSeller] != INVALID_PLAYER_ID)
	{
	    new
	        sellerid = PlayerData[playerid][pFoodSeller],
			type = PlayerData[playerid][pFoodType],
	        price = PlayerData[playerid][pFoodPrice];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		    return SendErrorMessage(playerid, "Kamu tidak didekat player itu.");

		if (GetMoney(playerid) < price)
		    return SendErrorMessage(playerid, "Kamu tidak memiliki cukup dana untuk membeli makanan ini.");

		switch (type)
		{
		    case 1:
		    {
				new id = Inventory_Add(playerid, "Water Bottle", 2958);

				if (id == -1)
				    return SendErrorMessage(playerid, "Inventory kamu penuh.");

		        SendServerMessage(playerid, "Kamu membeli water dari %s seharga $%d (ditambahkan ke inventory).", ReturnName(sellerid, 0), price);
		        SendServerMessage(sellerid, "%s telah menerima water seharga $%d.", ReturnName(playerid, 0), price);
			}
			case 2:
		    {
				new id = Inventory_Add(playerid, "Soda", 1543);

				if (id == -1)
				    return SendErrorMessage(playerid, "Inventory kamu penuh.");

		        SendServerMessage(playerid, "Kamu membeli soda dari %s seharga $%d (ditambahkan ke inventory).", ReturnName(sellerid, 0), price);
		        SendServerMessage(sellerid, "%s telah menerima soda seharga $%d.", ReturnName(playerid, 0), price);
			}
			case 3:
		    {
				new id = Inventory_Add(playerid, "Cooked Burger", 2703);

				if (id == -1)
				    return SendErrorMessage(playerid, "Inventory kamu penuh.");

		        SendServerMessage(playerid, "Kamu membeli sebuah burger dari %s seharga $%d (ditambahkan ke inventory).", ReturnName(sellerid, 0), price);
		        SendServerMessage(sellerid, "%s telah menerima water seharga $%d.", ReturnName(playerid, 0), price);
			}
			case 4:
		    {
				new id = Inventory_Add(playerid, "Cooked Pizza", 2702);

				if (id == -1)
				    return SendErrorMessage(playerid, "Inventory kamu penuh.");

		        SendServerMessage(playerid, "Kamu membeli sebuah slice of pizza dari %s seharga $%d (ditambahkan ke inventory).", ReturnName(sellerid, 0), price);
		        SendServerMessage(sellerid, "%s telah menerima water seharga $%d.", ReturnName(playerid, 0), price);
			}
			case 5:
		    {
				new id = Inventory_Add(playerid, "Chicken", 2663);

				if (id == -1)
				    return SendErrorMessage(playerid, "Inventory kamu penuh.");

		        SendServerMessage(playerid, "Kamu membeli sebuah chicken dari %s seharga $%d (ditambahkan ke inventory).", ReturnName(sellerid, 0), price);
		        SendServerMessage(sellerid, "%s telah menerima water seharga $%d.", ReturnName(playerid, 0), price);
			}
		}
		PlayerData[playerid][pFoodSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pFoodType] = 0;
		PlayerData[playerid][pFoodPrice] = 0;
	}
	if (!strcmp(params, "faction", true) && PlayerData[playerid][pFactionOffer] != INVALID_PLAYER_ID)
	{
	    new
	        targetid = PlayerData[playerid][pFactionOffer],
	        factionid = PlayerData[playerid][pFactionOffered];

		if (!FactionData[factionid][factionExists] || PlayerData[targetid][pFactionRank] < FactionData[PlayerData[targetid][pFaction]][factionRanks] - 1)
	   	 	return SendErrorMessage(playerid, "Tawaran sudah tidak valid.");

		SetFaction(playerid, factionid);
		PlayerData[playerid][pFactionRank] = 1;
		PlayerData[playerid][pFactionDivision] = 1;

		SendServerMessage(playerid, "Kamu merima tawaran dari %s untuk bergabung dengan \"%s\".", ReturnName(targetid, 0), Faction_GetName(targetid));
		SendServerMessage(targetid, "%s telah menerima tawaranmu untuk bergabung dengan \"%s\".", ReturnName(playerid, 0), Faction_GetName(targetid));

        PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
        PlayerData[playerid][pFactionOffered] = -1;
	}
	if (!strcmp(params, "greet", true) && PlayerData[playerid][pShakeOffer] != INVALID_PLAYER_ID)
	{
	    new
	        targetid = PlayerData[playerid][pShakeOffer],
	        type = PlayerData[playerid][pShakeType];

        if (!IsPlayerNearPlayer(playerid, targetid, 6.0))
		    return SendErrorMessage(playerid, "Kamu tidak didekat player itu.");

		SetPlayerToFacePlayer(playerid, targetid);
		SetPlayerToFacePlayer(targetid, playerid);

		PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
		PlayerData[playerid][pShakeType] = 0;

		switch (type)
		{
		    case 1:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 2:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 3:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 4:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 5:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 6:
			{
			    ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
			    ApplyAnimation(targetid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
			}
	    }
	    SendServerMessage(playerid, "Kamu menerima tawaran bersalaman bersama %s.", ReturnName(targetid, 0));
	    SendServerMessage(targetid, "%s telah menerima tawaran salamanmu.", ReturnName(playerid, 0));
	}
	if (!strcmp(params, "frisk", true) && PlayerData[playerid][pFriskOffer] != INVALID_PLAYER_ID)
	{
	    new
			targetid = PlayerData[playerid][pFriskOffer];

	    if (!IsPlayerNearPlayer(playerid, targetid, 6.0))
		    return SendErrorMessage(playerid, "Kamu tidak didekat player itu.");

		new
		    models[MAX_INVENTORY],
		    amount[MAX_INVENTORY];

		for (new i = 0; i < PlayerData[playerid][pCapacity]; i ++)
		{
	 		if (InventoryData[playerid][i][invExists]) {
	   			models[i] = InventoryData[playerid][i][invModel];
	   			amount[i] = InventoryData[playerid][i][invQuantity];
			}
			else {
			    models[i] = -1;
			    amount[i] = -1;
			}
		}
		PlayerData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
		ShowModelSelectionMenu(targetid, ReturnName(playerid), MODEL_SELECTION_FRISK, models, sizeof(models), 0.0, 0.0, 0.0, 1.0, -1, true, amount);
	}
	if (!strcmp(params, "drag", true) && PlayerData[playerid][pDraggedBy] != INVALID_PLAYER_ID)
	{
	    new
	        targetid = PlayerData[playerid][pDraggedBy];

		SendServerMessage(playerid, "Kamu telah menandatangani kontrak pinjaman %s.", ReturnName(targetid, 0));
		SendServerMessage(targetid, "%s telah menandatangani kontrak yang telah kamu tawarkan kepadanya.", ReturnName(playerid, 0));
	    PlayerData[playerid][pDragged] = 1;

	    PlayerData[playerid][pDragTimer] = SetTimerEx("DragUpdate", 200, true, "dd", targetid, playerid);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s meraih %s dan mulai menyeretnya.", ReturnName(targetid, 0), ReturnName(playerid, 0));
	}
	if (!strcmp(params, "loan", true) && PlayerData[playerid][pLoanOffer] != INVALID_PLAYER_ID)
	{
	    new
	        targetid = PlayerData[playerid][pLoanOffer];

		PlayerData[playerid][pLoan] = 1;

		SendServerMessage(playerid, "Kamu telah menandatangani kontrak pinjaman %s.", ReturnName(targetid, 0));
		SendServerMessage(targetid, "%s telah menandatangani kontrak yang telah kamu tawarkan kepadanya.", ReturnName(playerid, 0));

        PlayerData[playerid][pLoanOffer] = INVALID_PLAYER_ID;
        PlayerData[playerid][pLoanOffered] = -1;

        Log_Write("logs/offer_loans.txt", "[%s] %s telah menerima kontrak pinjaman yang ditawarkan oleh %s. ", ReturnDate(), ReturnName(targetid, 0), ReturnName(playerid, 0));

	}
	return 1;
}

CMD:storage(playerid, params[])
{
	static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE)) {
	    House_OpenStorage(playerid, houseid);
	}
	else SendErrorMessage(playerid, "Kamu tidak berada di interior rumah.");
	return 1;
}

CMD:edithouse(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/edithouse [id] [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} location, interior, price, address, type");
		return 1;
	}
	if ((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
	    return SendErrorMessage(playerid, "ID rumah tidak valid.");

	if (!strcmp(type, "location", true))
	{
		GetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
		GetPlayerFacingAngle(playerid, HouseData[id][housePos][3]);

		HouseData[id][houseExterior] = GetPlayerInterior(playerid);
		HouseData[id][houseExteriorVW] = GetPlayerVirtualWorld(playerid);

		House_Refresh(id);
		House_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan lokasi rumah ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "interior", true))
	{
	    GetPlayerPos(playerid, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
		GetPlayerFacingAngle(playerid, HouseData[id][houseInt][3]);

		HouseData[id][houseInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
		{
			if (PlayerData[i][pHouse] == HouseData[id][houseID])
			{
				SetPlayerPos(i, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
				SetPlayerFacingAngle(i, HouseData[id][houseInt][3]);

				SetPlayerInterior(i, HouseData[id][houseInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		House_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan interior rumah ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "price", true))
	{
	    new price;

	    if (sscanf(string, "d", price))
	        return SendSyntaxMessage(playerid, "/edithouse [id] [price] [harga]");

	    HouseData[id][housePrice] = price;

	    House_Refresh(id);
	    House_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan harga rumah ID: %d menjadi %s.", ReturnName(playerid, 0), id, FormatNumber(price));
	}
	else if (!strcmp(type, "address", true))
	{
	    new address[32];

	    if (sscanf(string, "s[32]", address))
	        return SendSyntaxMessage(playerid, "/edithouse [id] [address] [alamat baru]");

	    format(HouseData[id][houseAddress], 32, address);

	    House_Refresh(id);
	    House_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan alamat rumah ID: %d menjadi \"%s\".", ReturnName(playerid, 0), id, address);
	}
	else if (!strcmp(type, "type", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	        return SendSyntaxMessage(playerid, "/edithouse [id] [type] [tipenya]");

		if (typeint < 1 || typeint > sizeof(arrHouseInteriors))
			return SendErrorMessage(playerid, "Jenis yang ditentukan harus antara 1 dan %d.", sizeof(arrHouseInteriors));

	    HouseData[id][houseInt][0] = arrHouseInteriors[typeint][eHouseX];
	    HouseData[id][houseInt][1] = arrHouseInteriors[typeint][eHouseY];
	    HouseData[id][houseInt][2] = arrHouseInteriors[typeint][eHouseZ];
	    HouseData[id][houseInt][3] = arrHouseInteriors[typeint][eHouseAngle];
        HouseData[id][houseInterior] = arrHouseInteriors[typeint][eHouseInterior];

		foreach (new i : Player)
		{
			if (PlayerData[i][pHouse] == HouseData[id][houseID])
			{
				SetPlayerPos(i, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
				SetPlayerFacingAngle(i, HouseData[id][houseInt][3]);

				SetPlayerInterior(i, HouseData[id][houseInterior]);
				SetCameraBehindPlayer(i);
			}
		}
	    House_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah mengubah type rumah ID: %d menjadi %d.", ReturnName(playerid, 0), id, typeint);
	}
	return 1;
}

CMD:near(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if ((id = House_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Kamu berada didekat house ID: %d.", id);

    if ((id = Business_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Kamu berada didekat business ID: %d.", id);

    if ((id = Entrance_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Kamu berada didekat entrance ID: %d.", id);

    if ((id = Job_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Kamu berada didekat job ID: %d.", id);

    if ((id = Arrest_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Kamu berada didekat arrest point ID: %d.", id);

    if ((id = Pump_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Kamu berada didekat pump ID: %d.", id);

    if ((id = Crate_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Kamu berada didekat crate ID: %d.", id);

    if ((id = Gate_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Kamu berada didekat gate ID: %d.", id);

    if ((id = ATM_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Kamu berada didekat ATM ID: %d.", id);

    if ((id = Garbage_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Kamu berada didekat garbage bin ID: %d.", id);

    if ((id = Vendor_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Kamu berada didekat vendor ID: %d.", id);

	if ((id = Rack_Nearest(playerid)) != -1)
 		SendServerMessage(playerid, "Kamu berada didekat weapon rack ID: %d.", id);

    if ((id = Speed_Nearest(playerid)) != -1)
 		SendServerMessage(playerid, "Kamu berada didekat speed camera ID: %d.", id);

    if ((id = Graffiti_Nearest(playerid)) != -1)
 		SendServerMessage(playerid, "Kamu berada didekat graffiti ID: %d.", id);

    if ((id = Detector_Nearest(playerid)) != -1)
 		SendServerMessage(playerid, "Kamu berada didekat detector ID: %d.", id);

	return 1;
}

CMD:createbiz(playerid, params[])
{
    static
		type,
	    price,
	    id;

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "dd", type, price))
 	{
	 	SendSyntaxMessage(playerid, "/createbiz [type] [harga]");
		SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Retail | 2: Weapons | 3: Clothes | 4: Fast Food | 5: Dealership");
		SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 6: Gas Station | 7: Furniture | 8: Pawn Shop | 9: Post Office");
    	return 1;
	}
	if (type < 1 || type > 9)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid. Types range from 1 to 9.");

	id = Business_Create(playerid, type, price);

	if (id == -1)
	    return SendErrorMessage(playerid, "Limit bisnis sudah penuh.");

	SendServerMessage(playerid, "Kamu berhasil membuat business ID: %d.", id);
	return 1;
}

CMD:editbiz(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editbiz [id] [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} location, interior, deliver, name, price, stock, type, cars, spawn");
		return 1;
	}
	if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
	    return SendErrorMessage(playerid, "ID Bisnis tidak valid.");

	if (!strcmp(type, "location", true))
	{
 		GetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
		GetPlayerFacingAngle(playerid, BusinessData[id][bizPos][3]);

		BusinessData[id][bizExterior] = GetPlayerInterior(playerid);
		BusinessData[id][bizExteriorVW] = GetPlayerVirtualWorld(playerid);

		Business_Refresh(id);
		Business_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan lokasi business ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "interior", true))
	{
	    GetPlayerPos(playerid, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
		GetPlayerFacingAngle(playerid, BusinessData[id][bizInt][3]);

		BusinessData[id][bizInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
		{
			if (PlayerData[i][pBusiness] == BusinessData[id][bizID])
			{
				SetPlayerPos(i, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
				SetPlayerFacingAngle(i, BusinessData[id][bizInt][3]);

				SetPlayerInterior(i, BusinessData[id][bizInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		Business_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan interior spawn dari business ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "deliver", true))
	{
	    if (BusinessData[id][bizType] == 5)
	        return SendErrorMessage(playerid, "This business doesn't accept deliveries.");

	    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	        return SendErrorMessage(playerid, "You can only place the delivery point outside interiors.");

	    GetPlayerPos(playerid, BusinessData[id][bizDeliver][0], BusinessData[id][bizDeliver][1], BusinessData[id][bizDeliver][2]);
		Business_Refresh(id);

		Business_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan deliver point dari business ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "price", true))
	{
	    new price;

	    if (sscanf(string, "d", price))
	        return SendSyntaxMessage(playerid, "/editbiz [id] [price] [harga baru]");

	    BusinessData[id][bizPrice] = price;

	    Business_Refresh(id);
	    Business_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan harga dari business ID: %d menjadi %s.", ReturnName(playerid, 0), id, FormatNumber(price));
	}
	else if (!strcmp(type, "stock", true))
	{
	    new amount;

	    if (sscanf(string, "d", amount))
	        return SendSyntaxMessage(playerid, "/editbiz [id] [stock] [jumlah]");

	    BusinessData[id][bizProducts] = amount;

	    Business_Refresh(id);
	    Business_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan stock dari business ID: %d menjadi %s produk.", ReturnName(playerid, 0), id, FormatNumber(amount, ""));
	}
	else if (!strcmp(type, "name", true))
	{
	    new name[32];

	    if (sscanf(string, "s[32]", name))
	        return SendSyntaxMessage(playerid, "/editbiz [id] [name] [new name]");

	    format(BusinessData[id][bizName], 32, name);

	    Business_Refresh(id);
	    Business_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan nama dari business ID: %d menjadi \"%s\".", ReturnName(playerid, 0), id, name);
	}
	else if (!strcmp(type, "type", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	    {
	        SendSyntaxMessage(playerid, "/editbiz [id] [type] [business type]");
			SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Retail | 2: Weapons | 3: Clothes | 4: Fast Food | 5: Dealership");
			SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 6: Gas Station | 7: Furniture | 8: Pawn Shop | 9: Post Office");
			return 1;
		}
		if (typeint < 1 || typeint > 9)
			return SendErrorMessage(playerid, "Tipe hanya diantara 1 hingga 9.");

        BusinessData[id][bizType] = typeint;

        switch (typeint)
		{
            case 1: {
            	BusinessData[id][bizInt][0] = -27.3074;
           		BusinessData[id][bizInt][1] = -30.8741;
            	BusinessData[id][bizInt][2] = 1003.5573;
            	BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 4;
            }
            case 2: {
            	BusinessData[id][bizInt][0] = 316.3963;
            	BusinessData[id][bizInt][1] = -169.8375;
            	BusinessData[id][bizInt][2] = 999.6010;
            	BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 6;
			}
			case 3: {
            	BusinessData[id][bizInt][0] = 161.4801;
            	BusinessData[id][bizInt][1] = -96.5368;
            	BusinessData[id][bizInt][2] = 1001.8047;
            	BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 18;
			}
			case 4: {
            	BusinessData[id][bizInt][0] = 363.3402;
            	BusinessData[id][bizInt][1] = -74.6679;
            	BusinessData[id][bizInt][2] = 1001.5078;
            	BusinessData[id][bizInt][3] = 315.0000;
				BusinessData[id][bizInterior] = 10;
			}
			case 5: {
            	BusinessData[id][bizInt][0] = 1494.5612;
            	BusinessData[id][bizInt][1] = 1304.2061;
            	BusinessData[id][bizInt][2] = 1093.2891;
            	BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 3;
			}
			case 6: {
				BusinessData[id][bizInt][0] = -27.3383;
   				BusinessData[id][bizInt][1] = -57.6909;
			   	BusinessData[id][bizInt][2] = 1003.5469;
      			BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 6;
			}
			case 7:
			{
				BusinessData[id][bizInt][0] = -2240.4954;
   				BusinessData[id][bizInt][1] = 128.3774;
			   	BusinessData[id][bizInt][2] = 1035.4210;
      			BusinessData[id][bizInt][3] = 270.0000;
				BusinessData[id][bizInterior] = 6;
			}
			case 8:
			{
				BusinessData[id][bizInt][0] = -2240.468505;
				BusinessData[id][bizInt][1] = 137.060440;
  				BusinessData[id][bizInt][2] = 1035.414062;
  				BusinessData[id][bizInt][3] = 500.0000;
				BusinessData[id][bizInterior] = 6;
			}
			case 9:
			{
				BusinessData[id][bizInt][0] = -107.2430;
				BusinessData[id][bizInt][1] = 2021.8199;
  				BusinessData[id][bizInt][2] = 901.0859;
  				BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 3;
			}
		}
		foreach (new i : Player)
		{
			if (PlayerData[i][pBusiness] == BusinessData[id][bizID])
			{
				SetPlayerPos(i, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
				SetPlayerFacingAngle(i, BusinessData[id][bizInt][3]);

				SetPlayerInterior(i, BusinessData[id][bizInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		Business_Refresh(id);

	    Business_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan type dari business ID: %d menjadi %d.", ReturnName(playerid, 0), id, typeint);
	}
	else if (!strcmp(type, "cars", true))
	{
	    if (BusinessData[id][bizType] != 5)
	        return SendErrorMessage(playerid, "Bisnis ini bukan sebuah dealership!");

		PlayerData[playerid][pDealership] = id;
		Business_EditCars(playerid, id);
	}
	else if (!strcmp(type, "spawn", true))
	{
	    if (BusinessData[id][bizType] != 5)
	        return SendErrorMessage(playerid, "Bisnis ini bukan sebuah dealership!");

	    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	        return SendErrorMessage(playerid, "Kamu hanya bisa menetapkan spawn mobil di luar ruangan.");

	    GetPlayerPos(playerid, BusinessData[id][bizSpawn][0], BusinessData[id][bizSpawn][1], BusinessData[id][bizSpawn][2]);
		GetPlayerFacingAngle(playerid, BusinessData[id][bizSpawn][3]);

		BusinessData[id][bizExterior] = GetPlayerInterior(playerid);

		Business_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan vehicle spawn dari business ID: %d.", ReturnName(playerid, 0), id);
	}
	return 1;
}

CMD:products(playerid, params[])
{
	static
	    bizid = -1;

	if ((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid)) {
	    Business_ProductMenu(playerid, bizid);
	}
	else SendErrorMessage(playerid, "Kamu tidak berada di interior bisnismu.");
	return 1;
}

CMD:bizstate(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/bizstate [biz id]");

	if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
	    return SendErrorMessage(playerid, "ID Bisnis tidak valid.");

	BusinessData[id][bizOwner] = 99999999;

	Business_Refresh(id);
	Business_Save(id);

	SendServerMessage(playerid, "Bisnis ini sekarang menjadi miliki pemerintah (/bizcmds).", id);
	return 1;
}

CMD:destroybiz(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroybiz [biz id]");

	if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
	    return SendErrorMessage(playerid, "ID Business tidak valid.");

	Business_Delete(id);
	SendServerMessage(playerid, "Kamu berhasil menghancurkan bisnis ID: %d.", id);
	return 1;
}

CMD:drink(playerid, params[])
{
    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan command ini sekarang.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/drink [water/soda]");

	if (PlayerData[playerid][pDrinking])
	    return SendErrorMessage(playerid, "Kamu sedang minum.");

	if (!strcmp(params, "soda", true))
	{
	    if (!Inventory_HasItem(playerid, "Soda"))
	    	return SendErrorMessage(playerid, "Kamu tidak memiliki sebotol soda di inventory kamu.");

		if (PlayerData[playerid][pThirst] > 90)
	    	return SendErrorMessage(playerid, "Kamu tidak haus sekarang.");

        PlayerData[playerid][pDrinking] = 1;
        PlayerData[playerid][pDrinkBar] = CreatePlayerProgressBar(playerid, 572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);

        ShowPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
        SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], 100.0);

		Inventory_Add(playerid, "Empty Bottle", 1484);
		Inventory_Remove(playerid, "Soda");

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);

 		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan botol soda miliknya dan menggunakannya.", ReturnName(playerid, 0));
 		ShowPlayerFooter(playerid, "Tekan ~y~LMB~w~ untuk menyesapnya.");
	}
	else if (!strcmp(params, "water", true))
	{
	    if (!Inventory_HasItem(playerid, "Water Bottle"))
	    	return SendErrorMessage(playerid, "Kamu tidak memiliki sebotol air putih di inventory kamu.");

		if (PlayerData[playerid][pThirst] > 90)
	    	return SendErrorMessage(playerid, "Kamu tidak haus sekarang.");

        PlayerData[playerid][pDrinking] = 2;
        PlayerData[playerid][pDrinkBar] = CreatePlayerProgressBar(playerid, 572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);

        ShowPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
        SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], 100.0);

		Inventory_Add(playerid, "Empty Bottle", 1484);
		Inventory_Remove(playerid, "Water Bottle");

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);

 		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan botol air miliknya dan menggunakannya.", ReturnName(playerid, 0));
 		ShowPlayerFooter(playerid, "Tekan ~y~LMB~w~ untuk menyesapnya.");
	}
	return 1;
}

// Helmet system
/*CMD:helmet(playerid, params[])
{
        if(IsPlayerInAnyVehicle(playerid) == 1)
        {
                ShowPlayerDialog(playerid,DIALOG_HELMETSELECT,DIALOG_STYLE_LIST,"Select the helmet you wish to use.", "Helmet 1 - Fire Stripes. \n Helmet 2 - Blue and white motocross style. \n Helmet 3 - Red. \n Helmet 4 - White. \n Helmet 5 - Purple / pink. \n Remove helmet.", "Select", "Close");
        }
        if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
        {
            ShowPlayerDialog(playerid,DIALOG_HELMETSELECT,DIALOG_STYLE_LIST,"Select the helmet you wish to use.", "Helmet 1 - Fire Stripes. \n Helmet 2 - Blue and white motocross style. \n Helmet 3 - Red. \n Helmet 4 - White. \n Helmet 5 - Purple / pink. \n Remove helmet.", "Select", "Close");
        }
        return 1;
}*/

CMD:cook(playerid, params[])
{
	new houseid = House_Inside(playerid);

	if (houseid == -1)
	    return SendErrorMessage(playerid, "Kamu harus berada di dalam rumah untuk memasak makanan.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/cook [burger/pizza]");

    if (PlayerData[playerid][pCuffed])
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan command ini sekarang.");

	if (!strcmp(params, "burger", true))
	{
	    if (!Inventory_HasItem(playerid, "Frozen Burger"))
	        return SendErrorMessage(playerid, "Kamu tidak memiliki frozen burgers.");

		if (PlayerData[playerid][pCooking])
		    return SendErrorMessage(playerid, "Kamu sedang memasak daging.");

		Inventory_Add(playerid, "Cardboard", 928);

		PlayerData[playerid][pCooking] = 1;
		PlayerData[playerid][pCookingTime] = 20;
		PlayerData[playerid][pCookingHouse] = houseid;

		Inventory_Remove(playerid, "Frozen Burger");
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menyiapkan microwave dan memanaskan frozen burger (20 detik).", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "pizza", true))
	{
	    if (!Inventory_HasItem(playerid, "Frozen Pizza"))
	        return SendErrorMessage(playerid, "Kamu tidak memiliki frozen pizza.");

		if (PlayerData[playerid][pCooking])
		    return SendErrorMessage(playerid, "Kamu sedang memasak daging.");

        Inventory_Add(playerid, "Cardboard", 928);

		PlayerData[playerid][pCooking] = 2;
		PlayerData[playerid][pCookingTime] = 55;
		PlayerData[playerid][pCookingHouse] = houseid;

        Inventory_Remove(playerid, "Frozen Pizza");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menyiapkan oven dan memanaskan frozen pizza (55 detik).", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:vest(playerid, params[])
{
    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan command ini sekarang.");

	if (!Inventory_HasItem(playerid, "Armored Vest"))
	    return SendErrorMessage(playerid, "Kamu tidak memilik armored vest.");

	if (ReturnArmour(playerid) > 49)
	    return SendErrorMessage(playerid, "Kamu sudah memiliki vest penuh.");

	SetPlayerArmour(playerid, 50.0);

	Inventory_Remove(playerid, "Armored Vest");
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menggunakan armored vest miliknya.", ReturnName(playerid, 0));
	return 1;
}

CMD:vault(playerid, params[])
{
    static
	    bizid = -1,
		type[24],
		str[12],
		amount;

	if ((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid))
	{
	    if (sscanf(params, "s[24]S()[12]", type, str))
	    {
			SendSyntaxMessage(playerid, "/vault [name] (%s tersedia)", FormatNumber(BusinessData[bizid][bizVault]));
	        SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} withdraw, deposit, balance");
	        return 1;
		}
		if (!strcmp(type, "withdraw", true))
		{
		    if (sscanf(str, "d", amount))
		        return SendSyntaxMessage(playerid, "/vault [withdraw] [jumlah]");

			if (amount < 1 || amount > BusinessData[bizid][bizVault])
			    return SendErrorMessage(playerid, "Jumlah tidak valid!");

            BusinessData[bizid][bizVault] -= amount;
            Business_Save(bizid);

            GiveMoney(playerid, amount);
            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menarik %s dari lemari besi bisnis.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else if (!strcmp(type, "deposit", true))
		{
		    if (sscanf(str, "d", amount))
		        return SendSyntaxMessage(playerid, "/vault [deposit] [amount]");

			if (amount < 1 || amount > GetMoney(playerid))
			    return SendErrorMessage(playerid, "Jumlah tidak valid!");

            BusinessData[bizid][bizVault] += amount;
            Business_Save(bizid);

            GiveMoney(playerid, -amount);
            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menyimpan %s ke lemari besi bisnis.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else if (!strcmp(type, "balance", true))
		{
		    SendServerMessage(playerid, "\"%s\" memiliki total saldo sebesar: %s.", BusinessData[bizid][bizName], FormatNumber(BusinessData[bizid][bizVault]));
		}
	}
	else SendErrorMessage(playerid, "Kamu tidak berada di dalam interior bisnismu.");
	return 1;
}

CMD:drivingtest(playerid, params[])
{
	if (PlayerData[playerid][pDrivingTest])
	    return SendErrorMessage(playerid, "Kamu sudah memulai tes mengemudi!");

	if (!IsPlayerInRangeOfPoint(playerid, 3.0, -2033.0439, -117.4885, 1035.1719))
	    return SendErrorMessage(playerid, "Kamu tidak berada di pickup.");

	if (Inventory_HasItem(playerid, "Car License"))
	    return SendErrorMessage(playerid, "Kamu sudah memilik car license!");

	if (GetMoney(playerid) < 50)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki $50 untuk melakukan tes.");

    PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
   	PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

	GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
	GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
 	GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

    PlayerData[playerid][pTestCar] = CreateVehicle(410, -2047.1056, -87.7183, 34.8219, 0.1447, 1, 1, -1);
    PlayerData[playerid][pTestWarns] = 0;

	if (PlayerData[playerid][pTestCar] != INVALID_VEHICLE_ID)
	{
		PlayerData[playerid][pDrivingTest] = true;
	    PlayerData[playerid][pTestStage] = 0;

		ResetVehicle(PlayerData[playerid][pTestCar]);
	    SetPlayerVirtualWorld(playerid, (2000 + playerid));

	    SetVehicleVirtualWorld(PlayerData[playerid][pTestCar], (2000 + playerid));
		PutPlayerInVehicle(playerid, PlayerData[playerid][pTestCar], 0);

		SetPlayerCheckpoint(playerid, g_arrDrivingCheckpoints[0][0], g_arrDrivingCheckpoints[0][1], g_arrDrivingCheckpoints[0][2], 3.0);
		SendServerMessage(playerid, "Kamu melaksanakan driving test.");

		SetPlayerInterior(playerid, 0);
	}
	return 1;
}

CMD:createentrance(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (isnull(params) || strlen(params) > 32)
	    return SendSyntaxMessage(playerid, "/createentrance [nama]");

	new id = Entrance_Create(playerid, params);

	if (id == -1)
	    return SendErrorMessage(playerid, "Limit penuh.");

	SendServerMessage(playerid, "Kamu berhasil membuat entrance ID: %d.", id);
	return 1;
}

CMD:editentrance(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editentrance [id] [names]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} location, interior, password, name, locked, mapicon, type, custom, virtual");
		return 1;
	}
	if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
	    return SendErrorMessage(playerid, "You have specified an invalid entrance ID.");

	if (!strcmp(type, "location", true))
	{
	    GetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
		GetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3]);

		EntranceData[id][entranceExterior] = GetPlayerInterior(playerid);
		EntranceData[id][entranceExteriorVW] = GetPlayerVirtualWorld(playerid);

		Entrance_Refresh(id);
		Entrance_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the location of entrance ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "interior", true))
	{
	    GetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
		GetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);

		EntranceData[id][entranceInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
		{
			if (PlayerData[i][pEntrance] == EntranceData[id][entranceID])
			{
				SetPlayerPos(i, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
				SetPlayerFacingAngle(i, EntranceData[id][entranceInt][3]);

				SetPlayerInterior(i, EntranceData[id][entranceInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		Entrance_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the interior spawn of entrance ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "custom", true))
	{
	    new status;

	    if (sscanf(string, "d", status))
	        return SendSyntaxMessage(playerid, "/editentrance [id] [custom] [0/1]");

		if (status < 0 || status > 1)
		    return SendErrorMessage(playerid, "You must specify at least 0 or 1.");

	    EntranceData[id][entranceCustom] = status;
	    Entrance_Save(id);

	    if (status) {
			SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has enabled custom interior mode for entrance ID: %d.", ReturnName(playerid, 0), id);
		}
		else {
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has disabled custom interior mode for entrance ID: %d.", ReturnName(playerid, 0), id);
		}
	}
	else if (!strcmp(type, "virtual", true))
	{
	    new worldid;

	    if (sscanf(string, "d", worldid))
	        return SendSyntaxMessage(playerid, "/editentrance [id] [virtual] [interior world]");

	    EntranceData[id][entranceWorld] = worldid;

		foreach (new i : Player) if (Entrance_Inside(i) == id) {
			SetPlayerVirtualWorld(i, worldid);
		}
		Entrance_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the virtual of entrance ID: %d to %d.", ReturnName(playerid, 0), id, worldid);
	}
	else if (!strcmp(type, "mapicon", true))
	{
	    new icon;

	    if (sscanf(string, "d", icon))
	        return SendSyntaxMessage(playerid, "/editentrance [id] [mapicon] [map icon]");

		if (icon < 0 || icon > 63)
		    return SendErrorMessage(playerid, "Invalid map icon! Valid map icons can be found at \"wiki.sa-mp.com/wiki/MapIcons\".");

	    EntranceData[id][entranceIcon] = icon;

	    Entrance_Refresh(id);
	    Entrance_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the price of entrance ID: %d to %d.", ReturnName(playerid, 0), id, icon);
	}
	else if (!strcmp(type, "password", true))
	{
	    new password[32];

	    if (sscanf(string, "s[32]", password))
	        return SendSyntaxMessage(playerid, "/editentrance [id] [password] [entrance pass] (use 'none' to disable)");

		if (!strcmp(password, "none", true)) {
			EntranceData[id][entrancePass][0] = 0;
		}
		else {
		    format(EntranceData[id][entrancePass], 32, password);
		}
	    Entrance_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the password of entrance ID: %d to \"%s\".", ReturnName(playerid, 0), id, password);
	}
	else if (!strcmp(type, "locked", true))
	{
	    new locked;

	    if (sscanf(string, "d", locked))
	        return SendSyntaxMessage(playerid, "/editentrance [id] [locked] [locked 0/1]");

		if (locked < 0 || locked > 1)
		    return SendErrorMessage(playerid, "Invalid value. Use 0 for unlocked and 1 for locked.");

	    EntranceData[id][entranceLocked] = locked;
	    Entrance_Save(id);

	    if (locked) {
			SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has locked entrance ID: %d.", ReturnName(playerid, 0), id);
		} else {
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has unlocked entrance ID: %d.", ReturnName(playerid, 0), id);
		}
	}
	else if (!strcmp(type, "name", true))
	{
	    new name[32];

	    if (sscanf(string, "s[32]", name))
	        return SendSyntaxMessage(playerid, "/editentrance [id] [name] [new name]");

	    format(EntranceData[id][entranceName], 32, name);

	    Entrance_Refresh(id);
	    Entrance_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the name of entrance ID: %d to \"%s\".", ReturnName(playerid, 0), id, name);
	}
	else if (!strcmp(type, "type", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	    {
	        SendSyntaxMessage(playerid, "/editentrance [id] [type] [entrance type]");
			SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 0: None | 1: DMV | 2: Bank | 3: Warehouse | 4: City Hall | 5: Shooting Range | 6:Newb school");
			return 1;
		}
		if (typeint < 0 || typeint > 6)
			return SendErrorMessage(playerid, "The specified type must be between 0 and 5.");

		if (EntranceData[id][entranceType] == 3 && typeint != 3) {
		    DestroyForklifts(id);
		}
		else if (EntranceData[id][entranceType] != 3 && typeint == 3) {
		    CreateForklifts(id);
		}
        EntranceData[id][entranceType] = typeint;

        switch (typeint) {
            case 1: {
            	EntranceData[id][entranceInt][0] = -2029.5531;
           		EntranceData[id][entranceInt][1] = -118.8003;
            	EntranceData[id][entranceInt][2] = 1035.1719;
            	EntranceData[id][entranceInt][3] = 0.0000;
				EntranceData[id][entranceInterior] = 3;
            }
			case 2: {
            	EntranceData[id][entranceInt][0] = 1456.1918;
           		EntranceData[id][entranceInt][1] = -987.9417;
            	EntranceData[id][entranceInt][2] = 996.1050;
            	EntranceData[id][entranceInt][3] = 90.0000;
				EntranceData[id][entranceInterior] = 6;
            }
            case 3: {
                EntranceData[id][entranceInt][0] = 1291.8246;
           		EntranceData[id][entranceInt][1] = 5.8714;
            	EntranceData[id][entranceInt][2] = 1001.0078;
            	EntranceData[id][entranceInt][3] = 180.0000;
				EntranceData[id][entranceInterior] = 18;
			}
			case 4: {
			    EntranceData[id][entranceInt][0] = 390.1687;
           		EntranceData[id][entranceInt][1] = 173.8072;
            	EntranceData[id][entranceInt][2] = 1008.3828;
            	EntranceData[id][entranceInt][3] = 90.0000;
				EntranceData[id][entranceInterior] = 3;
			}
			case 5: {
			    EntranceData[id][entranceInt][0] = 304.0165;
           		EntranceData[id][entranceInt][1] = -141.9894;
            	EntranceData[id][entranceInt][2] = 1004.0625;
            	EntranceData[id][entranceInt][3] = 90.0000;
				EntranceData[id][entranceInterior] = 7;
			}
			case 6: {
			    EntranceData[id][entranceInt][0] = 1146.0039;
           		EntranceData[id][entranceInt][1] = -601.2858;
            	EntranceData[id][entranceInt][2] = 1089.9259;
            	EntranceData[id][entranceInt][3] = 270.8712;
				EntranceData[id][entranceInterior] = 8;
			}
		}
		foreach (new i : Player)
		{
			if (PlayerData[i][pEntrance] == EntranceData[id][entranceID])
			{
				SetPlayerPos(i, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
				SetPlayerFacingAngle(i, EntranceData[id][entranceInt][3]);

				SetPlayerInterior(i, EntranceData[id][entranceInterior]);
				SetCameraBehindPlayer(i);
			}
		}
	    Entrance_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the type of entrance ID: %d to %d.", ReturnName(playerid, 0), id, typeint);
	}
	return 1;
}

CMD:destroyentrance(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyentrance [entrance id]");

	if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
	    return SendErrorMessage(playerid, "entrance ID tidak valid.");

	Entrance_Delete(id);
	SendServerMessage(playerid, "You have successfully destroyed entrance ID: %d.", id);
	return 1;
}

CMD:ammo(playerid, params[])
{
    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan command ini sekarang.");

	if (!Inventory_HasItem(playerid, "Ammo Cartridge"))
	    return SendErrorMessage(playerid, "Kamu tidak memiliki ammo cartridges.");

	new weaponid = 0;

	switch ((weaponid = GetWeapon(playerid)))
	{
		case 22, 23: GiveWeaponToPlayer(playerid, weaponid, 68);
		case 24, 27: GiveWeaponToPlayer(playerid, weaponid, 35);
	    case 25, 26: GiveWeaponToPlayer(playerid, weaponid, 20);
	    case 28, 31, 32: GiveWeaponToPlayer(playerid, weaponid, 200);
	    case 29, 30: GiveWeaponToPlayer(playerid, weaponid, 120);
	    case 33, 34: GiveWeaponToPlayer(playerid, weaponid, 20);
	    case 35..37: GiveWeaponToPlayer(playerid, weaponid, 4);
	    case 38: GiveWeaponToPlayer(playerid, weaponid, 500);
		default: return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan ammo cartridge di senjata ini.");
	}
	PlayReloadAnimation(playerid, weaponid);
	Inventory_Remove(playerid, "Ammo Cartridge");
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menggunakan ammo cartridge ke senjata %s.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));
	return 1;
}

CMD:crowbar(playerid, params[])
{
    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan command ini sekarang.");

	if (!Inventory_HasItem(playerid, "Crowbar"))
	    return SendErrorMessage(playerid, "Kamu tidak memiliki crowbar.");

	if (!PlayerData[playerid][pHoldItem])
	{
	    PlayerData[playerid][pHoldItem] = 1;

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan crowbar miliknya.", ReturnName(playerid, 0));
		SetPlayerAttachedObject(playerid, 4, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
	}
	else
	{
	    PlayerData[playerid][pHoldItem] = 0;

		RemovePlayerAttachedObject(playerid,4);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menyimpan crowbar miliknya.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:screwdriver(playerid, params[])
{
    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan command ini sekarang.");

	if (!Inventory_HasItem(playerid, "Screwdriver"))
	    return SendErrorMessage(playerid, "Kamu tidak memiliki Screwdrivers.");

	if (!PlayerData[playerid][pHoldItem])
	{
	    PlayerData[playerid][pHoldItem] = 1;

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan screwdriver miliknya.", ReturnName(playerid, 0));
		SetPlayerAttachedObject(playerid, 4, 18644, 6, 0.1, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
	}
	else
	{
	    PlayerData[playerid][pHoldItem] = 0;

		RemovePlayerAttachedObject(playerid,4);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menyimpan screwdriver miliknya.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:faq(playerid, params[])
{
	Dialog_Show(playerid, FAQ, DIALOG_STYLE_LIST,
	"Frequently Asked Questions", "Bagaimana saya memasuki gedung?\nBagaimana saya mengakses inventory?\nBagaimana saya mengambil barang yang jatuh?\nApa ikon yang ada di layar?\nBagaimana saya mengisi kelaparan dan kehausan?\nBagaimana saya mencari sebuah area tertentu?\nBagaimana saya berhenti dari pekerjaan saya?\nBagai mana saya mengeluarkan senjata dan menggunakannya?\nBagaimana saya mengedit furniture rumah saya?\nBagaimana saya berinteraksi dalam server ini?", "Pilih", "Batal");
	return 1;
}

CMD:atm(playerid, params[])
{
	if (ATM_Nearest(playerid) == -1)
	    return SendErrorMessage(playerid, "Kamu tidak berada didekat ATM.");

    if (!Inventory_HasItem(playerid, "Credit Card")){

			SendErrorMessage(playerid, "Kamu harus membuat sebuah credit card. Gunakan /registercard di bank.");
	}
	else
	{
 		SelectTextDraw(playerid, 0xA3B4C5FF);
		for (new q=0 ; q<19 ; q++)
		PlayerTextDrawShow(playerid,atmklik[playerid][q]);
	}
	return 1;
}


CMD:bank(playerid, params[])
{
	if (!IsPlayerInBank(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak berada di bank.");

    if (!Inventory_HasItem(playerid, "Credit Card"))
	    return SendErrorMessage(playerid, "Kamu butuh credit card untuk mengoprasikan akun. Gunakan /registercard di bank.");

	Dialog_Show(playerid, Bank, DIALOG_STYLE_LIST, "Akun Bank", "Saldo Akun: %s\nSaldo Tabungan: %s", "Pilih", "Batal", FormatNumber(PlayerData[playerid][pBankMoney]), FormatNumber(PlayerData[playerid][pSavings]));
	return 1;
}

CMD:registercard(playerid, params[])
{
	if (!IsPlayerInBank(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak berada di bank.");

    if (!Inventory_HasItem(playerid, "Credit Card"))
    {
		SendClientMessage(playerid, COLOR_WHITE,"Kamu berhasil mendaftar di San Andreas Bank. Sekarang kamu bisa mengoperasikan akun bankmu.");
		Inventory_Add(playerid, "Credit Card", 1581);
	}
	else return SendErrorMessage(playerid, "Kamu sudah terdaftar di San Andreas Bank.");
	return 1;
}

CMD:robatm(playerid, params[])
{
	if(!Inventory_HasItem(playerid, "Screwdriver") && !Inventory_HasItem(playerid, "Crowbar"))
    	return SendErrorMessage(playerid, "Kamu butuh screwdriver atau crowbar untuk membongkar ATM.");

	if(robpossible == 1)
	{
		if (ATM_Nearest(playerid) == -1) return SendErrorMessage(playerid, "Kamu tidak berada didekat mesin ATM.");
		{
		    PlayerData[playerid][pRobATM] = 1;
		    robpossible = 0;
		    SetTimer("waittimer", 300000, false);
		    SetTimerEx("robtimer", 600000, 0, "d", playerid);
            ATMRobberyIP(playerid);
           	RobberyCounter[playerid] = 60;
            RobberyTimer[playerid] = SetTimerEx("RobberyUpdate", 1000, true, "i", playerid);
            SendClientMessage(playerid, COLOR_WHITE, "Kamu memulai merampok ATM. Tetap disini selama 60 detik. Hati-hati polisi telah diperingatkan.");
            ApplyAnimation(playerid, "COP_AMBIENT", "COPBROWSE_LOOP", 4.1, 1, 0, 0, 0, 0, 1);
		 }
	}
	else
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Kamu tidak bisa merampok ATM sekarang. Tunggu 5 menit!");
	}
	return 1;
}

CMD:resetrob(playerid, params[])
{
    robpossible = 1;
    return 1;
}

CMD:robpermission(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/robpermission [playerid/nama]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	robpossible = 1;

	SendAdminAction(playerid, "Kamu membolehkan %s untuk melakukan perampokan.", ReturnName(userid, 0));
	SendAdminAction(userid, "Kamu sekarang diperbolehkan merampok ATM. Diperbolehkan oleh: %s", ReturnName(playerid, 0));

	Log_Write("logs/robpermission_log.txt", "[%s] %s telah diperbolehkan oleh %s untuk melakukan perampokan.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:park(playerid, params[])
{
	new
	    carid = GetPlayerVehicleID(playerid);

	if (!carid)
	    return SendErrorMessage(playerid, "Kamu harus berada didalam mobilmu.");

    if (IsVehicleImpounded(carid))
    	return SendErrorMessage(playerid, "This vehicle is impounded and you can't use it.");

	if ((carid = Car_GetID(carid)) != -1 && Car_IsOwner(playerid, carid))
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	        return SendErrorMessage(playerid, "Kamu harus menjadi pengemudi!");

	    static
			g_arrSeatData[10] = {INVALID_PLAYER_ID, ...},
			g_arrDamage[4],
			Float:health,
			seatid;

        for (new i = 0; i < 14; i ++) {
			CarData[carid][carMods][i] = GetVehicleComponentInSlot(CarData[carid][carVehicle], i);
	    }
		GetVehicleDamageStatus(CarData[carid][carVehicle], g_arrDamage[0], g_arrDamage[1], g_arrDamage[2], g_arrDamage[3]);
		GetVehicleHealth(CarData[carid][carVehicle], health);

		foreach (new i : Player) if (IsPlayerInVehicle(i, CarData[carid][carVehicle])) {
		    seatid = GetPlayerVehicleSeat(i);

		    g_arrSeatData[seatid] = i;
		}
		GetVehiclePos(CarData[carid][carVehicle], CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2]);
		GetVehicleZAngle(CarData[carid][carVehicle], CarData[carid][carPos][3]);

		Car_Spawn(carid);
		Car_Save(carid);

		SendServerMessage(playerid, "Kamu berhasil memarkirkan %s.", ReturnVehicleName(CarData[carid][carVehicle]));

        UpdateVehicleDamageStatus(CarData[carid][carVehicle], g_arrDamage[0], g_arrDamage[1], g_arrDamage[2], g_arrDamage[3]);
		SetVehicleHealth(CarData[carid][carVehicle], health);

		for (new i = 0; i < sizeof(g_arrSeatData); i ++) if (g_arrSeatData[i] != INVALID_PLAYER_ID) {
		    PutPlayerInVehicle(g_arrSeatData[i], CarData[carid][carVehicle], i);

		    g_arrSeatData[i] = INVALID_PLAYER_ID;
		}
	}
	else SendErrorMessage(playerid, "Kamu tidak memiliki hal yang dapat diparkirkan.");
	return 1;
}

CMD:createpump(playerid, params[])
{
	static
	    id,
		bizid = -1;

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", bizid))
	    return SendSyntaxMessage(playerid, "/createpump [business id]");

	if ((bizid < 0 || bizid >= MAX_BUSINESSES) || !BusinessData[bizid][bizExists])
	    return SendErrorMessage(playerid, "ID tidak valid.");

	if (BusinessData[bizid][bizType] != 6)
	    return SendErrorMessage(playerid, "Bisnis ini bukan sebuah Gas Station!");

    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		return SendErrorMessage(playerid, "Kamu hanya bisa membuat pom bensin diluar ruangan.");

	id = Pump_Create(playerid, bizid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Bisnis ini sudah melewati limit pembuatan pom.");

	SendServerMessage(playerid, "Kamu berhasil membuat gas pump ID: %d.", id);
	EditDynamicObject(playerid, PumpData[id][pumpObject]);

	PlayerData[playerid][pEditPump] = id;
	return 1;
}

CMD:destroypump(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroypump [pump id]");

	if ((id < 0 || id >= MAX_GAS_PUMPS) || !PumpData[id][pumpExists])
	    return SendErrorMessage(playerid, "ID tidak valid.");

	Pump_Delete(id);
	SendServerMessage(playerid, "Kamu berhasil menghancurkan pump ID: %d.", id);
	return 1;
}

CMD:setpump(playerid, params[])
{
	static
	    id = 0,
		amount;

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "dd", id, amount))
	    return SendSyntaxMessage(playerid, "/setpump [pump id] [fuel amount]");

	if ((id < 0 || id >= MAX_GAS_PUMPS) || !PumpData[id][pumpExists])
	    return SendErrorMessage(playerid, "ID tidak valid.");

	PumpData[id][pumpFuel] = amount;

	Pump_Refresh(id);
	Pump_Save(id);

	SendServerMessage(playerid, "Kamu mengisi %d liter bensin untuk pump ID: %d.", amount, id);
	return 1;
}

CMD:refuel(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pRefill] != INVALID_VEHICLE_ID)
	{
	    BusinessData[PlayerData[playerid][pGasStation]][bizVault] += PlayerData[playerid][pRefillPrice];
		Business_Save(PlayerData[playerid][pGasStation]);

        GiveMoney(playerid, -PlayerData[playerid][pRefillPrice]);

		SendServerMessage(playerid, "Kamu berhasil mengisi bensinmu seharga $%d.", PlayerData[playerid][pRefillPrice]);
        StopRefilling(playerid);

        return 1;
	}
	if (!vehicleid)
	    return SendErrorMessage(playerid, "Kamu tidak berada didalam kendaraan!");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Kamu haruslah seorang pengemudi!");

	if (GetEngineStatus(vehicleid))
	    return SendErrorMessage(playerid, "Kamu harus mematikan mesin terlebih dahulu.");

	new id = Pump_Nearest(playerid);

	if (id != -1)
	{
		if (CoreVehicles[vehicleid][vehFuel] > 95)
			return SendErrorMessage(playerid, "Kendaraan ini tidak butuh bensin.");

		if (IsPumpOccupied(id))
		    return SendErrorMessage(playerid, "Pom bensin ini sedang sibuk.");

		if (PumpData[id][pumpFuel] < 1)
   			return SendErrorMessage(playerid, "Pom bensin ini tidak memiliki stok bensin lagi.");

		PlayerData[playerid][pGasPump] = id;
		PlayerData[playerid][pGasStation] = PumpData[id][pumpBusiness];

		PlayerData[playerid][pRefill] = vehicleid;
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s melakukan pengisian bensin untuk kendaraannya.", ReturnName(playerid, 0));
	}
	else
	{
		SendErrorMessage(playerid, "Kamu tidak berada di pom bensin.");
	}
	return 1;
}

CMD:unmod(playerid, params[])
{
	new
	    carid = GetPlayerVehicleID(playerid);

	if (!carid)
	    return SendErrorMessage(playerid, "Kamu harus berada didalam mobilmu.");

    if (IsVehicleImpounded(carid))
    	return SendErrorMessage(playerid, "This vehicle is impounded and you can't use it.");

	if ((carid = Car_GetID(carid)) != -1 && Car_IsOwner(playerid, carid))
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	        return SendErrorMessage(playerid, "Kamu harus mengemudi!");

		for (new i = 0; i < 14; i ++) {
		    RemoveVehicleComponent(CarData[carid][carVehicle], CarData[carid][carMods][i]);

		    CarData[carid][carMods][i] = 0;
		}
		Car_Save(carid);
		SendServerMessage(playerid, "Kamu tidak bisa menghapus modifikasi dari mobil ini.");
	}
	else SendErrorMessage(playerid, "Kamu tidak berada didalam kendaraan yang bisa dimodifikasi.");
	return 1;
}

CMD:trunk(playerid, params[])
{
	new
	    id = -1;

	if ((id = Car_Nearest(playerid)) != -1)
	{
	    if (IsVehicleImpounded(CarData[id][carVehicle]))
	        return SendErrorMessage(playerid, "Kendaraan ini disita dan kamu tidak dapat menggunakannya.");

	    if (IsPlayerInAnyVehicle(playerid))
	        return SendErrorMessage(playerid, "Kamu harus keluar kendaraan terlebih dahulu.");

		if (!IsDoorVehicle(CarData[id][carVehicle]))
		    return SendErrorMessage(playerid, "Kendaraan ini tidak mempunyai garasi.");

		if (CarData[id][carLocked])
		    return SendErrorMessage(playerid, "Bagasi kendaraan ini terkunci.");

		Car_ShowTrunk(playerid, id);
	}
	else SendErrorMessage(playerid, "Kamu tidak berada dijangkauan kendaraan manapun.");
	return 1;
}

CMD:bname(playerid, params[])
{
	new
		id = -1;

    if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1 && Business_IsOwner(playerid, id))
	{
		if (isnull(params))
		    return SendSyntaxMessage(playerid, "/bname [new name]");

		if (strlen(params) > 100)
		    return SendErrorMessage(playerid, "Nama bisnis ini tidak boleh lebih dari 100 karakter.");

		format(BusinessData[id][bizName], 100, params);

		Business_Refresh(id);
		Business_Save(id);

		SendServerMessage(playerid, "Nama bisnis diubah menjadi: \"%s\".", params);
	}
	else SendErrorMessage(playerid, "Kamu tidak berada dijangkauan bisnis manapun.");
	return 1;
}

CMD:bmessage(playerid, params[])
{
	new
		id = -1;

    if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1 && Business_IsOwner(playerid, id))
	{
		if (isnull(params))
		    return SendSyntaxMessage(playerid, "/bmessage [pesan] - Gunakan \"/bmessage none\" untuk mengosongkannya.");

		if (!strcmp(params, "none", true))
		{
		    BusinessData[id][bizMessage][0] = '\0';

			Business_Save(id);
			SendServerMessage(playerid, "Kamu menghapus pesan bisnis milikmu.");
		}
		else
		{
			format(BusinessData[id][bizMessage], 128, params);

			Business_Save(id);
			SendServerMessage(playerid, "Pesan bisnismu diubah menjadi: \"%s\".", params);
		}
	}
	else SendErrorMessage(playerid, "Kamu tidak berada di pickup bisnis milikmu.");
	return 1;
}

CMD:badvert(playerid, params[])
{
    new
		id = -1;

 	if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1 && Business_IsOwner(playerid, id))
	{
		if (isnull(params))
		    return SendSyntaxMessage(playerid, "/badvert [teks]");

		GiveMoney(playerid, -50);
		//SendServerMessage(playerid, "ID: %d | Business: %s | Products: %d | Vault: %s", id, BusinessData[id][bizName], BusinessData[id][bizProducts], FormatNumber(BusinessData[id][bizVault]));
		SendClientMessageToAllEx(COLOR_FADVERT, "[Iklan Business] %s [%s]", params, BusinessData[id][bizName]);
		Log_Write("logs/business_adverts.txt", "[%s] [%s] [%s]: %s ", ReturnDate(), BusinessData[id][bizName], ReturnName(playerid, 0), params);
	}
	else SendErrorMessage(playerid, "Kamu tidak berada di dekat pickup bisnismu.");
	return 1;
}

CMD:aojail(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] >= 1)
	{
		new string[128], name[MAX_PLAYER_NAME], minutes;
		if(sscanf(params, "s[24]ds[64]", name, minutes)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /aojail [nama player] [waktu (menit)]");

		new tmpName[24], query[512];
		mysql_real_escape_string(name, tmpName);

		SetPVarString(playerid, "OnJailAccount", tmpName);

		format(string, sizeof(string), "Kamu memenjarakan akun %s selama %d menit...", tmpName, minutes);
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, string);

		format(query,sizeof(query),"UPDATE `characters` SET `JailTime` = %d WHERE `Admin` < %d AND `Username` = '%s'", minutes*60, PlayerData[playerid][pAdmin], tmpName);
		mysql_tquery(g_iHandle, query, "OnJailAccount", "i", playerid);
	}
	return 1;
}


CMD:beliobat(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 5, 1157.7523,-1310.3689,14.4256))
		{
 	new Float:healths;
    GetPlayerHealth(playerid,healths);
    if (healths <= 20.0)
		{
		    SendClientMessage(playerid, COLOR_PINK, "$30 untuk biaya beli obat");
		    SendClientMessage(playerid, COLOR_BLUE, "Kamu Sudah Merasa baikan sekarang");
		    SetPlayerDrunkLevel(playerid, 0);
		    GiveMoney(playerid, -30);
		    SetPlayerHealth(playerid, 60.0);
		    PlayerData[playerid][pHunger] = 50;
		    PlayerData[playerid][pThirst] = 50;
		    SetTimer("CekSakit", 1000, false);
		}
	else
		{
		    SendClientMessage(playerid, COLOR_PINK, "Kamu sedang tidak sakit");
	 	}
 	}
 	else
	 	{
	 		SendClientMessage(playerid, COLOR_PINK, "Kamu tidak berada di rumah sakit");
	 	}
	return 1;
}

CMD:setlevel(playerid, params[])
{
	static
	 userid,
	 amount;
	if(PlayerData[playerid][pAdmin] >= 6)
	{
		if(sscanf(params, "ud", userid, amount)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /setlevel [player id] [amount]");

		//	format(query,sizeof(query),"UPDATE `characters` SET `Channel4` = '%d' WHERE `Username` = '%s'", amount, tmpName);
		//	mysql_tquery(g_iHandle, query, "SetLeveulPlayer", "i", playerid);
	 	PlayerData[userid][pChannel4] = amount;
	}
	return 1;
}

CMD:furniture(playerid, params[])
{
    static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
        new
			count = 0,
			string[MAX_FURNITURE * 32];

        for (new i = 0; i != MAX_FURNITURE; i ++) if (count < MAX_HOUSE_FURNITURE && FurnitureData[i][furnitureExists] && FurnitureData[i][furnitureHouse] == houseid) {
    		ListedFurniture[playerid][count++] = i;

    		format(string, sizeof(string), "%s%s (%.2f meter)\n", string, FurnitureData[i][furnitureName], GetPlayerDistanceFromPoint(playerid, FurnitureData[i][furniturePos][0], FurnitureData[i][furniturePos][1], FurnitureData[i][furniturePos][2]));
		}
		if (count) {
			Dialog_Show(playerid, ListedFurniture, DIALOG_STYLE_LIST, "List Furnitur", string, "Pilih", "Batal");
     	}
     	else SendErrorMessage(playerid, "Rumah ini tidak memiliki furnitur apapun.");
	}
	else SendErrorMessage(playerid, "Kamu tidak berada di rumah milikmu.");
	return 1;
}

CMD:createjob(playerid, params[])
{
	static
	    type,
		id = -1;

	if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/createjob [type]");

	if (type < 1 || type > 10)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid. Types range from 1 to 9.");

	id = Job_Create(playerid, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "Limit job habis.");

	SendServerMessage(playerid, "Kamu berhasil membuat job ID: %d.", id);
	return 1;
}

CMD:destroyjob(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyjob [job id]");

	if ((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
	    return SendErrorMessage(playerid, "ID job tidak valid.");

	Job_Delete(id);
	SendServerMessage(playerid, "Kamu berhasil menghancurkan job ID: %d.", id);
	return 1;
}

CMD:editjob(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editjob [id] [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} location, type, point, deliver");
		return 1;
	}
	if ((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
	    return SendErrorMessage(playerid, "ID Job tidak valid.");

	if (!strcmp(type, "location", true))
	{
	    static
	        Float:x,
	        Float:y,
	        Float:z;

	    GetPlayerPos(playerid, x, y, z);

		JobData[id][jobPos][0] = x;
		JobData[id][jobPos][1] = y;
		JobData[id][jobPos][2] = z;

		JobData[id][jobInterior] = GetPlayerInterior(playerid);
		JobData[id][jobWorld] = GetPlayerVirtualWorld(playerid);

		Job_Refresh(id);
		Job_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah mengubah lokasi job ID: %d.", ReturnName(playerid, 0), id);
	}
 	else if (!strcmp(type, "type", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	        return SendSyntaxMessage(playerid, "/edithouse [id] [type] [type baru]");

        if (typeint < 1 || typeint > 9)
	    	return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid. Type berkisar dari 1 hingga 9.");

	    JobData[id][jobType] = typeint;

	    Job_Refresh(id);
	    Job_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah mengubah type job ID: %d menjadi %s.", ReturnName(playerid, 0), id, Job_GetName(typeint));
	}
	else if (!strcmp(type, "point", true))
	{
	    static
	        Float:x,
	        Float:y,
	        Float:z;

	    GetPlayerPos(playerid, x, y, z);

		JobData[id][jobPoint][0] = x;
		JobData[id][jobPoint][1] = y;
		JobData[id][jobPoint][2] = z;
        JobData[id][jobPointInt] = GetPlayerInterior(playerid);
        JobData[id][jobPointWorld] = GetPlayerVirtualWorld(playerid);

		Job_Refresh(id);
		Job_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah mengubah point job ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "deliver", true))
	{
	    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	        return SendErrorMessage(playerid, "Kamu tidak bisa mengubah delivery point ke dalam ruangan.");

	    static
	        Float:x,
	        Float:y,
	        Float:z;

	    GetPlayerPos(playerid, x, y, z);

		JobData[id][jobDeliver][0] = x;
		JobData[id][jobDeliver][1] = y;
		JobData[id][jobDeliver][2] = z;

		Job_Refresh(id);
		Job_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah mengubah deliver point of job ID: %d.", ReturnName(playerid, 0), id);
	}
	return 1;
}

CMD:quitjob(playerid, params[])
{
	if (PlayerData[playerid][pJob] != 0)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (PlayerData[playerid][pMinedRock])
		{
	    	PlayerData[playerid][pMinedRock] = 0;
			PlayerData[playerid][pMineCount] = 0;

			DisablePlayerCheckpoint(playerid);

			RemovePlayerAttachedObject(playerid, 4);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
		if (PlayerData[playerid][pJob] == JOB_COURIER)
		{
			if (PlayerData[playerid][pUnloading] != -1)
			{
	   		 	PlayerData[playerid][pUnloading] = -1;
	    		PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;

	    		DisablePlayerCheckpoint(playerid);
			}
			if (PlayerData[playerid][pDeliverShipment])
			{
			    PlayerData[playerid][pShipment] = -1;
			    PlayerData[playerid][pDeliverShipment] = 0;

			    DisablePlayerCheckpoint(playerid);
			}
			if (PlayerData[playerid][pLoading])
			{
	   	 		PlayerData[playerid][pLoading] = 0;
	    		PlayerData[playerid][pLoadType] = 0;

	    		DisablePlayerCheckpoint(playerid);
			}
			if (PlayerData[playerid][pLoadCrate])
 			{
  				PlayerData[playerid][pLoadCrate] = 0;

				RemovePlayerAttachedObject(playerid, 4);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			}
		}
		if (IsPlayerInWarehouse(playerid) && GetVehicleModel(vehicleid) == 530 && CoreVehicles[vehicleid][vehLoadType] == 7)
		{
 			CoreVehicles[vehicleid][vehLoadType] = 0;
   			DestroyDynamicObject(CoreVehicles[vehicleid][vehCrate]);

			CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
			DisablePlayerCheckpoint(playerid);
		}
		SendServerMessage(playerid, "Kamu keluar dari pekerjaan \"%s\".", Job_GetName(PlayerData[playerid][pJob]));
		PlayerData[playerid][pJob] = 0;
	}
	else SendErrorMessage(playerid, "Kamu tidak memiliki pekerjaan.");
	return 1;
}

//penyapu
CMD:joinpenyapu(playerid, params[])
{
        if(IsPlayerInRangeOfPoint(playerid,3.0,1669.3743,-1881.9717,12.1225))
        {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Kamu telah menjadi seorang penyapu jalan");
            penyapu[playerid] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Kamu tidak di tempat penyapu jalan");
		}
		return 1;
}

CMD:mulainyapu(playerid, params[])
{
      	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 574)
		{
				if(penyapu[playerid] == 0)
				{
				    new rand = random(sizeof(penyapu1));
				    mulainyapu[playerid] = SetPlayerCheckpoint(playerid,penyapu1[rand][0],penyapu1[rand][1],penyapu1[rand][2],3);
				    penyapu[playerid] = 1;
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Ikuti checkpoint untuk menyapu jalan yang kotor, /batalnyapu untuk membatalkan menyapu");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Kamu masih menyapu jalan, /batalnyapu untuk membatalkan menyapu");
				}
		}
		else
		{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Kamu harus kedalam mobil penyapu");
		}
		return 1;
}

CMD:batalnyapu(playerid, params[])
{
	if(penyapu[playerid] > 0)
 	{
            penyapu[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
            SendClientMessageEx(playerid, COLOR_RED, "* Kamu membatalkan proses menyapu jalan");
            new codit = GetPlayerVehicleID(playerid);
			SetVehicleToRespawn(codit);
  	}
   	else
    {
        	SendClientMessageEx(playerid, COLOR_RED, "* Kamu tidak sedang menyapu jalan");
	}
 	return 1;
}

//truckerjob
CMD:mulaikerja(playerid, params[])
{
        if(IsPlayerInRangeOfPoint(playerid,3.0,-525.5700, -498.6000, 25.6000))
        {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Silahkan mengambil truck dan gandeng trailer");
            trucker[playerid] = 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Kamu tidak di tempat trucker");
		}
		return 1;
}

CMD:checkload(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid,3.0,-485.9100, -557.4700, 25.9200))
    {
	ShowPlayerDialog(playerid, 1987, DIALOG_STYLE_LIST, "Selamat datang di Pos Pemeriksaan, Trailer apa yang anda muat?", "{00B000}Trailer Makanan \n{00B000}Trailer Box POS \n{A70000}Trailer Batu dan Pasir \n{A70000}Trailer Petrol", "Pilih", "Batal");
 	}
	else
	{
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Kamu tidak di tempat pos pemeriksaan");
	}
	return 1;
}
CMD:batalngirim(playerid, params[])
{
	if(trucker[playerid] > 0)
 	{
            trucker[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
            SendClientMessageEx(playerid, COLOR_RED, "* Kamu membatalkan pengiriman trailer");
  	}
   	else
    {
        	SendClientMessageEx(playerid, COLOR_RED, "* Kamu tidak mengantarkan trailer");
	}
 	return 1;
}

//jobkoran
CMD:joinkoran(playerid, params[])
{
        if(IsPlayerInRangeOfPoint(playerid,3.0,1863.3519,-1044.6868,23.8872))
        {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Kamu telah menjadi pengantar koran");
            koran[playerid] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Kamu tidak di tempat pengantar koran");
		}
		return 1;
}

CMD:antarkoran(playerid, params[])
{
        if(IsPlayerInRangeOfPoint(playerid,3.0,1856.3959,-1040.4155,24.0105))
		{
		    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 510)
		    {
				if(koran[playerid] == 0)
				{
				    new rand = random(sizeof(bmx1));
				    antarkoran[playerid] = SetPlayerCheckpoint(playerid,bmx1[rand][0],bmx1[rand][1],bmx1[rand][2],3);
				    koran[playerid] = 1;
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Ikuti checkpoint untuk mengantarkan koran, /batalkoran untuk membatalkan mengantar koran");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Kamu masih mengantarkan koran, /batalkoran untuk membatalkan mengantar koran");
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Kamu harus naik sepeda koran");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Kamu tidak di tempat pickup antar koran");
		}
		return 1;
}

CMD:batalkoran(playerid, params[])
{
	if(koran[playerid] > 0)
 	{
            koran[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
            SendClientMessageEx(playerid, COLOR_RED, "* Kamu membatalkan pengiriman koran");
  	}
   	else
    {
        	SendClientMessageEx(playerid, COLOR_RED, "* Kamu Sedang tidak mengantarkan koran");
	}
 	return 1;
}

//endkoran

CMD:takejob(playerid, params[])
{
	static
	    id = -1;

	if ((id = Job_Nearest(playerid)) != -1)
	{
	    if (PlayerData[playerid][pJob] == JobData[id][jobType])
	        return SendErrorMessage(playerid, "Kamu sudah bekerja di pekerjaan ini.");

	    PlayerData[playerid][pJob] = JobData[id][jobType];

	    return SendServerMessage(playerid, "Kamu sekarang seorang %s - ketik \"/jobcmds\" untuk perintah-perintahnya.", Job_GetName(JobData[id][jobType]));
	}
    SendErrorMessage(playerid, "Kamu tidak berada di pickup job manapun.");
	return 1;
}

CMD:unload(playerid, params[])
{
	new
		id = Business_NearestDeliver(playerid),
		vid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki pekerjaan sebagai courier.");

    if (id == -1)
	    return SendErrorMessage(playerid, "Kamu tidak berada di delivery point.");

 	if (!IsLoadableVehicle(vid))
  		return SendErrorMessage(playerid, "Kamu tidak berada didalam kendaraan yang dapat memuat sesuatu.");

	if (!CoreVehicles[vid][vehLoadType] || CoreVehicles[vid][vehLoads] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memuat apapun.");

	if (PlayerData[playerid][pUnloading] != -1)
	    return SendErrorMessage(playerid, "Kamu sedang membongkar muat crates.");

	if (PlayerData[playerid][pShipment] != -1 && id != PlayerData[playerid][pShipment])
	    return SendErrorMessage(playerid, "Kamu tidak menerima permintaan kiriman dari bisnis ini.");

	switch (CoreVehicles[vid][vehLoadType])
 	{
	 	case 1:
	 	{
	 	    if (BusinessData[id][bizType] != 1 && BusinessData[id][bizType] != 6)
	 	        return SendErrorMessage(playerid, "Bisnis ini tidak bisa menerima muatan ini (salah type).");
		}
		case 2..4:
		{
		    if (BusinessData[id][bizType] != CoreVehicles[vid][vehLoadType])
	 	        return SendErrorMessage(playerid, "Bisnis ini tidak bisa menerima muatan ini (salah type).");
		}
		case 5:
		{
		    if (BusinessData[id][bizType] != 6)
	 	        return SendErrorMessage(playerid, "Bisnis ini tidak bisa menerima muatan ini (salah type).");
		}
		case 6:
		{
		    if (BusinessData[id][bizType] != 7)
	 	        return SendErrorMessage(playerid, "Bisnis ini tidak bisa menerima muatan ini (salah type).");
		}
	}
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	DisableWaypoint(playerid);

	GetVehicleBoot(vid, fX, fY, fZ);
	RemovePlayerFromVehicle(playerid);

	PlayerData[playerid][pUnloading] = id;
	PlayerData[playerid][pUnloadVehicle] = vid;

	SetPlayerCheckpoint(playerid, fX, fY, fZ, 1.0);
	SendServerMessage(playerid, "Tolong bongkar muat crates dan kirim crates ke titik pengiriman.");

	return 1;
}

CMD:repair(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_MECHANIC)
	    return SendErrorMessage(playerid, "Kamu tidak bekerja sebagai seorang Mechanic.");

	if (IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Kamu harus keluar kendaraan terlebih dahulu.");

	if (!Inventory_HasItem(playerid, "Repair Kit"))
	    return SendErrorMessage(playerid, "Kamu tidak memiliki repair kit.");

	if (PlayerData[playerid][pRepairTime] > gettime())
	    return SendErrorMessage(playerid, "Kamu harus menunggu %d detik sebelum memperbaiki lagi.", PlayerData[playerid][pRepairTime] - gettime());

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{
	    if (!IsEngineVehicle(i))
	        return SendErrorMessage(playerid, "Kendaraan ini tidak bisa dibetulkan lagi.");
		if (IsDoorVehicle(i)){
	    	if (!GetHoodStatus(i))
	        	return SendErrorMessage(playerid, "Hood harus dibuka sebelum diperbaiki.");
		}

        if (CoreVehicles[i][vehRepairing])
            return SendErrorMessage(playerid, "Kendaraan ini sedang diperbaiki.");

		Inventory_Remove(playerid, "Repair Kit");
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);

        CoreVehicles[i][vehRepairing] = true;
        SetTimerEx("RepairCar", 5000, false, "dd", playerid, i);

        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memulai memperbaiki kendaraan.", ReturnName(playerid, 0));
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Memperbaiki...~w~ Tunggu Sebentar", 5500, 3);
		return 1;
	}
	SendErrorMessage(playerid, "Kamu tidak berada dalam jangkauan hood kendaraan manapun.");
	return 1;
}

CMD:nitrous(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_MECHANIC)
	    return SendErrorMessage(playerid, "Kamu tidak bekerja sebagai seorang mechanic.");

	if (IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Kamu harus keluar kendaraan terlebih dahulu.");

	if (!Inventory_HasItem(playerid, "NOS Canister"))
	    return SendErrorMessage(playerid, "Kamu tidak memiliki sebuah NOS Canister diinventorymu.");

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{
	    if (!IsEngineVehicle(i) || IsABike(i) || IsABoat(i) || IsAPlane(i) || IsAHelicopter(i))
	        return SendErrorMessage(playerid, "Kamu tidak bisa menambahkan nitrous di kendaraan ini.");

	    if (!GetHoodStatus(i))
	        return SendErrorMessage(playerid, "Hood kendaraan harus dibuka terlebih dahulu.");

		Inventory_Remove(playerid, "NOS Canister");
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);

		AddComponent(i, 1010);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memasang sebuah NOS canister ke mesin kendaraan.", ReturnName(playerid, 0));
		return 1;
	}
	SendErrorMessage(playerid, "Kamu tidak berada dalam jangkauan hood kendaraan manapun.");
	return 1;
}

CMD:acceptcall(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_TAXI)
	    return SendErrorMessage(playerid, "Kamu tidak bekerja sebagai seorang Supir Taxi.");

	if (!PlayerData[playerid][pTaxiDuty])
	    return SendErrorMessage(playerid, "Kamu harus on Taxi duty sebelum nerima sebuah panggilan.");

	Taxi_ShowCalls(playerid);
	return 1;
}

CMD:acceptmechanic(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_MECHANIC)
	    return SendErrorMessage(playerid, "Kamu bukan seorang mechanic.");

	Mechanic_ShowCalls(playerid);
	return 1;
}

CMD:taxi(playerid, params[])
{
	new modelid = GetVehicleModel(GetPlayerVehicleID(playerid));

    if (PlayerData[playerid][pJob] != JOB_TAXI)
	    return SendErrorMessage(playerid, "Kamu bukanlah seorang supir taxi.");

	if (modelid != 438 && modelid != 420)
	    return SendErrorMessage(playerid, "Kamu harus berada didalam taxi.");

	if (PlayerData[playerid][pTaxiDuty])
	{
	    foreach (new i : Player) if (PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
	        LeaveTaxi(i, playerid);
	    }
	    SetPlayerColor(playerid, DEFAULT_COLOR);

        PlayerData[playerid][pTaxiDuty] = false;
        SendServerMessage(playerid, "Kamu tidak dalam keadaan bertugas!");
	}
	else
	{
		SetPlayerColor(playerid, 0xF5DEB300);

	    PlayerData[playerid][pTaxiDuty] = true;
	    SendServerMessage(playerid, "[TAXI]: Sekarang kamu on Duty sebagai Supir Taxi. Cek /acceptcall untuk menerima panggilan.");
	}
	return 1;
}

CMD:usekit(playerid, params[])
{
	if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan command ini sekarang.");

	if (PlayerData[playerid][pFirstAid])
	    return SendErrorMessage(playerid, "Kamu sudah menggunakan first aid kit.");

	if (!Inventory_HasItem(playerid, "First Aid"))
	    return SendErrorMessage(playerid, "Kamu tidak memiliki first aid kits diinventorymu.");

	if (ReturnHealth(playerid) > 99)
	    return SendErrorMessage(playerid, "Kamu tidak butuh first aid kit sekarang.");

	if (!IsPlayerInAnyVehicle(playerid))
	    ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0);

    PlayerData[playerid][pFirstAid] = true;
    PlayerData[playerid][pAidTimer] = SetTimerEx("FirstAidUpdate", 1000, true, "d", playerid);

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s membuka sebuah first aid kit dan menggunakannya.", ReturnName(playerid, 0));
    Inventory_Remove(playerid, "First Aid");

    ShowPlayerFooter(playerid, "Kamu menggunakan sebuah ~g~first aid kit!");
    return 1;
}

CMD:phone(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "Cellphone"))
	    return SendErrorMessage(playerid, "Kamu tidak memiliki Cellphone.");

    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan command ini sekarang.");

	static
	    str[32];

	format(str, sizeof(str), "Phone (#%d)", PlayerData[playerid][pPhone]);

	if (PlayerData[playerid][pPhoneOff]) {
		Dialog_Show(playerid, MyPhone, DIALOG_STYLE_LIST, str, "Buat Panggilan\nKontak Saya\nKirim SMS\nHidupkan Ponsel", "Pilih", "Batal");
	}
	else {
	    Dialog_Show(playerid, MyPhone, DIALOG_STYLE_LIST, str, "Buat Panggilan\nKontak Saya\nKirim SMS\nMatikan Ponsel", "Pilih", "Batal");
	}
	return 1;
}
CMD:sms(playerid, params[])
	return cmd_text(playerid, params);

CMD:text(playerid, params[])
{
    if (!Inventory_HasItem(playerid, "Cellphone"))
	    return SendErrorMessage(playerid, "Kamu tidak memiliki Cellphone.");

    if (PlayerData[playerid][pPhoneOff])
		return SendErrorMessage(playerid, "Ponselmu harus hidup terlebih dahulu.");

	static
	    targetid,
		number,
		text[128];

	if (sscanf(params, "ds[128]", number, text))
	    return SendSyntaxMessage(playerid, "/text [phone number] [pesan]");

	if (!number)
	    return SendErrorMessage(playerid, "Nomor ponsel tidak terdaftar.");

	if ((targetid = GetNumberOwner(number)) != INVALID_PLAYER_ID)
	{
	    if (targetid == playerid)
	        return SendErrorMessage(playerid, "Kamu tidak bisa mengirim SMS ke dirimu sendiri!");

		if (PlayerData[targetid][pPhoneOff])
		    return SendErrorMessage(playerid, "Penerima mematikan ponselnya.");

        GiveMoney(playerid, -1);
		ShowPlayerFooter(playerid, "Kamu ~r~membayar~w~ $1 untuk mengirim SMS.");

		SendClientMessageEx(targetid, COLOR_YELLOW, "[TEXT]: %s - %s (%d)", text, ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
		SendClientMessageEx(playerid, COLOR_YELLOW, "[TEXT]: %s - %s (%d)", text, ReturnName(playerid, 0), PlayerData[playerid][pPhone]);

        PlayerPlaySoundEx(targetid, 21001);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menggunakan ponselnya dan mengirim sebuah SMS.", ReturnName(playerid, 0));
	}
	else
	{
	    SendErrorMessage(playerid, "Nomor ponsel tidak terdaftar.");
	}
	return 1;
}

CMD:pickup(playerid, params[])
{
	if (!PlayerData[playerid][pIncomingCall])
	    return SendErrorMessage(playerid, "Tidak ada panggilan masuk.");

	if (PlayerData[playerid][pCuffed])
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan command ini sekarang.");

    if (PlayerData[playerid][pPhoneOff])
    	return SendErrorMessage(playerid, "Ponselmu harus hidup terlebih dahulu.");

	new targetid = PlayerData[playerid][pCallLine];

	PlayerData[playerid][pIncomingCall] = 0;
	PlayerData[targetid][pIncomingCall] = 0;

	SendClientMessage(playerid, COLOR_YELLOW, "[SERVER]:{FFFFFF} Kamu menjawab panggilan masuk.");
	SendClientMessage(targetid, COLOR_YELLOW, "[SERVER]:{FFFFFF} Penerima telah menerima panggilan tersebut.");

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah sebuah menerima panggilan masuk.", ReturnName(playerid, 0));
	return 1;
}

CMD:hangup(playerid, params[])
{
	new targetid = PlayerData[playerid][pCallLine];

	if (PlayerData[playerid][pEmergency] || PlayerData[playerid][pPlaceAd] || PlayerData[playerid][pLoanAsk])
	{
	    PlayerData[playerid][pEmergency] = 0;
	    PlayerData[playerid][pPlaceAd] = 0;
	    PlayerData[playerid][pLoanAsk] = 0;

        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menutup ponsel miliknya.", ReturnName(playerid, 0));
        return 1;
	}
	if (PlayerData[playerid][pDealerCall] || PlayerData[playerid][pDealerCallMP] || PlayerData[playerid][pDealerCallPP] || PlayerData[playerid][pDealerCallSMGP] || PlayerData[playerid][pDealerCallSP] || PlayerData[playerid][pDealerCallRP] || PlayerData[playerid][pDealerCallDP])
	{
	    PlayerData[playerid][pDealerCall] = 0;
	    PlayerData[playerid][pDealerCallMP] = 0;
	    PlayerData[playerid][pDealerCallPP] = 0;
	    PlayerData[playerid][pDealerCallSMGP] = 0;
	    PlayerData[playerid][pDealerCallSP] = 0;
	    PlayerData[playerid][pDealerCallRP] = 0;
	    PlayerData[playerid][pDealerCallDP] = 0;

        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menutup ponsel miliknya.", ReturnName(playerid, 0));
        return 1;
	}
	if (targetid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Tidak ada panggilan telpon yang perlu ditutup.");

	if (PlayerData[playerid][pIncomingCall])
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "[PHONE]:{FFFFFF} Kamu menolak sebuah panggilan masuk.");
	    SendClientMessage(targetid, COLOR_YELLOW, "[PHONE]:{FFFFFF} Penerima telah menolak panggilan tersebut.");

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menolak sebuah panggilan.", ReturnName(playerid, 0));
	}
	else
	{
        SendClientMessage(playerid, COLOR_YELLOW, "[PHONE]:{FFFFFF} Kamu telah menutup telepon.");
	    SendClientMessage(targetid, COLOR_YELLOW, "[PHONE]:{FFFFFF} Penerima telah mematikan telepon.");

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menutup ponsel miliknya.", ReturnName(playerid, 0));
	    SendNearbyMessage(targetid, 30.0, COLOR_PURPLE, "** %s telah menutup ponselnya.", ReturnName(targetid, 0));
	}
	PlayerData[playerid][pIncomingCall] = 0;
	PlayerData[targetid][pIncomingCall] = 0;

	PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
	PlayerData[targetid][pCallLine] = INVALID_PLAYER_ID;

	return 1;
}

CMD:paint(playerid, params[])
{
	if (PlayerData[playerid][pCuffed])
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan command ini sekarang.");

	new vehicleid = GetNearestVehicle(playerid);

	if (vehicleid == INVALID_VEHICLE_ID)
	    return SendErrorMessage(playerid, "Kamu tidak berdiri di dekat kendaraan apapun.");

	if (!Inventory_HasItem(playerid, "Spray Can"))
	    return SendErrorMessage(playerid, "Kamu tidak memilik Spray Can. Dapatkan di toko 24/7.");

	if (IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Kamu harus keluar kendaraan terlebih dahulu.");

	static
 		colors[256];

	for (new i = 0; i < sizeof(colors); i ++) {
		colors[i] = i;
   	}
   	ShowColorSelectionMenu(playerid, MODEL_SELECTION_COLOR, colors);
	return 1;
}

CMD:id(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/id [playerid/nama]");

	if (strlen(params) < 3)
		return SendErrorMessage(playerid, "Kamu harus menentukan minimal 3 karakter.");

	new count;

	foreach (new i : Player)
	{
	    if (strfind(ReturnName(i), params, true) != -1)
	    {
	        SendClientMessageEx(playerid, COLOR_WHITE, "** %s - ID: %d", ReturnName(i), i);
	        count++;
		}
	}
	if (!count)
	    return SendErrorMessage(playerid, "Tidak ada pengguna yang memenuhi kriteria pencarian: \"%s\".", params);

	return 1;
}

CMD:binfo(playerid, params[])
{
    new
		id = -1;

    if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1 && Business_IsOwner(playerid, id)) {
     	SendServerMessage(playerid, "ID: %d | Bisnis: %s | Produk: %d | Brangkas: %s", id, BusinessData[id][bizName], BusinessData[id][bizProducts], FormatNumber(BusinessData[id][bizVault]));
	}
	else SendErrorMessage(playerid, "Kamu tidak berada di sebuah bisnis tertentu.");
	return 1;
}

CMD:loadcrate(playerid, params[])
{
	new vehid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pJob] != JOB_UNLOADER)
	    return SendErrorMessage(playerid, "Kamu harus bekerja sebagai Unloader.");

	if (!IsPlayerInWarehouse(playerid))
	    return SendErrorMessage(playerid, "Kamu harus berada di dalam Warehouse untuk menggunakan command ini.");

	if (GetVehicleModel(vehid) != 530)
	    return SendErrorMessage(playerid, "Kamu harus menggunakan kendaraan forklift.");

	if (CoreVehicles[vehid][vehLoadType] == 7)
	    return SendErrorMessage(playerid, "Forklift ini sudah memuat sebuah crate.");

	if (!IsPlayerInRangeOfPoint(playerid, 5.0, 1260.3976, -20.0215, 1001.0234))
	    return SendErrorMessage(playerid, "Kamu harus lebih dekat dengan crate.");

	if (PlayerData[playerid][pLoading])
	    return SendErrorMessage(playerid, "Kamu sudah sebuah crate saat ini.");

	PlayerData[playerid][pLoading] = 1;

	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Memuat crate...", 3200, 3);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memindahkan forklift ke arah crate.", ReturnName(playerid, 0));

	TogglePlayerControllable(playerid, 0);
	SetTimerEx("ForkliftUpdate", 3000, false, "dd", playerid, vehid);
	return 1;
}

CMD:mine(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_MINER)
	    return SendErrorMessage(playerid, "Kamu harus bekerja sebagai seorang Miner.");

	if (!IsPlayerNearMine(playerid))
	    return SendErrorMessage(playerid, "Kamu harus berada didekat mine.");

	if (PlayerData[playerid][pMining])
	{
	    PlayerData[playerid][pMining] = false;
	    PlayerData[playerid][pMineCount] = 0;

		RemovePlayerAttachedObject(playerid, 4);
	    SendServerMessage(playerid, "Kamu telah menyelesaikan pekerjaan pertambanganmu.");
	}
	else
	{
	    PlayerData[playerid][pMining] = true;
        PlayerData[playerid][pMineCount] = 0;

	    SendServerMessage(playerid, "Kamu sekarang sedang menambang! Gunakan klik kiri untuk menambang.");
	    SetPlayerAttachedObject(playerid, 4, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
	}
	return 1;
}

CMD:sellfood(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_FOOD_VENDOR)
	    return SendErrorMessage(playerid, "Kamu harus bekerja sebagai Food Vendor.");

	if (GetVehicleModel(GetPlayerVehicleID(playerid)) != 423)
 		return SendErrorMessage(playerid, "Kamu tidak berada di dalam Truk Makanan.");

	static
	    userid,
	    food[24],
	    price;

	if (sscanf(params, "us[24]d", userid, food, price))
	{
	    SendSyntaxMessage(playerid, "/sellfood [playerid/nama] [MAKANAN] [harga]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[MAKANAN]:{FFFFFF} water, soda, burger, pizza, chicken");
	    return 1;
	}
	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 7.0))
	    return SendErrorMessage(playerid, "Player tidak konek atau tidak didekatmu.");

	if (price < 1 || price > 20)
	    return SendErrorMessage(playerid, "Harga tidak bisa dibawah 1 atau lebih dari 20 Dollar.");

	if (!strcmp(food, "water", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 1;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s telah menawarkanmu sebotol water $%d (ketik \"/approve food\" untuk menerima).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "Kamu menawarkan sebotol water kepada %s seharga $%d.", ReturnName(userid, 0), price);
	}
	else if (!strcmp(food, "soda", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 2;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s telah menawarkanmu segelas soda seharga $%d (ketik \"/approve food\" untuk menerima).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "Kamu menawarkan segelas soda kepada %s seharga $%d.", ReturnName(userid, 0), price);
	}
	else if (!strcmp(food, "burger", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 3;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s telah menawarkanmu sebuah burger seharga $%d (ketik \"/approve food\" untuk menerima).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "Kamu menawarkan sebuah burger kepada %s seharga $%d.", ReturnName(userid, 0), price);
	}
	else if (!strcmp(food, "pizza", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 4;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s telah menawarkanmu sepotong pizza seharga $%d (ketik \"/approve food\" untuk menerima).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "Kamu menawarkan sepotong pizza kepada %s seharga $%d.", ReturnName(userid, 0), price);
	}
	else if (!strcmp(food, "chicken", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 5;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s telah menawarkanmu beberapa potong ayam seharga $%d (ketik \"/approve food\" untuk menerima).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "Kamu menawarkan beberapa potong ayam kepada %s seharga $%d.", ReturnName(userid, 0), price);
	}
	return 1;
}

CMD:createcrate(playerid, params[])
{
	static
	    id = -1,
		type;

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", type))
	{
	    SendSyntaxMessage(playerid, "/createcrate [type]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Melee | 2: Pistol Parts | 3: SMG Parts | 4: Shotgun Parts | 5: Rifle Parts | 6: Drugs");
		return 1;
	}
	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid. Berkisar 1 hingga 6.");

	id = Crate_Create(playerid, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "Limit crate sudah habis.");

	SendServerMessage(playerid, "Telah membuat sebuah crate ID: %d.", id);
	return 1;
}

CMD:destroycrate(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroycrate [crate id]");

	if ((id < 0 || id >= MAX_CRATES) || !CrateData[id][crateExists])
	    return SendErrorMessage(playerid, "ID Crate tidak valid.");

	Crate_Delete(id);
	SendServerMessage(playerid, "Kamu menghancurkan crate ID: %d.", id);
	return 1;
}

CMD:crates(playerid, params[])
{
	static
	    string[512];

	string[0] = '\0';

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsLoadableVehicle(i) && IsPlayerNearBoot(playerid, i))
	{
	    if (GetVehicleCrates(i) < 1)
	        return SendErrorMessage(playerid, "Tidak ada crates di kendaraan ini.");

		for (new j = 0; j != MAX_CRATES; j ++) if (CrateData[j][crateExists] && CrateData[j][crateVehicle] == i) {
			format(string, sizeof(string), "%sCrate #%d: %s Parts\n", string, j, Crate_GetType(CrateData[j][crateType]));
		}
		PlayerData[playerid][pCrateVehicle] = i;
		return Dialog_Show(playerid, Crates, DIALOG_STYLE_LIST, "Crates Kendaraan", string, "Ambil", "Batal");
	}
	SendErrorMessage(playerid, "Kamu tidak berada dalam jangkauan kendaraan yang dapat dimuat.");
	return 1;
}

CMD:craftparts(playerid, params[])
{
	new id = -1;

	if (PlayerData[playerid][pJob] != JOB_WEAPON_SMUGGLER)
	    return SendErrorMessage(playerid, "Kamu tidak bekerja sebagai Weapon Smuggler.");

    if ((id = Job_NearestPoint(playerid)) == -1 || JobData[id][jobType] != JOB_WEAPON_SMUGGLER)
		return SendErrorMessage(playerid, "Kamu tidak berada dalam jangkauan pabrik kerajinan.");

	if (PlayerData[playerid][pCarryCrate] == -1)
	    return SendErrorMessage(playerid, "Kamu tidak membawa peti apapun.");

	if (PlayerData[playerid][pCrafting])
	    return SendErrorMessage(playerid, "Kamu sudah membuat bagian senjata.");

	if (CrateData[PlayerData[playerid][pCarryCrate]][crateType] < 1 || CrateData[PlayerData[playerid][pCarryCrate]][crateType] > 5)
	    return SendErrorMessage(playerid, "Tidak ada Weapon parts di crate ini.");

    PlayerData[playerid][pCrafting] = 1;

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memulai merakit %s Parts.", ReturnName(playerid, 0), Crate_GetType(CrateData[PlayerData[playerid][pCarryCrate]][crateType]));
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Merakit parts...", 11000, 3);

	TogglePlayerControllable(playerid, 0);
	SetTimerEx("CraftParts", 8000, false, "dd", playerid, PlayerData[playerid][pCarryCrate]);
	return 1;
}



CMD:opencrate(playerid, params[])
{
	new id = Crate_Nearest(playerid);

	if (id == -1 || CrateData[id][crateType] != 6)
	    return SendErrorMessage(playerid, "Kamu tidak berada dalam jangkauan crates obat apapun.");

	if (!Inventory_HasItem(playerid, "Crowbar"))
		return SendErrorMessage(playerid, "Kamu butuh crowbar untuk membuka peti ini.");

	if (PlayerData[playerid][pOpeningCrate])
	    return SendErrorMessage(playerid, "Kamu sedang membuka sebuah crate.");

	PlayerData[playerid][pOpeningCrate] = 1;

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan crowbar dan mencoba membuka drugs crate.", ReturnName(playerid, 0));
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Membuka crate...", 3000, 3);

 	TogglePlayerControllable(playerid, 0);
  	ApplyAnimation(playerid, "BASEBALL", "Bat_4", 4.0, 1, 1, 1, 1, 0, 1);

	SetTimerEx("OpenCrate", 3000, false, "dd", playerid, id);
    return 1;
}

CMD:plant(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/plant [weed/cocaine/heroin]");

	if (Plant_Nearest(playerid) != -1)
	    return SendErrorMessage(playerid, "Kamu tidak bisa menanam benih di dekat tanaman lain.");

	if (!strcmp(params, "weed", true))
	{
	    if (Inventory_Count(playerid, "Marijuana Seeds") < 10)
	        return SendErrorMessage(playerid, "Kamu membutuhkan setidaknya 10 Marijuana Seeds.");

		Inventory_Remove(playerid, "Marijuana Seeds", 10);

		Plant_Create(playerid, 1);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menanam beberapa Marijuana Seeds ke tanah.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "cocaine", true))
	{
	    if (Inventory_Count(playerid, "Cocaine Seeds") < 10)
	        return SendErrorMessage(playerid, "Kamu setidaknya butuh 10 cocaine seeds.");

		Inventory_Remove(playerid, "Cocaine Seeds", 10);

		Plant_Create(playerid, 2);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menanam beberapa cocaine seeds ke tanah.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "heroin", true))
	{
	    if (Inventory_Count(playerid, "Heroin Opium Seeds") < 10)
	        return SendErrorMessage(playerid, "Kamu setidaknya butuh 10 heroin opium seeds.");

		Inventory_Remove(playerid, "Heroin Opium Seeds", 10);

		Plant_Create(playerid, 3);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s plants some heroin opium seeds ke tanah.", ReturnName(playerid, 0));
	}
	else {
	    SendSyntaxMessage(playerid, "/plant [weed/cocaine/heroin]");
	}
	return 1;
}

CMD:harvest(playerid, params[])
{
	new id = Plant_Nearest(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Kamu harus berada didekat tanaman.");

	if (PlantData[id][plantDrugs] < Plant_MaxGrams(PlantData[id][plantType]))
	    return SendErrorMessage(playerid, "Tanaman ini belum tumbuh.");

	if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	    return SendErrorMessage(playerid, "Kamu harus jongkok untuk memanen tanaman ini.");

	if (PlayerData[playerid][pHarvesting])
	    return SendErrorMessage(playerid, "Kamu sedang memanen tanaman ini.");

	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Memanen...", 3100, 3);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memulai memanen tanaman obat.", ReturnName(playerid, 0));

	PlayerData[playerid][pHarvesting] = 1;
	SetTimerEx("HarvestPlant", 3000, false, "dd", playerid, id);
	return 1;
}
CMD:blackmarket(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_GANG)
	    return SendErrorMessage(playerid, "Kamu bukan anggota sebuah faction illegal.");

	if(PlayerData[playerid][pChannel] >= 4)
	{
		if(IsPlayerInRangeOfPoint(playerid, 7.0, 1365.3800, 315.1700, 19.3500)) // Robbery Place, up the hill near Montgomery, the cabin.
		{
			ShowPlayerDialog(playerid, 12250, DIALOG_STYLE_LIST, "Black Market", "Magazine ($3000)\nAmmo Cartridge($4000)\nKevlar Vest ($3000)\nHeavy Kevlar Vest ($5000)\nBomb ($7000)", "Buat", "Batal");
		}
		else return SendErrorMessage(playerid, "Kamu harus berada didekat Black Market.");
	}
	else return SendErrorMessage(playerid, "Kamu setidaknya harus level 4 dulu.");
	return 1;
}

CMD:createfaction(playerid, params[])
{
	static
	    id = -1,
		type,
		name[32];

    if (PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pFactionMod])
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ds[32]", type, name))
	{
	    SendSyntaxMessage(playerid, "/createfaction [type] [name]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Police | 2: News | 3: Medical | 4: Government | 5: Gang | 6: Company");
		return 1;
	}
	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid. Types range from 1 to 6.");

	id = Faction_Create(name, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "Limit faction habis.");

	SendServerMessage(playerid, "Kamu membuat faction ID: %d.", id);
	SendFactionAlert(COLOR_RED, "[ADMIN]: %s membuat faction ID: %d.", ReturnName(playerid, 0), id);
	return 1;
}

CMD:destroyfaction(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pFactionMod])
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyfaction [faction id]");

	if ((id < 0 || id >= MAX_FACTIONS) || !FactionData[id][factionExists])
	    return SendErrorMessage(playerid, "ID Faction tidak valid.");

	Faction_Delete(id);
	SendServerMessage(playerid, "Kamu berhasil menghancurkan faction ID: %d.", id);
	SendFactionAlert(COLOR_RED, "[ADMIN]: %s menghapus faction ID: %d.", ReturnName(playerid, 0), id);
	return 1;
}

CMD:open(playerid, params[])
{
	new id = Gate_Nearest(playerid);

	if (id != -1)
	{
		if (strlen(GateData[id][gatePass]))
		{
		    Dialog_Show(playerid, GatePass, DIALOG_STYLE_INPUT, "Masukan Password", "Harap masukan password gerbang ini:", "Submit", "Batal");
		}
		else
		{
		    if (GateData[id][gateFaction] != -1 && PlayerData[playerid][pFaction] != GetFactionByID(GateData[id][gateFaction]))
				return SendErrorMessage(playerid, "Kamu tidak bisa membuka gerbang ini.");

			Gate_Operate(id);

			switch (GateData[id][gateOpened])
			{
			    case 0:
				    ShowPlayerFooter(playerid, "Kamu ~r~menutup~w~ gerbang!");

                case 1:
				    ShowPlayerFooter(playerid, "Kamu ~g~membuka~w~ gerbang!");
			}
		}
	}
	else if (IsPlayerNearDynamicObject(playerid, PrisonData[prisonDoors][0]))
	{
	    if (GetFactionType(playerid) != FACTION_POLICE)
	        return SendErrorMessage(playerid, "Kamu harus menjadi seorang petugas polisi untuk membuka pintu ini.");

	    if (!PrisonData[prisonDoorOpened][0])
		{
			SetDynamicObjectRot(PrisonData[prisonDoors][0], 0.0, 0.0, -90.0);

			PrisonData[prisonDoorOpened][0] = true;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memegang kuncinya dan membuka pintu penjara.", ReturnName(playerid, 0));
		}
		else
		{
		    SetDynamicObjectRot(PrisonData[prisonDoors][0], 0.0, 0.0, 0.0);

			PrisonData[prisonDoorOpened][0] = false;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memegang kuncinya dan menutup pintu penjara.", ReturnName(playerid, 0));
		}
	}
	else if (IsPlayerNearDynamicObject(playerid, PrisonData[prisonDoors][1]))
	{
	    if (GetFactionType(playerid) != FACTION_POLICE)
	        return SendErrorMessage(playerid, "Kamu harus menjadi seorang petugas polisi membuka pintu ini.");

	    if (!PrisonData[prisonDoorOpened][1])
		{
			SetDynamicObjectRot(PrisonData[prisonDoors][1], 0.0, 0.0, 0.0);

			PrisonData[prisonDoorOpened][1] = true;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memegang kuncinya dan membuka pintu penjara.", ReturnName(playerid, 0));
		}
		else
		{
		    SetDynamicObjectRot(PrisonData[prisonDoors][1], 0.0, 0.0, 90.0);

			PrisonData[prisonDoorOpened][1] = false;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memegang kuncinya dan menutup pintu penjara.", ReturnName(playerid, 0));
		}
	}
	else if (IsPlayerNearDynamicObject(playerid, PrisonData[prisonDoors][2]))
	{
	    if (GetFactionType(playerid) != FACTION_POLICE)
	        return SendErrorMessage(playerid, "Kamu harus menjadi seorang petugas polisi membuka pintu ini.");

	    if (!PrisonData[prisonDoorOpened][2])
		{
			SetDynamicObjectRot(PrisonData[prisonDoors][2], 0.0, 0.0, -90.0);

			PrisonData[prisonDoorOpened][2] = true;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memegang kuncinya dan membuka pintu penjara.", ReturnName(playerid, 0));
		}
		else
		{
		    SetDynamicObjectRot(PrisonData[prisonDoors][2], 0.0, 0.0, 0.0);

			PrisonData[prisonDoorOpened][2] = false;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memegang kuncinya dan menutup pintu penjara.", ReturnName(playerid, 0));
		}
	}
	for (new i = 0; i < 24; i ++) if (IsPlayerNearDynamicObject(playerid, PrisonData[prisonCells][i], 3.0))
	{
	    if (GetFactionType(playerid) != FACTION_POLICE)
	        return SendErrorMessage(playerid, "Kamu harus menjadi seorang petugas polisi membuka sel tahanan ini.");

		if (!PrisonData[prisonCellOpened][i])
		{
			MoveDynamicObject(PrisonData[prisonCells][i], PrisonCells[i][0], PrisonCells[i][1] + 1.6, PrisonCells[i][2], 3.0);

		    PrisonData[prisonCellOpened][i] = true;
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memegang kuncinya dan membuka sel penjara.", ReturnName(playerid, 0));
		}
		else
		{
		    MoveDynamicObject(PrisonData[prisonCells][i], PrisonCells[i][0], PrisonCells[i][1], PrisonCells[i][2], 3.0);

		    PrisonData[prisonCellOpened][i] = false;
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memegang kuncinya dan menutup sel penjara.", ReturnName(playerid, 0));
		}
		break;
	}
	return 1;
}

CMD:drop(playerid, params[])
{
	new weaponid = 0;

    if (IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawned(playerid))
    	return SendErrorMessage(playerid, "Kamu tidak bisa menjatuhkan senjata apapun saat ini.");

	if ((weaponid = GetWeapon(playerid)) == 0)
	    return SendErrorMessage(playerid, "Kamu tidak bisa menjatuhkan senjata kecuali jika Kamu memegangnya.");

	if (weaponid == 23 && PlayerData[playerid][pTazer])
	    return SendErrorMessage(playerid, "Kamu tidak bisa menjatuhkan sebuah tazer.");

    if (weaponid == 25 && PlayerData[playerid][pBeanBag])
	    return SendErrorMessage(playerid, "Kamu tidak bisa menjatuhkan beanbag shotgun.");

	static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	x += 1.5 * floatsin(-angle, degrees);
	y += 1.5 * floatcos(-angle, degrees);

    DropItem(ReturnWeaponName(weaponid), ReturnName(playerid, 0), GetWeaponModel(weaponid), 1, x, y, z - 1, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), weaponid, GetPlayerAmmo(playerid));
	ResetWeapon(playerid, weaponid);

    ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.1, 0, 0, 0, 0, 0, 1);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memegang sebuah %s dan menjatuhkannya ke lantai.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));
 	Log_Write("logs/droppick.txt", "[%s] %s has dropped a %s.", ReturnDate(), ReturnName(playerid, 0), ReturnWeaponName(weaponid));
	return 1;
}

CMD:flist(playerid, params[])
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionExists]) {
	    SendClientMessageEx(playerid, COLOR_WHITE, "[ID: %d] {%06x}%s", i, FactionData[i][factionColor] >>> 8, FactionData[i][factionName]);
	}
	return 1;
}

CMD:editfaction(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pFactionMod])
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editfaction [id] [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} name, color, type, models, locker, ranks, maxranks, divisions, maxdivs.");
		return 1;
	}
	if ((id < 0 || id >= MAX_FACTIONS) || !FactionData[id][factionExists])
	    return SendErrorMessage(playerid, "You have specified an invalid faction ID.");

    if (!strcmp(type, "name", true))
	{
	    new name[32];

	    if (sscanf(string, "s[32]", name))
	        return SendSyntaxMessage(playerid, "/editfaction [id] [name] [new name]");

	    format(FactionData[id][factionName], 32, name);

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the name of faction ID: %d to \"%s\".", ReturnName(playerid, 0), id, name);
	}
	else if (!strcmp(type, "maxranks", true))
	{
	    new ranks;

	    if (sscanf(string, "d", ranks))
	        return SendSyntaxMessage(playerid, "/editfaction [id] [maxranks] [maximum ranks]");

		if (ranks < 1 || ranks > 15)
		    return SendErrorMessage(playerid, "The specified ranks can't be below 1 or above 15.");

	    FactionData[id][factionRanks] = ranks;

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the maximum ranks of faction ID: %d to %d.", ReturnName(playerid, 0), id, ranks);
	}
	else if (!strcmp(type, "maxdivs", true))
	{
	    new divisions;

	    if (sscanf(string, "d", divisions))
	        return SendSyntaxMessage(playerid, "/editfaction [id] [maxdivisions]");

		if (divisions < 1 || divisions > 5)
		    return SendErrorMessage(playerid, "The specified divisions can't be below 1 or above 5.");

	    FactionData[id][factionDivisions] = divisions;

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the maximum divisions of faction ID: %d to %d.", ReturnName(playerid, 0), id, divisions);
	}
	else if (!strcmp(type, "ranks", true))
	{
	    Faction_ShowRanks(playerid, id);
	}
	else if (!strcmp(type, "divisions", true))
	{
	    Faction_ShowDivisions(playerid, id);
	}
	else if (!strcmp(type, "color", true))
	{
	    new color;

	    if (sscanf(string, "h", color))
	        return SendSyntaxMessage(playerid, "/editfaction [id] [color] [hex color]");

	    FactionData[id][factionColor] = color;
	    Faction_Update(id);

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the {%06x}color{FF6347} of faction ID: %d.", ReturnName(playerid, 0), color >>> 8, id);
	}
	else if (!strcmp(type, "type", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
     	{
		 	SendSyntaxMessage(playerid, "/editfaction [id] [type] [faction type]");
            SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Police | 2: News | 3: Medical | 4: Government | 5: Gang | 6: Company");
            return 1;
		}
		if (typeint < 1 || typeint > 6)
		    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid. Types range from 1 to 6.");

	    FactionData[id][factionType] = typeint;

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the type of faction ID: %d to %d.", ReturnName(playerid, 0), id, typeint);
	}
	else if (!strcmp(type, "models", true))
	{
	    static
	        skins[8];

		for (new i = 0; i < sizeof(skins); i ++)
		    skins[i] = (FactionData[id][factionSkins][i]) ? (FactionData[id][factionSkins][i]) : (19300);

	    PlayerData[playerid][pFactionEdit] = id;
		ShowModelSelectionMenu(playerid, "Faction Skins", MODEL_SELECTION_SKINS, skins, sizeof(skins), -16.0, 0.0, -55.0);
	}
	else if (!strcmp(type, "locker", true))
	{
        PlayerData[playerid][pFactionEdit] = id;
		Dialog_Show(playerid, FactionLocker, DIALOG_STYLE_LIST, "Faction Locker", "Set Location\nLocker Weapons", "Select", "Cancel");
	}
	return 1;
}

CMD:manageranks(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "Kamu haruslah menjadi seorang member faction");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks])
		return SendErrorMessage(playerid, "Kamu setidaknya harus memiliki rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks]);

	Faction_ShowRanks(playerid, factionid);
	return 1;
}

CMD:managedivs(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "Kamu haruslah menjadi seorang member faction.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks])
		return SendErrorMessage(playerid, "Kamu setidaknya harus memiliki rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks]);

	Faction_ShowDivisions(playerid, factionid);
	return 1;
}

CMD:color(playerid, params[])
{
	static
	    color;

	if (sscanf(params, "h", color)) {
	 	SendSyntaxMessage(playerid, "/color [hex color]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[EXAMPLE]:{FFFFFF} 0xFFFFFFFF adalah putih, 0xFF0000FF adalah merah, etc.");
	}
	else {
	    SendClientMessageEx(playerid, color, "Ini adalah pesan tes, mengecek warna 0x%06xFF.", color >>> 8);
	}
	return 1;
}

CMD:joblist(playerid, params[])
{
	Dialog_Show(playerid, JobList, DIALOG_STYLE_LIST, "List Pekerjaan", "Courier\nMechanic\nTaxi Driver\nCargo Unloader\nMiner\nFood Vendor\nGarbage Man\nPackage Sorter\nWeapon Smuggler", "Pilih", "Batal");
	return 1;
}
CMD:resf(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	Dialog_Show(playerid, RestrictedFrequencies, DIALOG_STYLE_LIST, "Frekuensi yang Dibatasi", "Police Department\nFire Department\nSan Andreas Government", "Pilih", "Batal");
	return 1;
}

CMD:equipment(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Kamu harus menjadi seorang petugas polisi.");


    if (!IsNearFactionLocker(playerid) && !IsACruiser(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Kamu tidak berada di loker faction mu.");

	Dialog_Show(playerid, ACC_POLICE,  DIALOG_STYLE_LIST, "Equipment", "Kevlar Vest\nPolice Helmet\nPolice Shield\nPolice Taser\nGrey SWAT Vest\nGrey SWAT Helmet", "Pilih", "Batal");
	return 1;
}

CMD:locker(playerid, params[])
{
	new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang member faction.");

	if (!IsNearFactionLocker(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak berada di loker faction mu.");

 	if (FactionData[factionid][factionType] != FACTION_GANG)
		Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Faction Locker", "Toggle Duty\nArmour and Health\nLocker Skins\nLocker Weapons", "Pilih", "Batal");

	else Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Faction Locker", "Locker Skins\nLocker Weapons", "Pilih", "Batal");
	return 1;
}

CMD:buyfstyle(playerid, params[])
{
	Dialog_Show(playerid, FightingStyles, DIALOG_STYLE_LIST, "Fighting Styles", "\nNormal - FREE\nBoxing - 1000$\nKung Fu - 1000$\nKneehead - 1000$\nGrab kick - 1000$\nElbow - 1000$", "Pilih", "Batal");
	return 1;
}

CMD:buylicense(playerid, params[])
{
    if (!IsPlayerInRangeOfPoint(playerid, 3.0, 359.7919, 177.8100, 1008.3828))
	    return SendErrorMessage(playerid, "Kamu harus berada di City hall untuk melakukan transaksi.");

	Dialog_Show(playerid, LicensesPurchase, DIALOG_STYLE_LIST, "Beli Lisensi", "\nCar License - 100$\nTruck License - 200$\nMotorbike License - 150$\nAirplane License - 1000$\nHelicopter License - 1000$", "Pilih", "Batal");
	return 1;
}

CMD:factrunk(playerid, params[])
{
	new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang member faction.");

	if (!IsACruiser(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Kamu tidak berada di bagasi mobil manapun.");

 	if (FactionData[factionid][factionType] != FACTION_GANG)
		Dialog_Show(playerid, TrunkLocker, DIALOG_STYLE_LIST, "Bagasi Mobil", "Armour and Health\nTrunk Weapons", "Pilih", "Batal");

	else SendErrorMessage(playerid, "Kamu tidak boleh menggunakan command ini. Faction penjahat saja yang bisa.");
	return 1;
}

CMD:undercover(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
		return SendErrorMessage(playerid, "Kamu tidak diizinkan menggunakan command ini.");

	PlayerData[playerid][pClothesType] = 1;

	switch (PlayerData[playerid][pGender])
 	{
  		case 1:
    		ShowModelSelectionMenu(playerid, "Undercover", MODEL_SELECTION_UNDERCOVER, g_aMaleSkins, sizeof(g_aMaleSkins), -16.0, 0.0, -55.0);
		case 2:
  			ShowModelSelectionMenu(playerid, "Undercover", MODEL_SELECTION_UNDERCOVER, g_aFemaleSkins, sizeof(g_aFemaleSkins), -16.0, 0.0, -55.0);
    }
    return 1;
}

CMD:offdutyclothes(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_NEWS && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_COMPANY)
	    return SendErrorMessage(playerid, "Kamu bukan seorang pegawai negeri sipil.");

	if (!IsNearFactionLocker(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak berada di loker.");

	PlayerData[playerid][pClothesType] = 1;

	switch (PlayerData[playerid][pGender])
 	{
  		case 1:
    		ShowModelSelectionMenu(playerid, "Pakaian Off Duty", MODEL_SELECTION_OFFDUTYCLOTHES, g_aMaleSkins, sizeof(g_aMaleSkins), -16.0, 0.0, -55.0);

		case 2:
  			ShowModelSelectionMenu(playerid, "Pakaian Off Duty ", MODEL_SELECTION_OFFDUTYCLOTHES, g_aFemaleSkins, sizeof(g_aFemaleSkins), -16.0, 0.0, -55.0);
    }
    return 1;
}

CMD:setleader(playerid, params[])
{
	static
		userid,
		id;

    if (PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pFactionMod])
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ud", userid, id))
	    return SendSyntaxMessage(playerid, "/setleader [playerid/nama] [faction id] (Use -1 untuk mengunset)");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

    if ((id < -1 || id >= MAX_FACTIONS) || (id != -1 && !FactionData[id][factionExists]))
	    return SendErrorMessage(playerid, "faction ID tidak valid.");

	if (id == -1)
	{
	    ResetFaction(userid);

	    SendServerMessage(playerid, "Menghapus %s dari jabatan pemimpin faction.", ReturnName(userid, 0));
    	SendServerMessage(userid, "%s telah menghapus jabatanmu sebagai leader faction.", ReturnName(playerid, 0));
	}
	else
	{
		SetFaction(userid, id);
		PlayerData[userid][pFactionRank] = FactionData[id][factionRanks];
		PlayerData[userid][pFactionDivision] = 1;

		SendServerMessage(playerid, "Kamu memberi jabatan kepada %s sebagai pemimpin \"%s\".", ReturnName(userid, 0), FactionData[id][factionName]);
    	SendServerMessage(userid, "%s memberimu jabatan sebagai pemimpin \"%s\".", ReturnName(playerid, 0), FactionData[id][factionName]);
	}
    return 1;
}

CMD:asetfaction(playerid, params[])
{
	static
		userid,
		id;

    if (PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pFactionMod])
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ud", userid, id))
	    return SendSyntaxMessage(playerid, "/asetfaction [playerid/nama] [faction id] (Gunakan -1 untuk unset)");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

    if ((id < -1 || id >= MAX_FACTIONS) || (id != -1 && !FactionData[id][factionExists]))
	    return SendErrorMessage(playerid, "faction ID tidak valid.");

	if (id == -1)
	{
	    ResetFaction(userid);

	    SendServerMessage(playerid, "You have removed %s from their faction.", ReturnName(userid, 0));
    	SendServerMessage(userid, "%s has removed you from your faction.", ReturnName(playerid, 0));
	}
	else
	{
		SetFaction(userid, id);

		if (!PlayerData[userid][pFactionRank])
	    	PlayerData[userid][pFactionRank] = 1;

		SendServerMessage(playerid, "You have set %s's faction to \"%s\".", ReturnName(userid, 0), FactionData[id][factionName]);
    	SendServerMessage(userid, "%s has set your faction to \"%s\".", ReturnName(playerid, 0), FactionData[id][factionName]);
	}
    return 1;
}

CMD:asetrank(playerid, params[])
{
	static
		userid,
		rank,
		factionid;

    if (PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pFactionMod])
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ud", userid, rank))
	    return SendSyntaxMessage(playerid, "/asetrank [playerid/name] [rank id]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if ((factionid = PlayerData[userid][pFaction]) == -1)
	    return SendErrorMessage(playerid, "That player is not a member of any faction.");

    if (rank < 1 || rank > FactionData[factionid][factionRanks])
        return SendErrorMessage(playerid, "Invalid rank. Ranks for this faction range from 1 to %d.", FactionData[factionid][factionRanks]);

	PlayerData[userid][pFactionRank] = rank;

	SendServerMessage(playerid, "You have set %s's faction rank to %d.", ReturnName(userid, 0), rank);
    SendServerMessage(userid, "%s has set your faction rank to %d.", ReturnName(playerid, 0), rank);

    return 1;
}

CMD:asetdiv(playerid, params[])
{
	static
		userid,
		division,
		factionid;

    if (PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pFactionMod])
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ud", userid, division))
	    return SendSyntaxMessage(playerid, "/asetdiv [playerid/name] [division id]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if ((factionid = PlayerData[userid][pFaction]) == -1)
	    return SendErrorMessage(playerid, "That player is not a member of any faction.");

    if (division < 1 || division > FactionData[factionid][factionDivisions])
        return SendErrorMessage(playerid, "Invalid division. division for this faction range from 1 to %d.", FactionData[factionid][factionDivisions]);

	PlayerData[userid][pFactionDivision] = division;

	SendServerMessage(playerid, "You have set %s's faction division to %d.", ReturnName(userid, 0), division);
    SendServerMessage(userid, "%s has set your faction division to %d.", ReturnName(playerid, 0), division);

    return 1;
}

CMD:listonline(playerid, params[])
{
	new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang anggota faction.");

	SendClientMessage(playerid, COLOR_FACTIONCHAT, "Anggota yang online saat ini:");

	foreach (new i : Player) if (PlayerData[i][pFaction] == factionid) {
		SendClientMessageEx(playerid, COLOR_WHITE, "[ID: %d] [ Nama: {6999FF} %s {FFFFFF}] [ Rank: {6999FF} %s (%d){FFFFFF} ]  [ Division: {6999FF} %s{FFFFFF} ]", i, ReturnName(i, 0), Faction_GetRank(i), PlayerData[i][pFactionRank], Faction_GetDivision(i));
	}
	return 1;
}

CMD:fac(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang anggota faction.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(f)ac [pesan]");

    if (PlayerData[playerid][pDisableFaction])
	    return SendErrorMessage(playerid, "Kamu harus menghidupkan faction chat terlebih dahulu.");

	SendFactionMessage(factionid, COLOR_FACTIONCHAT, "[Faction OOC] [%s] %s %s:{FFFFFF} %s", Faction_GetDivision(playerid), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	Log_Write("logs/faction_chat.txt", "[%s] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	return 1;
}

CMD:fann(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang anggota faction.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	    return SendErrorMessage(playerid, "Kamu setidaknya harus memiliki rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/fann [pesan]");

    if (PlayerData[playerid][pDisableFaction])
	    return SendErrorMessage(playerid, "Kamu harus menghidupkan faction chat terlebih dahulu.");

	SendFactionMessage(factionid, COLOR_FACTIONCHAT, "Pengumuman dari %s %s: %s", Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	Log_Write("logs/faction_ann.txt", "[%s] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	return 1;
}

CMD:fadvert(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang anggota faction.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	    return SendErrorMessage(playerid, "Kamu harus memiliki setidaknya rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/fadvert [Iklan Faction]");

	GiveMoney(playerid, -100);
	SendClientMessageToAllEx(COLOR_FADVERT, "[Iklan Faction] [%s]: %s", GetInitials(Faction_GetName(playerid)), params);
	Log_Write("logs/faction_adverts.txt", "[%s] [%s] [%s] [%s]: %s ", ReturnDate(), Faction_GetName(playerid), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	return 1;
}

CMD:pagermsg(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang member faction.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	    return SendErrorMessage(playerid, "You must be at least rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/pagermsg [pesan]");

	SendPagerMessage(factionid, COLOR_ORANGE, "[PAGER MESSAGE] %s %s: %s", Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	Log_Write("logs/fac_pager.txt", "[%s] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	return 1;
}

CMD:fquit(playerid, params[])
{
	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang member faction.");

	if (GetFactionType(playerid) == FACTION_POLICE)
	{
	    SetPlayerArmour(playerid, 0);
	    ResetWeapons(playerid);
	}
	SendServerMessage(playerid, "Kamu berhasil keluar dari faction \"%s\" (rank %d).", Faction_GetName(playerid), PlayerData[playerid][pFactionRank]);
    ResetFaction(playerid);

    return 1;
}
CMD:invite(playerid, params[])
{
	new
	    userid;

	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang member faction.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	    return SendErrorMessage(playerid, "Kamu harus memiliki rank setidaknya %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/invite [playerid/nama]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak konek.");

	if (PlayerData[userid][pFaction] == PlayerData[playerid][pFaction])
	    return SendErrorMessage(playerid, "Player bukan bagian dari factionmu.");

    if (PlayerData[userid][pFaction] != -1)
	    return SendErrorMessage(playerid, "Player sudah memiliki faction lain.");

	PlayerData[userid][pFactionOffer] = playerid;
    PlayerData[userid][pFactionOffered] = PlayerData[playerid][pFaction];

    SendServerMessage(playerid, "Kamu meminta %s untuk bergabung dengan \"%s\".", ReturnName(userid, 0), Faction_GetName(playerid));
    SendServerMessage(userid, "%s telah menawarkanmu untuk bergabung dengan \"%s\" (ketik \"/approve faction\").", ReturnName(playerid, 0), Faction_GetName(playerid));

	return 1;
}

CMD:pray(playerid, params[])
{
	
		if (IsPlayerInRangeOfPoint(playerid, 10.0, 375.3200, 2322.7200, 1888.7400))
		{
		new Float:armorku;
	 	GetPlayerArmour(playerid, armorku);
		if (armorku == 0)
		{
		    PlayerPlaySound(playerid,1085,0.0,0.0,0.0);
		    ApplyAnimation(playerid, "ped","SEAT_idle", 4.1, 0, 0, 0, 1, 0, 1);
		    SendClientMessage(playerid, COLOR_DONATOR, "Tunggu 20 detik untuk bedoa dengan khidmat.");
		    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Kamu sedang berdoa...", 20000, 3);
		    SetTimer("Prayer", 20000, false);
	    }
	    else
	    {
            SendClientMessage(playerid, COLOR_DONATOR, "Kamu saat ini baik baik saja, tetap jalankan perintah tuhan !");
		}
  	}
	else
		{
            SendErrorMessage(playerid, "Kamu tidak berada didalam gereja");
		}
	return 1;
}

CMD:offerloan(playerid, params[])
{
	static
	    userid,
	    amount,
	    reason[64];

	if (GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "Kamu bukan seorang pemerintah.");

	if (!Inventory_HasItem(playerid, "Sale Documents"))
		return SendErrorMessage(playerid, "Kamu butuh Sale Documents untuk menulis sesuatu, dapatkan di Post Office.");

    if (!Inventory_HasItem(playerid, "Pen"))
    	return SendErrorMessage(playerid, "Kamu memerlukan pen untuk menuliskan informasi pinjaman. Beli satu dari sebuah Post Office.");

 	if (sscanf(params, "uds[64]", userid, amount, reason))
		return SendSyntaxMessage(playerid, "/offerloan [playerid/nama] [nilai] [alasan]");

    if (amount < 500 || amount > 500000)
	    return SendErrorMessage(playerid, "Nilainya tidak bisa di bawah $500 atau di atas $500.000.");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak konek.");

	PlayerData[userid][pLoanOffer] = playerid;
    PlayerData[userid][pLoanOffered] = PlayerData[playerid][pLoan];

    SendServerMessage(playerid, "Kamu menawarkan pinjaman kepada %s. Jumlah: [%s]. Alasan: [%s]", ReturnName(userid, 0), FormatNumber(amount), reason);
    SendServerMessage(userid, "%s telah menawarkanmu sebuah pinjaman. (/approve loan). Jumlah: [%s]. Alasan: [%s]", ReturnName(playerid, 0), FormatNumber(amount), reason);

    Log_Write("logs/offer_loans.txt", "[%s] %s has offered a loan contract to %s. Amount: [%s]. Reason: [%s] ", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), FormatNumber(amount), reason);
	return 1;
}

CMD:uninvite(playerid, params[])
{
    new
	    userid;

	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang member faction.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	    return SendErrorMessage(playerid, "Kamu harus memiliki rank setidaknya %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);


	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/uninvite [playerid/name]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak konek.");

	if (PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
	    return SendErrorMessage(playerid, "Player bukan bagian dari factionmu.");

    SendServerMessage(playerid, "Kamu mengeluarkan %s dari \"%s\".", ReturnName(userid, 0), Faction_GetName(playerid));
    SendServerMessage(userid, "%s telah mengeluarkanmu dari faction \"%s\".", ReturnName(playerid, 0), Faction_GetName(playerid));

    ResetFaction(userid);

	return 1;
}

CMD:frank(playerid, params[])
{
    new
	    userid,
		rankid;

	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang member faction.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	    return SendErrorMessage(playerid, "Kamu harus memiliki rank setidaknya %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);


	if (sscanf(params, "ud", userid, rankid))
	    return SendSyntaxMessage(playerid, "/frank [playerid/name] [rank (1-%d)]", FactionData[PlayerData[playerid][pFaction]][factionRanks]);

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak konek.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Kamu tidak bisa mengubah rankmu sendiri.");

	if (PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
	    return SendErrorMessage(playerid, "Player bukan bagian dari factionmu.");

	if (rankid < 0 || rankid > FactionData[PlayerData[playerid][pFaction]][factionRanks])
	    return SendErrorMessage(playerid, "Rank tidak valid. Ranks berkisar antar 1 hingga %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks]);

	PlayerData[userid][pFactionRank] = rankid;

    SendServerMessage(playerid, "You have promoted %s to %s (%d).", ReturnName(userid, 0), Faction_GetRank(userid), rankid);
    SendServerMessage(userid, "%s has promoted you to %s (%d).", ReturnName(playerid, 0), Faction_GetRank(userid), rankid);

	return 1;
}

CMD:fdiv(playerid, params[])
{
    new
	    userid,
		divisionid;

	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang member faction.");

if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
	    return SendErrorMessage(playerid, "Kamu harus memiliki rank setidaknya %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2);


	if (sscanf(params, "ud", userid, divisionid))
	    return SendSyntaxMessage(playerid, "/fdiv [playerid/nama] [division (1-%d)]", FactionData[PlayerData[playerid][pFaction]][factionDivisions]);

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak konek.");

	if (PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
	    return SendErrorMessage(playerid, "Player bukan bagian dari factionmu.");

	if (divisionid < 0 || divisionid > FactionData[PlayerData[playerid][pFaction]][factionDivisions])
	    return SendErrorMessage(playerid, "Division tidak valid. Divisi hanya berkisar antara 1 hingga %d.", FactionData[PlayerData[playerid][pFaction]][factionDivisions]);

	PlayerData[userid][pFactionDivision] = divisionid;

    SendServerMessage(playerid, "Kamu mengubah divisi %s menjadi %s (%d).", ReturnName(userid, 0), Faction_GetDivision(userid), divisionid);
    SendServerMessage(userid, "%s telah mengubah divisimu menjadi %s (%d).", ReturnName(playerid, 0), Faction_GetDivision(userid), divisionid);

	return 1;
}

CMD:changefname(playerid, params[])
{
	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang anggota faction.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks])
	    return SendErrorMessage(playerid, "Kamu harus memiliki rank setidaknya %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks]);


	ShowPlayerDialog(playerid, 12212, DIALOG_STYLE_INPUT, "Ganti Nama Faction", "Harap masukan nama baru dari factionmu ke kotak dibawah ini.", "OK", "Batal");
	return 1;
}


CMD:spawnpoint(playerid, params[])
{
	new point;
	if(sscanf(params, "i", point)) return SendErrorMessage(playerid, "/spawnpoint [0-2] (0 = Airport, 1 = Faction, 2 = Last logged)");
	if(point == 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Kamu mengubah spawn point milikmu ke Airport.");
		PlayerData[playerid][pSpawnPoint] = 0;
		return 1;
	}
	if(point == 1)
	{
	    if(PlayerData[playerid][pFactionID] == -1)
	    {
	        SendErrorMessage(playerid, "Kamu bukan anggota faction.");
	        return 1;
		}
		SendClientMessage(playerid, COLOR_WHITE, "Kamu mengubah spawn point milikmu ke faction spawn.");
		PlayerData[playerid][pSpawnPoint] = 1;
		return 1;
	}
	if(point == 2)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Kamu mengubah spawn point milikmu ke tempat terakhir kamu.");
		PlayerData[playerid][pSpawnPoint] = 2;
		return 1;
	}
	return 1;
}

CMD:fspawn(playerid, params[])
{
	new faction = PlayerData[playerid][pFactionID];

	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang leader faction.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
	    return SendErrorMessage(playerid, "Kamu harus memiliki rank setidaknya %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2);

	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	FactionData[faction][SpawnX] = X;
	FactionData[faction][SpawnY] = Y;
	FactionData[faction][SpawnZ] = Z;
	FactionData[faction][SpawnInterior] = GetPlayerInterior(playerid);
	FactionData[faction][SpawnVW] = GetPlayerVirtualWorld(playerid);
	Faction_Save(faction);
	SendClientMessage(playerid, COLOR_ORANGE, "Kamu mengubah faction's spawn point. Member Faction akan di spawn di daerah ini.");
	return 1;
}

CMD:taser(playerid, params[])
{
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan command ini sekarang.");

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_COMPANY && GetFactionType(playerid) != FACTION_GOV)
		return SendErrorMessage(playerid, "Kamu tidak berhak menggunakan command ini.");

	if (!PlayerData[playerid][pTazer])
	{
	    PlayerData[playerid][pTazer] = 1;
	    GetPlayerWeaponData(playerid, 2, PlayerData[playerid][pGuns][2], PlayerData[playerid][pAmmo][2]);

		GivePlayerWeapon(playerid, 23, 10);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan taser dari dalam sakunya.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[playerid][pTazer] = 0;
		SetWeapons(playerid);

		SetPlayerArmedWeapon(playerid, PlayerData[playerid][pGuns][2]);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menyimpan taser ke dalam sakunya.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:showbadge(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_NEWS && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_COMPANY)
		return SendErrorMessage(playerid, "Kamu haruslah menjadi seorang pegawai negeri sipil.");

 	new id, string[128];
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, COLOR_GREY, "Gunakan: /showbadge [player id or nama]");
	{
	    if (id == INVALID_PLAYER_ID) return SendErrorMessage(playerid, "Player tidak konek.");
	    if (!IsPlayerNearPlayer(playerid, id, 2.0)) return SendErrorMessage(playerid, "Player tidak dekat denganmu.");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s shows their badge to %s.", ReturnName(playerid, 0), ReturnName(id, 0));
		SendClientMessage(id, COLOR_WHITE, "[Informasi Badge]");
		format(string, sizeof(string), "Nama: %s", ReturnName(playerid, 0));
		SendClientMessage(id, COLOR_WHITE, string);
		format(string, sizeof(string), "Faction: %s", Faction_GetName(playerid));
		SendClientMessage(id, COLOR_WHITE, string);
		format(string, sizeof(string), "Rank: %s", Faction_GetRank(playerid));
		SendClientMessage(id, COLOR_WHITE, string);
		format(string, sizeof(string), "Division: %s", Faction_GetDivision(playerid));
		SendClientMessage(id, COLOR_WHITE, string);
	}
	return 1;
}


CMD:setswat(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang member fation.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	    return SendErrorMessage(playerid, "Kamu harus memiliki rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);

    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Kamu harus menjadi seorang petugas polisi.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/setswat [playerid/nama]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (PlayerData[userid][pSwatMember])
	{
	    PlayerData[userid][pSwatMember] = false;

	    SendClientMessageEx(playerid, COLOR_NEWBLUE, "[SWAT]: Kamu mengeluarkan %s dari SWAT.", ReturnName(userid, 0));
		SendClientMessageEx(userid, COLOR_NEWBLUE, "[SWAT]: %s telah mengeluarkanmu dari SWAT team.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[userid][pSwatMember] = true;

        SendClientMessageEx(playerid, COLOR_NEWBLUE, "[SWAT]: Kamu mengundang %s untuk masuk ke SWAT team.", ReturnName(userid, 0));
		SendClientMessageEx(userid, COLOR_NEWBLUE, "[SWAT]: %s telah mengundangmu ke SWAT team.", ReturnName(playerid, 0));
	}
	return 1;
}

//beanbag
forward kantongkacang(playerid);
public kantongkacang(playerid)
{
	kacangbag[playerid] = 0;
	return 1;
}

CMD:beanbag(playerid, params[])
{
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan command ini.");

	if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Kamu harus menjadi seorang petugas polisi.");

	if (kacangbag[playerid] == 0)
	{
 		kacangbag[playerid] = 1;
		SetTimerEx("kantongkacang", 600000, 0, "d", playerid);

		if (!PlayerData[playerid][pBeanBag])
		{
		    PlayerData[playerid][pBeanBag] = 1;

		    GetPlayerWeaponData(playerid, 3, PlayerData[playerid][pGuns][3], PlayerData[playerid][pAmmo][3]);

			GivePlayerWeapon(playerid, 25, 30);
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan beanbag shotgun.", ReturnName(playerid, 0));

		}
		else
			{
			    PlayerData[playerid][pBeanBag] = 0;
				SetWeapons(playerid);

				SetPlayerArmedWeapon(playerid, PlayerData[playerid][pGuns][3]);
			    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menyimpan beanbag shotgun miliknya.", ReturnName(playerid, 0));
			}
		}
	else {
     SendErrorMessage(playerid, "Kamu harus menunggu 10 Menit untuk bisa mengambil kembali");
	}
	return 1;
}

CMD:cuff(playerid, params[])
{
    new
	    userid;

	if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Kamu harus menjadi seorang petugas polisi.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/cuff [playerid/nama]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak konek.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "Kamu tidak bisa memborgol dirimu sendiri.");

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Kamu harus berada didekat player.");

    if (PlayerData[userid][pStunned] < 0 && GetPlayerSpecialAction(userid) != SPECIAL_ACTION_HANDSUP && !IsPlayerIdle(userid))
	    return SendErrorMessage(playerid, "Player harus idle atau disetrum.");

	if (GetPlayerState(userid) != PLAYER_STATE_ONFOOT)
	    return SendErrorMessage(playerid, "Player harus jalan kaki ketika diborgol.");

    if (PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "Player sudah diborgol.");

	static
	    string[64];

	if (PlayerData[userid][pDrinking])
	{
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

		DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
		PlayerData[userid][pDrinking] = 0;
	}
	if (PlayerData[userid][pHoldWeapon] > 0)
	{
	    HoldWeapon(userid, 0);
	}
    PlayerData[userid][pCuffed] = 1;
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_CUFFED);

	format(string, sizeof(string), "Kamu ~r~diborgol~w~ oleh %s.", ReturnName(playerid, 0));
    ShowPlayerFooter(userid, string);

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memasang borgol ditangan %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:uncuff(playerid, params[])
{
    new
	    userid;

	if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Kamu harus menjadi seorang petugas polisi.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/uncuff [playerid/nama]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak konek.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "Kamu tidak bisa melepaskan borgol dirimu sendiri.");

    if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Kamu harus berada didekat player.");

    if (!PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "Player tidak diborgol.");

	static
	    string[64];

    PlayerData[userid][pCuffed] = 0;
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

	format(string, sizeof(string), "Kamu ~g~dilepaskan~w~ oleh %s.", ReturnName(playerid, 0));
    ShowPlayerFooter(userid, string);

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s melepaskan borgol di pergelangan tangan %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:drag(playerid, params[])
{
	new
	    userid;

    if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/drag [playerid/nama]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak konek.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "Kamu tidak bisa menyeret dirimu sendiri.");

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Kamu harus berada didekat player.");

    if (!PlayerData[userid][pCuffed] && !PlayerData[userid][pStunned] && (GetFactionType(playerid) != FACTION_MEDIC))
        return SendErrorMessage(playerid, "Pemain tidak diborgol atau belum di setrum.");

	if (PlayerData[userid][pDragged])
	
	{
	    PlayerData[userid][pDragged] = 0;
	    PlayerData[userid][pDraggedBy] = INVALID_PLAYER_ID;

	    KillTimer(PlayerData[userid][pDragTimer]);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membebaskan %s dari cengkeramannya.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	
	else
	{
	    PlayerData[userid][pDragged] = 1;
	    PlayerData[userid][pDraggedBy] = playerid;

	    PlayerData[userid][pDragTimer] = SetTimerEx("DragUpdate", 200, true, "dd", playerid, userid);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s meraih %s dan mulai mengangkatnya.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	return 1;
}
CMD:detain(playerid, params[])
{
	new
		userid,
		vehicleid = GetNearestVehicle(playerid);

	if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Kamu harus menjadi seorang petugas polisi.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/drag [playerid/nama]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak konek.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "Kamu tidak bisa menahan dirimu sendiri.");

    if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Kamu harus berada di dekat player.");

    if (!PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "Player belum diborgol.");

	if (vehicleid == INVALID_VEHICLE_ID)
	    return SendErrorMessage(playerid, "Kamu tidak berada di dekat kendaraan apapun.");

	if (GetVehicleMaxSeats(vehicleid) < 2)
  	    return SendErrorMessage(playerid, "Kamu tidak bisa menahan pemain itu di kendaraan ini.");

	if (IsPlayerInVehicle(userid, vehicleid))
	{
		TogglePlayerControllable(userid, 1);

		RemoveFromVehicle(userid);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s membuka pintu dan menarik %s keluar dari kendaraannya.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else
	{
		new seatid = GetAvailableSeat(vehicleid, 2);

		if (seatid == -1)
		    return SendErrorMessage(playerid, "Tidak ada lagi sisa kursi.");

		new
		    string[64];

		format(string, sizeof(string), "Kamu ~r~ditahan~w~ oleh %s.", ReturnName(playerid, 0));
		TogglePlayerControllable(userid, 0);

		StopDragging(userid);
		PutPlayerInVehicle(userid, vehicleid, seatid);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s membuka pintu dan memasukan %s kedalam kendaraannya.", ReturnName(playerid, 0), ReturnName(userid, 0));
		ShowPlayerFooter(userid, string);
	}
	return 1;
}
forward DisablePlayerKnockout(playerid);
public DisablePlayerKnockout(playerid)
{
	TogglePlayerControllable(playerid, 1);
	SendClientMessage(playerid, COLOR_GREEN, "Kamu dipulihkan dari shock. Kamu dapat berkendara kembali.");
	KillTimer(TimerStack);
	return 1;
}
CMD:createarrest(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z;

	GetPlayerPos(playerid, x, y, z);

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	id = Arrest_Create(x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

	if (id == -1)
	    return SendErrorMessage(playerid, "Limit habis.");

	SendServerMessage(playerid, "Kamu berhasil membuat arrest point ID: %d.", id);
	return 1;
}

CMD:destroyarrest(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyarrest [point id]");

	if ((id < 0 || id >= MAX_ARREST_POINTS) || !ArrestData[id][arrestExists])
	    return SendErrorMessage(playerid, "ID arrest point tidak vlaid.");

	Arrest_Delete(id);
	SendServerMessage(playerid, "Kamu berhasil menghancurkan arrest point ID: %d.", id);
	return 1;
}

CMD:mdc(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Kamu harus menjadi seorang petugas polisi.");

	if (!IsACruiser(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Kamu harus berada di dalam sebuah mobil polisi.");

	Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Mobile Data Computer", "Warrants Aktif\nPlace Charges\nView Charges", "Pilih", "Batal");
	return 1;
}

CMD:arrest(playerid, params[])
{
	static
	    userid,
		time;

    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Kamu harus menjadi seorang petugas polisi.");

	if (sscanf(params, "ud", userid, time))
	    return SendSyntaxMessage(playerid, "/arrest [playerid/nama] [menit]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Player tidak konek atau didekatmu.");

	if (time < 1 || time > 120)
	    return SendErrorMessage(playerid, "Waktu yang ditentukan tidak boleh di bawah 1 atau di atas 120.");

	if (!PlayerData[userid][pCuffed])
	    return SendErrorMessage(playerid, "Pemain harus diborgol sebelum ditangkap.");

	if (!IsPlayerNearArrest(playerid))
	    return SendErrorMessage(playerid, "Kamu harus berada didekat Arrest point.");

	PlayerData[userid][pPrisoned] = 1;
	PlayerData[userid][pJailTime] = time * 60;

	StopDragging(userid);
	SetPlayerInPrison(userid);

	ResetWeapons(userid);
	ResetPlayer(userid);

	PlayerData[userid][pWarrants] = 0;
	PlayerData[userid][pCuffed] = 0;

	PlayerTextDrawShow(userid, PlayerData[userid][pTextdraws][70]);
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

    SendClientMessageToAllEx(COLOR_LIGHTRED, "[PRISON] %s dipenjara %d hari di San Andreas Prison.", ReturnName(userid, 0), time);
    return 1;
}

CMD:flashlight(playerid)
{
	if(PlayerData[playerid][pFLAttached] == 0)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid,8)) RemovePlayerAttachedObject(playerid,8);
		if(IsPlayerAttachedObjectSlotUsed(playerid,9)) RemovePlayerAttachedObject(playerid,9);
		SetPlayerAttachedObject(playerid, 8, 18656, 5, 0.1, 0.038, -0.01, -90, 180, 0, 0.03, 0.1, 0.03);
		SetPlayerAttachedObject(playerid, 9, 18641, 5, 0.1, 0.02, -0.05, 0, 0, 0, 1, 1, 1);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan senter dan menyalakannya.", ReturnName(playerid, 0));

		PlayerData[playerid][pFLAttached] =1;
	}
	else
	{
 		RemovePlayerAttachedObject(playerid,8);
		RemovePlayerAttachedObject(playerid,9);
  		PlayerData[playerid][pFLAttached] =0;
  		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menyisipkan senter kembali ke sakunya.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:taclight(playerid)
{
	if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Kamu harus menjadi seorang petugas polisi.");
	{
	    if(PlayerData[playerid][pTLAttached] == 0)
		{
			if(IsPlayerAttachedObjectSlotUsed(playerid,8)) RemovePlayerAttachedObject(playerid,8);
			if(IsPlayerAttachedObjectSlotUsed(playerid,9)) RemovePlayerAttachedObject(playerid,9);
			SetPlayerAttachedObject(playerid, 8, 18656, 6, 0.25, -0.0175, 0.16, 86.5, -185, 86.5, 0.03, 0.1, 0.03);
			SetPlayerAttachedObject(playerid, 9, 18641, 6, 0.2, 0.01, 0.16, 90, -95, 90, 1, 1, 1);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s melekatkan senter mereka ke bagian atas senjatanya.", ReturnName(playerid, 0));

			PlayerData[playerid][pTLAttached] =1;
		}
		else
		{
		    RemovePlayerAttachedObject(playerid,8);
			RemovePlayerAttachedObject(playerid,9);
		    PlayerData[playerid][pTLAttached] =0;
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s melepaskan senter dari senjatanya.", ReturnName(playerid, 0));
		}
	}
	return 1;
}

CMD:seizeplant(playerid, params[])
{
	static
	    plantid;

    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Kamu harus menjadi seorang petugas polisi.");

	if ((plantid = Plant_Nearest(playerid)) == -1)
	    return SendErrorMessage(playerid, "Kamu tidak berdiri di dekat tanaman obat apa pun.");

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah merebut sebuah tanaman %s seberat %d gram.", ReturnName(playerid, 0), Plant_GetType(PlantData[plantid][plantType]), PlantData[plantid][plantDrugs]);
	Plant_Delete(plantid);
	return 1;
}

CMD:giveup(playerid, params[])
{
	if (!PlayerData[playerid][pInjured])
	    return SendErrorMessage(playerid, "Kamu tidak terluka saat ini.");
	if (inSakit[playerid] == 0)
	    return SendErrorMessage(playerid, "Kamu harus menunggu 5 menit untuk menerima kematianmu.");

	SetPlayerHealth(playerid, 0.0);
	SendServerMessage(playerid, "Kamu menyerah dan menerima kematianmu.");
	return 1;
}

CMD:loadinjured(playerid, params[])
{
	static
	    userid,
		seatid;

	if (GetFactionType(playerid) != FACTION_MEDIC)
	    return SendErrorMessage(playerid, "Kamu harus menjadi bagian dari faction medis.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/loadinjured [playerid/nama]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 10.0))
	    return SendErrorMessage(playerid, "Player tidak konek atau didekatmu.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Kamu tidak bisa memasukkan dirimu ke ambulans.");

	if (!PlayerData[userid][pInjured])
	    return SendErrorMessage(playerid, "Player tidak terluka.");

	for (new i = 0; i != MAX_VEHICLES; i ++) if (IsPlayerNearBoot(playerid, i) && GetVehicleModel(i) == 416)
	{
	    seatid = GetAvailableSeat(i, 2);

	    if (seatid == -1)
	        return SendErrorMessage(playerid, "Tidak ada tempat untuk pasien.");

		ClearAnimations(userid);
		PlayerData[userid][pInjured] = 2;

		PutPlayerInVehicle(userid, i, seatid);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s membuka ambulance dan mengangkut %s di tandu.", ReturnName(playerid, 0), ReturnName(userid, 0));

		TogglePlayerControllable(userid, 0);
		SetPlayerHealth(userid, 100.0);
		return 1;
	}
	SendErrorMessage(playerid, "Kamu harus berada didekat ambulance.");
	return 1;
}

CMD:dropinjured(playerid, params[])
{
	static
	    userid;

    if (GetFactionType(playerid) != FACTION_MEDIC)
	    return SendErrorMessage(playerid, "Kamu harus menjadi bagian dari faction medis.");

    if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/dropinjured [playerid/nama]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Player tidak konek atau tidak dekatmu.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Kamu tidak bisa mengantarkan dirimu ke rumah sakit.");

	if (!PlayerData[userid][pInjured])
	    return SendErrorMessage(playerid, "Player tidak terluka.");

	for (new i = 0; i < sizeof(arrHospitalDeliver); i ++)

	if (IsPlayerInRangeOfPoint(playerid, 5.0, arrHospitalDeliver[i][0], arrHospitalDeliver[i][1], arrHospitalDeliver[i][2]) || IsPlayerInRangeOfPoint(playerid, 12.0, 1161.4567,-1310.9136,31.4944))
	{
	    ClearAnimations(userid);

	    SetPlayerInterior(userid, 3);
	    SendServerMessage(playerid, "Kamu mengantar %s ke rumah sakit.", ReturnName(userid, 0));

	    SetPlayerPos(userid, 1172.4095,-1300.3398,17.9119);
    	SetPlayerFacingAngle(userid, 0.0000);

		TogglePlayerControllable(userid, 1);
  		SetCameraBehindPlayer(userid);

		SetPlayerVirtualWorld(userid, i);
  		PlayerData[userid][pHospitalInt] = i;

	  	PlayerData[userid][pHospital] = -1;
    	PlayerData[userid][pHospitalTime] = 0;
    	ResetDamages(playerid);

    	SendServerMessage(userid, "Kamu sudah disembuhkan di rumah sakit terdekat.");

		GameTextForPlayer(userid, " ", 1, 3);
  		ShowHungerTextdraw(userid, 1);

  		PlayerData[userid][pInjured] = 0;
		TextDrawHideForPlayer(userid, gServerTextdraws[2]);
  		TextDrawHideForPlayer(playerid, Textdraw37);
		return 1;
	}
	SendErrorMessage(playerid, "Kamu harus berada didekat hospital deliver location.");
	return 1;
}

CMD:m(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan megaphone.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(m)egaphone [pesan]");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "(Megaphone) %s berkata: %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "...%s", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "(Megaphone) %s berkata: %s", ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:bandage(playerid, params[])
{
    static
	    userid;

	if (GetFactionType(playerid) != FACTION_MEDIC)
	    return SendErrorMessage(playerid, "Kamu harus menjadi bagian dari faction medis.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/bandage [playerid/nama]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
	    return SendErrorMessage(playerid, "Player tidak konek atau tidak dekatmu.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan command ini untuk dirimu sendiri.");

	if (PlayerData[userid][pFirstAid])
	    return SendErrorMessage(playerid, "Player ini sudah diperban sebelumnya");

    if (ReturnHealth(userid) > 99)
	    return SendErrorMessage(playerid, "Player ini tidak perlu perban.");

    PlayerData[userid][pFirstAid] = true;
    PlayerData[userid][pAidTimer] = SetTimerEx("FirstAidUpdate", 1000, true, "d", userid);

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s membuka sebuah first aid kit dan menggunakan sebuah perban untuk %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:broadcast(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_NEWS)
		return SendErrorMessage(playerid, "Kamu harus menjadi bagian dari faction news.");

	if (!IsNewsVehicle(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Kamu harus berada di dalam news van atau chopper.");

	if (!PlayerData[playerid][pBroadcast])
	{
	    PlayerData[playerid][pBroadcast] = true;

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s has started a news broadcast.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Kamu memulai sebuah news broadcast (Gunakan \"/bc [text]\" untuk ngebroadcast).");
	}
	else
	{
	    PlayerData[playerid][pBroadcast] = false;

		foreach (new i : Player) if (PlayerData[i][pNewsGuest] == playerid) {
		    PlayerData[i][pNewsGuest] = INVALID_PLAYER_ID;
		}
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menghentikan news broadcast.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Kamu menghentikan news broadcast.");
	}
	return 1;
}

CMD:bc(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_NEWS)
		return SendErrorMessage(playerid, "Kamu harus menjadi bagian dari faction news.");

    if (isnull(params))
	    return SendSyntaxMessage(playerid, "/bc [broadcast text]");

	if (!PlayerData[playerid][pBroadcast])
	    return SendErrorMessage(playerid, "Kamu harus broadcasting untuk menggunakan command ini.");

	if (strlen(params) > 64) {
	    foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
		    SendClientMessageEx(i, COLOR_LIGHTGREEN, "[NEWS] Reporter %s: %.64s", ReturnName(playerid, 0), params);
		    SendClientMessageEx(i, COLOR_LIGHTGREEN, "...%s", params[64]);
		}
	}
	else {
        foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
		    SendClientMessageEx(i, COLOR_LIGHTGREEN, "[NEWS] Reporter %s: %s", ReturnName(playerid, 0), params);
		}
	}
	return 1;
}

CMD:inviteguest(playerid, params[])
{
	static
	    userid;

    if (GetFactionType(playerid) != FACTION_NEWS)
		return SendErrorMessage(playerid, "Kamu harus menjadi bagian dari news faction.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/inviteguest [playerid/nama]");

    if (!PlayerData[playerid][pBroadcast])
	    return SendErrorMessage(playerid, "Kamu harus melakukan broadcasting untuk menggunakan command ini.");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Player tidak konek atau tidak sedang didekatmu.");

 	if (userid == playerid)
		return SendErrorMessage(playerid, "Kamu tidak bisa menambahkan dirimu sendiri sebagai seorang guest.");

	if (PlayerData[userid][pNewsGuest] == playerid)
	    return SendErrorMessage(playerid, "That player is already a guest of your broadcast.");

	if (PlayerData[userid][pNewsGuest] != INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player ini sudah menjadi guest di broadcast lain.");

	PlayerData[userid][pNewsGuest] = playerid;

	SendServerMessage(playerid, "Kamu menambahkan %s sebagai broadcast guest.", ReturnName(userid, 0));
	SendServerMessage(userid, "%s telah menambahkanmu sebagai broadcast guest.", ReturnName(userid, 0));
	return 1;
}

CMD:removeguest(playerid, params[])
{
	static
	    userid;

    if (GetFactionType(playerid) != FACTION_NEWS)
		return SendErrorMessage(playerid, "Kamu harus menjadi bagian dari faction news.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/removeguest [playerid/nama]");

    if (!PlayerData[playerid][pBroadcast])
	    return SendErrorMessage(playerid, "Kamu harus membroadcast untuk menggunakan perintah ini.");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Pemain itu terputus atau tidak di dekatmu.");

 	if (userid == playerid)
		return SendErrorMessage(playerid, "Kamu tidak dapat menghapus dirimu sebagai guest.");

	if (PlayerData[userid][pNewsGuest] != playerid)
	    return SendErrorMessage(playerid, "Pemain itu bukan guest broadcast milikmu.");

	PlayerData[userid][pNewsGuest] = INVALID_PLAYER_ID;

	SendServerMessage(playerid, "Kamu menghapus %s dari broadcast guest milikmu.", ReturnName(userid, 0));
	SendServerMessage(userid, "%s menghapus dirimu broadcast guest miliknya.", ReturnName(userid, 0));
	return 1;
}

CMD:pay(playerid, params[])
{
	static
	    userid,
	    amount;

	if (sscanf(params, "ud", userid, amount))
	    return SendSyntaxMessage(playerid, "/pay [playerid/nama] [jumlah]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Pemain itu terputus atau tidak di dekatmu.");

	if (userid == playerid)
		return SendErrorMessage(playerid, "Kamu tidak bisa memberi dirimu uang.");

	if (amount < 1)
	    return SendErrorMessage(playerid, "Harap tentukan jumlah di atas 1 dollar.");

	if (amount > 100 && PlayerData[playerid][pChannel4] < 2)
	    return SendErrorMessage(playerid, "Kamu tidak bisa membayar di atas $100 dengan level dibawah 2.");

	if (amount > GetMoney(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak punya uang sebanyak itu.");

	static
	    string[72];

	GiveMoney(playerid, -amount);
	GiveMoney(userid, amount);

	format(string, sizeof(string), "Kamu menerima ~g~%s~w~ dari %s.", FormatNumber(amount), ReturnName(playerid, 0));
	ShowPlayerFooter(userid, string);

	format(string, sizeof(string), "Kamu memberikan ~r~%s~w~ kepada %s.", FormatNumber(amount), ReturnName(userid, 0));
	ShowPlayerFooter(playerid, string);

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan %s dari dompet dan memberikannya kepada %s.", ReturnName(playerid, 0), FormatNumber(amount), ReturnName(userid, 0));
	Log_Write("logs/pay_log.txt", "[%s] %s (%s) has paid %s to %s (%s).", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], FormatNumber(amount), ReturnName(userid, 0), PlayerData[userid][pIP]);
	return 1;
}

/*CMD:radio(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "You must be a civil service worker.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(r)adio [radio text]");

	SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[RADIO] %s %s: %s", Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "[RADIO] %s: %s", ReturnName(playerid, 0), params);
	Log_Write("logs/faction_chat.txt", "[%s][Radio] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	return 1;
}*/
CMD:factions(playerid, params[])
{
	ViewFactions(playerid);
	return 1;
}

CMD:dept(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_COMPANY)
	    return SendErrorMessage(playerid, "Pengumuman Terbaru Pemerintah.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/dept [department radio]");

	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionType] == FACTION_POLICE || FactionData[i][factionType] == FACTION_MEDIC || FactionData[i][factionType] == FACTION_GOV || FactionData[i][factionType] == FACTION_COMPANY)
	{
		SendFactionMessage(i, COLOR_DEPARTMENT, "[%s] [%s] %s %s: %s", GetInitials(Faction_GetName(playerid)), Faction_GetDivision(playerid), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	}
	Log_Write("logs/faction_dept.txt", "[%s] [DEPARTMENTAL] [%s] [%s] %s %s: %s", ReturnDate(), Faction_GetName(playerid), Faction_GetDivision(playerid), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	return 1;
}

CMD:gov(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_COMPANY)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang pegawai negeri sipil.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
	    return SendErrorMessage(playerid, "Kamu harus memiliki rank setidaknya %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2);

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/gov [Text]");

    if (strlen(params) > 64)
	{
        foreach (new i : Player) if (!PlayerData[i][pDisableOOC] && PlayerData[i][pCreated])
		{
		    SendClientMessageEx(i, COLOR_WHITE, "|___________ Pengumuman Terbaru Pemerintah ___________|");
		    SendClientMessageEx(i, COLOR_BLUE, "[%s] %s %s: %.64s", GetInitials(Faction_GetName(playerid)), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
		    SendClientMessageEx(i, COLOR_BLUE, "...%s", params[64]);
		}
	}
	else
	{
        foreach (new i : Player) if (!PlayerData[i][pDisableOOC] && PlayerData[i][pCreated])
		{
		    SendClientMessageEx(i, COLOR_WHITE, "|___________ Pengumuman Terbaru Pemerintah ___________|");
		    SendClientMessageEx(i, COLOR_BLUE, "[%s] %s %s: %s", GetInitials(Faction_GetName(playerid)), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
		}
	}
	return 1;
}

CMD:gps(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "GPS System"))
	    return SendErrorMessage(playerid, "Kamu harus memiliki GPS untuk menggunakan ini.");

	if (PlayerData[playerid][pInjured] || PlayerData[playerid][pLoading] > 0 || PlayerData[playerid][pUnloading] != -1 || PlayerData[playerid][pDeliverShipment] > 0)
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan command ini sekarang.");

	Dialog_Show(playerid, MainGPS, DIALOG_STYLE_LIST, "GPS", "Cari Rumah\nCari Bisnis\nCari Entrance\nCari Pekerjaan\nCustom Locations", "Pilih", "Batal");
	return 1;
}

CMD:fill(playerid, params[])
{
	new vehicleid = GetNearestVehicle(playerid);

	if (IsPlayerInAnyVehicle(playerid) || vehicleid == INVALID_VEHICLE_ID)
	    return SendErrorMessage(playerid, "Kamu tidak berada didekat kendaraan manapun.");

	if (!Inventory_HasItem(playerid, "Fuel Can"))
	    return SendErrorMessage(playerid, "Kamu tidak memiliki Fuel Can.");

	if (GetEngineStatus(vehicleid))
	    return SendErrorMessage(playerid, "Kamu harus mematikan mesin terlebih dahulu.");

	if (CoreVehicles[vehicleid][vehFuel] > 95)
	    return SendErrorMessage(playerid, "Kendaraan ini tidak butuh bensin.");

	if (PlayerData[playerid][pFuelCan])
	    return SendErrorMessage(playerid, "Kamu sedang menggunakan can of fuel.");

    PlayerData[playerid][pFuelCan] = 1;

	Inventory_Remove(playerid, "Fuel Can");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Mengisi bensin...", 5200, 3);

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s membuka sebuah can of fuel dan mengisi ke kendaraannya.", ReturnName(playerid, 0));
	SetTimerEx("RefillUpdate", 5000, false, "dd", playerid, vehicleid);

	return 1;
}

CMD:ask(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/ask [pertanyaan]");

    if (PlayerData[playerid][pHelpTime] >= gettime())
	    return SendErrorMessage(playerid, "Kamu harus menunggu %d detik sebelum mengirim pesan lainnya.", PlayerData[playerid][pHelpTime] - gettime());

	PlayerData[playerid][pSeekHelp] = 1;
	SendHelperMessage(COLOR_CYAN, "[HELP]: %s (ID: %d) bertanya: \"%s\"", ReturnName(playerid, 0), playerid, params);

	PlayerData[playerid][pHelpTime] = gettime() + 15;
	SendServerMessage(playerid, "Pertanyaanmu dikirim ke helper.");
	return 1;
}

forward delayPM(playerid);
public delayPM(playerid)
{
  pmdelay[playerid] = 0;
  return 1;
}

 CMD:pm(playerid, params[])
{
	static
	    userid,
	    text[128];

	if (sscanf(params, "us[128]", userid, text))
	    return SendSyntaxMessage(playerid, "/pm [playerid/nama] [pesan]");

	if (PlayerData[playerid][pDisablePM])
		return SendErrorMessage(playerid, "Kamu harus menghidupkan private messaging terlebih dahulu.");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Kamu tidak bisa mengirim private message kedirimu sendiri.");

	if (PlayerData[userid][pDisablePM])
	    return SendErrorMessage(playerid, "Player mematikan Private Message miliknya.");
	if (pmdelay[playerid] == 0)
	{
		GameTextForPlayer(userid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~Pesan baru!", 3000, 3);
		PlayerPlaySound(userid, 1085, 0.0, 0.0, 0.0);
		SendClientMessageEx(userid, COLOR_RED, "(( PM dari %s (%d): %s ))", ReturnName(playerid, 0), playerid, text);
		SendClientMessageEx(playerid, COLOR_RED, "(( PM ke %s (%d): %s ))", ReturnName(userid, 0), userid, text);
		SendAdminAlert(COLOR_YELLOW, "[SPY PM] PM dari %s (%d) kepada %s (%d) : %s", ReturnName(playerid, 0), playerid, ReturnName(userid, 0), userid, text);
		pmdelay[playerid] = 1;
		SetTimerEx("delayPM", 30000, 0, "d" ,playerid);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_RED, "Tunggu 30 detik lagi untuk menggunakan perintah ini Keep Role Play.");
	}
	return 1; // kasih selang waktu
}

CMD:tog(playerid, params[])
{
	if (isnull(params))
	{
	    SendSyntaxMessage(playerid, "/tog [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} ooc, pm, faction, helper, broadcast, speedo, donator");
	    return 1;
	}
	if (!strcmp(params, "ooc", true))
	{
	    if (!PlayerData[playerid][pDisableOOC])
	    {
	        PlayerData[playerid][pDisableOOC] = 1;
         	SendServerMessage(playerid, "Kamu mematikan pesan dari OOC chat (/tog untuk menghidupkannya kembali).");
		}
		else
		{
  			PlayerData[playerid][pDisableOOC] = 0;
  			SendServerMessage(playerid, "Kamu menghidupkan pesan dari OOC chat.");
		}
	}
	else if (!strcmp(params, "pm", true))
	{
	    if(PlayerData[playerid][pDonator] != 0 || PlayerData[playerid][pAdmin] > 0 || PlayerData[playerid][pHelper] > 0)
	    {
		    if (!PlayerData[playerid][pDisablePM])
		    {
				PlayerData[playerid][pDisablePM] = 1;
	   			SendServerMessage(playerid, "Kamu mematikan pesan dari private messages (/tog untuk menghidupkannya kembali).");
			}
			else
			{
	  			PlayerData[playerid][pDisablePM] = 0;
	     		SendServerMessage(playerid, "Kamu menghidupkan pesan dari private messages.");
			}
		}
		else SendClientMessage(playerid, COLOR_GREY, DonatorOnly);
	}
	else if (!strcmp(params, "faction", true))
	{
	    if (PlayerData[playerid][pFaction] == -1)
	        return SendErrorMessage(playerid, "Kamu tidak tergabung dalam faction.");

	    if (!PlayerData[playerid][pDisableFaction])
	    {
	        PlayerData[playerid][pDisableFaction] = 1;
			SendServerMessage(playerid, "Kamu mematikan pesan dari faction chat (/tog untuk menghidupkannya kembali).");
		}
		else
		{
  			PlayerData[playerid][pDisableFaction] = 0;
     		SendServerMessage(playerid, "Kamu menghidupkan pesan dari faction chat.");
		}
	}
	else if (!strcmp(params, "helper", true))
	{
	    if (!PlayerData[playerid][pHelper])
	        return SendErrorMessage(playerid, "Kamu bukan seorang Helper.");

	    if (!PlayerData[playerid][pDisableHelper])
	    {
	        PlayerData[playerid][pDisableHelper] = 1;
			SendServerMessage(playerid, "Kamu mematikan pesan dari Helper chat (/tog untuk menghidupkannya kembali).");
		}
		else
		{
  			PlayerData[playerid][pDisableHelper] = 0;
     		SendServerMessage(playerid, "Kamu menghidupkan pesan dari Helper chat.");
		}
	}
	else if (!strcmp(params, "broadcast", true))
	{
	    if (!PlayerData[playerid][pDisableBC])
	    {
	        PlayerData[playerid][pDisableBC] = 1;
			SendServerMessage(playerid, "Kamu mematikan pesan dari news broadcasts (/tog untuk menghidupkannya kembali).");
		}
		else
		{
  			PlayerData[playerid][pDisableBC] = 0;
     		SendServerMessage(playerid, "Kamu menghidupkan pesan dari news broadcasts.");
		}
	}
	else if (!strcmp(params, "speedo", true))
	{
	    if (!PlayerData[playerid][pDisableSpeedo])
	    {
	        for (new i = 34; i < 39; i ++) {
				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
	    	}
	        PlayerData[playerid][pDisableSpeedo] = 1;
			SendServerMessage(playerid, "Kamu mematikan speedometer milikmu (/tog untuk menghidupkannya kembali).");
		}
		else
		{
		    if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsSpeedoVehicle(GetPlayerVehicleID(playerid)))
		    {
		        for (new i = 34; i < 39; i ++) {
					PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
	    		}
		    }
  			PlayerData[playerid][pDisableSpeedo] = 0;
     		SendServerMessage(playerid, "Kamu menghidupkan speedometer milikmu.");
		}
	}
	else if (!strcmp(params, "donator", true))
	{
	    if (!PlayerData[playerid][pDonator])
	        return SendClientMessage(playerid, COLOR_GREY, DonatorOnly);

	    if (!PlayerData[playerid][pDisableDonator])
	    {
	        PlayerData[playerid][pDisableDonator] = 1;
			SendServerMessage(playerid, "Kamu mematikan pesan dari Donator chat (/tog untuk menghidupkannya kembali).");
		}
		else
		{
  			PlayerData[playerid][pDisableDonator] = 0;
     		SendServerMessage(playerid, "Kamu menghidupkan pesan dari Donator chat.");
		}
	}
	return 1;
}

CMD:ticket(playerid, params[])
{
	static
	    userid,
	    price,
	    reason[64];

	if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Kamu harus menjadi seorang petugas polisi.");

	if (sscanf(params, "uds[64]", userid, price, reason))
		return SendSyntaxMessage(playerid, "/ticket [playerid/name] [price] [reason]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Pemain itu terputus atau tidak di dekatmu.");

	if (userid == playerid)
	   return SendErrorMessage(playerid, "Kamu tidak bisa menulis tiket untuk diri sendiri.");

	if (price < 1 || price > 1000)
	    return SendErrorMessage(playerid, "Harganya tidak bisa di bawah $1 atau di atas $1.000.");

	new id = Ticket_Add(userid, price, reason);

	if (id != -1) {
	    SendServerMessage(playerid, "Kamu menuliskan %s sebuah tiket denda senilai %s, alasan: %s", ReturnName(userid, 0), FormatNumber(price), reason);
	    SendServerMessage(userid, "%s telah menuliskanmu sebuah tiket denda senilai %s, alasan: %s", ReturnName(playerid, 0), FormatNumber(price), reason);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menuliskan tiket senilai %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	    Log_Write("logs/ticket_log.txt", "[%s] %s has written a %s ticket to %s, alasan: %s", ReturnDate(), ReturnName(playerid, 0), FormatNumber(price), ReturnName(userid, 0), reason);
	}
	else {
	    SendErrorMessage(playerid, "Player sudah memiliki %d tiket yang belum dibayar.", MAX_PLAYER_TICKETS);
	}
	return 1;
}

CMD:invoice(playerid, params[])
{
	static
	    userid,
	    price,
	    reason[64];

	if (GetFactionType(playerid) != FACTION_COMPANY)
		return SendErrorMessage(playerid, "Kamu harus berada di sebuah Corporation/Company.");

	if (sscanf(params, "uds[64]", userid, price, reason))
		return SendSyntaxMessage(playerid, "/invoice [playerid/nama] [harga] [alasan]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Pemain itu terputus atau tidak di dekatmu.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Kamu tidak bisa menagih diri sendiri.");

	if (price < 1 || price > 10000)
	    return SendErrorMessage(playerid, "Harganya tidak bisa di bawah $1 atau di atas $10.000.");

	new id = Ticket_Add(userid, price, reason);

	if (id != -1) {
	    SendServerMessage(playerid, "Kamu menuliskan %s sebuah tagihan senilai %s, alasan: %s", ReturnName(userid, 0), FormatNumber(price), reason);
	    SendServerMessage(userid, "%s telah menulis tagihan untukmu senilai %s, alasan: %s", ReturnName(playerid, 0), FormatNumber(price), reason);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membuat tagihan untuk %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	    Log_Write("logs/invoice_log.txt", "[%s] %s telah menulis sebuah %s tagihan kepada %s, alasan: %s", ReturnDate(), ReturnName(playerid, 0), FormatNumber(price), ReturnName(userid, 0), reason);
	}
	else {
	    SendErrorMessage(playerid, "Player sudah memiliki %d tiket yang belum dibayar.", MAX_PLAYER_INVOICES);
	}
	return 1;
}

CMD:invoices(playerid, params[])
{
	static
	    string[MAX_PLAYER_INVOICES * 64];

	if (!IsPlayerInRangeOfPoint(playerid, 3.0, 361.2687, 171.5613, 1008.3828))
	    return SendErrorMessage(playerid, "Kamu harus berada di City Hall untuk membayar tiket milikmu.");

	string[0] = 0;

	for (new i = 0; i < MAX_PLAYER_INVOICES; i ++)
	{
	    if (TicketData[playerid][i][ticketExists])
	        format(string, sizeof(string), "%s%s (%s - %s)\n", string, TicketData[playerid][i][ticketReason], FormatNumber(TicketData[playerid][i][ticketFee]), TicketData[playerid][i][ticketDate]);

		else format(string, sizeof(string), "%sSlot Kosong\n", string);
	}
	return Dialog_Show(playerid, MyInvoices, DIALOG_STYLE_LIST, "Tagihan Saya", string, "Bayar", "Batal");
}

CMD:tickets(playerid, params[])
{
	static
	    string[MAX_PLAYER_TICKETS * 64];

	if (!IsPlayerInRangeOfPoint(playerid, 3.0, 361.2687, 171.5613, 1008.3828))
	    return SendErrorMessage(playerid, "Kamu harus berada di City Hall untuk membayar tiket milikmu.");

	string[0] = 0;

	for (new i = 0; i < MAX_PLAYER_TICKETS; i ++)
	{
	    if (TicketData[playerid][i][ticketExists])
	        format(string, sizeof(string), "%s%s (%s - %s)\n", string, TicketData[playerid][i][ticketReason], FormatNumber(TicketData[playerid][i][ticketFee]), TicketData[playerid][i][ticketDate]);

		else format(string, sizeof(string), "%sSlot Kosong\n", string);
	}
	return Dialog_Show(playerid, MyTickets, DIALOG_STYLE_LIST, "Tiket Saya", string, "Bayar", "Batal");
}

CMD:twithdraw(playerid, params[])
{
	static
	    amount;

	if (GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "Kamu bukan seorang pemerintah.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks])
	    return SendErrorMessage(playerid, "Kamu harus memiliki rank setidaknya %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks]);

	if (sscanf(params, "d", amount))
		return SendSyntaxMessage(playerid, "/twithdraw [jumlah] (%s tersedia)", FormatNumber(g_TaxVault));

	if (!IsPlayerInCityHall(playerid))
	    return SendErrorMessage(playerid, "Kamu harus berada di City Hall untuk menggunakan ini.");

	if (amount < 1 || amount > g_TaxVault)
	    return SendErrorMessage(playerid, "Jumlah tidak valid.");

    if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks])
	    return SendErrorMessage(playerid, "Kamu setidaknya harus memiliki rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

	Tax_AddMoney(-amount);

	GiveMoney(playerid, amount);
	SendServerMessage(playerid, "Kamu menarik %s dari kas (%s tersedia).", FormatNumber(amount), FormatNumber(g_TaxVault));

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menarik %s dari kas.", ReturnName(playerid, 0), FormatNumber(amount));
	Log_Write("logs/tax_vault.txt", "[%s] %s has withdrawn %s from the treasury.", ReturnDate(), ReturnName(playerid, 0), FormatNumber(amount));
	return 1;
}

CMD:tdeposit(playerid, params[])
{
	static
	    amount;

	if (GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "Kamu bukan seorang pemerintah.");

	if (sscanf(params, "d", amount))
		return SendSyntaxMessage(playerid, "/tdeposit [jumlah] (%s tersedia)", FormatNumber(g_TaxVault));

    if (!IsPlayerInCityHall(playerid))
	    return SendErrorMessage(playerid, "Kamu harus berada di City Hall untuk melakukan ini.");

	if (amount < 1 || amount > GetMoney(playerid))
	    return SendErrorMessage(playerid, "Jumlah tidak valid.");

	/*if (PlayerData[playerid][pFactionRank] < 1)
	    return SendErrorMessage(playerid, "Kamu setidaknya harus memiliki rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);
*/
	Tax_AddMoney(amount);

	GiveMoney(playerid, -amount);
	SendServerMessage(playerid, "Telah menyimpan %s ke kas (%s tersedia).", FormatNumber(amount), FormatNumber(g_TaxVault));

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menyimpan %s ke kas.", ReturnName(playerid, 0), FormatNumber(amount));
	Log_Write("logs/tax_vault.txt", "[%s] %s telah menyimpan %s ke kas.", ReturnDate(), ReturnName(playerid, 0), FormatNumber(amount));
	return 1;
}

CMD:spike(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang polisi.");

	if (isnull(params))
 	{
	 	SendSyntaxMessage(playerid, "/spike [option]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[OPTIONS]:{FFFFFF} drop, destroy, destroyall");
		return 1;
	}
	static
        Float:fX,
        Float:fY,
        Float:fZ,
        Float:fA;

    GetPlayerPos(playerid, fX, fY, fZ);
    GetPlayerFacingAngle(playerid, fA);

	if (!strcmp(params, "drop", true))
	{
	    if (IsPlayerInAnyVehicle(playerid))
	        return SendErrorMessage(playerid, "Kamu harus keluar kendaraan terlebih dahulu.");

	    for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
	    {
            BarricadeData[i][cadeExists] = true;
            BarricadeData[i][cadeType] = 1;

            BarricadeData[i][cadePos][0] = fX;
            BarricadeData[i][cadePos][1] = fY;
            BarricadeData[i][cadePos][2] = fZ;

            BarricadeData[i][cadeObject] = CreateDynamicObject(2899, fX, fY, fZ - 0.8, 0.0, 0.0, fA + 90.0);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menjatuhkan sebuah spikestrip.", ReturnName(playerid, 0));
			SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s telah menjatuhkan sebuah spikestrip di %s.", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));

			return 1;
		}
		SendErrorMessage(playerid, "The server has reached the limit for spikestrips.");
	}
	else if (!strcmp(params, "destroy", true))
	{
        for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
	    {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

            DestroyDynamicObject(BarricadeData[i][cadeObject]);

            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengangkut sebuah spikestrip.", ReturnName(playerid, 0));
			SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s telah mengangkut sebuah spikestrip di %s.", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));
			return 1;
		}
		SendErrorMessage(playerid, "Kamu tidak berada dekat dengan spikestrip.");
	}
	else if (!strcmp(params, "destroyall", true))
	{
        for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 1)
	    {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

			DestroyDynamicObject(BarricadeData[i][cadeObject]);
		}
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s telah menghancurkan semua spikestrips.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:crb(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "Kamu harus bekerja sebagai seorang pegawai negeri sipil.");

	new rb;
	if(sscanf(params, "d",rb)) return SendSyntaxMessage(playerid, "/crb [1-7]");
	if (rb == 1)
	{
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
	    GetPlayerPos(playerid, plocx, plocy, plocz);
	    GetPlayerFacingAngle(playerid,ploca);
	    CreateRoadblock(1459,plocx,plocy,plocz,ploca);
	    //GameTextForPlayer(playerid,"~w~Roadblock ~b~Placedd!",3000,1);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menjatukan penghalang jalan berukuran kecil.", ReturnName(playerid, 0));
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[DISPATCHER]: %s telah menjatuhkan tanda penghalang jalan di %s.", ReturnName(playerid, 0), GetLocation(plocx, plocy, plocz));
		return 1;
	}
	else if (rb == 2)
	{
        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
        GetPlayerPos(playerid, plocx, plocy, plocz);
        GetPlayerFacingAngle(playerid,ploca);
        CreateRoadblock(978,plocx,plocy,plocz+0.6,ploca);
        //GameTextForPlayer(playerid,"~w~Roadblock ~b~Placed!",3000,1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menjatukan penghalang jalan berukuran sedang.", ReturnName(playerid, 0));
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[DISPATCHER]: %s telah menjatuhkan tanda penghalang jalan di %s.", ReturnName(playerid, 0), GetLocation(plocx, plocy, plocz));
        return 1;
	}
	else if (rb == 3)
	{
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
	    GetPlayerPos(playerid, plocx, plocy, plocz);
	    GetPlayerFacingAngle(playerid,ploca);
        CreateRoadblock(981,plocx,plocy,plocz+0.9,ploca+180);
        //GameTextForPlayer(playerid,"~w~Roadblock ~g~Placed!",3000,1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menjatukan penghalang jalan berukuran besar.", ReturnName(playerid, 0));
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[DISPATCHER]: %s telah menjatuhkan tanda penghalang jalan di %s.", ReturnName(playerid, 0), GetLocation(plocx, plocy, plocz));
        SafeSetPlayerPos(playerid, plocx, plocy+5, plocz);
		return 1;
	}
	else if (rb == 4)
	{
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
        GetPlayerPos(playerid, plocx, plocy, plocz);
        GetPlayerFacingAngle(playerid,ploca);
        CreateRoadblock(1238,plocx,plocy,plocz+0.2,ploca);
        //GameTextForPlayer(playerid,"~w~Cone ~g~Placed!",3000,1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah jatuh kerucut.", ReturnName(playerid, 0));
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[DISPATCHER]: %s telah menjatuhkan tanda penghalang jalan di %s.", ReturnName(playerid, 0), GetLocation(plocx, plocy, plocz));
	    return 1;
	}
	else if (rb == 5)
	{
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
        GetPlayerPos(playerid, plocx, plocy, plocz);
        GetPlayerFacingAngle(playerid,ploca);
        CreateRoadblock(1425,plocx,plocy,plocz+0.6,ploca);
        //GameTextForPlayer(playerid,"~w~Sign ~g~Placed!",3000,1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menjatuhkan sebuah tanda", ReturnName(playerid, 0));
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[DISPATCHER]: %s telah menjatuhkan tanda penghalang jalan di %s.", ReturnName(playerid, 0), GetLocation(plocx, plocy, plocz));
	    return 1;
	}
	else if (rb == 6)
	{
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
        GetPlayerPos(playerid, plocx, plocy, plocz);
        GetPlayerFacingAngle(playerid,ploca);
        CreateRoadblock(3265,plocx,plocy,plocz-0.5,ploca);
        //GameTextForPlayer(playerid,"~w~Sign ~g~Placed!",3000,1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menjatuhkan sebuah tanda.", ReturnName(playerid, 0));
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[DISPATCHER]: %s telah menjatuhkan tanda penghalang jalan di %s.", ReturnName(playerid, 0), GetLocation(plocx, plocy, plocz));
    	return 1;
	}
	else if (rb == 7)
	{
	    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
        GetPlayerPos(playerid, plocx, plocy, plocz);
        GetPlayerFacingAngle(playerid,ploca);
        CreateRoadblock(3091,plocx,plocy,plocz+0.5,ploca+180);
        //GameTextForPlayer(playerid,"~w~Sign ~g~Placed!",3000,1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menjatuhkan sebuah tanda.", ReturnName(playerid, 0));
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[DISPATCHER]: %s telah menjatuhkan tanda penghalang jalan di %s.", ReturnName(playerid, 0), GetLocation(plocx, plocy, plocz));
	    return 1;
	}
	return 1;
}

CMD:rallrb(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang pegawai negeri sipil.");

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mengambil semua objek penghalang jalan.", ReturnName(playerid, 0));
	SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[DISPATCHER]: %s telah mengambil semua objek penghalang jalan.", ReturnName(playerid, 0));
	for(new i = 0; i < sizeof(Roadblocks); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 100, Roadblocks[i][sX], Roadblocks[i][sY], Roadblocks[i][sZ]))
        {
	  	    if(Roadblocks[i][sCreated] == 1)
	  	    {
	  	        Roadblocks[i][sCreated] = 0;
	            Roadblocks[i][sX] = 0.0;
	            Roadblocks[i][sY] = 0.0;
	            Roadblocks[i][sZ] = 0.0;
	            DestroyDynamicObject(Roadblocks[i][sObject]);
	  	    }
  	    }
	}
	return 1;
}

CMD:rrb(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang pegawai negeri sipil.");

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mengambil objek penghalang jalan.", ReturnName(playerid, 0));
	SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[DISPATCHER]: %s telah mengambil objek penghalang jalan.", ReturnName(playerid, 0));
    for(new i = 0; i < sizeof(Roadblocks); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 5.0, Roadblocks[i][sX], Roadblocks[i][sY], Roadblocks[i][sZ]))
        {
  	        if(Roadblocks[i][sCreated] == 1)
            {
                Roadblocks[i][sCreated] = 0;
                Roadblocks[i][sX] = 0.0;
                Roadblocks[i][sY] = 0.0;
                Roadblocks[i][sZ] = 0.0;
                DestroyDynamicObject(Roadblocks[i][sObject]);
                return 1;
  	        }
  	    }
  	}
    return 1;
}

/*	CMD:changename(playerid, params[])
{
	if (!IsPlayerInRangeOfPoint(playerid, 3.0, 361.8299, 173.5183, 1008.3828))
	    return SendErrorMessage(playerid, "Kamu tidak berada di City Hall.");

	if (isnull(params) || strlen(params) > 24)
	    return SendSyntaxMessage(playerid, "/changename [nama baru]");

    if (!IsValidPlayerName(params))
	    return SendErrorMessage(playerid, "Format namamu salah. Contoh : Udin_Isabella");

	static
	    query[128];

	format(query, sizeof(query), "SELECT `Username` FROM `characters` WHERE `Character` = '%s'", SQL_ReturnEscaped(params));
	mysql_tquery(g_iHandle, query, "OnVerifyNameChange", "ds", playerid, params);

	return 1;
}
*/

CMD:acceptname(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Kamu tidak diizinkan menggunakan command ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/acceptname [playerid/nama]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (!strlen(PlayerData[userid][pNameChange]))
	    return SendErrorMessage(playerid, "Pemain itu belum meminta untuk mengganti namanya.");

	SendServerMessage(playerid, "Kamu menerima permintaan pengubahan nama %s menjadi %s.", ReturnName(userid, 0), PlayerData[userid][pNameChange]);
    SendServerMessage(userid, "%s telah menerima permintaan pengubahan namamu menjadi %s.", ReturnName(playerid, 0), PlayerData[userid][pNameChange]);

	ChangeName(userid, PlayerData[userid][pNameChange]);
	PlayerData[userid][pNameChange][0] = '\0';

	return 1;
}

CMD:declinename(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pAdmin] < 3) // di abuse yang mau CN
	    return SendErrorMessage(playerid, "Kamu tidak diizinkan menggunakan command ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/declinename [playerid/nama]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (!strlen(PlayerData[userid][pNameChange]))
	    return SendErrorMessage(playerid, "Pemain itu belum meminta untuk mengganti namanya.");

	SendServerMessage(playerid, "Kamu menolak permintaan %s untuk mengubah namanya menjadi %s.", ReturnName(userid, 0), PlayerData[userid][pNameChange]);
    SendServerMessage(userid, "%s telah menolak permintaan pengubahan namamu menjadi %s.", ReturnName(playerid, 0), PlayerData[userid][pNameChange]);

	PlayerData[userid][pNameChange][0] = '\0';

	return 1;
}

CMD:deleteaccount(playerid, params[])
{
	static
	    query[64];

    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (isnull(params) || strlen(params) > 24)
	    return SendSyntaxMessage(playerid, "/deleteaccount [username]");

    if (!IsValidPlayerName(params))
	    return SendErrorMessage(playerid, "Format nama salah.");

	foreach (new i : Player) if (!strcmp(PlayerData[i][pUsername], params, true)) {
	    return SendErrorMessage(playerid, "Kamu tidak bisa menghapus akun yang sedang online.");
	}
	format(query, sizeof(query), "SELECT * FROM `characters` WHERE `Username` = '%s'", SQL_ReturnEscaped(params));
	mysql_tquery(g_iHandle, query, "OnDeleteAccount", "ds", playerid, params);

	return 1;
}

CMD:doorbell(playerid, params[])
{
	new id = House_Nearest(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Kamu harus berada didekat rumah.");

	foreach (new i : Player) if (House_Inside(i) == id) {
	    SendClientMessage(i, COLOR_PURPLE, "** Ada orang yang memencet bel.");
	    PlayerPlaySound(i, 20801, 0, 0, 0);
	}
	PlayerPlaySoundEx(playerid, 20801);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memencet bel.", ReturnName(playerid, 0));
	return 1;
}

CMD:creategate(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	id = Gate_Create(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Limit gate sudah habis.");

	SendServerMessage(playerid, "Kamu berhasil membuat gate ID: %d.", id);
	return 1;
}

CMD:destroygate(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroygate [gate id]");

	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return SendErrorMessage(playerid, "ID gate tidak valid.");

	Gate_Delete(id);
	SendServerMessage(playerid, "Kamu berhasil menghancurkan gate ID: %d.", id);
	return 1;
}

CMD:editgate(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editgate [id] [TYPE]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[TYPE]:{FFFFFF} location, speed, radius, time, model, pos, move, pass, linkid, faction");
		return 1;
	}
	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return SendErrorMessage(playerid, "ID Gate tidak valid.");

    if (!strcmp(type, "location", true))
	{
		static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:angle;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		x += 3.0 * floatsin(-angle, degrees);
		y += 3.0 * floatcos(-angle, degrees);

		GateData[id][gatePos][0] = x;
		GateData[id][gatePos][1] = y;
		GateData[id][gatePos][2] = z;
		GateData[id][gatePos][3] = 0.0;
		GateData[id][gatePos][4] = 0.0;
		GateData[id][gatePos][5] = angle;

		SetDynamicObjectPos(GateData[id][gateObject], x, y, z);
		SetDynamicObjectRot(GateData[id][gateObject], 0.0, 0.0, angle);

		GateData[id][gateOpened] = false;

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan posisi dari gate ID: %d.", ReturnName(playerid, 0), id);
		return 1;
	}
	else if (!strcmp(type, "speed", true))
	{
	    static
	        Float:speed;

		if (sscanf(string, "f", speed))
		    return SendSyntaxMessage(playerid, "/editgate [id] [speed] [kecepatan]");

		if (speed < 0.0 || speed > 20.0)
		    return SendErrorMessage(playerid, "Tidak boleh dibawah 0 atau diatas 20.");

        GateData[id][gateSpeed] = speed;

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan kecepatan dari gate ID: %d menjadi %.2f.", ReturnName(playerid, 0), id, speed);
		return 1;
	}
	else if (!strcmp(type, "radius", true))
	{
	    static
	        Float:radius;

		if (sscanf(string, "f", radius))
		    return SendSyntaxMessage(playerid, "/editgate [id] [radius] [radius terbuka 1-20]");

		if (radius < 0.0 || radius > 20.0)
		    return SendErrorMessage(playerid, "Radius tidak boleh dibawah 0 atau diatas 20.");

        GateData[id][gateRadius] = radius;

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan radius dari gate ID: %d menjadi %.2f.", ReturnName(playerid, 0), id, radius);
		return 1;
	}
	else if (!strcmp(type, "time", true))
	{
	    static
	        time;

		if (sscanf(string, "d", time))
		    return SendSyntaxMessage(playerid, "/editgate [id] [time] [close time] (0 untuk mematikannya)");

		if (time < 0 || time > 60000)
		    return SendErrorMessage(playerid, "Tidak bisa dibawah 0 atau lebih dari 60000.");

        GateData[id][gateTime] = time;

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan waktu menutup gate ID: %d menjadi %d.", ReturnName(playerid, 0), id, time);
		return 1;
	}
	else if (!strcmp(type, "model", true))
	{
	    static
	        model;

		if (sscanf(string, "d", model))
		    return SendSyntaxMessage(playerid, "/editgate [id] [model] [model gate]");

		if (!IsValidObjectModel(model))
		    return SendErrorMessage(playerid, "Model objek tidak valid.");

        GateData[id][gateModel] = model;

		DestroyDynamicObject(GateData[id][gateObject]);
		GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan model gate ID: %d menjadi %d.", ReturnName(playerid, 0), id, model);
		return 1;
	}
    else if (!strcmp(type, "pos", true))
	{
	    ResetEditing(playerid);
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		PlayerData[playerid][pEditGate] = id;
		PlayerData[playerid][pEditType] = 1;

		SendServerMessage(playerid, "Kamu menetapkan posisi dari gate ID: %d.", id);
		return 1;
	}
	else if (!strcmp(type, "move", true)) // pos sama move nya ga ke excecute jadi dia ga mau save posisi
	{
	    ResetEditing(playerid);
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		PlayerData[playerid][pEditGate] = id;
		PlayerData[playerid][pEditType] = 2;

		SendServerMessage(playerid, "Kamu menetapkan moving position dari gate ID: %d.", id);
		return 1;
	}
	else if (!strcmp(type, "linkid", true))
	{
	    static
	        linkid = -1;

		if (sscanf(string, "d", linkid))
		    return SendSyntaxMessage(playerid, "/editgate [id] [linkid] [gate link] (-1 for none)");

        if ((linkid < -1 || linkid >= MAX_GATES) || (linkid != -1 && !GateData[linkid][gateExists]))
	    	return SendErrorMessage(playerid, "You have specified an invalid gate ID.");

        GateData[id][gateLinkID] = (linkid == -1) ? (-1) : (GateData[linkid][gateID]);
		Gate_Save(id);

		if (id == -1)
			SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the faction of gate ID: %d to no gate.", ReturnName(playerid, 0), id);

		else
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan faction of gate ID: %d to ID: %d.", ReturnName(playerid, 0), id, linkid);

		return 1;
	}
	else if (!strcmp(type, "faction", true))
	{
	    static
	        factionid = -1;

		if (sscanf(string, "d", factionid))
		    return SendSyntaxMessage(playerid, "/editgate [id] [faction] [gate faction] (-1 untuk membatalkan faction milik siapa)");

        if ((factionid < -1 || factionid >= MAX_FACTIONS) || (factionid != -1 && !FactionData[factionid][factionExists]))
	    	return SendErrorMessage(playerid, "ID faction tidak valid.");

        GateData[id][gateFaction] = (factionid == -1) ? (-1) : (FactionData[factionid][factionID]);
		Gate_Save(id);

		if (factionid == -1)
			SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan gate ID: %d bukan milik faction apapun.", ReturnName(playerid, 0), id);

		else
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan gate ID: %d menjadi milik faction \"%s\".", ReturnName(playerid, 0), id, FactionData[factionid][factionName]);

		return 1;
	}
	else if (!strcmp(type, "pass", true))
	{
	    static
	        pass[32];

		if (sscanf(string, "s[32]", pass))
		    return SendSyntaxMessage(playerid, "/editgate [id] [pass] [gate password] (Gunakan '/editgate [id] pass none' untuk menghilangkannya)");

		if (!strcmp(params, "none", true))
			GateData[id][gatePass][0] = 0;

		else format(GateData[id][gatePass], 32, pass);

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan password gate ID: %d menjadi %s.", ReturnName(playerid, 0), id, pass);
		return 1;
	}
	return 1;
}

CMD:givecash(playerid, params[])
{
	static
		userid,
	    amount;

	if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ud", userid, amount))
		return SendSyntaxMessage(playerid, "/givecash [playerid/nama] [jumlah]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	GiveMoney(userid, amount);

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah memberi uang senilai %s kepada %s.", ReturnName(playerid, 0), FormatNumber(amount), ReturnName(userid, 0));
	SendClientMessageEx(userid, COLOR_LIGHTRED, "[ADMIN] %s telah memberimu uang sebesar %s", ReturnName(playerid, 0), FormatNumber(amount));
	Log_Write("logs/admin_log.txt", "[%s] %s has given %s to %s.", ReturnDate(), ReturnName(playerid, 0), FormatNumber(amount), ReturnName(userid, 0));
	return 1;
}

CMD:fine(playerid, params[])
{
	static
		userid,
	    amount,
		reason[128];

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "uds", userid, amount, reason))
		return SendSyntaxMessage(playerid, "/fine [playerid/nama] [jumlah] [reason]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	GiveMoney(userid, -amount);

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah didenda senilai %s reason: %s .", ReturnName(userid, 0), FormatNumber(amount), reason);// perlu gini kah? sendClientMessageEx?
	SendClientMessageEx(userid, COLOR_LIGHTRED, "[ADMIN-FINE]%s Telah menyita uangmu sebesar %s reason: %s.", ReturnName(playerid, 0), FormatNumber(amount), reason);
 	Log_Write("logs/admin_log.txt", "[%s] %s has fine %s to %s reason: %s .", ReturnDate(), ReturnName(playerid, 0), FormatNumber(amount), ReturnName(userid, 0), reason);

	return 1;
}

CMD:usedrug(playerid, params[])
{
	if (isnull(params))
	{
	    SendSyntaxMessage(playerid, "/usedrug [TYPE]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[TYPE]:{FFFFFF} marijuana, cocaine, heroin, steroids");
		return 1;
	}
	if (PlayerData[playerid][pDrugTime] > 0)
	    return SendErrorMessage(playerid, "Mohon tunggu sampai efeknya sudah mereda terlebih dahulu.");

	if (!strcmp(params, "marijuana", true))
	{
	    if (!Inventory_HasItem(playerid, "Lighter"))
     		return SendErrorMessage(playerid, "Kamu butuh lighter untuk menyalakan Marijuana milikmu. Dapatkan di toko 24/7.");

	    if (Inventory_Count(playerid, "Marijuana") < 2)
	        return SendErrorMessage(playerid, "Kamu membutuhkan setidaknya 2 gram ganja/Marijuana.");

        PlayerData[playerid][pDrugTime] = 20;
		PlayerData[playerid][pDrugUsed] = 1;

		Inventory_Remove(playerid, "Marijuana", 2);
		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan korek api dan menyalakan sambungan.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "cocaine", true))
	{
	    if (Inventory_Count(playerid, "Cocaine") < 2)
	        return SendErrorMessage(playerid, "Kamu membutuhkan setidaknya 2 gram cocaine.");

        if (ReturnArmour(playerid) > 49)
	    	return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan kokain, karena Kamu memiliki Armored Vest.");

        PlayerData[playerid][pDrugTime] = 35;
		PlayerData[playerid][pDrugUsed] = 2;

		Inventory_Remove(playerid, "Cocaine", 2);

		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengambil beberapa kokain dan mendengusnya.", ReturnName(playerid, 0));
		GivePlayerArmour(playerid, 20);
		SendServerMessage(playerid, "Dengan menggunakan kokain, Kamu sudah menerima Armor +20.");
	}
	else if (!strcmp(params, "heroin", true))
	{
	    if (!Inventory_HasItem(playerid, "Lighter"))
     		return SendErrorMessage(playerid, "Kamu membutuhkan Lighter untuk menyiapkannya heroin. Dapatkan sebutir di 24/7.");

	    if (Inventory_Count(playerid, "Heroin") < 2)
	        return SendErrorMessage(playerid, "Kamu butuh setidaknya 2 gram heroin.");

        PlayerData[playerid][pDrugTime] = 30;
		PlayerData[playerid][pDrugUsed] = 3;

		Inventory_Remove(playerid, "Heroin", 2);

		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengambil beberapa heroin dan menyuntikkannya.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "steroids", true))
	{
	    if (!Inventory_HasItem(playerid, "Steroids"))
	        return SendErrorMessage(playerid, "Kamu membutuhkan setidaknya satu pil steroid.");

		if (ReturnHealth(playerid) <= 5)
		    return SendErrorMessage(playerid, "Kesehatanmu terlalu rendah untuk mengkonsumsi steroid.");

        PlayerData[playerid][pDrugTime] = 60;
		PlayerData[playerid][pDrugUsed] = 4;

		SetPlayerHealth(playerid, ReturnHealth(playerid) - 5);
		Inventory_Remove(playerid, "Steroids", 2);

		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan beberapa steroid dan menelannya.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:fingerprint(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Kamu harus menjadi seorang petugas polisi.");

	if (PlayerData[playerid][pFingerTime] > 0)
	    return SendErrorMessage(playerid, "Kamu sudah menggunakan pemindai sidik jari.");

    for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if (DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2])) {
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s menjalankan pemindai sidik jari di atas item.", ReturnName(playerid, 0));

        PlayerData[playerid][pFingerTime] = 3;
        PlayerData[playerid][pFingerItem] = i;

        return 1;
	}
	SendErrorMessage(playerid, "Tidak ada item didekatmu.");
	return 1;
}

CMD:unequip(playerid, params[])
{
	RemovePlayerAttachedObject(playerid,1);
	RemovePlayerAttachedObject(playerid,2);
	RemovePlayerAttachedObject(playerid,3);
	RemovePlayerAttachedObject(playerid,4);
	RemovePlayerAttachedObject(playerid,5);
	RemovePlayerAttachedObject(playerid,6);
	SendClientMessage(playerid, COLOR_WHITE,"Kamu menghapus equipment milikmu.");
    return 1;
}

CMD:createcar(playerid, params[])
{
	static
		model[32],
		color1,
		color2,
		id = -1,
		type = 0,
		addsiren = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "s[32]I(-1)I(-1)I(0)I(0)", model, color1, color2, type, addsiren))
 	{
	 	SendSyntaxMessage(playerid, "/createcar [model id/nama mobil] [color 1] [color 2] <faction>");
	 	SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Police | 2: News | 3: Medical | 4: Government | 5: Company | 6: Rent");
	 	return 1;
	}
	if ((model[0] = GetVehicleModelByName(model)) == 0)
	    return SendErrorMessage(playerid, "Model ID tidak valid.");

	static
	    Float:x,
		Float:y,
		Float:z,
		Float:angle;

    GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	id = Car_Create(0, model[0], x, y, z, angle, color1, color2, type, addsiren);

	if (id == -1)
	    return SendErrorMessage(playerid, "Slot Vehicle server habis.");

	SetPlayerPosEx(playerid, x, y, z + 2, 1000);
	SendServerMessage(playerid, "Kamu berhasil membuat vehicle ID: %d.", CarData[id][carVehicle]);
	return 1;
}

CMD:destroycar(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
 	{
	 	if (IsPlayerInAnyVehicle(playerid))
		 	id = GetPlayerVehicleID(playerid);

		else return SendSyntaxMessage(playerid, "/destroycar [vehicle id]");
	}
	if (!IsValidVehicle(id) || Car_GetID(id) == -1)
	    return SendErrorMessage(playerid, "Vehicle ID tidak valid.");

	Car_Delete(Car_GetID(id));
	SendServerMessage(playerid, "Kamu berhasil menghancurkan vehicle ID: %d.", id);
	return 1;
}

CMD:backpack(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "Backpack"))
	    return SendErrorMessage(playerid, "Kamu tidak memiliki backpack.");

	Backpack_Open(playerid);
	return 1;
}

CMD:dropbackpack(playerid, params[])
{
	new
		id = GetPlayerBackpack(playerid);

	if (!Inventory_HasItem(playerid, "Backpack") || id == -1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki backpack.");

	if (!Backpack_GetItems(id))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menjatuhkan backpack kosong.");

    if (IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawned(playerid))
    	return SendErrorMessage(playerid, "Kamu tidak bisa menjatuhkan backpackmu sekarang.");

	static
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);

	BackpackData[id][backpackPlayer] = 0;
    BackpackData[id][backpackPos][0] = x;
    BackpackData[id][backpackPos][1] = y;
    BackpackData[id][backpackPos][2] = z;
    BackpackData[id][backpackInterior] = GetPlayerInterior(playerid);
    BackpackData[id][backpackWorld] = GetPlayerVirtualWorld(playerid);

	Backpack_Refresh(id);
	Backpack_Save(id);

	Inventory_Remove(playerid, "Backpack");
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menjatuhkan backpack miliknya.", ReturnName(playerid, 0));

	SetAccessories(playerid);

	return 1;
}

CMD:setitem(playerid, params[])
{
	static
	    userid,
		item[32],
		amount;

	if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "uds[32]", userid, amount, item))
	    return SendSyntaxMessage(playerid, "/setitem [playerid/nama] [jumlah] [nama item]");

    if (IsFurnitureItem(item))
	{
	    for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (!strcmp(g_aFurnitureData[i][e_FurnitureName], item, true))
		{
	        Inventory_Set(userid, g_aFurnitureData[i][e_FurnitureName], g_aFurnitureData[i][e_FurnitureModel], amount);

			SendServerMessage(playerid, "Kamu mengubah jumlah furnitur \"%s\" milik %s menjadi %d.", item,ReturnName(userid, 0), amount);
			return 1;
		}
	}
	else for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if (!strcmp(g_aInventoryItems[i][e_InventoryItem], item, true))
	{
	    if (!strcmp(item, "Cellphone", true)) {
	        PlayerData[userid][pPhone] = random(90000) + 10000;
	    }
        Inventory_Set(userid, g_aInventoryItems[i][e_InventoryItem], g_aInventoryItems[i][e_InventoryModel], amount);

		return SendServerMessage(playerid, "Kamu mengubah jumlah item \"%s\" milik %s menjadi %d.", item, ReturnName(userid, 0), amount);
	}
	SendErrorMessage(playerid, "Nama item salah (gunakan /itemlist untuk listnya).");
	return 1;
}

CMD:itemlist(playerid, params[])
{
	static
	    string[1024];

	if (!strlen(string)) {
		for (new i = 0; i < sizeof(g_aInventoryItems); i ++) {
			format(string, sizeof(string), "%s%s\n", string, g_aInventoryItems[i][e_InventoryItem]);
		}
	}
	return Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, "List item", string, "Pilih", "Batal");
}

CMD:createimpound(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
 		return SendErrorMessage(playerid, "Kamu hanya bisa menciptakan impound di luar interior.");

	GetPlayerPos(playerid, x, y, z);

	id = Impound_Create(x, y, z);

	if (id == -1)
	    return SendErrorMessage(playerid, "Slot impound habis.");

	SendServerMessage(playerid, "Kamu berhasil membuat impound lot ID: %d.", id);
	return 1;
}

CMD:destroyimpound(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyimpound [impound id]");

	if ((id < 0 || id >= MAX_IMPOUND_LOTS) || !ImpoundData[id][impoundExists])
	    return SendErrorMessage(playerid, "ID impound tidak valid.");

	Impound_Delete(id);
	SendServerMessage(playerid, "Kamu berhasil menghancurkan impound lot ID: %d.", id);
	return 1;
}

CMD:editimpound(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editimpound [id] [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} location, release");
		return 1;
	}
	if ((id < 0 || id >= MAX_IMPOUND_LOTS) || !ImpoundData[id][impoundExists])
	    return SendErrorMessage(playerid, "ID impound tidak valid.");

	if (!strcmp(type, "location", true))
	{
	    static
	        Float:x,
	        Float:y,
	        Float:z;

	    GetPlayerPos(playerid, x, y, z);

		ImpoundData[id][impoundLot][0] = x;
		ImpoundData[id][impoundLot][1] = y;
		ImpoundData[id][impoundLot][2] = z;

		Impound_Refresh(id);
		Impound_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan lokasi dari impound ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "release", true))
	{
	    static
	        Float:x,
	        Float:y,
	        Float:z,
			Float:angle;

	    GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		ImpoundData[id][impoundRelease][0] = x;
		ImpoundData[id][impoundRelease][1] = y;
		ImpoundData[id][impoundRelease][2] = z;
		ImpoundData[id][impoundRelease][3] = angle;

		Impound_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan release point untuk impound ID: %d.", ReturnName(playerid, 0), id);
	}
	return 1;
}

CMD:releasecar(playerid, params[])
{
	if (!IsPlayerInRangeOfPoint(playerid, 3.0, 361.1653, 175.8127, 1008.3828))
	    return SendErrorMessage(playerid, "Kamu harus berada di City Hall untuk melepaskan kendaraan.");

	new
	    string[32 * MAX_OWNABLE_CARS],
		count;

	for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (count < MAX_OWNABLE_CARS && CarData[i][carExists] && Car_IsOwner(playerid, i) && CarData[i][carImpounded] != -1)
	{
		format(string, sizeof(string), "%s%d: %s (%s)\n", string, count + 1, ReturnVehicleName(CarData[i][carVehicle]), FormatNumber(CarData[i][carImpoundPrice]));
        ListedVehicles[playerid][count++] = i;
	}
	if (!count)
	    SendErrorMessage(playerid, "Kamu tidak memiliki kendaraan yang disita.");

	else Dialog_Show(playerid, ReleaseCar, DIALOG_STYLE_LIST, "Bebaskan kendaraan", string, "Pilih", "Batal");
	return 1;
}

CMD:tow(playerid, params[])
{
	if (GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	    return SendErrorMessage(playerid, "Kamu tidak mengendarai truk derek.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Kamu bukan seorang pengemudi.");

	new vehicleid = GetVehicleFromBehind(GetPlayerVehicleID(playerid));

	if (vehicleid == INVALID_VEHICLE_ID)
	    return SendErrorMessage(playerid, "Tidak ada kendaraan dalam jangkauan.");

	if (!IsDoorVehicle(vehicleid) || IsAPlane(vehicleid) || IsABoat(vehicleid) || IsAHelicopter(vehicleid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menarik kendaraan ini.");

	AttachTrailerToVehicle(vehicleid, GetPlayerVehicleID(playerid));
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mengaitkan sebuah %s ke truk dereknya.", ReturnName(playerid, 0), ReturnVehicleName(vehicleid));
	return 1;
}

CMD:untow(playerid, params[])
{
	if (GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	    return SendErrorMessage(playerid, "Kamu tidak mengendarai truk derek.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Kamu bukan seorang pengemudi.");

	new
	    trailerid = GetVehicleTrailer(GetPlayerVehicleID(playerid));

    if (!trailerid)
	    return SendErrorMessage(playerid, "Tidak ada kendaraan yang terhubung ke truk.");

	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah melepas %s dari truk derek.", ReturnName(playerid, 0), ReturnVehicleName(trailerid));

	return 1;
}

CMD:impound(playerid, params[])
{
	new
		price,
		id = Impound_Nearest(playerid),
		vehicleid = GetPlayerVehicleID(playerid);

    if (GetFactionType(playerid) != FACTION_GOV)
		return SendErrorMessage(playerid, "Kamu harus menjadi seorang petugas goverment.");

    if (sscanf(params, "d", price))
        return SendSyntaxMessage(playerid, "/impound [harga]");

	if (price < 1 || price > 1000)
	    return SendErrorMessage(playerid, "Harganya tidak bisa di atas $ 1.000 atau di bawah $ 1.");

	if (GetVehicleModel(vehicleid) != 525)
	    return SendErrorMessage(playerid, "Kamu tidak mengendarai truk derek.");

	if (id == -1)
	    return SendErrorMessage(playerid, "Kamu tidak berada dijarak benda yang ingin disita.");

	if (!GetVehicleTrailer(vehicleid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menarik kendaraan ini.");

 	vehicleid = Car_GetID(GetVehicleTrailer(vehicleid));

	if (vehicleid == -1)
	    return SendErrorMessage(playerid, "Kamu tidak bisa menarik kendaraan ini.");

	if (CarData[vehicleid][carImpounded] != -1)
	    return SendErrorMessage(playerid, "Kendaraan ini sudah disita.");

	CarData[vehicleid][carImpounded] = ImpoundData[id][impoundID];
	CarData[vehicleid][carImpoundPrice] = price;

	Tax_AddMoney(price);

	GetVehiclePos(CarData[vehicleid][carVehicle], CarData[vehicleid][carPos][0], CarData[vehicleid][carPos][1], CarData[vehicleid][carPos][2]);
	Car_Save(vehicleid);

	SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s telah menyita %s dengan tebusan %s.", ReturnName(playerid, 0), ReturnVehicleModelName(CarData[vehicleid][carModel]), FormatNumber(price));
 	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));

	return 1;
}

CMD:channel(playerid, params[])
{
	new channel;

	if (!Inventory_HasItem(playerid, "Portable Radio"))
	    return SendErrorMessage(playerid, "Kamu harus memiliki sebuah Portable Radio.");

	if (sscanf(params, "d", channel))
 	{
	 	SendSyntaxMessage(playerid, "/channel [radio channel] (0 untuk mematikannya)");

	 	if (PlayerData[playerid][pChannel] > 0)
			SendClientMessageEx(playerid, COLOR_YELLOW, "[NOTE]:{FFFFFF} Radio channelmu saat ini adalah %d.", PlayerData[playerid][pChannel]);

		return 1;
	}
	if (channel < 0 || channel > 999999)
	    return SendErrorMessage(playerid, "Channel tidak boleh dibawah 1 atau lebih dari 999,999.");

	PlayerData[playerid][pChannel] = channel;

	if (channel == 0)
	    SendServerMessage(playerid, "Kamu mematikan Portable Radiomu.");

	else SendServerMessage(playerid, "Kamu mengubah radio channel ke %d (\"/r [teks]\" untuk berbicara).", channel);
	return 1;
}

CMD:channel2(playerid, params[])
{
	new channel;
	if (!Inventory_HasItem(playerid, "Portable Radio"))
	    return SendErrorMessage(playerid, "Kamu harus memiliki sebuah Portable Radio.");

	if (sscanf(params, "d", channel))
 	{
	 	SendSyntaxMessage(playerid, "/channel2 [radio channel] (0 untuk mematikannya)");

	 	if (PlayerData[playerid][pChannel2] > 0)
			SendClientMessageEx(playerid, COLOR_YELLOW, "[NOTE]:{FFFFFF} Radio channelmu saat ini adalah %d.", PlayerData[playerid][pChannel2]);

		return 1;
	}
	if (channel < 0 || channel > 999999)
	    return SendErrorMessage(playerid, "Channel tidak boleh dibawah 1 atau lebih dari 999,999.");

	PlayerData[playerid][pChannel2] = channel;

	if (channel == 0)
	    SendServerMessage(playerid, "Kamu mematikan Portable Radiomu.");

	else SendServerMessage(playerid, "Kamu mengubah radio channel ke %d (\"/r2 [teks]\" untuk berbicara).", channel);
	return 1;
}

CMD:channel3(playerid, params[])
{
	new channel;

	if (!Inventory_HasItem(playerid, "Portable Radio"))
	    return SendErrorMessage(playerid, "Kamu harus memiliki sebuah Portable Radio.");

	if (sscanf(params, "d", channel))
 	{
	 	SendSyntaxMessage(playerid, "/channel3 [radio channel] (0 untuk mematikannya)");

	 	if (PlayerData[playerid][pChannel3] > 0)
			SendClientMessageEx(playerid, COLOR_YELLOW, "[NOTE]:{FFFFFF} Radio channelmu saat ini adalah %d.", PlayerData[playerid][pChannel3]);

		return 1;
	}
	if (channel < 0 || channel > 999999)
	    return SendErrorMessage(playerid, "Channel tidak boleh dibawah 1 atau lebih dari 999,999.");

	PlayerData[playerid][pChannel3] = channel;

	if (channel == 0)
	    SendServerMessage(playerid, "Kamu mematikan Portable Radiomu.");

	else SendServerMessage(playerid, "Kamu mengubah radio channel ke %d (\"/r3 [teks]\" untuk berbicara).", channel);
	return 1;
}
CMD:levelup(playerid, params[])
{
	if(PlayerData[playerid][pChannel4] >= 1)
	{
			new nxtlevel = PlayerData[playerid][pChannel4]+1;
			/*new costlevel = nxtlevel*levelcost;*/
			new expamount = nxtlevel*levelexp;

			if (PlayerData[playerid][pPlayingHours] < expamount)
			{
				new string[58];
				format(string, sizeof(string), "Anda Perlu %d Point Untuk level selanjutnya.", expamount - PlayerData[playerid][pPlayingHours]);
				SendClientMessageEx(playerid, COLOR_LIGHTGREEN, string);
				return 1;
			}
			else
			{
				new string[92];
				format(string, sizeof(string), "~g~LEVEL UP~n~~w~Sekarang kamu level %d", nxtlevel);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			 	PlayerData[playerid][pChannel4]++;
				PlayerData[playerid][pPlayingHours] = PlayerData[playerid][pPlayingHours]-expamount;
				SetPlayerScore(playerid, PlayerData[playerid][pChannel4]);
				GameTextForPlayer(playerid, string, 5000, 1);
				if(PlayerData[playerid][pChannel4] == 6)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTGREEN, "Newbie chat otomatis dimatikan ketika sudah meraih level 6.");
				}
			}
	}
	else if(PlayerData[playerid][pChannel4] == 0)
	{
			new nxtlevel = PlayerData[playerid][pChannel4]+1;
			//new costlevel = nxtlevel*levelcost;
			new expamount = 1;

			if (PlayerData[playerid][pPlayingHours] < expamount)
			{
				new string[58];
				format(string, sizeof(string), "Anda Perlu %d Point Untuk level selanjutnya.", expamount - PlayerData[playerid][pPlayingHours]);
				SendClientMessageEx(playerid, COLOR_LIGHTGREEN, string);
				return 1;
			}
			else
			{
				new string[92];
				format(string, sizeof(string), "~g~LEVEL UP~n~~w~You are now Level %d", nxtlevel);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
    			PlayerData[playerid][pChannel4]++;
				PlayerData[playerid][pPlayingHours] = PlayerData[playerid][pPlayingHours]-expamount;
				GameTextForPlayer(playerid, string, 5000, 1);
				SetPlayerScore(playerid, PlayerData[playerid][pChannel4]);
			}
	}
	return 1;
}
CMD:r(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r1 [Radio IC]");

    if (!Inventory_HasItem(playerid, "Portable Radio"))
	    return SendErrorMessage(playerid, "Kamu harus memiliki sebuah Radio Portable ,belilah di Retail Shop.");

	if (!PlayerData[playerid][pChannel])
	    return SendErrorMessage(playerid, "Portable radio milikmu tidak kamu hidupkan (/channel).");
	static
	    string[128];
	if(PlayerData[playerid][pChannel] == 911 && GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "Ini hanya frekuensi khusus Police department.");
	if(PlayerData[playerid][pChannel] == 912 && GetFactionType(playerid) != FACTION_MEDIC) return SendErrorMessage(playerid, "Ini hanya frekuensi khusus Fire Department.");
	if(PlayerData[playerid][pChannel] == 913 && GetFactionType(playerid) != FACTION_GOV) return SendErrorMessage(playerid, "Ini hanya frekuensi khusus San Andreas Government.");
	if (strlen(params) > 64)
	{
		format(string, sizeof(string), "** [RADIO: %d] %s: %.64s",PlayerData[playerid][pChannel],ReturnName(playerid, 0), params);
		SendRadioMessage(PlayerData[playerid][pChannel], COLOR_GREEN, string);
		format(string, sizeof(string), "...%s **",params[64]);
		SendRadioMessage(PlayerData[playerid][pChannel], COLOR_GREEN, string);
		SendNearbyMessage(playerid, 5.0, COLOR_GREY, "** (Radio) %s: %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 5.0, COLOR_GREY, "...%s **", params[64]);
	}
	else {
		format(string, sizeof(string),"** [RADIO: %d] %s: %s **", PlayerData[playerid][pChannel],ReturnName(playerid, 0), params);
		SendRadioMessage(PlayerData[playerid][pChannel], COLOR_RADIOCHAT, string);
		SendNearbyMessage(playerid, 5.0, COLOR_GREY, "** (Radio) %s: %.64s", ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:r2(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r2 [Radio IC]");

    if (!Inventory_HasItem(playerid, "Portable Radio"))
	    return SendErrorMessage(playerid, "Kamu harus memiliki sebuah Radio Portable, belilah di Retail Shop.");

	if (!PlayerData[playerid][pChannel2])
	    return SendErrorMessage(playerid, "Portable radio milikmu tidak kamu hidupkan (/channel2).");
	static
	    string[128];
	if(PlayerData[playerid][pChannel2] == 911 && GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "Ini hanya frekuensi khusus Police department.");
	if(PlayerData[playerid][pChannel2] == 912 && GetFactionType(playerid) != FACTION_MEDIC) return SendErrorMessage(playerid, "Ini hanya frekuensi khusus Fire Department.");
	if(PlayerData[playerid][pChannel2] == 913 && GetFactionType(playerid) != FACTION_GOV) return SendErrorMessage(playerid, "Ini hanya frekuensi khusus San Andreas Government.");
	if (strlen(params) > 64)
	{
		format(string, sizeof(string), "** [RADIO: %d] %s: %.64s",PlayerData[playerid][pChannel2],ReturnName(playerid, 0), params);
		SendRadioMessage2(PlayerData[playerid][pChannel2], COLOR_GREEN, string);
		format(string, sizeof(string), "...%s **",params[64]);
		SendRadioMessage2(PlayerData[playerid][pChannel2], COLOR_GREEN, string);
		SendNearbyMessage(playerid, 5.0, COLOR_GREY, "** (Radio) %s: %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 5.0, COLOR_GREY, "...%s **", params[64]);
	}
	else {
		format(string, sizeof(string),"** [RADIO: %d] %s: %s **", PlayerData[playerid][pChannel2],ReturnName(playerid, 0), params);
		SendRadioMessage2(PlayerData[playerid][pChannel2], COLOR_RADIOCHAT, string);
		SendNearbyMessage(playerid, 5.0, COLOR_GREY, "** (Radio) %s: %.64s", ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:r3(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r3 [Radio IC]");

    if (!Inventory_HasItem(playerid, "Portable Radio"))
	    return SendErrorMessage(playerid, "Kamu harus memiliki sebuah Radio Portable, belilah di Retail Shop.");

	if (!PlayerData[playerid][pChannel3])
	    return SendErrorMessage(playerid, "Portable radio milikmu tidak kamu hidupkan (/channel3).");

	static
	    string[128];
	if(PlayerData[playerid][pChannel3] == 911 && GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "Ini hanya frekuensi khusus Police department.");
	if(PlayerData[playerid][pChannel3] == 912 && GetFactionType(playerid) != FACTION_MEDIC) return SendErrorMessage(playerid, "Ini hanya frekuensi khusus Fire Department.");
	if(PlayerData[playerid][pChannel3] == 913 && GetFactionType(playerid) != FACTION_GOV) return SendErrorMessage(playerid, "Ini hanya frekuensi khusus San Andreas Government.");
	if (strlen(params) > 64)
	{
		format(string, sizeof(string), "** [RADIO: %d] %s: %.64s",PlayerData[playerid][pChannel3],ReturnName(playerid, 0), params);
		SendRadioMessage3(PlayerData[playerid][pChannel3], COLOR_GREEN, string);
		format(string, sizeof(string), "...%s **",params[64]);
		SendRadioMessage3(PlayerData[playerid][pChannel3], COLOR_GREEN, string);
		SendNearbyMessage(playerid, 5.0, COLOR_GREY, "** (Radio) %s: %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 5.0, COLOR_GREY, "...%s **", params[64]);
	}
	else {
		format(string, sizeof(string),"** [RADIO: %d] %s: %s **", PlayerData[playerid][pChannel3],ReturnName(playerid, 0), params);
		SendRadioMessage3(PlayerData[playerid][pChannel3], COLOR_RADIOCHAT, string);
		SendNearbyMessage(playerid, 5.0, COLOR_GREY, "** (Radio) %s: %.64s", ReturnName(playerid, 0), params);
	}
	return 1;
}
CMD:jobcmds(playerid, params[])
{
	switch (PlayerData[playerid][pJob])
	{
	    case 1: SendClientMessage(playerid, COLOR_CLIENT, "JOBS:{FFFFFF} /startdelivery, /stoploading, /unload, /shipments.");
	    case 2: SendClientMessage(playerid, COLOR_CLIENT, "JOBS:{FFFFFF} /repair, /nitrous.");
	    case 3: SendClientMessage(playerid, COLOR_CLIENT, "JOBS:{FFFFFF} /taxi, /acceptcall.");
	    case 4: SendClientMessage(playerid, COLOR_CLIENT, "JOBS:{FFFFFF} /loadcrate.");
	    case 5: SendClientMessage(playerid, COLOR_CLIENT, "JOBS:{FFFFFF} /mine.");
	    case 6: SendClientMessage(playerid, COLOR_CLIENT, "JOBS:{FFFFFF} /sellfood.");
	    case 7: SendClientMessage(playerid, COLOR_CLIENT, "JOBS:{FFFFFF} /takebag, /dumpgarbage, /findgarbage.");
	    case 8: SendClientMessage(playerid, COLOR_CLIENT, "JOBS:{FFFFFF} /sorting.");
	    case 9: SendClientMessage(playerid, COLOR_CLIENT, "JOBS:{FFFFFF} /craftparts /call 58696 ((Khusus Faction Ilegal)).");
	    case 10: SendClientMessage(playerid, COLOR_CLIENT, "JOBS:{FFFFFF} /log, /chainsaw .");
	    default: SendErrorMessage(playerid, "Kamu tidak memiliki pekerjaan apapun saat ini.");
	}
	return 1;
}

CMD:createatm(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	id = ATM_Create(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Limit ATM sudah penuh.");

	SendServerMessage(playerid, "Kamu berhasil membuat ATM ID: %d.", id);
	return 1;
}

CMD:destroyatm(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyatm [atm id]");

	if ((id < 0 || id >= MAX_ATM_MACHINES) || !ATMData[id][atmExists])
	    return SendErrorMessage(playerid, "ID ATM tidak valid.");

	ATM_Delete(id);
	SendServerMessage(playerid, "Kamu menghancurkan ATM ID: %d.", id);
	return 1;
}

CMD:disablecp(playerid, params[])
{
	if (PlayerData[playerid][pDrivingTest])
	    return SendErrorMessage(playerid, "Kamu tidak bisa melakukan command ini ketika kamu sedang melakukan tes mengemudi.");

	new
		vehicleid = GetPlayerVehicleID(playerid);

	PlayerData[playerid][pCP] = 0;

	if (PlayerData[playerid][pSorting] != -1)
	{
	    PlayerData[playerid][pSorting] = -1;
		PlayerData[playerid][pSortCrate] = 0;

		RemovePlayerAttachedObject(playerid, 4);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if (PlayerData[playerid][pMinedRock])
	{
	    PlayerData[playerid][pMinedRock] = 0;
		PlayerData[playerid][pMineCount] = 0;

		RemovePlayerAttachedObject(playerid, 4);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if (PlayerData[playerid][pUnloading] != -1)
	{
	    PlayerData[playerid][pUnloading] = -1;
	    PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
	}
	if (PlayerData[playerid][pLoading])
	{
	    PlayerData[playerid][pLoading] = 0;
	    PlayerData[playerid][pLoadType] = 0;
	}
	if (PlayerData[playerid][pLoadCrate])
 	{
  		PlayerData[playerid][pLoadCrate] = 0;

		RemovePlayerAttachedObject(playerid, 4);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if (IsPlayerInWarehouse(playerid) && GetVehicleModel(vehicleid) == 530 && CoreVehicles[vehicleid][vehLoadType] == 7)
	{
 		CoreVehicles[vehicleid][vehLoadType] = 0;
 		CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;

   		DestroyDynamicObject(CoreVehicles[vehicleid][vehCrate]);
	}
    DisablePlayerCheckpoint(playerid);
    SendServerMessage(playerid, "Kamu membatalkan untuk menuju ke checkpoint.");
    return 1;
}

CMD:restart(playerid, params[])
{
	new time;

	if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (g_ServerRestart)
	{
	    TextDrawHideForAll(gServerTextdraws[3]);

	    g_ServerRestart = 0;
	    g_RestartTime = 0;

	    return SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s telah membatalkan untuk merestart server.", ReturnName(playerid, 0));
	}
	if (sscanf(params, "d", time))
	    return SendSyntaxMessage(playerid, "/restart [detik]");

	if (time < 3 || time > 600)
	    return SendErrorMessage(playerid, "Detik hanya berkisar 3 sampai 600.");

    TextDrawShowForAll(gServerTextdraws[3]);

	g_ServerRestart = 1;
	g_RestartTime = time;

	SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s akan merestart server dalam %d detik.", ReturnName(playerid, 0), time);
	return 1;
}

CMD:properties(playerid, params[])
{
	new count;

	for (new i = 0; i < MAX_HOUSES; i ++) if (House_IsOwner(playerid, i)) {
	    SendClientMessageEx(playerid, COLOR_LIGHTGREEN, "** House ID: %d | Alamat: %s | Lokasi: %s", i, HouseData[i][houseAddress], GetLocation(HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]));

	    count++;
	}
	for (new i = 0; i < MAX_BUSINESSES; i ++) if (Business_IsOwner(playerid, i) && BusinessData[i][bizOwner] != 99999999) {
	    SendClientMessageEx(playerid, COLOR_DEPARTMENT, "** Business ID: %d | Nama: %s | Lokasi: %s", i, BusinessData[i][bizName], GetLocation(BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]));

	    count++;
	}
	if (!count)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki properti apapun.");

	return 1;
}

CMD:asellhouse(playerid, params[])
{
	new houseid = -1;

    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", houseid))
	    return SendSyntaxMessage(playerid, "/asellhouse [house ID]");

	if ((houseid < 0 || houseid >= MAX_HOUSES) || !HouseData[houseid][houseExists])
	    return SendErrorMessage(playerid, "ID Rumah tidak valid.");

	HouseData[houseid][houseOwner] = 0;

	House_Refresh(houseid);
	House_Save(houseid);

	SendServerMessage(playerid, "Kamu menjual rumah ID: %d.", houseid);
	return 1;
}

CMD:asellbiz(playerid, params[])
{
	new bizid = -1;

	if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", bizid))
	    return SendSyntaxMessage(playerid, "/asellbiz [business ID]");

	if ((bizid < 0 || bizid >= MAX_HOUSES) || !BusinessData[bizid][bizExists])
	    return SendErrorMessage(playerid, "ID Business tidak valid.");

	BusinessData[bizid][bizOwner] = 0;

	Business_Refresh(bizid);
	Business_Save(bizid);

	SendServerMessage(playerid, "Kamu menjual business ID: %d.", bizid);
	return 1;
}

CMD:listcars(playerid, params[])
{
	new
	    Float:fX,
	    Float:fY,
	    Float:fZ,
		userid,
		count;

	if (sscanf(params, "u", userid))
	{
		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(playerid, i)) {
		    GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

		    SendClientMessageEx(playerid, COLOR_WHITE, "** ID: %d | Model: %s | Lokasi: %s", CarData[i][carVehicle], ReturnVehicleModelName(CarData[i][carModel]), GetLocation(fX, fY, fZ));
		    count++;
		}
		if (!count)
		    SendClientMessage(playerid, COLOR_WHITE, "Kamu tidak memiliki kendaraan apapun.");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	}
	else if (PlayerData[playerid][pAdmin] >= 3)
	{
		if (userid == INVALID_PLAYER_ID)
	    	return SendErrorMessage(playerid, "Player tidak valid.");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
  		SendClientMessageEx(playerid, COLOR_YELLOW, "Kendaraan milik %s (ID: %d):", ReturnName(userid, 0), userid);

		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(userid, i)) {
  			GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

			SendClientMessageEx(playerid, COLOR_WHITE, "** ID: %d | Model: %s | Lokasi: %s", CarData[i][carVehicle], ReturnVehicleModelName(CarData[i][carModel]), GetLocation(fX, fY, fZ));
			count++;
		}
		if (!count)
		    SendClientMessage(playerid, COLOR_WHITE, "Player tidak memiliki kendaraan apapun.");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	}
	return 1;
}

CMD:checkvehicles(playerid, params[])
{
	new
	    Float:fX,
	    Float:fY,
	    Float:fZ,
		userid,
		count;

    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "Kamu bukan seorang pegawai negeri.");

 	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/checkvehicles [playerid/nama]");

 	else if (PlayerData[playerid][pLogged])
	{
		if (userid == INVALID_PLAYER_ID)
			return SendErrorMessage(playerid, "Player tidak valid.");

		SendClientMessage(playerid, COLOR_GREY, "----------DATABASE PROPERTI SAN ANDREAS----------");
  		SendClientMessageEx(playerid, COLOR_ORANGE, "Kendaraan milik %s (ID: %d):", ReturnName(userid, 0), userid);

  		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(userid, i)) {
  			GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

			SendClientMessageEx(playerid, COLOR_WHITE, "** ID: %d | Model: %s | Lokasi: %s", CarData[i][carVehicle], ReturnVehicleModelName(CarData[i][carModel]), GetLocation(fX, fY, fZ));
			count++;
		}
		if (!count)
		    SendClientMessage(playerid, COLOR_WHITE, "Player tidak memiliki kendaraan.");

		SendClientMessage(playerid, COLOR_GREY, "----------DATABASE PROPERTI SAN ANDREAS----------");
	}
	return 1;
}

CMD:checkveh(playerid, params[])
{
	new
	    Float:fX,
	    Float:fY,
	    Float:fZ,
		userid,
		count;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

 	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/checkvehicles [playerid/nama]");

 	else if (PlayerData[playerid][pLogged])
	{
		if (userid == INVALID_PLAYER_ID)
			return SendErrorMessage(playerid, "Player tidak valid.");

		SendClientMessage(playerid, COLOR_GREY, "----------DATABASE PROPERTI SAN ANDREAS----------");
  		SendClientMessageEx(playerid, COLOR_ORANGE, "Kendaraan milik %s (ID: %d):", ReturnName(userid, 0), userid);

  		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(userid, i)) {
  			GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

			SendClientMessageEx(playerid, COLOR_WHITE, "** ID: %d | Model: %s | Lokasi: %s", CarData[i][carVehicle], ReturnVehicleModelName(CarData[i][carModel]), GetLocation(fX, fY, fZ));
			count++;
		}
		if (!count)
		    SendClientMessage(playerid, COLOR_WHITE, "Player tidak memiliki kendaraan.");

		SendClientMessage(playerid, COLOR_GREY, "----------DATABASE PROPERTI SAN ANDREAS----------");
	}
	return 1;
}

CMD:checkprop(playerid, params[])
{
	new
		userid,
		count;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

 	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/checkproperties [playerid/nama]");

 	else if (PlayerData[playerid][pLogged])
	{
		if (userid == INVALID_PLAYER_ID)
			return SendErrorMessage(playerid, "Player tidak valid.");

		SendClientMessage(playerid, COLOR_GREY, "----------DATABASE PROPERTI SAN ANDREAS----------");
  		SendClientMessageEx(playerid, COLOR_ORANGE, "Properti milik %s (ID: %d):", ReturnName(userid, 0), userid);

  		for (new i = 0; i < MAX_HOUSES; i ++) if (House_IsOwner(userid, i)) {
	    	SendClientMessageEx(playerid, COLOR_WHITE, "** House ID: %d | Alamat: %s | Lokasi: %s", i, HouseData[i][houseAddress], GetLocation(HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]));

	    	count++;
		}
		for (new i = 0; i < MAX_BUSINESSES; i ++) if (Business_IsOwner(userid, i) && BusinessData[i][bizOwner] != 99999999) {
	    	SendClientMessageEx(playerid, COLOR_WHITE, "** Business ID: %d | Nama: %s | Lokasi: %s", i, BusinessData[i][bizName], GetLocation(BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]));

	    	count++;
		}
		if (!count)
	    	return SendErrorMessage(playerid, "Player tidak memiliki properti.");

		SendClientMessage(playerid, COLOR_GREY, "----------DATABASE PROPERTI SAN ANDREAS----------");
	}
	return 1;
}

CMD:checkproperties(playerid, params[])
{
	new
		userid,
		count;

    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "Hanya pegawai negeri yang bisa menggunakan command ini.");

 	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/checkproperties [playerid/nama]");

 	else if (PlayerData[playerid][pLogged])
	{
		if (userid == INVALID_PLAYER_ID)
			return SendErrorMessage(playerid, "Player tidak valid.");

		SendClientMessage(playerid, COLOR_GREY, "----------DATABASE PROPERTI SAN ANDREAS----------");
  		SendClientMessageEx(playerid, COLOR_ORANGE, "Properti milik %s (ID: %d):", ReturnName(userid, 0), userid);

  		for (new i = 0; i < MAX_HOUSES; i ++) if (House_IsOwner(playerid, i)) {
	    	SendClientMessageEx(playerid, COLOR_WHITE, "** House ID: %d | Alamat: %s | Lokasi: %s", i, HouseData[i][houseAddress], GetLocation(HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]));

	    	count++;
		}
		for (new i = 0; i < MAX_BUSINESSES; i ++) if (Business_IsOwner(playerid, i) && BusinessData[i][bizOwner] != 99999999) {
	    	SendClientMessageEx(playerid, COLOR_WHITE, "** Business ID: %d | Nama: %s | Lokasi: %s", i, BusinessData[i][bizName], GetLocation(BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]));

	    	count++;
		}
		if (!count)
	    	return SendErrorMessage(playerid, "Player tidak memiliki properti.");

		SendClientMessage(playerid, COLOR_GREY, "----------DATABASE PROPERTI SAN ANDREAS----------");
	}
	return 1;
}

CMD:grantweplic(playerid, params[])
{
	static
	    userid,
	    type[16];

	if (GetFactionType(playerid) != FACTION_POLICE)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang polisi untuk menggunakan command ini.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	    return SendErrorMessage(playerid, "Kamu setidaknya harus memiliki rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);

	if (sscanf(params, "us[16]S()[32]", userid, type))
 	{
	 	SendSyntaxMessage(playerid, "/grantweplic [playerid/nama] [name]");
	 	SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} classA, classB, classC, all.");
		return 1;
	}
    if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Player tidak konek atau tidak berada didekatmu.");

	if (!strcmp(type, "classA", true))
	{
	    if (Inventory_HasItem(userid, "Weapon License A"))
 			return SendErrorMessage(playerid, "Player sudah memiliki Weapon license class A.");

		Inventory_Add(userid, "Weapon License A", 1581);
		SendServerMessage(playerid, "Kamu memberikan sebuah Weapon License Class A kepada %s.", ReturnName(userid, 0));
		SendServerMessage(userid, "Kamu diberikan sebuah Weapon License Class A oleh %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		Log_Write("logs/weapon_license.txt", "[%s] %s %s has granted %s's a weapon license class A.", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(userid, 0), params);
	}
	else if (!strcmp(type, "classB", true))
	{
	    if (Inventory_HasItem(userid, "Weapon License B"))
 			return SendErrorMessage(playerid, "Player sudah memiliki Weapon license class B.");

		Inventory_Add(userid, "Weapon License B", 1581);
		SendServerMessage(playerid, "Kamu memberikan sebuah Weapon License Class B kepada %s.", ReturnName(userid, 0));
		SendServerMessage(userid, "Kamu diberikan sebuah Weapon License Class B oleh %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		Log_Write("logs/weapon_license.txt", "[%s] %s %s has granted %s's a weapon license class B.", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(userid, 0), params);
	}
	else if (!strcmp(type, "classC", true))
	{
	    if (Inventory_HasItem(userid, "Weapon License C"))
 			return SendErrorMessage(playerid, "Player sudah memiliki Weapon license class C.");

		Inventory_Add(userid, "Weapon License C", 1581);
		SendServerMessage(playerid, "Kamu memberikan sebuah Weapon License Class C kepada %s.", ReturnName(userid, 0));
		SendServerMessage(userid, "Kamu diberikan sebuah Weapon License Class C oleh %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		Log_Write("logs/weapon_license.txt", "[%s] %s %s has granted %s's a weapon license class C.", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(userid, 0), params);
	}
	return 1;
}

CMD:revokeweplic(playerid, params[])
{
	static
	    userid,
	    type[16];

	if (GetFactionType(playerid) != FACTION_POLICE)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang polisi untuk menggunakan command ini.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	    return SendErrorMessage(playerid, "Kamu harus memiliki setidaknya rank %d difactionmu.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);

	if (sscanf(params, "us[16]S()[32]", userid, type))
 	{
	 	SendSyntaxMessage(playerid, "/revokeweplic [playerid/nama] [name]");
	 	SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} classA, classB, classC, all.");
		return 1;
	}

    if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Player tidak konek atau berada didekatmu.");

	if (!strcmp(type, "classA", true))
	{
		Inventory_Remove(userid, "Weapon License A");
		SendServerMessage(playerid, "Kamu mencabut Weapon License Class A.", ReturnName(userid, 0));
		SendServerMessage(userid, "Your Weapon License Class A telah dicabut oleh %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		Log_Write("logs/weapon_license.txt", "[%s] %s %s has revoked %s's weapon license class A.", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(userid, 0), params);
	}
	else if (!strcmp(type, "classB", true))
	{
		Inventory_Remove(userid, "Weapon License B");
		SendServerMessage(playerid, "Kamu mencabut Weapon License Class A.", ReturnName(userid, 0));
		SendServerMessage(userid, "Your Weapon License Class A telah dicabut oleh %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		Log_Write("logs/weapon_license.txt", "[%s] %s %s has revoked %s's weapon license class B.", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(userid, 0), params);
	}
	else if (!strcmp(type, "classC", true))
	{
		Inventory_Remove(userid, "Weapon License C");
		SendServerMessage(playerid, "Kamu mencabut Weapon License Class A.", ReturnName(userid, 0));
		SendServerMessage(userid, "Your Weapon License Class A telah dicabut oleh %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		Log_Write("logs/weapon_license.txt", "[%s] %s %s has revoked %s's weapon license class C.", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(userid, 0), params);
	}
	else if (!strcmp(type, "all", true))
	{
		Inventory_Remove(userid, "Weapon License A");
		Inventory_Remove(userid, "Weapon License B");
		Inventory_Remove(userid, "Weapon License C");
		SendServerMessage(playerid, "Kamu mencabut Weapon License Class A/B/C.", ReturnName(userid, 0));
		SendServerMessage(userid, "Your Weapon License Class A/B/C telah dicabut oleh %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		Log_Write("logs/weapon_license.txt", "[%s] %s %s has revoked %s's weapon license class A/B/C.", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(userid, 0), params);
	}
	return 1;
}

CMD:grantlicense(playerid, params[])
{
	static
	    userid,
	    type[16];

	if (GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang anggota pemerintahan.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	    return SendErrorMessage(playerid, "Kamu harus memiliki setidaknya rank %d di factionmu.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);

    if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Player tidak konek atau tidak didekatmu.");

	if (sscanf(params, "us[16]S()[32]", userid, type))
 	{
	 	SendSyntaxMessage(playerid, "/grantlicense [playerid/nama] [name]");
	 	SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} car, motorbike, truck, airplane, helicopter.");
		return 1;
	}
	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (!strcmp(type, "car", true))
	{
	    if (Inventory_HasItem(userid, "Car License"))
 			return SendErrorMessage(playerid, "Player sudah memiliki Car License");

		Inventory_Add(userid, "Car License", 1581);
		SendServerMessage(playerid, "Kamu memberikan sebuah Car License kepada %s.", ReturnName(userid, 0));
		SendServerMessage(userid, "Kamu diberikan sebuah Car License oleh %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		Log_Write("logs/government_licenses.txt", "[%s] %s %s has granted %s's a Car License.", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(userid, 0), params);
	}
	else if (!strcmp(type, "motorbike", true))
	{
	    if (Inventory_HasItem(userid, "Motorbike License"))
 			return SendErrorMessage(playerid, "Player sudah memiliki Motorbike License");

		Inventory_Add(userid, "Motorbike License", 1581);
		SendServerMessage(playerid, "Kamu memberikan sebuah Motorbike License kepada %s.", ReturnName(userid, 0));
		SendServerMessage(userid, "Kamu diberikan sebuah Motorbike License oleh %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		Log_Write("logs/government_licenses.txt", "[%s] %s %s has granted %s's a Motorbike License.", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(userid, 0), params);
	}
	else if (!strcmp(type, "truck", true))
	{
	    if (Inventory_HasItem(userid, "Truck License"))
 			return SendErrorMessage(playerid, "Player sudah memiliki Truck License");

		Inventory_Add(userid, "Truck License", 1581);
		SendServerMessage(playerid, "Kamu memberikan sebuah Truck License kepada %s.", ReturnName(userid, 0));
		SendServerMessage(userid, "Kamu diberikan sebuah Truck License oleh %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		Log_Write("logs/government_licenses.txt", "[%s] %s %s has granted %s's a Truck License.", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(userid, 0), params);
	}
	else if (!strcmp(type, "airplane", true))
	{
	    if (Inventory_HasItem(userid, "Airplane License"))
 			return SendErrorMessage(playerid, "Player sudah memilikin Airplane License");

		Inventory_Add(userid, "Airplane License", 1581);
		SendServerMessage(playerid, "Kamu memberikan sebuah Airplane License kepada %s.", ReturnName(userid, 0));
		SendServerMessage(userid, "Kamu diberikan sebuah Airplane License oleh %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		Log_Write("logs/government_licenses.txt", "[%s] %s %s has granted %s's an Airplane License.", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(userid, 0), params);
	}
	else if (!strcmp(type, "helicopter", true))
	{
	    if (Inventory_HasItem(userid, "Helicopter License"))
 			return SendErrorMessage(playerid, "Player sudah memiliki Helicopter License");

		Inventory_Add(userid, "Helicopter License", 1581);
		SendServerMessage(playerid, "Kamu memberikan sebuah Helicopter License to %s.", ReturnName(userid, 0));
		SendServerMessage(userid, "Kamu diberikan sebuah Helicopter License oleh %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		Log_Write("logs/government_licenses.txt", "[%s] %s %s has granted %s's a Helicopter License.", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(userid, 0), params);
	}
	return 1;
}

CMD:revokelicense(playerid, params[])
{
	static
	    userid,
	    type[16];

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "Kamu harus menjadi seorang polisi atau seorang goverment untuk menggunakan command ini.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5)
	    return SendErrorMessage(playerid, "Kamu harus memiliki rank %d di factionmu untuk menggunakan command ini.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 5);

    if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Player tidak konek atau didekatmu.");

	if (sscanf(params, "us[16]S()[32]", userid, type))
 	{
	 	SendSyntaxMessage(playerid, "/arevokelicense [playerid/nama] [name]");
	 	SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} car, motorbike, truck, airplane, helicopter.");
		return 1;
	}
	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (!strcmp(type, "car", true))
	{
		Inventory_Remove(userid, "Car License");
		SendServerMessage(playerid, "Kamu mencabut Car License milik %s.", ReturnName(userid, 0));
		SendServerMessage(userid, "Car License telah dicabut oleh %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		Log_Write("logs/government_licenses.txt", "[%s] %s %s telah mencabut %s's Car License milik %s.", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(userid, 0), params);
	}
	else if (!strcmp(type, "motorbike", true))
	{
		Inventory_Remove(userid, "Motorbike License");
		SendServerMessage(playerid, "Kamu mencabut Motorbike License milik %s.", ReturnName(userid, 0));
		SendServerMessage(userid, "Motorbike License telah dicabut oleh %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		Log_Write("logs/government_licenses.txt", "[%s] %s %s telah mencabut %s's Motorbike License milik %s.", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(userid, 0), params);
	}
	else if (!strcmp(type, "truck", true))
	{
		Inventory_Remove(userid, "Truck License");
		SendServerMessage(playerid, "Kamu mencabut Truck License milik %s.", ReturnName(userid, 0));
		SendServerMessage(userid, "Truck License telah dicabut oleh %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		Log_Write("logs/government_licenses.txt", "[%s] %s %s telah mencabut %s's Truck License milik %s.", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(userid, 0), params);
	}
	else if (!strcmp(type, "airplane", true))
	{
		Inventory_Remove(userid, "Airplane License");
		SendServerMessage(playerid, "Kamu mencabut Airplane License milik %s.", ReturnName(userid, 0));
		SendServerMessage(userid, "Your Airplane License telah dicabut oleh %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		Log_Write("logs/government_licenses.txt", "[%s] %s %s telah mencabut %s's Airplane License milik %s.", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(userid, 0), params);
	}
	else if (!strcmp(type, "helicopter", true))
	{
		Inventory_Remove(userid, "Helicopter License");
		SendServerMessage(playerid, "Kamu mencabut Helicopter License milik %s.", ReturnName(userid, 0));
		SendServerMessage(userid, "Your Helicopter License telah dicabut oleh %s %s.", Faction_GetRank(playerid), ReturnName(playerid, 0));
		Log_Write("logs/government_licenses.txt", "[%s] %s %s telah mencabut %s's Helicopter License milik %s.", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(userid, 0), params);
	}
	return 1;
}

CMD:jetpack(playerid, params[])
{
	new userid;

	if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
 	{
 	    PlayerData[playerid][pJetpack] = 1;
	 	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	}
	else
	{
		PlayerData[userid][pJetpack] = 1;

		SetPlayerSpecialAction(userid, SPECIAL_ACTION_USEJETPACK);
		SendServerMessage(playerid, "Kamu membuatkan sebuah jetpack untuk %s.", ReturnName(userid, 0));
	}
	return 1;
}

CMD:setweather(playerid, params[])
{
	new weatherid;

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", weatherid))
	    return SendSyntaxMessage(playerid, "/setweather [ID Cuaca]");

	SetWeather(weatherid);
	SendServerMessage(playerid, "Kamu mengubah cuaca menjadi ID: %d.", weatherid);
	return 1;
}

CMD:setfuel(playerid, params[])
{
	static
	    id = 0,
		amount;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "dd", id, amount))
 	{
	 	if (IsPlayerInAnyVehicle(playerid))
		{
		    id = GetPlayerVehicleID(playerid);

		    if (sscanf(params, "d", amount))
		        return SendSyntaxMessage(playerid, "/setfuel [jumlah]");

			if (amount < 0)
			    return SendErrorMessage(playerid, "Jumlah tidak boleh dibawah 0.");

			CoreVehicles[id][vehFuel] = amount;
			SendServerMessage(playerid, "Kamu menetapkan bensin vehicle ID: %d menjadi %d persen.", id, amount);
			return 1;
		}
		else return SendSyntaxMessage(playerid, "/setfuel [vehicle id] [jumlah]");
	}
	if (!IsValidVehicle(id))
	    return SendErrorMessage(playerid, "ID tidak valid.");

	if (amount < 0)
 		return SendErrorMessage(playerid, "Jumlah tidak boleh dibawah 0.");

	CoreVehicles[id][vehFuel] = amount;
	SendServerMessage(playerid, "Kamu menetapkan bensin vehicle ID: %d menjadi %d persen.", id, amount);
	return 1;
}

CMD:setcarhp(playerid, params[])
{
	static
	    id = 0,
		Float:amount;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "df", id, amount))
 	{
	 	if (IsPlayerInAnyVehicle(playerid))
		{
		    id = GetPlayerVehicleID(playerid);

		    if (sscanf(params, "f", amount))
		        return SendSyntaxMessage(playerid, "/setcarhp [jumlah]");

			if (amount < 0.0)
			    return SendErrorMessage(playerid, "Jumlah tidak boleh dibawah 0.");

			SetVehicleHealth(id, amount);
			SendServerMessage(playerid, "Telah menetapkan darah vehicle ID: %d menjadi %.1f.", id, amount);
			return 1;
		}
		else return SendSyntaxMessage(playerid, "/setcarhp [vehicle id] [jumlah]");
	}
	if (!IsValidVehicle(id))
	    return SendErrorMessage(playerid, "ID Tidak valid.");

	if (amount < 0.0)
	    return SendErrorMessage(playerid, "Jumlah tidak boleh kurang dari 0.");

	SetVehicleHealth(id, amount);
	SendServerMessage(playerid, "Kamu menetapkan darah vehicle ID: %d menjadi %.1f.", id, amount);
	return 1;
}

CMD:editcar(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editcar [id] [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} location, faction, color1, color2, maxhealth, sound");
		return 1;
	}
	if (!IsValidVehicle(id) || Car_GetID(id) == -1)
	    return SendErrorMessage(playerid, "ID Vehicle tidak valid.");

	id = Car_GetID(id);

	if (!strcmp(type, "location", true))
	{
 		GetPlayerPos(playerid, CarData[id][carPos][0], CarData[id][carPos][1], CarData[id][carPos][2]);
		GetPlayerFacingAngle(playerid, CarData[id][carPos][3]);

		Car_Save(id);
		Car_Spawn(id);

		SetPlayerPosEx(playerid, CarData[id][carPos][0], CarData[id][carPos][1], CarData[id][carPos][2] + 2.0, 1000);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan lokasi vehicle ID: %d.", ReturnName(playerid, 0), CarData[id][carVehicle]);
	}
	else if (!strcmp(type, "faction", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
     	{
     	    SendSyntaxMessage(playerid, "/editcar [id] [faction] [type]");
		 	SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Police | 2: News | 3: Medical | 4: Government | 5: Company");
		 	return 1;
		}
		if (typeint < 0 || typeint > 5)
		    return SendErrorMessage(playerid, "type kendaraan hanya 1 hingga.");

		CarData[id][carFaction] = typeint;

		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s menetapkan tipe vehicle ID: %d menjadi %d.", ReturnName(playerid, 0), CarData[id][carVehicle], typeint);
	}
	else if (!strcmp(type, "sound", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
     	{
     	    SendSyntaxMessage(playerid, "/editcar [id] [sound] [0/1]");
		 	SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 0: Mematikan suara siren, 1: Menghidupkan suara siren");
		 	return 1;
		}
		if (typeint < 0 || typeint > 1)
		    return SendErrorMessage(playerid, "Hanya 0 atau 1.");

		CarData[id][carSiren] = typeint;

		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan suara siren of vehicle ID: %d to %d.", ReturnName(playerid, 0), CarData[id][carVehicle], typeint);
	}
	else if (!strcmp(type, "maxhealth", true))
	{
		SendServerMessage(playerid, "Sedang diperbaiki.");
		return 1;
	}
    else if (!strcmp(type, "color1", true))
	{
	    new color1;

	    if (sscanf(string, "d", color1))
			return SendSyntaxMessage(playerid, "/editcar [id] [color1] [color 1]");

		if (color1 < 0 || color1 > 255)
		    return SendErrorMessage(playerid, "0 hingga 255 saja.");

		CarData[id][carColor1] = color1;
		ChangeVehicleColor(CarData[id][carVehicle], CarData[id][carColor1], CarData[id][carColor2]);

		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan color 1 vehicle ID: %d menjadi %d.", ReturnName(playerid, 0), CarData[id][carVehicle], color1);
	}
    else if (!strcmp(type, "color2", true))
	{
	    new color2;

	    if (sscanf(string, "d", color2))
			return SendSyntaxMessage(playerid, "/editcar [id] [color2] [color 2]");

		if (color2 < 0 || color2 > 255)
		    return SendErrorMessage(playerid, "0 hingga 255 saja.");

		CarData[id][carColor2] = color2;
		ChangeVehicleColor(CarData[id][carVehicle], CarData[id][carColor1], CarData[id][carColor2]);

		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menetapkan color 2 dari vehicle ID: %d menjadi %d.", ReturnName(playerid, 0), CarData[id][carVehicle], color2);
	}
	return 1;
}

CMD:creategarbage(playerid, params[])
{
	static
	    id = -1,
		type;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", type))
	{
	    SendSyntaxMessage(playerid, "/creategarbage [type]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Dumpster | 2: Trash Can");
		return 1;
	}
	if (type < 1 || type > 2)
	    return SendErrorMessage(playerid, "Tipe hanya boleh 1 atau 2.");

	id = Garbage_Create(playerid, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "Limit habis.");

	SendServerMessage(playerid, "Kamu berhasil membuat garbage bin ID: %d.", id);
	return 1;
}

CMD:destroygarbage(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroygarbage [garbage id]");

	if ((id < 0 || id >= MAX_GARBAGE_BINS) || !GarbageData[id][garbageExists])
	    return SendErrorMessage(playerid, "ID tidak valid.");

	Garbage_Delete(id);
	SendServerMessage(playerid, "Kamu berhasil menghancurkan garbage bin ID: %d.", id);
	return 1;
}

CMD:takebag(playerid, params[])
{
	new
		id = Garbage_Nearest(playerid),
		string[64];

	if (PlayerData[playerid][pJob] != JOB_GARBAGE)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki pekerjaan yang sesuai.");

	if (id == -1)
	    return SendErrorMessage(playerid, "Kamu tidak berada dalam jangkauan tempat sampah.");

	if (GarbageData[id][garbageCapacity] < 1)
	    return SendErrorMessage(playerid, "Tempat sampah ini kosong.");

	if (PlayerData[playerid][pCarryTrash])
	    return SendErrorMessage(playerid, "Kamu sudah membawa kantong sampah.");

    GarbageData[id][garbageCapacity]--;
   	Garbage_Save(id);

	PlayerData[playerid][pCarryTrash] = 1;
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengambil kantong sampah dari tempat sampah.", ReturnName(playerid, 0), string);

	format(string, sizeof(string), "[Garbage %d]\n{FFFFFF}Kapasitas Sampah: %d/20", id, GarbageData[id][garbageCapacity]);
  	UpdateDynamic3DTextLabelText(GarbageData[id][garbageText3D], COLOR_DEPARTMENT, string);

  	SetPlayerAttachedObject(playerid, 4, 1264, 6, 0.000000, 0.000000, 0.000000, 0.000000, 270.000000, 90.000000, 0.500000, 0.500000, 0.500000);
	ShowPlayerFooter(playerid, "Tekan ~y~'N'~w~ untuk memuat kantong sampah.");

	return 1;
}

CMD:dumpgarbage(playerid, params[])
{
	new
		vehicleid = GetPlayerVehicleID(playerid),
		id = Job_NearestPoint(playerid, 5.0);

	if (PlayerData[playerid][pJob] != JOB_GARBAGE)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki pekerjaan yang sesuai.");

	if (GetVehicleModel(vehicleid) != 408)
	    return SendErrorMessage(playerid, "Kamu harus mengendarai truk sampah.");

	if (id == -1 || JobData[id][jobType] != JOB_GARBAGE)
	    return SendErrorMessage(playerid, "Kamu tidak berada dalam jangkauan tempat pembuangan sampah.");

	if (CoreVehicles[vehicleid][vehTrash] < 1)
	    return SendErrorMessage(playerid, "Tidak ada sampah yang dimuat di kendaraan ini.");

	GiveMoney(playerid, (CoreVehicles[vehicleid][vehTrash] * 70));
	ShowPlayerFooter(playerid, "Kamu ~g~menyerahkan~w~ sampahnya!");

	SendServerMessage(playerid, "Kamu menerima $%d karena membuang %d bungkus sampah.", (CoreVehicles[vehicleid][vehTrash] * 15), CoreVehicles[vehicleid][vehTrash]);
	CoreVehicles[vehicleid][vehTrash] = 0;

	return 1;
}

CMD:createvendor(playerid, params[])
{
	static
	    id = -1,
		type;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", type))
	{
	    SendSyntaxMessage(playerid, "/createvendor [tipe]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[tipe]:{FFFFFF} 1: Food | 2: Soda");
		return 1;
	}
	if (type < 1 || type > 2)
	    return SendErrorMessage(playerid, "Jenis yang ditentukan tidak boleh di bawah 1 atau di atas 2.");

	id = Vendor_Create(playerid, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "Limit habis.");

	SendServerMessage(playerid, "Kamu berhasil membuat vendor ID: %d.", id);
	return 1;
}

CMD:destroyvendor(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyvendor [vendor id]");

	if ((id < 0 || id >= MAX_VENDORS) || !VendorData[id][vendorExists])
	    return SendErrorMessage(playerid, "ID vendor tidak valid.");

	Vendor_Delete(id);
	SendServerMessage(playerid, "Kamu berhasil membuat vendor ID: %d.", id);
	return 1;
}

CMD:dance(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/dance [1-4]");

	if (type < 1 || type > 4)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
		case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
	    case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
	    case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
	    case 4: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
	}
	return 1;
}

CMD:handsup(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
	return 1;
}

CMD:piss(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	SetPlayerSpecialAction(playerid, 68);
	return 1;
}

CMD:bat(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/bat [1-5]");

	if (type < 1 || type > 5)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "BASEBALL", "Bat_1", 4.1, 0, 1, 1, 0, 0, 1);
	    case 2: ApplyAnimation(playerid, "BASEBALL", "Bat_2", 4.1, 0, 1, 1, 0, 0, 1);
	    case 3: ApplyAnimation(playerid, "BASEBALL", "Bat_3", 4.1, 0, 1, 1, 0, 0, 1);
	    case 4: ApplyAnimation(playerid, "BASEBALL", "Bat_4", 4.1, 0, 0, 0, 0, 0, 1);
	    case 5: ApplyAnimationEx(playerid, "BASEBALL", "Bat_IDLE", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}
CMD:bar(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/bar [1-8]");

	if (type < 1 || type > 8)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "BAR", "Barserve_bottle", 4.1, 0, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimation(playerid, "BAR", "Barserve_give", 4.1, 0, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimation(playerid, "BAR", "Barserve_glass", 4.1, 0, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimation(playerid, "BAR", "Barserve_in", 4.1, 0, 0, 0, 0, 0, 1);
	    case 5: ApplyAnimation(playerid, "BAR", "Barserve_order", 4.1, 0, 0, 0, 0, 0, 1);
	    case 6: ApplyAnimationEx(playerid, "BAR", "BARman_idle", 4.1, 1, 0, 0, 0, 0, 1);
	    case 7: ApplyAnimationEx(playerid, "BAR", "dnk_stndM_loop", 4.1, 0, 0, 0, 0, 0, 1);
	    case 8: ApplyAnimationEx(playerid, "BAR", "dnk_stndF_loop", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:wash(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:lay(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/lay [1-5]");

	if (type < 1 || type > 5)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "BEACH", "bather", 4.1, 1, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "BEACH", "Lay_Bac_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimationEx(playerid, "BEACH", "ParkSit_M_loop", 4.1, 1, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimationEx(playerid, "BEACH", "ParkSit_W_loop", 4.1, 1, 0, 0, 0, 0, 1);
	    case 5: ApplyAnimationEx(playerid, "BEACH", "SitnWait_loop_W", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:workout(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/workout [1-7]");

	if (type < 1 || type > 7)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "benchpress", "gym_bp_celebrate", 4.1, 0, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "benchpress", "gym_bp_down", 4.1, 0, 0, 0, 1, 0, 1);
	    case 3: ApplyAnimation(playerid, "benchpress", "gym_bp_getoff", 4.1, 0, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimationEx(playerid, "benchpress", "gym_bp_geton", 4.1, 0, 0, 0, 1, 0, 1);
	    case 5: ApplyAnimationEx(playerid, "benchpress", "gym_bp_up_A", 4.1, 0, 0, 0, 1, 0, 1);
	    case 6: ApplyAnimationEx(playerid, "benchpress", "gym_bp_up_B", 4.1, 0, 0, 0, 1, 0, 1);
	    case 7: ApplyAnimationEx(playerid, "benchpress", "gym_bp_up_smooth", 4.1, 0, 0, 0, 1, 0, 1);
	}
	return 1;
}

CMD:blowjob(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/blowjob [1-4]");

	if (type < 1 || type > 4)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.1, 1, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_W", 4.1, 1, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:bombanim(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:carry(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/carry [1-6]");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimation(playerid, "CARRY", "liftup105", 4.1, 0, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
	    case 5: ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 0, 0, 0, 0, 1);
	    case 6: ApplyAnimation(playerid, "CARRY", "putdwn105", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:crack(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/crack [1-6]");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "CRACK", "crckdeth1", 4.1, 0, 0, 0, 1, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.1, 1, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimationEx(playerid, "CRACK", "crckdeth3", 4.1, 0, 0, 0, 1, 0, 1);
	    case 4: ApplyAnimationEx(playerid, "CRACK", "crckidle1", 4.1, 0, 0, 0, 1, 0, 1);
	    case 5: ApplyAnimationEx(playerid, "CRACK", "crckidle2", 4.1, 0, 0, 0, 1, 0, 1);
	    case 6: ApplyAnimationEx(playerid, "CRACK", "crckidle3", 4.1, 0, 0, 0, 1, 0, 1);
	}
	return 1;
}

CMD:sleep(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/sleep [1-2]");

	if (type < 1 || type > 2)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "CRACK", "crckdeth4", 4.1, 0, 0, 0, 1, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "CRACK", "crckidle4", 4.1, 0, 0, 0, 1, 0, 1);
	}
	return 1;
}

CMD:jump(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	ApplyAnimation(playerid, "DODGE", "Crush_Jump", 4.1, 0, 1, 1, 0, 0, 1);
	return 1;
}

CMD:deal(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/deal [1-6]");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.1, 0, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimation(playerid, "DEALER", "DRUGS_BUY", 4.1, 0, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_01", 4.1, 1, 0, 0, 0, 0, 1);
	    case 5: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_02", 4.1, 1, 0, 0, 0, 0, 1);
	    case 6: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_03", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:dancing(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/dancing [1-10]");

	if (type < 1 || type > 10)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "DANCING", "dance_loop", 4.1, 1, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "DANCING", "DAN_Left_A", 4.1, 1, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimationEx(playerid, "DANCING", "DAN_Right_A", 4.1, 1, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimationEx(playerid, "DANCING", "DAN_Loop_A", 4.1, 1, 0, 0, 0, 0, 1);
	    case 5: ApplyAnimationEx(playerid, "DANCING", "DAN_Up_A", 4.1, 1, 0, 0, 0, 0, 1);
	    case 6: ApplyAnimationEx(playerid, "DANCING", "DAN_Down_A", 4.1, 1, 0, 0, 0, 0, 1);
	    case 7: ApplyAnimationEx(playerid, "DANCING", "dnce_M_a", 4.1, 1, 0, 0, 0, 0, 1);
	    case 8: ApplyAnimationEx(playerid, "DANCING", "dnce_M_e", 4.1, 1, 0, 0, 0, 0, 1);
	    case 9: ApplyAnimationEx(playerid, "DANCING", "dnce_M_b", 4.1, 1, 0, 0, 0, 0, 1);
	    case 10: ApplyAnimationEx(playerid, "DANCING", "dnce_M_c", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:eating(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/eating [1-3]");

	if (type < 1 || type > 3)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimation(playerid, "FOOD", "EAT_Chicken", 4.1, 0, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:puke(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:gsign(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/gsign [1-15]");

	if (type < 1 || type > 15)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "GHANDS", "gsign1", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "GHANDS", "gsign1LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "GHANDS", "gsign2", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "GHANDS", "gsign2LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnimation(playerid, "GHANDS", "gsign3", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "GHANDS", "gsign3LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 7: ApplyAnimation(playerid, "GHANDS", "gsign4", 4.1, 0, 0, 0, 0, 0, 1);
		case 8: ApplyAnimation(playerid, "GHANDS", "gsign4LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 9: ApplyAnimation(playerid, "GHANDS", "gsign5", 4.1, 0, 0, 0, 0, 0, 1);
		case 10: ApplyAnimation(playerid, "GHANDS", "gsign5", 4.1, 0, 0, 0, 0, 0, 1);
		case 11: ApplyAnimation(playerid, "GHANDS", "gsign5LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 12: ApplyAnimation(playerid, "GANGS", "Invite_No", 4.1, 0, 0, 0, 0, 0, 1);
		case 13: ApplyAnimation(playerid, "GANGS", "Invite_Yes", 4.1, 0, 0, 0, 0, 0, 1);
		case 14: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkD", 4.1, 0, 0, 0, 0, 0, 1);
		case 15: ApplyAnimation(playerid, "GANGS", "smkcig_prtl", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:chat(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/chat [1-6]");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkA", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkB", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkF", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkG", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkH", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:goggles(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:spray(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

 	ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0, 1);
	return 1;
}

CMD:throw(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	ApplyAnimation(playerid, "GRENADE", "WEAPON_throw", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:swipe(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:office(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/office [1-6]");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Bored_Loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Crash", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Drink", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Read", 4.1, 1, 0, 0, 0, 0, 1);
		case 5: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Type_Loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 6: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Watch", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:kiss(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/kiss [1-6]");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "KISSING", "Grlfrd_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "KISSING", "Grlfrd_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "KISSING", "Grlfrd_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:knife(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/knife [1-8]");

	if (type < 1 || type > 8)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "KNIFE", "knife_1", 4.1, 0, 1, 1, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "KNIFE", "knife_2", 4.1, 0, 1, 1, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "KNIFE", "knife_3", 4.1, 0, 1, 1, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "KNIFE", "knife_4", 4.1, 0, 1, 1, 0, 0, 1);
		case 5: ApplyAnimationEx(playerid, "KNIFE", "WEAPON_knifeidle", 4.1, 1, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Player", 4.1, 0, 0, 0, 0, 0, 1);
		case 7: ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Damage", 4.1, 0, 0, 0, 0, 0, 1);
		case 8: ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:cpr(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	ApplyAnimation(playerid, "MEDIC", "CPR", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:scratch(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/scratch [1-4]");

	if (type < 1 || type > 4)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
    	case 1: ApplyAnimationEx(playerid, "SCRATCHING", "scdldlp", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnimationEx(playerid, "SCRATCHING", "scdlulp", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnimationEx(playerid, "SCRATCHING", "scdrdlp", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "SCRATCHING", "scdrulp", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:point(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/point [1-4]");

	if (type < 1 || type > 4)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "PED", "ARRESTgun", 4.1, 0, 0, 0, 1, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "SHOP", "ROB_Loop_Threat", 4.1, 1, 0, 0, 0, 0, 1);
    	case 3: ApplyAnimationEx(playerid, "ON_LOOKERS", "point_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "ON_LOOKERS", "Pointup_loop", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:cheer(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/cheer [1-8]");

	if (type < 1 || type > 8)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "ON_LOOKERS", "shout_01", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "ON_LOOKERS", "shout_02", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "ON_LOOKERS", "shout_in", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "RIOT", "RIOT_ANGRY_B", 4.1, 1, 0, 0, 0, 0, 1);
		case 5: ApplyAnimation(playerid, "RIOT", "RIOT_CHANT", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "RIOT", "RIOT_shout", 4.1, 0, 0, 0, 0, 0, 1);
		case 7: ApplyAnimation(playerid, "STRIP", "PUN_HOLLER", 4.1, 0, 0, 0, 0, 0, 1);
		case 8: ApplyAnimation(playerid, "OTB", "wtchrace_win", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:strip(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/strip [1-7]");

	if (type < 1 || type > 7)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "STRIP", "strip_A", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnimationEx(playerid, "STRIP", "strip_B", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnimationEx(playerid, "STRIP", "strip_C", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "STRIP", "strip_D", 4.1, 1, 0, 0, 0, 0, 1);
		case 5: ApplyAnimationEx(playerid, "STRIP", "strip_E", 4.1, 1, 0, 0, 0, 0, 1);
		case 6: ApplyAnimationEx(playerid, "STRIP", "strip_F", 4.1, 1, 0, 0, 0, 0, 1);
		case 7: ApplyAnimationEx(playerid, "STRIP", "strip_G", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:wave(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/wave [1-3]");

	if (type < 1 || type > 3)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "PED", "endchat_03", 4.1, 0, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimation(playerid, "KISSING", "gfwave2", 4.1, 0, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimationEx(playerid, "ON_LOOKERS", "wave_loop", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:smoke(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/smoke [1-3]");

	if (type < 1 || type > 3)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "SMOKING", "M_smk_drag", 4.1, 0, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "SMOKING", "M_smklean_loop", 4.1, 1, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimation(playerid, "SMOKING", "M_smkstnd_loop", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:reload(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/reload [1-4]");

	if (type < 1 || type > 4)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "UZI", "UZI_reload", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "RIFLE", "rifle_load", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:taichi(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	ApplyAnimationEx(playerid, "PARK", "Tai_Chi_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	return 1;
}

CMD:wank(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/wank [1-3]");

	if (type < 1 || type > 3)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "PAULNMAC", "wank_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "PAULNMAC", "wank_in", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "PAULNMAC", "wank_out", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:cower(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	ApplyAnimationEx(playerid, "PED", "cower", 4.1, 0, 0, 0, 1, 0, 1);
	return 1;
}

CMD:skate(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/skate [1-2]");

	if (type < 1 || type > 2)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "SKATE", "skate_idle", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnimationEx(playerid, "SKATE", "skate_run", 4.1, 1, 1, 1, 1, 1, 1);
	}
	return 1;
}

CMD:drunk(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	ApplyAnimationEx(playerid, "PED", "WALK_drunk", 4.1, 1, 1, 1, 1, 1, 1);
	return 1;
}

CMD:cry(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	ApplyAnimationEx(playerid, "GRAVEYARD", "mrnF_loop", 4.1, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:tired(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/tired [1-2]");

	if (type < 1 || type > 2)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "PED", "IDLE_tired", 4.1, 1, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "FAT", "IDLE_tired", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:sit(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/sit [1-6]");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "CRIB", "PED_Console_Loop", 4.1, 1, 0, 0, 0, 0);
		case 2: ApplyAnimationEx(playerid, "INT_HOUSE", "LOU_In", 4.1, 0, 0, 0, 1, 0);
		case 3: ApplyAnimationEx(playerid, "MISC", "SEAT_LR", 4.1, 1, 0, 0, 0, 0);
		case 4: ApplyAnimationEx(playerid, "MISC", "Seat_talk_01", 4.1, 1, 0, 0, 0, 0);
		case 5: ApplyAnimationEx(playerid, "MISC", "Seat_talk_02", 4.1, 1, 0, 0, 0, 0);
		case 6: ApplyAnimationEx(playerid, "ped", "SEAT_down", 4.1, 0, 0, 0, 1, 0);
	}
	return 1;
}

CMD:crossarms(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/crossarms [1-4]");

	if (type < 1 || type > 4)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 0, 1, 1, 1, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "GRAVEYARD", "prst_loopa", 4.1, 1, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimationEx(playerid, "GRAVEYARD", "mrnM_loop", 4.1, 1, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE", 4.1, 0, 1, 1, 1, 0, 1);
	}
	return 1;
}

CMD:fucku(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	ApplyAnimation(playerid, "PED", "fucku", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:walk(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan animasi pada saat ini.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/walk [1-16]");

	if (type < 1 || type > 17)
	    return SendErrorMessage(playerid, "Tipe yang dipilih tidak valid.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "FAT", "FatWalk", 4.1, 1, 1, 1, 1, 1, 1);
	    case 2: ApplyAnimationEx(playerid, "MUSCULAR", "MuscleWalk", 4.1, 1, 1, 1, 1, 1, 1);
	    case 3: ApplyAnimationEx(playerid, "PED", "WALK_armed", 4.1, 1, 1, 1, 1, 1, 1);
	    case 4: ApplyAnimationEx(playerid, "PED", "WALK_civi", 4.1, 1, 1, 1, 1, 1, 1);
	    case 5: ApplyAnimationEx(playerid, "PED", "WALK_fat", 4.1, 1, 1, 1, 1, 1, 1);
	    case 6: ApplyAnimationEx(playerid, "PED", "WALK_fatold", 4.1, 1, 1, 1, 1, 1, 1);
	    case 7: ApplyAnimationEx(playerid, "PED", "WALK_gang1", 4.1, 1, 1, 1, 1, 1, 1);
	    case 8: ApplyAnimationEx(playerid, "PED", "WALK_gang2", 4.1, 1, 1, 1, 1, 1, 1);
	    case 9: ApplyAnimationEx(playerid, "PED", "WALK_player", 4.1, 1, 1, 1, 1, 1, 1);
	    case 10: ApplyAnimationEx(playerid, "PED", "WALK_old", 4.1, 1, 1, 1, 1, 1, 1);
	    case 11: ApplyAnimationEx(playerid, "PED", "WALK_wuzi", 4.1, 1, 1, 1, 1, 1, 1);
	    case 12: ApplyAnimationEx(playerid, "PED", "WOMAN_walkbusy", 4.1, 1, 1, 1, 1, 1, 1);
	    case 13: ApplyAnimationEx(playerid, "PED", "WOMAN_walkfatold", 4.1, 1, 1, 1, 1, 1, 1);
	    case 14: ApplyAnimationEx(playerid, "PED", "WOMAN_walknorm", 4.1, 1, 1, 1, 1, 1, 1);
	    case 15: ApplyAnimationEx(playerid, "PED", "WOMAN_walksexy", 4.1, 1, 1, 1, 1, 1, 1);
	    case 16: ApplyAnimationEx(playerid, "PED", "WOMAN_walkshop", 4.1, 1, 1, 1, 1, 1, 1);
	}
	return 1;
}

CMD:atune(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak berada dalam kendaraan apapun.");

	if (!IsDoorVehicle(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Kamu tidak bisa memodif mobil ini.");

	Dialog_Show(playerid, TuneVehicle, DIALOG_STYLE_LIST, "Tune Vehicle", "Tambah Wheels\nTambah Nitrous\nTambah Hydraulics", "Pilih", "Batal");
	return 1;
}

CMD:acolorcar(playerid, params[])
{
	static
	    color1,
	    color2;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak berada dalam kendaraan apapun.");

	if (sscanf(params, "dd", color1, color2))
	    return SendSyntaxMessage(playerid, "/acolorcar [color 1] [color 2]");

	if (color1 < 0 || color1 > 255)
	    return SendErrorMessage(playerid, "Warna pertama tidak boleh di bawah 0 atau di atas 255.");

    if (color2 < 0 || color2 > 255)
	    return SendErrorMessage(playerid, "Warna kedua tidak boleh di bawah 0 atau di atas 255");

	SetVehicleColor(GetPlayerVehicleID(playerid), color1, color2);
	SendServerMessage(playerid, "Kamu mengubah warna kendaraan ini menjadi %d, %d.", color1, color2);
	return 1;
}

CMD:apaintjob(playerid, params[])
{
	static
	    paintjobid;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak berada dalam kendaraan apapun.");

	if (sscanf(params, "d", paintjobid))
	    return SendSyntaxMessage(playerid, "/apaintjob [paintjob ID] (-1 to untuk menghapus)");

	if (paintjobid < -1 || paintjobid > 5)
	    return SendErrorMessage(playerid, "Paintjob yang ditentukan tidak boleh di bawah -1 atau di atas 5.");

	if (paintjobid == -1)
		paintjobid = 6;

	SetVehiclePaintjob(GetPlayerVehicleID(playerid), paintjobid);
	SendServerMessage(playerid, "Kamu telah mengubah paintjob kendaraan ini menjadi %d.", paintjobid);
	return 1;
}

CMD:panel(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (g_ServerLocked)
		Dialog_Show(playerid, ServerPanel, DIALOG_STYLE_LIST, "Server Panel", "Buka Kunci Server\nGanti Hostname\nExecute Query", "Pilih", "Batal");

	else Dialog_Show(playerid, ServerPanel, DIALOG_STYLE_LIST, "Server Panel", "Kunci Server\nGanti Hostname\nExecute Query", "Pilih", "Batal");
	return 1;
}

CMD:spawnitem(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/spawnitem [nama item] (/itemlist untuk listnya)");

	static
		Float:x,
		Float:y,
		Float:z;

	GetPlayerPos(playerid, x, y, z);

    for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if (!strcmp(g_aInventoryItems[i][e_InventoryItem], params, true))
	{
	    new id = DropItem(g_aInventoryItems[i][e_InventoryItem], "Admin", g_aInventoryItems[i][e_InventoryModel], 1, x, y, z - 0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

	    if (id == -1)
	        return SendErrorMessage(playerid, "Server telah mencapai batas limit spawn item.");
        Log_Write("logs/spawnitem.txt", "[%s] %s telah membuat item %s", ReturnDate(), ReturnName(playerid, 0), g_aInventoryItems[i][e_InventoryItem]);
		SendServerMessage(playerid, "Kamu membuat item \"%s\" (ketik /setquantity untuk mengubah jumlahnya).", g_aInventoryItems[i][e_InventoryItem]);
		return 1;
	}
    SendErrorMessage(playerid, "Nama item salah (gunakan /itemlist untuk list item).");
	return 1;
}

CMD:setquantity(playerid, params[])
{
	static
	    id = -1,
		amount;

    if (PlayerData[playerid][pAdmin] < 6)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if ((id = Item_Nearest(playerid)) == -1)
	    return SendErrorMessage(playerid, "Kamu tidak berada dalam jangkauan barang yang terjatuh.");

	if (sscanf(params, "d", amount))
	    return SendSyntaxMessage(playerid, "/setquantity [jumlah]");

	if (amount < 1)
	    return SendErrorMessage(playerid, "Jumlah yang ditentukan tidak boleh di bawah 1.");

    Item_SetQuantity(id, amount);
    Log_Write("logs/spawnitem.txt", "[%s] %s telah mengubah jumlah %s menjadi %d.", ReturnDate(), ReturnName(playerid, 0), DroppedItems[id][droppedItem], amount);
    SendServerMessage(playerid, "Kamu berhasil mengubah jumlah \"%s\" menjadi %d.", DroppedItems[id][droppedItem], amount);
    return 1;
}

CMD:destroyitem(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 6)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if ((id = Item_Nearest(playerid)) == -1)
	    return SendErrorMessage(playerid, "Kamu tidak berada didekat item yang dijatuhkan.");

    SendServerMessage(playerid, "Kamu menghancurkan item \"%s\".", DroppedItems[id][droppedItem]);
    Item_Delete(id);
    return 1;
}

CMD:boombox(playerid, params[])
{
	static
	    type[24],
	    string[128];

	if (!Inventory_HasItem(playerid, "Boombox"))
	    return SendErrorMessage(playerid, "Kamu tidak memiliki boombox.");

	if (sscanf(params, "s[24]S()[128]", type, string))
	{
	    SendSyntaxMessage(playerid, "/boombox [pilihan]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[pilihan]:{FFFFFF} place, pickup, url");
	    return 1;
	}
	if (!strcmp(type, "place", true))
	{
	    if (BoomboxData[playerid][boomboxPlaced])
	        return SendErrorMessage(playerid, "You have placed a boombox already.");

		if (Boombox_Nearest(playerid) != INVALID_PLAYER_ID)
		    return SendErrorMessage(playerid, "Kamu tidak berada didekat boombox milikmu.");

		if (IsPlayerInAnyVehicle(playerid))
		    return SendErrorMessage(playerid, "Kamu harus keluar dari kendaraan terlebih dahulu.");

		Boombox_Place(playerid);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan boomboxnya dan meletakannya.", ReturnName(playerid, 0));
		SendServerMessage(playerid, "Kamu meletakan boombox milikmu (gunakan \"/boombox\" untuk opsi lain).");
	}
	else if (!strcmp(type, "pickup", true))
	{
	    if (!BoomboxData[playerid][boomboxPlaced])
	        return SendErrorMessage(playerid, "Kamu tidak memiliki boomxbox yang terpasang.");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]))
		    return SendErrorMessage(playerid, "Kamu tidak berada didekat boombox milikmu.");

		Boombox_Destroy(playerid);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah mengambil boomboxnya.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "url", true))
	{
	    if (sscanf(string, "s[128]", string))
	        return SendSyntaxMessage(playerid, "/boombox [url] [song url]");

        if (!BoomboxData[playerid][boomboxPlaced])
	        return SendErrorMessage(playerid, "Kamu tidak memiliki boomxbox yang terpasang.");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]))
		    return SendErrorMessage(playerid, "Kamu tidak berada didekat boombox milikmu.");

		Boombox_SetURL(playerid, string);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengubah dial dari boombox ke stasiun lain.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:adestroybox(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 6)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	foreach (new i : Player) if (BoomboxData[i][boomboxPlaced] && IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2])) {
		Boombox_Destroy(i);

		SendServerMessage(playerid, "Kamu menghancurkan boombox milik %s.", ReturnName(i, 0));
		return SendServerMessage(i, "%s menghancurkan boombox milikmu.", ReturnName(playerid, 0));
	}
	SendErrorMessage(playerid, "Kamu tidak berada didekat boombox manapun.");
	return 1;
}

CMD:findgarbage(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_GARBAGE)
	    return SendErrorMessage(playerid, "Kamu tidak bekerja sebagai petugas kebersihan.");

	new id = GetClosestGarbage(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Tidak ada tempat sampah yang tersedia.");

	PlayerData[playerid][pCP] = 1;

	SetPlayerCheckpoint(playerid, GarbageData[id][garbagePos][0], GarbageData[id][garbagePos][1], GarbageData[id][garbagePos][2], 2.5);
	SendServerMessage(playerid, "Marker diatur ke tempat sampah terdekat.");
	return 1;
}
CMD:search(playerid, params[])
{
	new userid;

	if (sscanf(params, "u", userid))
	{
		SendSyntaxMessage(playerid, "/search [playerid/name]");
		SendClientMessage(playerid, COLOR_YELLOW, "[HINT]:{FFFFFF} Gunakan /searchbp untuk menggeledah tas player.");
		return 1;
	}
	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Player tidak terkoneksi atau tidak berada didekatmu.");

	if (Inventory_HasItem(userid, "Marijuana Seeds"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Marijuana Seeds (%d)", Inventory_Count(userid, "Marijuana Seeds"));

    if (Inventory_HasItem(userid, "Cocaine Seeds"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Cocaine Seeds (%d)", Inventory_Count(userid, "Cocaine Seeds"));

    if (Inventory_HasItem(userid, "Heroin Opium Seeds"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Heroin Opium Seeds (%d)", Inventory_Count(userid, "Heroin Opium Seeds"));

	if (Inventory_HasItem(userid, "Steroids"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Steroids (%d)", Inventory_Count(userid, "Steroids"));

    if (Inventory_HasItem(userid, "Marijuana"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Marijuana (%d)", Inventory_Count(userid, "Marijuana"));

    if (Inventory_HasItem(userid, "Cocaine"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Cocaine (%d)", Inventory_Count(userid, "Cocaine"));

    if (Inventory_HasItem(userid, "Heroin"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Heroin (%d)", Inventory_Count(userid, "Heroin"));

	for (new i = 0; i < 12; i ++) if (PlayerData[userid][pGuns][i] && PlayerData[userid][pAmmo][i] > 0) {
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "** %s", ReturnWeaponName(PlayerData[userid][pGuns][i]));
	}
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mulai menggeledah %s untuk mencari item ilegal.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:searchbp(playerid, params[])
{
    new userid, backpack;

	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/searchbp [playerid/nama]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Player tidak terkoneksi atau didekatmu.");

	if (!Inventory_HasItem(userid, "Backpack") || (backpack = GetPlayerBackpack(userid)) == -1)
	    return SendErrorMessage(playerid, "Player tidak memiliki backpack.");

    if (Backpack_HasItem(backpack, "Marijuana Seeds"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Marijuana Seeds (%d)", Backpack_Count(backpack, "Marijuana Seeds"));

    if (Backpack_HasItem(backpack, "Cocaine Seeds"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Cocaine Seeds (%d)", Backpack_Count(backpack, "Cocaine Seeds"));

    if (Backpack_HasItem(backpack, "Heroin Opium Seeds"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Heroin Opium Seeds (%d)", Backpack_Count(backpack, "Heroin Opium Seeds"));

	if (Backpack_HasItem(backpack, "Steroids"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Steroids (%d)", Backpack_Count(backpack, "Steroids"));

    if (Backpack_HasItem(backpack, "Marijuana"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Marijuana (%d)", Backpack_Count(backpack, "Marijuana"));

    if (Backpack_HasItem(backpack, "Cocaine"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Cocaine (%d)", Backpack_Count(backpack, "Cocaine"));

    if (Backpack_HasItem(backpack, "Heroin"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Heroin (%d)", Backpack_Count(backpack, "Heroin"));

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menggeledah tas %s untuk mencari item ilegal.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:take(playerid, params[])
{
	new
	    userid,
		string[128];

    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Kamu harus menjadi seorang petugas polisi.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/take [playerid/nama]");

    if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Player tidak terkoneksi atau tidak didekatmu.");

	if (GetWeaponCount(userid) > 0)
		strcat(string, "Ambil Weapons\n");

	if (Inventory_HasItem(userid, "Marijuana Seeds") || Inventory_HasItem(userid, "Cocaine Seeds") || Inventory_HasItem(userid, "Heroin Opium Seeds"))
	    strcat(string, "Ambil Seeds\n");

	if (Inventory_HasItem(userid, "Marijuana") || Inventory_HasItem(userid, "Cocaine") || Inventory_HasItem(userid, "Heroin") || Inventory_HasItem(userid, "Steroids"))
	    strcat(string, "Ambil Drugs\n");

    if (Inventory_HasItem(userid, "Portable Radio"))
	    strcat(string, "Ambil Radio\n");

	if (Inventory_HasItem(userid, "Backpack") && GetPlayerBackpack(userid) != -1)
	    strcat(string, "Ambil Backpack\n");

   	if (Inventory_HasItem(userid, "Car License"))
	    strcat(string, "Ambil Car License\n");

    if (Inventory_HasItem(userid, "Truck License"))
	    strcat(string, "Ambil Truck License\n");

	if (Inventory_HasItem(userid, "Airplane License"))
	    strcat(string, "Ambil Airplane License\n");

    if (Inventory_HasItem(userid, "Helicopter License"))
	    strcat(string, "Ambil Helicopter License\n");

	if (!strlen(string))
	    return SendErrorMessage(playerid, "Pemain ini tidak memiliki barang yang bisa kamu sita.");

	PlayerData[playerid][pTakeItems] = userid;
	Dialog_Show(playerid, TakeItems, DIALOG_STYLE_LIST, "Ambil Item", string, "Ambil", "Batal");
	return 1;
}

CMD:kickdoor(playerid, params[])
{
	static
	    id = -1;

	if (GetFactionType(playerid) != FACTION_POLICE)
	    return SendErrorMessage(playerid, "Kamu haruslah seorang polisi.");

	if ((id = House_Nearest(playerid)) != -1)
	{
	    if (!HouseData[id][houseLocked])
	        return SendErrorMessage(playerid, "Rumah ini tidak terkunci.");

	    ShowPlayerFooter(playerid, "Mencoba untuk ~r~mendobrak~w~ pintu...");
	    ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mencoba untuk mendobrak pintu rumah ini.", ReturnName(playerid, 0));
	    SetTimerEx("KickHouse", 1500, false, "dd", playerid, id);
	}
	else if ((id = Business_Nearest(playerid)) != -1)
	{
		if (!BusinessData[id][bizLocked])
		    return SendErrorMessage(playerid, "Bisnis ini tidak terkunci.");

		ShowPlayerFooter(playerid, "Mencoba untuk ~r~mendobrak~w~ pintu...");
        ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mencoba untuk mendobrak pintu bisnis ini.", ReturnName(playerid, 0));
	    SetTimerEx("KickBusiness", 1500, false, "dd", playerid, id);
	}
	else {
		SendErrorMessage(playerid, "Kamu harus berada di pickup rumah/bisnis.");
	}
	return 1;
}

CMD:buyrack(playerid, params[])
{
	new houseid = House_Inside(playerid);

	if (houseid == -1 || !House_IsOwner(playerid, houseid))
	    return SendErrorMessage(playerid, "Kamu tidak berada dalam jangkauan interior rumahmu.");

	if (isnull(params) || (!isnull(params) && strcmp(params, "confirm", true) != 0))
		return SendSyntaxMessage(playerid, "/buyrack [confirm] (seharga $1,000)");

	if (Rack_Count(playerid) >= 4)
	    return SendErrorMessage(playerid, "Rumahmu hanya bisa memiliki hingga 4 rak senjata.");

	if (Rack_Nearest(playerid) != -1)
	    return SendErrorMessage(playerid, "Kamu tidak dapat menggunakan perintah ini di dekat rak lain.");

	if (GetMoney(playerid) < 1000)
	    return SendErrorMessage(playerid, "Kamu memiliki dana yang tidak mencukupi untuk pembelian.");

	new id = Rack_Create(playerid, houseid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Limit rack di server telah habis.");

    ResetEditing(playerid);

	PlayerData[playerid][pEditRack] = id;
	EditDynamicObject(playerid, RackData[id][rackObjects][4]);

    GiveMoney(playerid, -1000);
	SendServerMessage(playerid, "Kamu membeli sebuah weapon rack seharga $1,000.");
	return 1;
}

CMD:gunrack(playerid, params[])
{
	new id = Rack_Nearest(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Kamu tidak berada di weapon rack.");

	Rack_ShowGuns(playerid, id);
	return 1;
}

CMD:deleterack(playerid, params[])
{
	new
		id = -1,
		houseid = House_Inside(playerid);

	if (houseid == -1 || !House_IsOwner(playerid, houseid))
	    return SendErrorMessage(playerid, "Kamu tidak berada di interior rumahmu.");

	if ((id = Rack_Nearest(playerid)) == -1)
	    return SendErrorMessage(playerid, "Kamu tidak berada di weapon rack.");

	Rack_Delete(id);
	SendServerMessage(playerid, "Kamu menghapus rack dari rumahmu.");
	return 1;
}

CMD:createrack(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	id = Rack_Create(playerid, -1);

	if (id == -1)
	    return SendErrorMessage(playerid, "Limit rack penuh.");

    ResetEditing(playerid);
    PlayerData[playerid][pEditRack] = id;

	EditDynamicObject(playerid, RackData[id][rackObjects][4]);
	SendServerMessage(playerid, "Kamu berhasil membuat rack ID: %d.", id);
	return 1;
}

CMD:editrack(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/editrack [rack id]");

	if ((id < 0 || id >= MAX_WEAPON_RACKS) || !RackData[id][rackExists])
	    return SendErrorMessage(playerid, "Rack ID tidak valid.");

	ResetEditing(playerid);
	PlayerData[playerid][pEditRack] = id;

	EditDynamicObject(playerid, RackData[id][rackObjects][4]);
	SendServerMessage(playerid, "Kamu sekarang mengedit weapon rack ID: %d.", id);
	return 1;
}

CMD:destroyrack(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyrack [rack id]");

	if ((id < 0 || id >= MAX_WEAPON_RACKS) || !RackData[id][rackExists])
	    return SendErrorMessage(playerid, "Rack ID tidak valid.");

	Rack_Delete(id);
	SendServerMessage(playerid, "Kamu berhasil menghancurkan rack ID: %d.", id);
	return 1;
}

CMD:checknumber(playerid, params[])
{
	new number;

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", number))
	    return SendSyntaxMessage(playerid, "/checknumber [nomor telpon]");

	if (number == 0)
	    return SendErrorMessage(playerid, "Nomor telepon tidak valid.");

	if (GetNumberOwner(number) != INVALID_PLAYER_ID)
	    return SendServerMessage(playerid, "Nomor telpon %d dimiliki oleh %s.", number, ReturnName(GetNumberOwner(number), 0));

	SendErrorMessage(playerid, "Tidak ada pemain online dengan nomor tersebut.");
	return 1;
}

CMD:trace(playerid, params[])
{
	new number;

	if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Kamu harus menjadi seorang polisi.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 7)
	    return SendErrorMessage(playerid, "Kamu setidaknya harus memiliki rank %d untuk menggunakan ini.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 7);

	if (sscanf(params, "d", number))
	    return SendSyntaxMessage(playerid, "/trace [nomor telpon]");

	if (number == 0)
	    return SendErrorMessage(playerid, "Kamu memasukan nomor ponsel yang salah.");

    if (PlayerData[playerid][pPhoneOff])
        return SendErrorMessage(playerid, "Ponsel player tersebut dimatikan.");

	if (GetNumberOwner(number) != INVALID_PLAYER_ID)
        return SendServerMessage(playerid, "Nomor telpon [%d] dimiliki oleh [%s].", number, ReturnName(GetNumberOwner(number), 0));

	SendErrorMessage(playerid, "Tidak ada pemain online dengan nomor tersebut.");
	return 1;
}

CMD:flipcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (vehicleid > 0 && isnull(params))
	{
		FlipVehicle(vehicleid);
		SendServerMessage(playerid, "Kamu berhasil membalikan kendaraanmu saat ini.");
	}
	else
	{
		if (sscanf(params, "d", vehicleid))
	    	return SendSyntaxMessage(playerid, "/flipcar [vehicle ID]");

		else if (!IsValidVehicle(vehicleid))
	    	return SendErrorMessage(playerid, "vehicle ID tidak valid.");

		FlipVehicle(vehicleid);
		SendServerMessage(playerid, "Kamu membalikan vehicle ID: %d.", vehicleid);
	}
	return 1;
}

CMD:createspeed(playerid, params[])
{
	static
	    Float:limit,
	    Float:range;

	if (sscanf(params, "ff", limit, range))
		return SendSyntaxMessage(playerid, "/createspeed [speed limit] [jangkauan] (jangkauan biasanya: 30)");

	if (limit < 5.0 || limit > 150.0)
	    return SendErrorMessage(playerid, "limit speed hanya 5-150.");

	if (range < 5.0 || range > 50.0)
	    return SendErrorMessage(playerid, "jangkauan hanya 5-50.");

	if (Speed_Nearest(playerid) != -1)
	    return SendErrorMessage(playerid, "Kamera lain sudah merekam daerah ini.");

	new id = Speed_Create(playerid, limit, range);

	if (id == -1)
	    return SendErrorMessage(playerid, "Limit kamera penuh.");

	SendServerMessage(playerid, "You have created speed camera ID: %d.", id);
	return 1;
}

CMD:destroyspeed(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyspeed [speed id]");

	if ((id < 0 || id >= MAX_SPEED_CAMERAS) || !SpeedData[id][speedExists])
	    return SendErrorMessage(playerid, "ID Camera tidak valid.");

	Speed_Delete(id);
	SendServerMessage(playerid, "Kamu berhasil menghapus camera ID: %d.", id);
	return 1;
}
CMD:snow(playerid, params[])
{
	if(snowOn[playerid] == 1)
	{
		DeleteSnow(playerid);
		SendClientMessage(playerid, 0x00FF00AA, "* Mode salju dimatikan.");
	}
	else
	{
		CreateSnow(playerid);
		SendClientMessage(playerid, 0x00FF00AA, "* Mode salju dihidupkan.");
	}
	return 1;
}
CMD:staff(playerid, params[])
{
	new count = 0;
	new string[520];
	
	format(string, sizeof(string), "{FFFFFF}ID\tname\tRank\tStatus\n");
    foreach (new i : Player) if (PlayerData[i][pAdmin] > 0 || PlayerData[i][pHelper] > 0)
    {
	    count++;
		format(string, sizeof(string), "{FFFFFF}%s %d\t%s\t%s\t{FF0000}%s\n", string, i, PlayerData[i][pForumName], AdminRankName(i), (PlayerData[i][pAdminDuty]) || (PlayerData[i][pHelperDuty]) ? ("{FF0000}Administrating") : ("{4BB74C}Roleplaying"));
	}
	if (count == 0) {
	    SendClientMessage(playerid, COLOR_WHITE, "* Tidak ada admin yang online.");
	}
	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "Administrator Online", string, "Tutup", "");
	return 1;
}
CMD:donators(playerid, params[])
{
	new count = 0;
	new string[520];

    format(string, sizeof(string), "{FFFFFF}ID\tName\tRank\tStatus\n");
    foreach (new i : Player) if (PlayerData[i][pDonator] > 0)
    {
	    count++;
		format(string, sizeof(string), "{FFFFFF}%s %d\t%s\t%s\t{FF0000}%s\n", string, i, ReturnName(i, 0), DonatorRankName(i), (PlayerData[i][pDonatorDuty]) ? ("{FF0000}ON DUTY (( OOC MODE ))") : ("{4BB74C}Roleplaying"));
	}
	if (count == 0) {
	    SendClientMessage(playerid, COLOR_WHITE, "* Tidak ada Donator yang online.");
	}
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "Donator Online", string, "Tutup", "");
	return 1;
}

CMD:showlicenses(playerid, params[])
{
	static
	    userid;

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/showlicenses [playerid/nama]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Player tidak terkoneksi atau didekatmu.");

	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");

	SendClientMessageEx(playerid, COLOR_ORANGE, "Licenses registered to %s (ID: %d):", ReturnName(userid, 0), userid);

	if (Inventory_HasItem(playerid, "Car License")) SendClientMessageEx(userid, COLOR_WHITE, "* Car License {33CC33}(Punya)");
 	else SendClientMessageEx(userid, COLOR_WHITE, "* Car License {AA3333}(Tidak Punya)");

 	if (Inventory_HasItem(playerid, "Truck License")) SendClientMessageEx(userid, COLOR_WHITE, "* Truck License {33CC33}(Punya)");
 	else SendClientMessageEx(userid, COLOR_WHITE, "* Truck License {AA3333}(Tidak Punya)");

 	if (Inventory_HasItem(playerid, "Motorbike License")) SendClientMessageEx(userid, COLOR_WHITE, "* Motorbike License {33CC33}(Punya)");
 	else SendClientMessageEx(userid, COLOR_WHITE, "* Motorbike License {AA3333}(Tidak Punya)");

 	if (Inventory_HasItem(playerid, "Airplane License")) SendClientMessageEx(userid, COLOR_WHITE, "* Airplane License {33CC33}(Punya)");
 	else SendClientMessageEx(userid, COLOR_WHITE, "* Airplane License {AA3333}(Tidak Punya)");

 	if (Inventory_HasItem(playerid, "Helicopter License")) SendClientMessageEx(userid, COLOR_WHITE, "* Helicopter License {33CC33}(Punya)");
 	else SendClientMessageEx(userid, COLOR_WHITE, "* Helicopter License {AA3333}(Tidak Punya)");

	if (Inventory_HasItem(playerid, "Weapon License A")) SendClientMessageEx(userid, COLOR_WHITE, "* Weapon License Class A {33CC33}(Punya)");
	else SendClientMessageEx(userid, COLOR_WHITE, "* Weapon License Class A {AA3333}(Tidak Punya)");

	if (Inventory_HasItem(playerid, "Weapon License B")) SendClientMessageEx(userid, COLOR_WHITE, "* Weapon License Class B {33CC33}(Punya)");
	else SendClientMessageEx(userid, COLOR_WHITE, "* Weapon License Class B {AA3333}(Tidak Punya)");

	if (Inventory_HasItem(playerid, "Weapon License C")) SendClientMessageEx(userid, COLOR_WHITE, "* Weapon License Class C {33CC33}(Punya)");
	else SendClientMessageEx(userid, COLOR_WHITE, "* Weapon License Class C {AA3333}(Tidak Punya)");

	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan lisensinya dan menunjukkannya kepada %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:deletechar(playerid, params[])
{
	static
	    query[128];

    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (isnull(params) || strlen(params) > 24)
	    return SendSyntaxMessage(playerid, "/deletechar [character name]");

    if (!IsValidPlayerName(params))
	    return SendErrorMessage(playerid, "Format nama tidak benar.");

	format(query, sizeof(query), "SELECT `ID`, `Admin` FROM `characters` WHERE `Character` = '%s'", SQL_ReturnEscaped(params));
	mysql_tquery(g_iHandle, query, "OnDeleteCharacter", "ds", playerid, params);

	return 1;
}

CMD:stoploading(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "Kamu tidak bekerja di pekerjaan ini.");

	if (!PlayerData[playerid][pLoading] && !PlayerData[playerid][pLoadType])
	    return SendErrorMessage(playerid, "Kamu tidak sedang memuat apapun saat ini.");

	PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pLoadType] = 0;
    PlayerData[playerid][pLoadCrate] = 0;

	RemovePlayerAttachedObject(playerid, 4);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	DisablePlayerCheckpoint(playerid);
	SendServerMessage(playerid, "Kamu membatalkan memuat.");

	return 1;
}

CMD:startdelivery(playerid, params[])
{
 	new id = Job_NearestPoint(playerid);

	if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "Kamu tidak bekerja di pekerjaan ini.");

	if (id == -1 || JobData[id][jobType] != JOB_COURIER)
	    return SendErrorMessage(playerid, "Kamu tidak berada di loading point.");

	if (PlayerData[playerid][pLoadType] > 0)
	    return SendErrorMessage(playerid, "Kamu sudah memulai sebuah pengiriman.");

    if (IsPlayerInAnyVehicle(playerid))
    	return SendErrorMessage(playerid, "Kamu harus keluar kendaraan terlebih dahulu.");

	Dialog_Show(playerid, StartDelivery, DIALOG_STYLE_LIST, "Pilih Tipe", "Retail Supplies\nAmmunition\nClothing\nFood Supplies\nGasoline\nFurniture", "Pilih", "Batal");
	return 1;
}

CMD:bshipment(playerid, params[])
{
    new id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid));

    if (id == -1 || !Business_IsOwner(playerid, id))
        return SendErrorMessage(playerid, "Kamu tidak berada di jangkauan bisnis manapun.");

	if (BusinessData[id][bizType] == 5)
	    return SendErrorMessage(playerid, "Kamu tidak dapat meminta pengiriman untuk jenis bisnis ini.");

	if (BusinessData[id][bizShipment])
	{
	    foreach (new i : Player) if (PlayerData[i][pShipment] == id)
		{
	        CancelShipment(i);
	        SendServerMessage(i, "Permintaan kiriman dibatalkan.");
	    }
	    BusinessData[id][bizShipment] = 0;
	    Business_Save(id);

	    SendServerMessage(playerid, "Bisnis Kamu tidak lagi meminta kiriman.");
	    SendJobMessage(1, COLOR_YELLOW, "** %s tidak lagi meminta kiriman untuk %s. **", ReturnName(playerid, 0), BusinessData[id][bizName]);
	}
	else
	{
	    if (BusinessData[id][bizDeliver][0] == 0.0 && BusinessData[id][bizDeliver][1] == 0.0 && BusinessData[id][bizDeliver][2] == 0.0)
	        return SendErrorMessage(playerid, "Titik pengiriman untuk bisnismu tidak ditentukan.");

	    BusinessData[id][bizShipment] = 1;
	    Business_Save(id);

	    SendServerMessage(playerid, "Kamu telah meminta kiriman untuk bisnismu.");
		SendJobMessage(1, COLOR_YELLOW, "** %s telah meminta pengiriman di %s (/shipments untuk menerima). **", ReturnName(playerid, 0), BusinessData[id][bizName]);
	}
	return 1;
}

CMD:cancelshipment(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "Kamu tidak bekerja sebagai seorang kurir.");

	if (PlayerData[playerid][pShipment] == -1)
	    return SendErrorMessage(playerid, "Kamu tidak menerima pengiriman manapun.");

	CancelShipment(playerid);
	SendServerMessage(playerid, "Kamu membatalkan pengiriman.");
	return 1;
}

CMD:shipments(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "Kamu tidak bekerja sebagai seorang kurir.");

	if (PlayerData[playerid][pShipment] != -1)
	    return SendErrorMessage(playerid, "Kamu telah menerima sebuah pengiriman (ketik /cancelshipment untuk membatalkannya).");

	ShowShipments(playerid);
	return 1;
}

CMD:usemag(playerid, params[])
{
	new weaponid = PlayerData[playerid][pHoldWeapon];

	if (!weaponid)
	    return SendErrorMessage(playerid, "Kamu tidak memegang senjata.");

	if (!Inventory_HasItem(playerid, "Magazine"))
	    return SendErrorMessage(playerid, "Kamu tidak memiliki sebuah magazine.");

	if (PlayerData[playerid][pUsedMagazine])
		SendErrorMessage(playerid, "Kamu sudah menggunakan magazine di senjata ini.");

	switch (weaponid)
	{
	    case 22:
	    {
		    PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah memasang sebuah magazine ke senjatanya.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Tekan ~y~'H'~w~ untuk memuat senjata.");
		}
		case 24:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah memasang sebuah magazine ke senjatanya.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Tekan ~y~'H'~w~ untuk memuat senjata.");
		}
		case 25:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s inserts some shells into the weapon.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Tekan ~y~'H'~w~ untuk memuat senjata.");
		}
		case 27:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s inserts some shells into the weapon.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Tekan ~y~'H'~w~ untuk memuat senjata.");
		}
		case 28:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah memasang sebuah magazine ke senjatanya.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Tekan ~y~'H'~w~ untuk memuat senjata.");
		}
		case 29:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah memasang sebuah magazine ke senjatanya.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Tekan ~y~'H'~w~ untuk memuat senjata.");
		}
		case 32:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah memasang sebuah magazine ke senjatanya.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Tekan ~y~'H'~w~ untuk memuat senjata.");
		}
		case 30:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah memasang sebuah magazine ke senjatanya.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Tekan ~y~'H'~w~ untuk memuat senjata.");
		}
		case 31:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah memasang sebuah magazine ke senjatanya.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Tekan ~y~'H'~w~ untuk memuat senjata.");
		}
		case 33:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah memasang sebuah magazine ke senjatanya.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Tekan ~y~'H'~w~ untuk memuat senjata.");
		}
        case 34:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Magazine");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah memasang sebuah magazine ke senjatanya.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Ketik ~y~'H'~w~ untuk memuat senjata.");
		}
		default:
		    return SendErrorMessage(playerid, "Kamu tidak bisa memasang magazine di senjata ini.");
	}
	return 1;
}

CMD:clearinventory(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/clearinventory [playerid/nama]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	Inventory_Clear(userid);

	SendAdminAction(playerid, "Kamu membersihkan inventory milik %s.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s telah membersihkan inventorymu.", ReturnName(playerid, 0));

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah membersihkan inventory milik %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:tasks(playerid, params[])
{
	if (!IsTaskActive(playerid))
	    return 1;

	new
	    string[128];

	if (!PlayerData[playerid][pBankTask])
		strcat(string, "Kunjungi Bank (pending)\n");

	if (!PlayerData[playerid][pStoreTask])
	    strcat(string, "Kunjungi Store (pending)\n");

	if (!PlayerData[playerid][pTestTask])
	    strcat(string, "Kunjungi Drive School (pending)\n");

	Dialog_Show(playerid, NewTasks, DIALOG_STYLE_LIST, "Misi", string, "Pilih", "Batal");
	return 1;
}

CMD:warnings(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Peringatan (%d/3)", PlayerData[playerid][pWarnings]);

    if (PlayerData[playerid][pWarnings] >= 1 && strlen(PlayerData[playerid][pWarn1]))
        SendClientMessageEx(playerid, COLOR_WHITE, "* Peringatan pertama: \"%s\"", PlayerData[playerid][pWarn1]);

    if (PlayerData[playerid][pWarnings] >= 2 && strlen(PlayerData[playerid][pWarn2]))
        SendClientMessageEx(playerid, COLOR_WHITE, "* Peringatan kedua: \"%s\"", PlayerData[playerid][pWarn2]);

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:listwarns(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/listwarns [playerid/nama]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Peringatan milik %s (%d/3)", ReturnName(userid, 0), PlayerData[userid][pWarnings]);

    if (PlayerData[userid][pWarnings] >= 1 && strlen(PlayerData[userid][pWarn1]))
        SendClientMessageEx(playerid, COLOR_WHITE, "* Peringatan pertama: \"%s\"", PlayerData[userid][pWarn1]);

    if (PlayerData[userid][pWarnings] >= 2 && strlen(PlayerData[userid][pWarn2]))
        SendClientMessageEx(playerid, COLOR_WHITE, "* Peringatan kedua: \"%s\"", PlayerData[userid][pWarn2]);

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:warn(playerid, params[])
{
	static
	    userid,
		reason[32];

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pHelper] < 2)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "us[32]", userid, reason))
	    return SendSyntaxMessage(playerid, "/warn [playerid/nama] [alasan]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Player adalah seorang admin yang memiliki pangkat lebih tinggi.");

	switch (++ PlayerData[userid][pWarnings])
	{
	    case 1:
	    {
	        format(PlayerData[userid][pWarn1], 32, reason);

	        SendAdminAction(userid, "%s telah memperingatimu dengan alasan dengan alasan \"%s\" (peringatan pertama).", ReturnName(playerid, 0), reason);
	        SendAdminAction(playerid, "Kamu telah memperingati %s dengan alasan \"%s\" (peringatan pertama).", ReturnName(userid, 0), reason);
		}
		case 2:
	    {
	        format(PlayerData[userid][pWarn2], 32, reason);

	        SendAdminAction(userid, "%s telah memperingatimu dengan alasan \"%s\" (peringatan kedua).", ReturnName(playerid, 0), reason);
	        SendAdminAction(playerid, "Kamu telah memperingati %s dengan alasan \"%s\" (peringatan kedua).", ReturnName(userid, 0), reason);
		}
		default:
	    {
	        ResetWarnings(userid);

	        SendAdminAction(userid, "Kamu dibanned karena terlalu banyak terkena peringatan (\"%s\").", reason);
	        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah terbanned akibat 3 kali diperingati %s, Alasan: %s", ReturnName(userid, 0), ReturnName(playerid, 0), reason);

			Blacklist_Add(PlayerData[userid][pIP], PlayerData[userid][pUsername], PlayerData[playerid][pUsername], reason);
			KickEx(userid);
		}
	}
	Log_Write("logs/warn_log.txt", "[%s] %s telah memperingati %s dengan alasan %s.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), reason);
	return 1;
}

CMD:clearwarns(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/clearwarns [playerid/nama]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak valid.");

	ResetWarnings(userid);

	SendAdminAction(playerid, "Kamu menghapus peringatan milik %s.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s telah membersihkan peringatanmu.", ReturnName(playerid, 0));

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah membersihkan peringan milik %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:sorting(playerid, params[])
{
	new id = -1;

	if (PlayerData[playerid][pJob] != JOB_SORTER)
	    return SendErrorMessage(playerid, "Kamu tidak bekerja sebagai seorang penyortir.");

    if ((id = Job_NearestPoint(playerid)) == -1 || JobData[id][jobType] != JOB_SORTER)
		return SendErrorMessage(playerid, "Kamu tidak berada dalam jangkauan fasilitas sortasi.");

 	switch (PlayerData[playerid][pSorting])
 	{
	 	case -1:
 	    {
 	        PlayerData[playerid][pSorting] = id;
 	        PlayerData[playerid][pSortCrate] = 1;

			SendServerMessage(playerid, "Kamu sudah mulai menyortir. Silakan menuju ke marker.");

 	        SetPlayerAttachedObject(playerid, 4, 1220, 5, 0.137832, 0.176979, 0.151424, 96.305931, 185.363006, 20.328088, 0.699999, 0.800000, 0.699999);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
			SetPlayerCheckpoint(playerid, JobData[id][jobDeliver][0], JobData[id][jobDeliver][1], JobData[id][jobDeliver][2], 1.0);
		}
		default:
		{
		    PlayerData[playerid][pSorting] = -1;

		    if (PlayerData[playerid][pSortCrate] != 0)
		    {
		        PlayerData[playerid][pSortCrate] = 0;

		        RemovePlayerAttachedObject(playerid, 4);
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
 	        }
 	        DisablePlayerCheckpoint(playerid);
 	        SendServerMessage(playerid, "Kamu telah selesai memilah paket.");
 	    }
	}
	return 1;
}

CMD:passwep(playerid, params[])
{
	new
	    weaponid = GetWeapon(playerid),
	    ammo = GetPlayerAmmo(playerid),
		userid;

	if (PlayerData[playerid][pChannel4] < 2)
	    return SendErrorMessage(playerid, "Kamu tidak berhak memberikan senjata dibawah level 3.");

	if (!weaponid)
	    return SendErrorMessage(playerid, "Kamu tidak memegang senjata apapun.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/passwep [playerid/nama]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Player tidak konek atau tidak didekatmu.");

	if (userid == playerid)
		return SendErrorMessage(playerid, "Kamu tidak bisa memberikan senjata ke dirimu sendiri.");

	if (PlayerData[userid][pGuns][g_aWeaponSlots[weaponid]] != 0)
	    return SendErrorMessage(playerid, "Player sudah memiliki senjata dengan slot yang sama.");

	ResetWeapon(playerid, weaponid);
	GiveWeaponToPlayer(userid, weaponid, ammo);

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah memberikan %s kepada %s.", ReturnName(playerid, 0), ReturnWeaponName(weaponid), ReturnName(userid, 0));
	Log_Write("logs/give_log.txt", "[%s] %s (%s) telah memberikan %s dengan %d peluru kepada %s (%s).", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], ReturnWeaponName(weaponid), ammo, ReturnName(userid, 0), PlayerData[userid][pIP]);
	return 1;
}

CMD:vw(playerid, params[]) {
	SendClientMessageEx(playerid, COLOR_CLIENT, "Virtual world saat ini: %d", GetPlayerVirtualWorld(playerid));

	return 1;
}

CMD:toghud(playerid, params[])
{
	switch (PlayerData[playerid][pHUD])
	{
	    case 0:
	    {
	        PlayerData[playerid][pDisableSpeedo] = 0;
	        PlayerData[playerid][pHUD] = 1;

	        ShowHungerTextdraw(playerid, 1);
	        SendServerMessage(playerid, "Kamu menghidupkan Hud.");

			TextDrawShowForPlayer(playerid, gServerTextdraws[0]);
			TextDrawShowForPlayer(playerid, gServerTextdraws[1]);

	        if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsSpeedoVehicle(GetPlayerVehicleID(playerid)))
		    {
		        for (new i = 34; i < 39; i ++) {
					PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
	    		}
		    }
		}
	    case 1:
	    {
	        PlayerData[playerid][pDisableSpeedo] = 1;
	        PlayerData[playerid][pHUD] = 0;

	        ShowHungerTextdraw(playerid, 0);
	        SendServerMessage(playerid, "Kamu mematikan hud.");

	        TextDrawHideForPlayer(playerid, gServerTextdraws[0]);
			TextDrawHideForPlayer(playerid, gServerTextdraws[1]);

	        for (new i = 34; i < 39; i ++) {
				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
	    	}
		}
	}
	return 1;
}

CMD:hduty(playerid, params[])
{
    new
	    amel = PlayerData[playerid][pCharacter] - 1;

	if (PlayerData[playerid][pHelper] >= 1)
	{
		if (PlayerData[playerid][pHelperDuty] == 0)
		{
			SetPlayerColor(playerid, COLOR_GREEN);
			PlayerData[playerid][pHelperDuty] = 1;
			SetPlayerName(playerid, PlayerData[playerid][pForumName]);
			SendHelperMessage(COLOR_GREEN, "[HELPER]: %s sedang bertugas.", ReturnName(playerid, 0), params); // SendHelperMessage
	        SendClientMessageToAllEx(COLOR_RED, "[HELPER]: %s sedang bertugas. /ask untuk bertanya ", PlayerData[playerid][pForumName], params);
	 	}
		else
		{
		    SetPlayerColor(playerid, DEFAULT_COLOR); // samain sama hduty aja yg /aduty jangan g usah beda
	        SetPlayerName(playerid, PlayerCharacters[playerid][amel]);
			PlayerData[playerid][pHelperDuty] = 0;
			SendHelperMessage(COLOR_GREEN, "[HELPER]: %s sedang tidak bertugas. ", ReturnName(playerid, 0), params);
			SendClientMessageToAllEx(COLOR_RED, "[HELPER]: %s sedang tidak bertugas.", PlayerData[playerid][pForumName], params);
		}
	}
	else SendErrorMessage(playerid, "Kamu bukan seorang helper.");
	return 1;
}

CMD:time(playerid, params[])
{
	static
	    string[128],
		month[12],
		date[6];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	switch (date[1]) {
	    case 1: month = "January";
	    case 2: month = "February";
	    case 3: month = "March";
	    case 4: month = "April";
	    case 5: month = "May";
	    case 6: month = "June";
	    case 7: month = "July";
	    case 8: month = "August";
	    case 9: month = "September";
	    case 10: month = "October";
	    case 11: month = "November";
	    case 12: month = "December";
	}
	format(string, sizeof(string), "%d/60 menit untuk payday.",PlayerData[playerid][pMinutes]);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	format(string, sizeof(string), "~g~%s %02d %d~n~~b~%02d:%02d:%02d", month, date[0], date[2], date[3], date[4], date[5]);
	GameTextForPlayer(playerid, string, 6000, 1);

	return 1;
}

CMD:healall(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	foreach (new i : Player) {
	    SetPlayerHealth(i, 100.0);
	}
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah memberikan darah untuk semua player.", ReturnName(playerid, 0));
	return 1;
}

CMD:saveall(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	foreach (new i : Player) {
		SQL_SaveCharacter(i);
	}
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menyimpan semua akun player.", ReturnName(playerid, 0));
	return 1;
}

CMD:whisper(playerid, params[])
{
	new userid, text[128];

    if (sscanf(params, "us[128]", userid, text))
	    return SendSyntaxMessage(playerid, "/(w)hisper [playerid/nama] [pesan]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Player tidak konek atau tidak didekatmu.");

	if (userid == playerid)
		return SendErrorMessage(playerid, "Kamu tidak bisa membisikan dirimu sendiri.");

    if (strlen(text) > 64) {
	    SendClientMessageEx(userid, COLOR_YELLOW, "** Bisikan dari %s (%d): %.64s", ReturnName(playerid, 0), playerid, text);
	    SendClientMessageEx(userid, COLOR_YELLOW, "...%s **", text[64]);

	    SendClientMessageEx(playerid, COLOR_YELLOW, "** Membisikan sesuatu ke %s (%d): %.64s", ReturnName(userid, 0), userid, text);
	    SendClientMessageEx(playerid, COLOR_YELLOW, "...%s **", text[64]);
	}
	else {
	    SendClientMessageEx(userid, COLOR_YELLOW, "** Bisikan dari %s (%d): %s **", ReturnName(playerid, 0), playerid, text);
	    SendClientMessageEx(playerid, COLOR_YELLOW, "** Membisikan sesuatu ke %s (%d): %s **", ReturnName(userid, 0), userid, text);
	}
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s membisikan sesuatu ke telinga %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

//paytoll
forward Tutup_Toll(tollgate);
public Tutup_Toll(tollgate) {

	if (tollgate == TollGates[1] || tollgate == TollGates[3]) {
		SetDynamicObjectRot(tollgate, 0, 90, 0);
	}
	else if (tollgate == TollGates[2] || tollgate == TollGates[4]) {
		SetDynamicObjectRot(tollgate, 0, -90, 0);
	}
	else if (tollgate == TollGates[5]) {
		SetDynamicObjectRot(tollgate, 0, 90, 260.30029296875);
	}
	else if (tollgate == TollGates[6]) {
		SetDynamicObjectRot(tollgate, 0, -90, 260.29907226563);
	}
	else if (tollgate == TollGates[7]) {
		SetDynamicObjectRot(tollgate, 0, 90, 7.9376220703125);
	}
	else if (tollgate == TollGates[8]) {
		SetDynamicObjectRot(tollgate, 0, -90, 7.9399719238281);
	}
	else if (tollgate == TollGates[9]) {
		SetDynamicObjectRot(tollgate, 0, 90, 345.99789428711);
	}
	else if (tollgate == TollGates[10]) {
		SetDynamicObjectRot(tollgate, 0, 90, 165.99792480469);
	}
	else if (tollgate == TollGates[11]) {
		SetDynamicObjectRot(tollgate, 0, 90, 31.992584228516);
	}
	else if (tollgate == TollGates[12]) {
		SetDynamicObjectRot(tollgate, 0, 90, 209.9979095459);
	}
	return 1;
}

//paytoll
CMD:paytoll(playerid, params[]) {
    if (nopaytoll == true) return SendClientMessage(playerid, COLOR_RED, "Maaf atas ketidak nyamanan ini, kami terpaksa menutup semua toll karena suatu alasan. Regards, Chief of LSPD.");
	if (GetPlayerMoney(playerid) < 100) return SendClientMessage(playerid, COLOR_RED, "* Anda tidak punya uang untuk membayar e-toll fee.");

	if(IsPlayerInRangeOfPoint(playerid,5.0,2840.92,-865.78,10.56)) //toll[1]
	{
        //MoveObject(, 2836.8671875, -872.58013916016, 10.881828308105, 9, 0, 0, 0);
		SetDynamicObjectRot(TollGates[1], 0, 0, 0);
		SetTimerEx("Tutup_Toll",3000,false,"d",TollGates[1]);
    }
	else if (IsPlayerInRangeOfPoint(playerid,5.0,2846.39,-879.15,10.49)) //toll[2]
	{
		//MoveObject(TollGates[2], 2850.5170898438, -872.54412841797, 10.892744064331, 9, 0, 0, 0);
		SetDynamicObjectRot(TollGates[2], 0, 0, 0);
		SetTimerEx("Tutup_Toll",3000,false,"d",TollGates[2]);
	}
	else if (IsPlayerInRangeOfPoint(playerid,5.0,2872.72,-866.50,10.58)) //toll[3]
	{
		//MoveObject(TollGates[3], 2869.3918457031, -871.80389404297, 10.87566947937, 9, 0, 0, 0);
		SetDynamicObjectRot(TollGates[3], 0, 0, 0);
		SetTimerEx("Tutup_Toll",3000,false,"d",TollGates[3]);
	}
	else if (IsPlayerInRangeOfPoint(playerid,5.0,2893.35,-877.37,10.58)) //toll[4]
	{
		//MoveObject(TollGates[4], 2896.6918945313, -871.87084960938, 10.87566947937, 9, 0, 0, 0);
		SetDynamicObjectRot(TollGates[4], 0, 0, 0);
		SetTimerEx("Tutup_Toll",3000,false,"d",TollGates[4]);
	}
	else if (IsPlayerInRangeOfPoint(playerid,5.0,39.52,-1536.74,4.93)) //toll[5]
	{
		SetDynamicObjectRot(TollGates[5], 0, 0, 260.30029296875);
		SetTimerEx("Tutup_Toll",3000,false,"d",TollGates[5]);
	}
	else if (IsPlayerInRangeOfPoint(playerid,5.0,57.90,-1525.71,4.69)) //toll[6]
	{
		SetDynamicObjectRot(TollGates[6], 0, 0, 260.29907226563);
		SetTimerEx("Tutup_Toll",3000,false,"d",TollGates[6]);
	}
	else if (IsPlayerInRangeOfPoint(playerid,5.0,1698.48,-508.50,33.70)) //toll[7]
	{
		SetDynamicObjectRot(TollGates[7], 0, 0, 7.9376220703125);
		SetTimerEx("Tutup_Toll",3000,false,"d",TollGates[7]);
	}
	else if (IsPlayerInRangeOfPoint(playerid,5.0,1714.10,-518.46,34.09)) //toll[8]
	{
		SetDynamicObjectRot(TollGates[8], 0, 0, 7.9399719238281);
		SetTimerEx("Tutup_Toll",3000,false,"d",TollGates[8]);
	}
	else if (IsPlayerInRangeOfPoint(playerid,5.0,-197.68,241.50,11.78)) //toll[9]
	{
		SetDynamicObjectRot(TollGates[9], 0, 0, 345.99789428711);
		SetTimerEx("Tutup_Toll",3000,false,"d",TollGates[9]);
	}
	else if (IsPlayerInRangeOfPoint(playerid,5.0,-200.54,257.54,11.78)) //toll[10]
	{
		SetDynamicObjectRot(TollGates[10], 0, 0, 165.99792480469);
		SetTimerEx("Tutup_Toll",3000,false,"d",TollGates[10]);
	}
	else if (IsPlayerInRangeOfPoint(playerid,5.0,619.77,335.79,19.06)) //toll[11]
	{
		SetDynamicObjectRot(TollGates[11], 0, 0, 31.992584228516);
		SetTimerEx("Tutup_Toll",3000,false,"d",TollGates[11]);
	}
	else if (IsPlayerInRangeOfPoint(playerid,5.0,605.12,346.57,18.64)) //toll[12]
	{
		SetDynamicObjectRot(TollGates[12], 0, 0, 209.9979095459);
		SetTimerEx("Tutup_Toll",3000,false,"d",TollGates[12]);
	}
	else return 1;

	GiveMoney(playerid, -100);
	SendClientMessage(playerid, COLOR_TWPINK, "* Anda telah membayar $100 untuk e-toll fee.");
    return 1;
}


CMD:mask(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "Mask"))
		return SendErrorMessage(playerid, "Kamu tidak memiliki mask.");

	switch (PlayerData[playerid][pMaskOn])
	{
		case 0:
		{
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan mask dan menggunakannya.", ReturnName(playerid, 0));
		    PlayerData[playerid][pMaskOn] = 1;
		}
		case 1:
		{
		    PlayerData[playerid][pMaskOn] = 0;
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s melepaskan mask dan menyimpannya.", ReturnName(playerid, 0));
		}
	}
	return 1;
}

CMD:masked(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	static
	    name[24];

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

    foreach (new i : Player) if (PlayerData[i][pMaskOn]) {
        GetPlayerName(i, name, sizeof(name));

        SendClientMessageEx(playerid, COLOR_WHITE, "* %s (#%d)", name, PlayerData[i][pMaskID]);
	}
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:listguns(playerid, params[])
{
	new userid;

	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/listguns [playerid/nama]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak konek.");

	new
	    weaponid,
	    ammo;

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Senjata %s:", ReturnName(userid, 0));

	for (new i = 0; i < 13; i ++)
	{
		GetPlayerWeaponData(userid, i, weaponid, ammo);

		if (weaponid > 0)
		    SendClientMessageEx(playerid, COLOR_WHITE, "* %s (%d peluru)", ReturnWeaponName(weaponid), ammo);
	}
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:siren(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_COMPANY)
	    return SendErrorMessage(playerid, "Kamu bukan seorang pegawai.");

	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Kamu harus masuk kedalam mobil.");

	switch (CoreVehicles[vehicleid][vehSirenOn])
	{
	    case 0:
	    {
			static
        		Float:fSize[3],
        		Float:fSeat[3];

		    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, fSize[0], fSize[1], fSize[2]); // need height (z)
    		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, fSeat[0], fSeat[1], fSeat[2]); // need pos (x, y)

            CoreVehicles[vehicleid][vehSirenOn] = 1;
			CoreVehicles[vehicleid][vehSirenObject] = CreateDynamicObject(18646, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);

		    AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehSirenObject], vehicleid, -fSeat[0], fSeat[1], fSize[2] / 2.0, 0.0, 0.0, 0.0);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memasang siren ke kendaraan.", ReturnName(playerid, 0));
		}
		case 1:
		{
		    CoreVehicles[vehicleid][vehSirenOn] = 0;

			DestroyDynamicObject(CoreVehicles[vehicleid][vehSirenObject]);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s melepaskan siren dari kendaraan.", ReturnName(playerid, 0));
		}
	}
	return 1;
}

CMD:siren2(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_COMPANY)
	    return SendErrorMessage(playerid, "Kamu bukan seorang pegawai.");

	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Kamu harus berada didalam kendaraan.");

	switch (CoreVehicles[vehicleid][vehSirenOn])
	{
	    case 0:
	    {
			static
        		Float:fSize[3],
        		Float:fSeat[3];

		    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, fSize[0], fSize[1], fSize[2]); // need height (z)
    		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, fSeat[0], fSeat[1], fSeat[2]); // need pos (x, y)

            CoreVehicles[vehicleid][vehSirenOn] = 1;
			CoreVehicles[vehicleid][vehSirenObject] = CreateDynamicObject(19620, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);

		    AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehSirenObject], vehicleid, 0.0, fSeat[1], fSize[2] / 1.85, 0.0, 0.0, 0.0);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memasang siren dari kendaraan.", ReturnName(playerid, 0));
		}
		case 1:
		{
		    CoreVehicles[vehicleid][vehSirenOn] = 0;

			DestroyDynamicObject(CoreVehicles[vehicleid][vehSirenObject]);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah melepaskan siren dari kendaraan.", ReturnName(playerid, 0));
		}
	}
	return 1;
}

CMD:traffic(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_COMPANY)
	    return SendErrorMessage(playerid, "You must be a civil service worker.");

	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Kamu harus berada didalam kendaraan.");

	switch (CoreVehicles[vehicleid][vehSirenOn])
	{
	    case 0:
	    {
			static
        		Float:fSize[3],
        		Float:fSeat[3];

		    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, fSize[0], fSize[1], fSize[2]); // need height (z)
    		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, fSeat[0], fSeat[1], fSeat[2]); // need pos (x, y)

            CoreVehicles[vehicleid][vehSirenOn] = 1;
			CoreVehicles[vehicleid][vehSirenObject] = CreateDynamicObject(19294, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);

		    AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehSirenObject], vehicleid, -fSeat[0], fSeat[1], fSize[2] / 2.0, 0.0, 0.0, 0.0);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s memasang lampu lalu lintas portabel ke kendaraan.", ReturnName(playerid, 0));
		}
		case 1:
		{
		    CoreVehicles[vehicleid][vehSirenOn] = 0;

			DestroyDynamicObject(CoreVehicles[vehicleid][vehSirenObject]);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s melepaskan lampu lalu lintas portabel dari kendaraan.", ReturnName(playerid, 0));
		}
	}
	return 1;
}

CMD:setinventory(playerid, params[])
{
	static
	    userid,
		capacity;

    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ud", userid, capacity))
	    return SendSyntaxMessage(playerid, "/setinventory [playerid/nama] [jumlah]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak konek.");

	if (capacity < 1 || capacity > 120)
	    return SendErrorMessage(playerid, "Tidak bisa lebih dari 120 item.");

	PlayerData[userid][pCapacity] = 120;

	SendServerMessage(playerid, "Kamu mengubah inventory %s menjadi berkapasitas %d item.", ReturnName(userid, 0), capacity);
	SendServerMessage(userid, "%s telah mengubah kapasitas inventorymu menjadi %d item.", ReturnName(playerid, 0), capacity);
	return 1;
}

CMD:breakcuffs(playerid, params[])
{
	static
		userid;

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/breakcuffs [playerid/nama]");

	if (!Inventory_HasItem(playerid, "Crowbar"))
	    return SendErrorMessage(playerid, "Kamu tidak memiliki crowbar.");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
	    return SendErrorMessage(playerid, "Player tidak konek atau tidak berada didekatmu.");

	if (!PlayerData[userid][pCuffed])
	    return SendErrorMessage(playerid, "Player tidak diborgol.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Kamu tidak bisa menghancurkan borgol milikmu sendiri.");

	SetTimerEx("BreakCuffs", 3000, false, "dd", playerid, userid);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mencoba untuk menghancurkan borgol dengan sebuah crowbar.", ReturnName(playerid, 0));
	return 1;
}

CMD:dice(playerid, params[])
{
	new
		number = random(6) + 1;

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengocok dadu dan mendapatkan nomor %d.", ReturnName(playerid, 0), number);
	return 1;
}

CMD:shakehand(playerid, params[])
{
	static
	    userid,
	    type;

	if (sscanf(params, "ud", userid, type))
	    return SendSyntaxMessage(playerid, "/shakehand [playerid/nama] [type]");

    if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
	    return SendErrorMessage(playerid, "Player tidak konek atau tidak berada didekatmu.");

    if (userid == playerid)
		return SendErrorMessage(playerid, "Kamu tidak bisa bersalaman dengan dirimu sendiri.");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Kamu harus memilih tipe 1-6.");

	PlayerData[userid][pShakeOffer] = playerid;
	PlayerData[userid][pShakeType] = type;

	SendServerMessage(userid, "%s telah menawarkanmu untuk bersalaman (ketik \"/approve greet\").", ReturnName(playerid, 0));
	SendServerMessage(playerid, "Kamu menawarkan untuk bersalaman kepada %s.", ReturnName(userid, 0));
	return 1;
}
CMD:pdrag(playerid, params[])
{
	new
	    userid;

    if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/pdrag [playerid/nama]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Player tidak konek.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "Kamu tidak bisa menyeret dirimu sendiri.");

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Kamu harus berada didekat player.");
	if (PlayerData[userid][pDragged])
	{
	    PlayerData[userid][pDragged] = 0;
	    PlayerData[userid][pDraggedBy] = INVALID_PLAYER_ID;

	    KillTimer(PlayerData[userid][pDragTimer]);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah membebaskan %s dari cengkeramannya.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else
	{
		PlayerData[userid][pDraggedBy] = playerid;
		SendServerMessage(userid, "%s telah menawarkan untuk menyeret kamu (ketik \"/approve drag\").", ReturnName(playerid, 0));
		SendServerMessage(playerid, "Kamu menawarkan untuk menyeret %s.", ReturnName(userid, 0));
	}
	return 1;
}
CMD:frisk(playerid, params[])
{
	static
	    userid;

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/frisk [playerid/nama]");

    if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
	    return SendErrorMessage(playerid, "Player tidak konek atau tidak berada didekatmu.");

    if (userid == playerid)
		return SendErrorMessage(playerid, "Kamu tidak bisa menggeledah dirimu sendiri.");

	PlayerData[userid][pFriskOffer] = playerid;

	SendServerMessage(userid, "%s telah menawarkan untuk menggeledah kamu (ketik \"/approve frisk\").", ReturnName(playerid, 0));
	SendServerMessage(playerid, "Kamu menawarkan untuk menggeledah %s.", ReturnName(userid, 0));
	return 1;
}

CMD:setradio(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Kamu tidak mengendarai kendaraan.");

	if (!IsEngineVehicle(vehicleid))
	    return SendErrorMessage(playerid, "Kendaraan ini tidak punya radio.");

	Dialog_Show(playerid, Radio, DIALOG_STYLE_LIST, "Channel Radio", "Cultural\nOldies\nOther\nPop\nRhythm & Blues\nRock\nTalk\nUrban\nElectric\nMatikan Radio", "Pilih", "Batal");
	return 1;
}

CMD:creategraffiti(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z,
		Float:angle;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
 		return SendErrorMessage(playerid, "Kamu hanya bisa membuat grafiti diluar ruangan.");

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	id = Graffiti_Create(x, y, z, angle);

	if (id == -1)
	    return SendErrorMessage(playerid, "Limit sudah penuh.");

	EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);

	PlayerData[playerid][pEditGraffiti] = id;
	SendServerMessage(playerid, "Kamu berhasil membuat graffiti ID: %d.", id);
	return 1;
}

CMD:destroygraffiti(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroygraffiti [graffiti id]");

	if ((id < 0 || id >= MAX_GRAFFITI_POINTS) || !GraffitiData[id][graffitiExists])
	    return SendErrorMessage(playerid, "Graffiti ID tidak valid.");

	Graffiti_Delete(id);
	SendServerMessage(playerid, "Kamu menghancurkan graffiti ID: %d.", id);
	return 1;
}

CMD:fspray(playerid, params[])
{
	new id = Graffiti_Nearest(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Kamu tidak berada didekat graffiti.");

	if (GetFactionType(playerid) != FACTION_GANG)
	    return SendErrorMessage(playerid, "Kamu bukan anggota sebuah faction illegal.");

	Dialog_Show(playerid, GraffitiColor, DIALOG_STYLE_LIST, "Pilih Warna", "{FFFFFF}Putih\n{FF0000}Merah\n{FFFF00}Kuning\n{33CC33}Hijau\n{33CCFF}Biru terang\n{FFA500}Orange\n{1394BF}Biru tua", "Pilih", "Batal");
	return 1;
}

CMD:afire(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	RandomFire();

	GetDynamicObjectPos(g_aFireObjects[0], fX, fY, fZ);
	SendServerMessage(playerid, "Kamu membuat kebakaran (%s).", GetLocation(fX, fY, fZ));
	return 1;
}

CMD:akillfire(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	{
	    g_aFireExtinguished[i] = 0;

	    if (IsValidDynamicObject(g_aFireObjects[i]))
	        DestroyDynamicObject(g_aFireObjects[i]);
	}
	SendServerMessage(playerid, "Kamu berhasil memadamkan api.");
	return 1;
}
CMD:createdetector(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	static
	    query[255];

	for (new i = 0; i < MAX_METAL_DETECTORS; i ++) if (!MetalDetectors[i][detectorExists])
	{
	    MetalDetectors[i][detectorExists] = 1;
	    MetalDetectors[i][detectorInterior] = GetPlayerInterior(playerid);
	    MetalDetectors[i][detectorWorld] = GetPlayerVirtualWorld(playerid);

	    GetPlayerPos(playerid, MetalDetectors[i][detectorPos][0], MetalDetectors[i][detectorPos][1], MetalDetectors[i][detectorPos][2]);
	    GetPlayerFacingAngle(playerid, MetalDetectors[i][detectorPos][3]);

		format(query, sizeof(query), "INSERT INTO `detectors` (`detectorX`, `detectorY`, `detectorZ`, `detectorAngle`, `detectorInterior`, `detectorWorld`) VALUES('%.4f', '%.4f', '%.4f', '%.4f', '%d', '%d')", MetalDetectors[i][detectorPos][0], MetalDetectors[i][detectorPos][1], MetalDetectors[i][detectorPos][2], MetalDetectors[i][detectorPos][3], MetalDetectors[i][detectorInterior], MetalDetectors[i][detectorWorld]);
		mysql_tquery(g_iHandle, query, "OnDetectorCreated", "d", i);

	    Detector_Refresh(i);
	    SendServerMessage(playerid, "Kamu membuat metal detector ID: %d.", i);
	    return 1;
	}
	SendErrorMessage(playerid, "Limit sudah penuh.");
	return 1;
}

CMD:destroydetector(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroydetector [detector id]");

	if ((id < 0 || id >= MAX_METAL_DETECTORS) || !MetalDetectors[id][detectorExists])
	    return SendErrorMessage(playerid, "Detector ID tidak valid.");

	Detector_Delete(id);
	SendServerMessage(playerid, "Kamu berhasil menghancurkan detector ID: %d.", id);
	return 1;
}

/*CMD:picklock(playerid, params[])
{
	new id = Car_Nearest(playerid);

	if (!Inventory_HasItem(playerid, "Crowbar"))
	    return SendErrorMessage(playerid, "Kamu tidak memiliki crowbar.");

	if (id == -1)
	    return SendErrorMessage(playerid, "Kamu tidak berada didekat kendaraan apapun.");

	if (!CarData[id][carLocked])
	    return SendErrorMessage(playerid, "Kendaraan ini tidak terkunci.");

	PlayerData[playerid][pPicking] = 1;
	PlayerData[playerid][pPickCar] = id;

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan crowbar dan mengambil kunci.", ReturnName(playerid, 0));
	SendServerMessage(playerid, "Harap tunggu 60 detik agar kunci terbuka.");
	return 1;
}*/

CMD:destroyplant(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyplant [plant id]");

	if ((id < 0 || id >= MAX_DRUG_PLANTS) || !PlantData[id][plantExists])
	    return SendErrorMessage(playerid, "Plant ID tidak valid.");

	Plant_Delete(id);
	SendServerMessage(playerid, "Kamu telah berhasil menghancurkan plant ID: %d.", id);
	return 1;
}

CMD:givecar(playerid, params[])
{
	static
		userid,
	    model[32];

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "us[32]", userid, model))
	    return SendSyntaxMessage(playerid, "/givecar [playerid/nama] [modelid/nama kendaraan]");

	if (Car_GetCount(userid) >= MAX_OWNABLE_CARS)
	    return SendErrorMessage(playerid, "Player ini sudah memiliki terlalu banyak kendaraan.");

    if ((model[0] = GetVehicleModelByName(model)) == 0)
	    return SendErrorMessage(playerid, "Model ID tidak valid.");

	static
	    Float:x,
		Float:y,
		Float:z,
		Float:angle,
		id = -1;

    GetPlayerPos(userid, x, y, z);
	GetPlayerFacingAngle(userid, angle);

	id = Car_Create(PlayerData[userid][pID], model[0], x, y + 2, z + 1, angle, random(127), random(127), 0);

	if (id == -1)
	    return SendErrorMessage(playerid, "Server sudah mencapai limit kendaraan.");

	SendServerMessage(playerid, "kamu telah membuat kendaraan ID: %d untuk %s.", CarData[id][carVehicle], ReturnName(userid, 0));
    SendClientMessageEx(userid, COLOR_DONATOR, "[Admin] %s telah memberimu kendaraan ID: %d.", ReturnName(playerid, 0), CarData[id][carVehicle]);
	return 1;
}
CMD:resetint(playerid, params[])
{
	if (GetPlayerInterior(playerid) > 0)
	{
 		SetPlayerInterior(playerid, 0);
	    SendServerMessage(playerid, "Kamu membetulkan interior milikmu.");
	}
	else SendErrorMessage(playerid, "Interiormu tidak bug sekarang.");
	return 1;
}
CMD:resetvw(playerid, params[])
{
	if (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) > 0)
	{
	    SetPlayerVirtualWorld(playerid, 0);
	    SendServerMessage(playerid, "Kamu membetulkan virtualworld milikmu.");
	}
	else SendErrorMessage(playerid, "Virtualworldmu tidak bug sekarang.");
	return 1;
}

CMD:stopanim(playerid, params[])
{
	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak butuh command ini sekarang.");

	ClearAnimations(playerid, 1);
    HidePlayerFooter(playerid);

	PlayerData[playerid][pLoopAnim] = 0;
	SendServerMessage(playerid, "Kamu menghentikan animasi.");
	return 1;
}

CMD:editbillboard(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editbillboard [id] [name]");
	    SendClientMessage(playerid, COLOR_ORANGE, "[NAMES]:{FFFFFF} location, name, price, message, owner, range");
		return 1;
	}
	if ((id < 0 || id >= MAX_BILLBOARDS) || !BillBoardData[id][bbExists])
	    return SendErrorMessage(playerid, "ID Billboard tidak valid.");

	if (!strcmp(type, "location", true))
	{
 		GetPlayerPos(playerid, BillBoardData[id][bbPos][0], BillBoardData[id][bbPos][1], BillBoardData[id][bbPos][2]);

		Billboard_Refresh(id);
		Billboard_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah mengubah lokasi billboard ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "price", true))
	{
	    new price;

	    if (sscanf(string, "d", price))
	        return SendSyntaxMessage(playerid, "/editbillboard [id] [price] [harga baru]");

	    BillBoardData[id][bbPrice] = price;

	    Billboard_Refresh(id);
	    Billboard_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah mengubah harga billboard ID: %d menjadi %s.", ReturnName(playerid, 0), id, FormatNumber(price));
	}
	else if (!strcmp(type, "name", true))
	{
	    new name[32];

	    if (sscanf(string, "s[32]", name))
	        return SendSyntaxMessage(playerid, "/editbillboard [id] [name] [nama baru]");

	    format(BillBoardData[id][bbName], 32, name);

	    Billboard_Refresh(id);
	    Billboard_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah mengubah nama billboard ID: %d menjadi \"%s\".", ReturnName(playerid, 0), id, name);
	}
	else if (!strcmp(type, "message", true))
	{
	    new name[32];

	    if (sscanf(string, "s[230]", name))
	        return SendSyntaxMessage(playerid, "/editbillboard [id] [message] [pesan baru] (Maksimal karakter: 230)");

	    format(BillBoardData[id][bbMessage], 32, name);

	    Billboard_Refresh(id);
	    Billboard_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menyesuaikan pesan dari billboard ID: %d menjadi \"%s\".", ReturnName(playerid, 0), id, name);
	}
	else if (!strcmp(type, "owner", true))
	{
	    new giveplayerid;

	    if (sscanf(string, "d", giveplayerid))
	        return SendSyntaxMessage(playerid, "/editbillboard [id] [(remove)owner] [playerid]");

        if (giveplayerid == INVALID_PLAYER_ID)
	    	return SendErrorMessage(playerid, "Player tidak terkoneksi.");
		BillBoardData[id][bbOwner] = GetPlayerSQLID(giveplayerid);

	    Billboard_Refresh(id);
	    Billboard_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menyesuaikan pemilik billboard ID: %d", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "removeowner", true))
	{
	    if (sscanf(string, "d"))
	        return SendSyntaxMessage(playerid, "/editbillboard [id] [removeowner]");

		BillBoardData[id][bbOwner] = 0;

	    Billboard_Refresh(id);
	    Billboard_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah menghapus pemilik dari billboard ID: %d", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "range", true))
	{
	    new range;

	    if (sscanf(string, "d", range))
	        return SendSyntaxMessage(playerid, "/editbillboard [id] [range] [new range]");

        if(range < 10)
		{
		    SendErrorMessage(playerid, "Jangkauan hanya boleh 10-200");
		    return 1;
		}

		if(range > 200)
		{
		    SendErrorMessage(playerid, "Jangkauan hanya boleh 10-200");
		    return 1;
		}

	    BillBoardData[id][bbRange] = range;

	    Billboard_Refresh(id);
	    Billboard_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s telah mengubah jangkauan billboard ID: %d menjadi %d.", ReturnName(playerid, 0), id, range);
	}
	return 1;
}

CMD:destroybillboard(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroybillboard [bb id]");

	if ((id < 0 || id >= MAX_BILLBOARDS) || !BillBoardData[id][bbExists])
	    return SendErrorMessage(playerid, "ID Billboard tidak valid.");

	Billboard_Delete(id);
	SendServerMessage(playerid, "Kamu telah berhasil menghancurkan Billboard ID: %d.", id);
	return 1;
}

CMD:call(playerid, params[])
{
    if (!Inventory_HasItem(playerid, "Cellphone"))
	    return SendErrorMessage(playerid, "Kamu tidak memiliki ponsel .");

    if (PlayerData[playerid][pPhoneOff])
		return SendErrorMessage(playerid, "Ponselmu harus aktif sekarang.");

    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "Kamu tidak bisa menggunakan command ini sekarang.");

	static
	    targetid,
		number;

	if (sscanf(params, "d", number))
 	   return SendSyntaxMessage(playerid, "/call [nomor telpon] 1222-Taxi, 911-Police/FD, 222-News Corp, 223-Billboards Agency, 115-Mechanic, 34245-Government/Bank, 58696-WES.");

	if (!number)
	    return SendErrorMessage(playerid, "Nomor telepon yang ditentukan tidak dalam jangkauan layanan.");

	if (number == 911)
	{
		PlayerData[playerid][pEmergency] = 1;
		PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan ponselnya dan menelpon.", ReturnName(playerid, 0));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "[DISPATCHER]:{FFFFFF} 911, ini Monica berbicara. Layanan mana yang kamu butuhkan? \"Police\" atau \"FD\"?");
	}
	else if (number == 1222)
	{
	    PlayerData[playerid][pTaxiCalled] = 1;
	    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan ponselnya dan menelpon.", ReturnName(playerid, 0));
		SendClientMessage(playerid, COLOR_YELLOW, "[DISPATCHER]:{FFFFFF} Bagian taksi telah diberitahu tentang teleponmu.");

        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menenutup ponselnya.", ReturnName(playerid, 0));
		SendJobMessage(3, COLOR_YELLOW, "** %s membutuhkan taxi di daerah %s (ketik /acceptcall untuk menerima).", ReturnName(playerid, 0), GetPlayerLocation(playerid));
	}
	else if (number == 115)
	{
	    PlayerData[playerid][pMechanicCalled] = 1;
	    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan ponselnya dan menelpon.", ReturnName(playerid, 0));
		SendClientMessage(playerid, COLOR_YELLOW, "[DISPATCHER]:{FFFFFF} Bagian Mekanik telah diberitahu tentang panggilanmu.");

        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s telah menenutup ponselnya.", ReturnName(playerid, 0));
		SendJobMessage(2, COLOR_YELLOW, "** %s membutuhkan mekanik di daerah %s (ketik /acceptmechanic untuk menerima).", ReturnName(playerid, 0), GetPlayerLocation(playerid));
	}
	else if (number == 222)
	{
	    if (IsPlayerInRangeOfPoint(playerid, 7.0, 688.1168,-1346.6475,770.1760))
	 	{
	    PlayerData[playerid][pPlaceAd] = 1;
	    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan ponselnya dan menelpon.", ReturnName(playerid, 0));

		if (PlayerData[playerid][pChannel4] < 2) {
            SendClientMessage(playerid, COLOR_CYAN, "[DISPATCHER]:{FFFFFF} Maaf, Kamu harus memiliki level 2.");
		    cmd_hangup(playerid, "\1");
		}
		else if (PlayerData[playerid][pAdTime] < 1) {
			SendClientMessage(playerid, COLOR_CYAN, "[DISPATCHER]:{FFFFFF} Tolong katakan \"yes\" jika kamu ingin beriklan seharga $200.");
		}
		else {
		    SendClientMessage(playerid, COLOR_CYAN, "[DISPATCHER]:{FFFFFF} Kamu sudah pernah mengiklankannya dalam 2 menit terakhir. Silakan coba lagi nanti.");
		    cmd_hangup(playerid, "\1");
			}
		}
		else
		{
		    SendErrorMessage(playerid, "Kamu harus di SanNews untuk melakukan Digital Advertising");
  		}
	}
	else if (number == 223)
	{
	    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan ponselnya dan menelpon.", ReturnName(playerid, 0));

		if (PlayerData[playerid][pPlayingHours] < 4) {
            SendClientMessage(playerid, COLOR_CYAN, "[DISPATCHER]:{FFFFFF} Maaf, Kamu harus bermain 4 jam terlebih dahulu untuk menyewa papan iklan.");
		    cmd_hangup(playerid, "\1");
		}
		SendClientMessageEx(playerid, COLOR_YELLOW, "[PHONE]:{FFFFFF} Halo, ini adalah Agen Billboard Los Santos, tolong dengarkan pilihan berikut!");
		ViewBillboards(playerid);
	}
	else if ((targetid = GetNumberOwner(number)) != INVALID_PLAYER_ID)
	{
	    if (targetid == playerid)
	        return SendErrorMessage(playerid, "Kamu tidak bisa menelpon dirimu sendiri!");

		if (PlayerData[targetid][pPhoneOff])
		    return SendErrorMessage(playerid, "Orang yang kamu tuju mematikan teleponnya.");

		PlayerData[targetid][pIncomingCall] = 1;
		PlayerData[playerid][pIncomingCall] = 1;

		PlayerData[targetid][pCallLine] = playerid;
		PlayerData[playerid][pCallLine] = targetid;

		SendClientMessageEx(playerid, COLOR_YELLOW, "[PHONE]:{FFFFFF} Mencoba untuk menelpon #%d, menunggu jawaban...", number);
		SendClientMessageEx(targetid, COLOR_YELLOW, "[PHONE]:{FFFFFF} Panggilan masuk dari #%d (ketik \"/pickup\" untuk menjawab telepon).", PlayerData[playerid][pPhone]);

        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
        PlayerPlaySoundEx(targetid, 23000);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan ponselnya dan menelpon.", ReturnName(playerid, 0));
	}
	else if (number == 58696)
	{
	    if (GetFactionType(playerid) != FACTION_GANG)
	    return SendErrorMessage(playerid, "Kamu bukan anggota sebuah faction illegal.");
		if (IsPlayerInRangeOfPoint(playerid, 7.0, 2163.7600, -102.9300, 3.0300))
		{
			PlayerData[playerid][pDealerCall] = 1;
			PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan ponselnya dan menelpon.", ReturnName(playerid, 0));
			SendClientMessage(playerid, COLOR_NEWBLUE, "[DEALER]:{FFFFFF} Yo, Apa yang kamu butuhkan hari ini? \"Melee Parts\", \"Pistol Parts\", \"SMG Parts\", \"Shotgun Parts\", \"Rifle Parts\", \"Drugs\" ");
		}
		else
		{
			SendErrorMessage(playerid, "Kamu harus di tempat penyelundupan");
		}
	}
	else if (number == 34245)
	{
		PlayerData[playerid][pLoanAsk] = 1;
		PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mengeluarkan ponselnya mereka dan menelepon.", ReturnName(playerid, 0));
		SendClientMessage(playerid, COLOR_ORANGE, "[Bank Consultant]:{FFFFFF} Halo, saya adalah Konsultan Perbankanmu. Apa yang kamu butuhkan? \"Loan\" atau \"Help\"?");
	}
	else
	{
	    SendErrorMessage(playerid, "The specified phone number is not in service.");
	}
	return 1;
}

CMD:createbillboard(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");

	id = Billboard_Create(playerid, -1);

	if (id == -1)
	    return SendErrorMessage(playerid, "Server telah mencapai limit untuk pemasangan billboard.");

	SendServerMessage(playerid, "Kamu berhasil membuat billboard ID: %d.", id);
	return 1;
}
CMD:billboards(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
	{
	    SendErrorMessage(playerid, "Kamu tidak diizikan menggunakan command ini.");
	    return 1;
	}
	ViewBillboards(playerid);
	return 1;
}

CMD:mybillboard(playerid, params[])
{
	if(PlayerData[playerid][pOwnsBillboard] == -1)
	{
	    SendErrorMessage(playerid, "Kamu tidak memiliki billboard.");
	    return 1;
	}
    Dialog_Show(playerid, MyBillboardMenu, DIALOG_STYLE_LIST, "Manage Billboard", "Ubah Pesan\nBatal Sewa", "Proses", "Batal");
    return 1;
}

forward CutTree(playerid);
public CutTree(playerid)
{
    if(CuttingTreeID[playerid] != -1)
	{
	    new id = CuttingTreeID[playerid], Float: value = GetPlayerProgressBarValue(playerid, CuttingBar[playerid]) + 1.0;

		if(value >= CUTTING_TIME) {
		    Player_ResetCutting(playerid);
			MoveDynamicObject(TreeData[id][treeObjID], TreeData[id][treeX], TreeData[id][treeY], TreeData[id][treeZ] + 0.03, 0.025, TreeData[id][treeRX], TreeData[id][treeRY] - 80.0, TreeData[id][treeRZ]);

			TreeData[id][treeLogs] = 5;
			TreeData[id][treeSeconds] = TREE_RESPAWN;
			Tree_UpdateLogLabel(id);
		}else{
		    SetPlayerProgressBarValue(playerid, CuttingBar[playerid], value);
		}
	}

	return 1;
}

forward RespawnTree(id);
public RespawnTree(id)
{
	new label[96];
	if(TreeData[id][treeSeconds] > 1) {
	    TreeData[id][treeSeconds]--;

	    format(label, sizeof(label), "Pohon (%d)\n\n{FFFFFF}%s", id, ConvertToMinutes(TreeData[id][treeSeconds]));
		UpdateDynamic3DTextLabelText(TreeData[id][treeLabel], 0xE74C3CFF, label);
	}else if(TreeData[id][treeSeconds] == 1) {
	    KillTimer(TreeData[id][treeTimer]);

	    TreeData[id][treeLogs] = 0;
	    TreeData[id][treeSeconds] = 0;
	    TreeData[id][treeTimer] = -1;

	    SetDynamicObjectPos(TreeData[id][treeObjID], TreeData[id][treeX], TreeData[id][treeY], TreeData[id][treeZ]);
     	SetDynamicObjectRot(TreeData[id][treeObjID], TreeData[id][treeRX], TreeData[id][treeRY], TreeData[id][treeRZ]);

     	format(label, sizeof(label), "Pohon (%d)\n\n{FFFFFF}Tekan {F1C40F}~k~~CONVERSATION_NO~ {FFFFFF}untuk memotongnya.", id);
     	UpdateDynamic3DTextLabelText(TreeData[id][treeLabel], 0x2ECC71FF, label);
	}

	return 1;
}

forward RemoveLog(id);
public RemoveLog(id)
{
	if(!Iter_Contains(Logs, id)) return 1;

	if(LogData[id][logSeconds] > 1) {
	    LogData[id][logSeconds]--;

        new label[128];
	    format(label, sizeof(label), "Log (%d)\n\n{FFFFFF}Dipotong oleh {F1C40F}%s\n{FFFFFF}%s\nGunakan {F1C40F}/log take {FFFFFF}untuk mengambil kayunya.", id, LogData[id][logDroppedBy], ConvertToMinutes(LogData[id][logSeconds]));
		UpdateDynamic3DTextLabelText(LogData[id][logLabel], 0xF1C40FFF, label);
	}else if(LogData[id][logSeconds] == 1) {
	    KillTimer(LogData[id][logTimer]);
	    DestroyDynamicObject(LogData[id][logObjID]);
		DestroyDynamic3DTextLabel(LogData[id][logLabel]);

	    LogData[id][logTimer] = -1;
        LogData[id][logObjID] = -1;
        LogData[id][logLabel] = Text3D: -1;

		Iter_Remove(Logs, id);
	}

	return 1;
}

// Player Commands
CMD:chainsaw(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_LUMBER)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki pekerjaan sebagai lumberjack.");
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Kamu tidak bisa menggunakan command ini di kendaraan.");
    if(!IsPlayerNearALogBuyer(playerid)) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Kamu tidak berada didekat pembeli kayu.");
	if(GetPlayerMoney(playerid) < CSAW_PRICE) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Kamu tidak memiliki cukup uang.");
    GiveMoney(playerid, -CSAW_PRICE);
    GiveWeaponToPlayer(playerid, WEAPON_CHAINSAW, 1);

    new string[64];
    format(string, sizeof(string), "LUMBERJACK: {FFFFFF}Membeli sebuah Chainsaw seharga {2ECC71}$%d. Jangan gunakan chainsaw untuk membunuh player atau kamu akan dipenjara.", CSAW_PRICE);
   	SendClientMessage(playerid, 0x3498DBFF, string);
	return 1;
}

CMD:log(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_LUMBER)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki pekerjaan sebagai lumberjack.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Kamu tidak bisa menggunakan command ini di kendaraan.");
    if(isnull(params)) return SendClientMessage(playerid, 0xE88732FF, "SYNTAX: {FFFFFF}/log [load/take/takefromcar/takefromtree/sell]");

    if(!strcmp(params, "load", true)) {
        // loading to a bobcat
        if(!CarryingLog[playerid]) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Kamu tidak membawa kayu apapun.");
		new id = GetNearestVehicle(playerid);
		if(GetVehicleModel(id) != 422) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Kamu tidak berada didekat Bobcat.");
		new Float: x, Float: y, Float: z;
    	GetVehicleBoot(id, x, y, z);
    	if(!IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z)) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Kamu tidak berada di bagasi Bobcat.");
    	if(Vehicle_LogCount(id) >= LOG_LIMIT) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Kamu tidak bisa menyimpan lebih kayu lagi di kendaraan ini.");
    	for(new i; i < LOG_LIMIT; i++)
    	{
    	    if(!IsValidDynamicObject(LogObjects[id][i]))
    	    {
    	        LogObjects[id][i] = CreateDynamicObject(19793, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    			AttachDynamicObjectToVehicle(LogObjects[id][i], id, LogAttachOffsets[i][0], LogAttachOffsets[i][1], LogAttachOffsets[i][2], 0.0, 0.0, LogAttachOffsets[i][3]);
    			break;
    	    }
    	}

    	Streamer_Update(playerid);
    	Player_RemoveLog(playerid);
    	SendClientMessage(playerid, 0x3498DBFF, "LUMBERJACK: {FFFFFF}Menyimpan kayu ke kendaraan.");
    	// done
    }else if(!strcmp(params, "take")) {
        // taking from ground
        if(CarryingLog[playerid]) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Kamu sedang membawa sebuah kayu.");
		new id = GetClosestLog(playerid);
		if(id == -1) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Kamu tidak berada di dekat kayu tersebut.");
		LogData[id][logSeconds] = 1;
		RemoveLog(id);

		Player_GiveLog(playerid);
		SendClientMessage(playerid, 0x3498DBFF, "LUMBERJACK: {FFFFFF}Kamu mengangkat kayu yang tergeletak di tanah.");
		// done
    }else if(!strcmp(params, "takefromcar")) {
        // taking from a bobcat
        if(CarryingLog[playerid]) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Kamu sedang membawa sebuah kayu.");
        new id = GetNearestVehicle(playerid);
		if(GetVehicleModel(id) != 422) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Kamu tidak berada di dekat Bobcat.");
		new Float: x, Float: y, Float: z;
    	GetVehicleBoot(id, x, y, z);
    	if(!IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z)) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Kamu harus berada di belakang Bobcat.");
    	if(Vehicle_LogCount(id) < 1) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Bobcat ini tidak membawa kayu apapun.");
    	for(new i = (LOG_LIMIT - 1); i >= 0; i--)
    	{
    	    if(IsValidDynamicObject(LogObjects[id][i]))
    	    {
    	        DestroyDynamicObject(LogObjects[id][i]);
    	        LogObjects[id][i] = -1;
    			break;
    	    }
    	}

    	Streamer_Update(playerid);
    	Player_GiveLog(playerid);
        SendClientMessage(playerid, 0x3498DBFF, "LUMBERJACK: {FFFFFF}Kamu mengambil kayu dari Bobcat.");
        // done
    }else if(!strcmp(params, "takefromtree")) {
		// taking from a cut tree
		if(CarryingLog[playerid]) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Kamu sedang membawa sebuah kayu.");
        new id = GetClosestTree(playerid);
        if(id == -1) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Kamu tidak berada didekat pohon.");
        if(TreeData[id][treeSeconds] < 1) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Pohon ini tidak terpotong.");
        if(TreeData[id][treeLogs] < 1) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Tidak terdapat kayu lagi di pohon ini.");
        TreeData[id][treeLogs]--;
        Tree_UpdateLogLabel(id);

        Player_GiveLog(playerid);
        SendClientMessage(playerid, 0x3498DBFF, "LUMBERJACK: {FFFFFF}Kamu mengambil kayu dari pohon.");
        // done
    }else if(!strcmp(params, "sell")) {
        // selling a log
        if(!CarryingLog[playerid]) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Kamu tidak membawa kayu yang bisa kamu jual.");
		if(!IsPlayerNearALogBuyer(playerid)) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Kamu tidak berada didekat pembeli kayu.");
		Player_RemoveLog(playerid);
		GiveMoney(playerid, LOG_PRICE);

		new string[64];
		format(string, sizeof(string), "LUMBERJACK: {FFFFFF}Menjual sebuah kayu dengan harga {2ECC71}$%d.", LOG_PRICE);
    	SendClientMessage(playerid, 0x3498DBFF, string);
        // done
    }

	return 1;
}

// Admin Commands - Trees
CMD:createtree(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Kamu tidak memiliki izin untuk menggunakan perintah ini.");
	new id = Iter_Free(Trees);
	if(id == -1) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Tidak bisa membuat pohon lagi.");
 	new Float: x, Float: y, Float: z, Float: a;
 	GetPlayerPos(playerid, x, y, z);
 	GetPlayerFacingAngle(playerid, a);
 	x += (3.0 * floatsin(-a, degrees));
	y += (3.0 * floatcos(-a, degrees));
	z -= 1.0;

	TreeData[id][treeX] = x;
	TreeData[id][treeY] = y;
	TreeData[id][treeZ] = z;
	TreeData[id][treeRX] = TreeData[id][treeRY] = TreeData[id][treeRZ] = 0.0;

	TreeData[id][treeObjID] = CreateDynamicObject(657, TreeData[id][treeX], TreeData[id][treeY], TreeData[id][treeZ], TreeData[id][treeRX], TreeData[id][treeRY], TreeData[id][treeRZ]);

	new label[96];
	format(label, sizeof(label), "Pohon (%d)\n\n{FFFFFF}Ketik {F1C40F}~k~~CONVERSATION_NO~ {FFFFFF}untuk memotongnya.", id);
	TreeData[id][treeLabel] = CreateDynamic3DTextLabel(label, 0x2ECC71FF, TreeData[id][treeX], TreeData[id][treeY], TreeData[id][treeZ] + 1.5, 5.0);
	Iter_Add(Trees, id);

	stmt_bind_value(AddTree, 0, DB::TYPE_INTEGER, id);
    stmt_bind_value(AddTree, 1, DB::TYPE_FLOAT, TreeData[id][treeX]);
    stmt_bind_value(AddTree, 2, DB::TYPE_FLOAT, TreeData[id][treeY]);
    stmt_bind_value(AddTree, 3, DB::TYPE_FLOAT, TreeData[id][treeZ]);
    stmt_bind_value(AddTree, 4, DB::TYPE_FLOAT, TreeData[id][treeRX]);
    stmt_bind_value(AddTree, 5, DB::TYPE_FLOAT, TreeData[id][treeRY]);
    stmt_bind_value(AddTree, 6, DB::TYPE_FLOAT, TreeData[id][treeRZ]);

    if(stmt_execute(AddTree))
    {
        EditingTreeID[playerid] = id;
        EditDynamicObject(playerid, TreeData[id][treeObjID]);

        SendClientMessage(playerid, 0x3498DBFF, "LUMBERJACK: {FFFFFF}Pohon dibuat.");
        SendClientMessage(playerid, 0x3498DBFF, "LUMBERJACK: {FFFFFF}Kamu bisa mengeditnya, atau membatalkan edit jika kamu tidak punya waktu luang.");
	}

	return 1;
}

CMD:edittree(playerid, params[])
{
    if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Command berbahaya.");
    if(EditingTreeID[playerid] != -1) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Kamu sedang mengedit sebuah pohon.");
	new id;
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, 0xE88732FF, "SYNTAX: {FFFFFF}/edittree [id pohon]");
	if(!Iter_Contains(Trees, id)) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Invalid ID.");
	if(TreeData[id][treeGettingCut]) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Tidak bisa mengedit pohon karena telah terpotong.");
	if(!IsPlayerInRangeOfPoint(playerid, 30.0, TreeData[id][treeX], TreeData[id][treeY], TreeData[id][treeZ])) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Kamu tidak berada di dekat pohon tersebut.");
	EditingTreeID[playerid] = id;
	EditDynamicObject(playerid, TreeData[id][treeObjID]);
	return 1;
}

CMD:removetree(playerid, params[])
{
    if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Command berbahaya.");
	new id;
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, 0xE88732FF, "SYNTAX: {FFFFFF}/removetree [id pohon]");
	if(!Iter_Contains(Trees, id)) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Invalid ID.");
	if(TreeData[id][treeGettingCut]) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Tidak bisa dihapus karena sedang masa pertumbuhan.");
	if(Tree_BeingEdited(id)) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Tidak bisa menghapus pohon ini karena sedang di edit.");
	DestroyDynamicObject(TreeData[id][treeObjID]);
	DestroyDynamic3DTextLabel(TreeData[id][treeLabel]);
	if(TreeData[id][treeTimer] != -1) KillTimer(TreeData[id][treeTimer]);

	TreeData[id][treeLogs] = TreeData[id][treeSeconds] = 0;
	TreeData[id][treeObjID] = TreeData[id][treeTimer] = -1;
	TreeData[id][treeLabel] = Text3D: -1;
	Iter_Remove(Trees, id);

	stmt_bind_value(RemoveTree, 0, DB::TYPE_INTEGER, id);
	if(stmt_execute(RemoveTree)) SendClientMessage(playerid, 0x3498DBFF, "LUMBERJACK: {FFFFFF}Pohon dihapus.");
	return 1;
}

// Admin Commands - Log Buyers
CMD:createbuyer(playerid, params[])
{
	if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Command berbahaya.");
	new skin;
	if(sscanf(params, "i", skin)) return SendClientMessage(playerid, 0xE88732FF, "SYNTAX: {FFFFFF}/createbuyer [skin id]");
	if(!(0 <= skin <= 311)) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Invalid skin ID.");
	new id = Iter_Free(Buyers);
	if(id == -1) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Tidak bisa menambah lebih banyak lagi pembeli kayu.");
	GetPlayerPos(playerid, BuyerData[id][buyerX], BuyerData[id][buyerY], BuyerData[id][buyerZ]);
	GetPlayerFacingAngle(playerid, BuyerData[id][buyerA]);

	BuyerData[id][buyerActorID] = CreateActor(skin, BuyerData[id][buyerX], BuyerData[id][buyerY], BuyerData[id][buyerZ], BuyerData[id][buyerA]);
	SetActorInvulnerable(BuyerData[id][buyerActorID], 1);

	new label[172];
	format(label, sizeof(label), "Pembeli kayu (%d)\n\n{FFFFFF}Gunakan {F1C40F}/chainsaw {FFFFFF}untuk membeli Chainsaw seharga {2ECC71}$%d.\n{F1C40F}/log sell {FFFFFF}untuk jual kayu {2ECC71}$%d.", id, CSAW_PRICE, LOG_PRICE);
	BuyerData[id][buyerLabel] = CreateDynamic3DTextLabel(label, 0xF1C40FFF, BuyerData[id][buyerX], BuyerData[id][buyerY], BuyerData[id][buyerZ] + 0.25, 5.0, .testlos = 1);
	Iter_Add(Buyers, id);

	stmt_bind_value(AddBuyer, 0, DB::TYPE_INTEGER, id);
	stmt_bind_value(AddBuyer, 1, DB::TYPE_INTEGER, skin);
    stmt_bind_value(AddBuyer, 2, DB::TYPE_FLOAT, BuyerData[id][buyerX]);
    stmt_bind_value(AddBuyer, 3, DB::TYPE_FLOAT, BuyerData[id][buyerY]);
    stmt_bind_value(AddBuyer, 4, DB::TYPE_FLOAT, BuyerData[id][buyerZ]);
    stmt_bind_value(AddBuyer, 5, DB::TYPE_FLOAT, BuyerData[id][buyerA]);

    if(stmt_execute(AddBuyer))
	{
		SendClientMessage(playerid, 0x3498DBFF, "LUMBERJACK: {FFFFFF}Pembeli dibuat.");
		SetPlayerPos(playerid, BuyerData[id][buyerX] + (1.5 * floatsin(-BuyerData[id][buyerA], degrees)), BuyerData[id][buyerY] + (1.5 * floatcos(-BuyerData[id][buyerA], degrees)), BuyerData[id][buyerZ]);
	}
	return 1;
}

CMD:setbuyerskin(playerid, params[])
{
	if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Command berbahaya.");
	new id, skin;
	if(sscanf(params, "ii", id, skin)) return SendClientMessage(playerid, 0xE88732FF, "SYNTAX: {FFFFFF}/setbuyerskin [buyer id] [skin id]");
	if(!Iter_Contains(Buyers, id)) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Invalid ID.");
	if(!(0 <= skin <= 311)) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Invalid skin ID.");
	BuyerData[id][buyerSkin] = skin;

	DestroyActor(BuyerData[id][buyerActorID]);
	BuyerData[id][buyerActorID] = CreateActor(skin, BuyerData[id][buyerX], BuyerData[id][buyerY], BuyerData[id][buyerZ], BuyerData[id][buyerA]);
	SetActorInvulnerable(BuyerData[id][buyerActorID], 1);

	stmt_bind_value(UpdateBuyer, 0, DB::TYPE_INTEGER, skin);
    stmt_bind_value(UpdateBuyer, 1, DB::TYPE_FLOAT, BuyerData[id][buyerX]);
    stmt_bind_value(UpdateBuyer, 2, DB::TYPE_FLOAT, BuyerData[id][buyerY]);
    stmt_bind_value(UpdateBuyer, 3, DB::TYPE_FLOAT, BuyerData[id][buyerZ]);
    stmt_bind_value(UpdateBuyer, 4, DB::TYPE_FLOAT, BuyerData[id][buyerA]);
    stmt_bind_value(UpdateBuyer, 5, DB::TYPE_INTEGER, id);

    if(stmt_execute(UpdateBuyer)) SendClientMessage(playerid, 0x3498DBFF, "LUMBERJACK: {FFFFFF}Buyer updated.");
	return 1;
}

CMD:setbuyerpos(playerid, params[])
{
	if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Command berbahaya.");
	new id;
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, 0xE88732FF, "SYNTAX: {FFFFFF}/setbuyerpos [buyer id]");
	if(!Iter_Contains(Buyers, id)) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Invalid ID.");
	GetPlayerPos(playerid, BuyerData[id][buyerX], BuyerData[id][buyerY], BuyerData[id][buyerZ]);
	GetPlayerFacingAngle(playerid, BuyerData[id][buyerA]);

	DestroyActor(BuyerData[id][buyerActorID]);
	BuyerData[id][buyerActorID] = CreateActor(BuyerData[id][buyerSkin], BuyerData[id][buyerX], BuyerData[id][buyerY], BuyerData[id][buyerZ], BuyerData[id][buyerA]);
	SetActorInvulnerable(BuyerData[id][buyerActorID], 1);

    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, BuyerData[id][buyerLabel], E_STREAMER_X, BuyerData[id][buyerX]);
	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, BuyerData[id][buyerLabel], E_STREAMER_Y, BuyerData[id][buyerY]);
	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, BuyerData[id][buyerLabel], E_STREAMER_Z, BuyerData[id][buyerZ] + 0.25);

	stmt_bind_value(UpdateBuyer, 0, DB::TYPE_INTEGER, BuyerData[id][buyerSkin]);
    stmt_bind_value(UpdateBuyer, 1, DB::TYPE_FLOAT, BuyerData[id][buyerX]);
    stmt_bind_value(UpdateBuyer, 2, DB::TYPE_FLOAT, BuyerData[id][buyerY]);
    stmt_bind_value(UpdateBuyer, 3, DB::TYPE_FLOAT, BuyerData[id][buyerZ]);
    stmt_bind_value(UpdateBuyer, 4, DB::TYPE_FLOAT, BuyerData[id][buyerA]);
    stmt_bind_value(UpdateBuyer, 5, DB::TYPE_INTEGER, id);

    if(stmt_execute(UpdateBuyer))
	{
		SendClientMessage(playerid, 0x3498DBFF, "LUMBERJACK: {FFFFFF}Buyer updated.");
        SetPlayerPos(playerid, BuyerData[id][buyerX] + (1.5 * floatsin(-BuyerData[id][buyerA], degrees)), BuyerData[id][buyerY] + (1.5 * floatcos(-BuyerData[id][buyerA], degrees)), BuyerData[id][buyerZ]);
	}

	return 1;
}

CMD:removebuyer(playerid, params[])
{
	if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Command berbahaya.");
	new id;
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, 0xE88732FF, "SYNTAX: {FFFFFF}/removebuyer [buyer id]");
	if(!Iter_Contains(Buyers, id)) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Invalid ID.");
	DestroyActor(BuyerData[id][buyerActorID]);
	DestroyDynamic3DTextLabel(BuyerData[id][buyerLabel]);

	BuyerData[id][buyerActorID] = -1;
	BuyerData[id][buyerLabel] = Text3D: -1;
	Iter_Remove(Buyers, id);

	stmt_bind_value(RemoveBuyer, 0, DB::TYPE_INTEGER, id);
    if(stmt_execute(RemoveBuyer)) SendClientMessage(playerid, 0x3498DBFF, "LUMBERJACK: {FFFFFF}Buyer removed.");
	return 1;
}*/
//Pizza
CMD:pizzahelp(playerid, params[])
{
	SendClientMessage(playerid,-1," Pizzaboy job: /startjob, /endjob, /restock, /getpizza, /putbackpizza");
	return 1;
}

CMD:restock(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid,3.0,2116.4973,-1788.3663,13.1152))
	{
	    if(IsInJob[playerid] == 1)
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	        {
	            if(PizzaBikesPizzas[GetPlayerVehicleID(playerid)] == 0)
	            {
	                new string[56];
	                PizzaBikesPizzas[GetPlayerVehicleID(playerid)]=5;
	                SendClientMessage(playerid,-1," Kamu berhasil merestock {FF0000}5 {FFFFFF}pizza!");

    				PlayerTextDrawHide(playerid,PizzasText[playerid]);
    				format(string,sizeof(string),"Pizzas: ~r~%d~w~ /~g~ 5",PizzaBikesPizzas[GetPlayerVehicleID(playerid)]);
    				PlayerTextDrawSetString(playerid,PizzasText[playerid],string);
    				PlayerTextDrawShow(playerid,PizzasText[playerid]);
	            }
	            else return SendClientMessage(playerid,-1,"Motor pengantar pizzamu masih memiliki stock!");
	        }
	        else return SendClientMessage(playerid,-1,"Kamu harus berada di motor pizza!");
	    }
	    else return SendClientMessage(playerid,-1,"Kamu harus melakukan part-time job sebelum menggunakan command ini!");
	}
	else return SendClientMessage(playerid,-1,"Kamu harus berada di Well Stacked Pizza Co. untuk menggunakan command ini!");
	return 1;
}

CMD:putbackpizza(playerid, params[])
{
	if(IsInJob[playerid] == 1)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid,PIZZA_INDEX))
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	        {
			    new Float:X,Float:Y,Float:Z;
			    for(new j=0;j<5;j++)
			    {
					GetVehiclePos(pizzabikes[j],X,Y,Z);
					if(IsPlayerInRangeOfPoint(playerid,3.0,X,Y,Z))
					{
					    if(PizzaBikesPizzas[pizzabikes[j]] < 5)
					    {
					    	PizzaBikesPizzas[pizzabikes[j]]++;
					    	ClearAnimations(playerid);
							RemovePlayerAttachedObject(playerid, PIZZA_INDEX);
							SendClientMessage(playerid,-1,"Pizza berhasil diletakkan di motor!");
							ApplyAnimation(playerid, "INT_HOUSE", "wash_up",4.1,0,0,0,0,0,1);
					    	return 1;
						}
						else
						{
						    SendClientMessage(playerid,-1,"Motor ini sudah memiliki lebih dari 5 pizza!");
						    return 1;
						}
					}
				}
			}
			else return SendClientMessage(playerid,-1,"Kamu harus keluar dari kendaraan untuk menggunakan command ini!");
		}
		else return SendClientMessage(playerid,-1,"Kamu tidak membawa pizza box ditanganmu!");
	}
	return 1;
}

CMD:getpizza(playerid, params[])
{
	if(IsInJob[playerid] == 1)
	{
	    if(!IsPlayerAttachedObjectSlotUsed(playerid,PIZZA_INDEX))
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	        {
			    new Float:X,Float:Y,Float:Z;
			    for(new j=0;j<5;j++)
			    {
					GetVehiclePos(pizzabikes[j],X,Y,Z);
					if(IsPlayerInRangeOfPoint(playerid,3.0,X,Y,Z))
					{
					    if(PizzaBikesPizzas[pizzabikes[j]] >= 1)
					    {
					    	PizzaBikesPizzas[pizzabikes[j]]--;
					    	ApplyAnimation(playerid,"CARRY","crry_prtial",4.1,1,1,1,1,1,1);
							SetPlayerAttachedObject( playerid, PIZZA_INDEX, 1582, 1, 0.002953, 0.469660, -0.009797, 269.851104, 88.443557, 0.000000, 0.804894, 1.000000, 0.822361 );
					    	return 1;
						}
						else
						{
						    SendClientMessage(playerid,-1,"Stock pizza di motor ini sudah habis!");
						    return 1;
						}
					}
				}
			}
			else return SendClientMessage(playerid,-1,"Kamu harus berjalan kaki jika ingin menggunakan command ini!");
		}
		else return SendClientMessage(playerid,-1," Kamu sedang membawa pizza box!");
	}
	return 1;
}

CMD:endjob(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid,3.0,2104.2502,-1806.3750,13.5547))
	{
	    if(IsInJob[playerid] == 1)
	    {
	        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	        {
		        new string[128];
	        	ShowHungerTextdraw(playerid, 1);
		        GiveMoney(playerid,PlayerEarnings[playerid]+PlayerTips[playerid]);
				format(string,sizeof(string),"Kamu mendapatkan {7FFF00}%d$ {FFFFFF}karena menyelesaikan part-time pizzaboy job!",PlayerEarnings[playerid]+PlayerTips[playerid]);
				SendClientMessage(playerid,-1,string);
				PlayerEarnings[playerid]=0;
				PlayerTips[playerid]=0;
				if(IsPlayerAttachedObjectSlotUsed(playerid,PIZZA_INDEX)) { RemovePlayerAttachedObject(playerid,PIZZA_INDEX); }
				PlayerCheckpoint[playerid]=CHECKPOINT_NONE;
				DisablePlayerCheckpoint(playerid);
				IsInJob[playerid]=0;
				PlayerTutorialTime[playerid]=0;
				if(IsValidActor(PlayerCustomer[playerid])) { DestroyActor(PlayerCustomer[playerid]); }
				TipTime[playerid]=0;
		        HidePlayerIntroTexts(playerid);
				HidePlayerInfoTexts(playerid);
				HidePlayerPizzaBikeTexts(playerid);
				HideTipTimeText(playerid);
				PizzaBikesPizzas[GetPlayerVehicleID(playerid)]=5;
		        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		        RemovePlayerFromVehicle(playerid);
		        SetPlayerSkin(playerid,PlayerSkin[playerid]);
		        PlayerSkin[playerid]=0;
			}
			else return SendClientMessage(playerid,-1," Kamu harus berada di motor pengantar pizza untuk mengakhiri!");
	    }
	    else return SendClientMessage(playerid,-1," Kamu belum memulai perkejaan apapun!");
	}
	else return SendClientMessage(playerid,-1," Kamu harus berada didepan Well Stacked Pizza Co. untuk mengakhiri pekerjaan!");
	return 1;
}

CMD:cekrep(playerid, params[])
{
	new
		szDialog[64];

	if(PlayerData[playerid][pRep] == 20)
	{
     	format(szDialog, sizeof(szDialog), "{FFFFFF}Reputasi kamu sekarang adalah {FF0000}E");
	}
	else if(PlayerData[playerid][pRep] == 40)
	{
     	format(szDialog, sizeof(szDialog), "{FFFFFF}Reputasi kamu sekarang adalah {FF0000}D");
	}
	else if(PlayerData[playerid][pRep] == 60)
	{
     	format(szDialog, sizeof(szDialog), "{FFFFFF}Reputasi kamu sekarang adalah {FF0000}C");
	}
	else if(PlayerData[playerid][pRep] == 80)
	{
     	format(szDialog, sizeof(szDialog), "{FFFFFF}Reputasi kamu sekarang adalah{FF0000}b");
	}
	else if(PlayerData[playerid][pRep] == 100)
	{
     	format(szDialog, sizeof(szDialog), "{FFFFFF}Reputasi kamu sekarang adalah {FF0000}A");
	}
	else if(PlayerData[playerid][pRep] == 120)
	{
     	format(szDialog, sizeof(szDialog), "{FFFFFF}Reputasi kamu sekarang adalah {FF0000}A++");
	}
	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "{FFFFFF}Current Reputation", szDialog, "Oke", "");
	return 1;
}

CMD:startjob(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid,3.0,2104.2502,-1806.3750,13.5547))
	{
	    if(IsInJob[playerid] == 0)
	    {
     		ShowHungerTextdraw(playerid, 0);
			SetPlayerCameraPos(playerid,2088.402343, -1790.125854, 16.726133);
			SetPlayerCameraLookAt(playerid,2102.1492,-1806.3496,18.1543);
			ShowPlayerIntroTexts(playerid);
			PlayerTutorialTime[playerid]=30;
			IsInJob[playerid]=1;
			PlayerSkin[playerid]=GetPlayerSkin(playerid);
			SetPlayerSkin(playerid,155);
			for (new i = 0; i < 30; i ++) {
	    		SendClientMessage(playerid, COLOR_WHITE, "");
			}
			TogglePlayerControllable(playerid,0);
	    }
	    else return SendClientMessage(playerid,-1,"Kamu sedang melaksanakan Pizzaboy part-time job!");
	}
	else return SendClientMessage(playerid,-1," Kamu harus berada didepan Well Stacked Pizza Co. untuk memulai part-time job!");
	return 1;
}

public ShowPlayerIntroTexts(playerid)
{
    Pizza_Textdraw0[playerid] = CreatePlayerTextDraw(playerid,660.000000, 0.000000, "~n~");
  	PlayerTextDrawBackgroundColor(playerid,Pizza_Textdraw0[playerid], 255);
  	PlayerTextDrawFont(playerid,Pizza_Textdraw0[playerid], 1);
  	PlayerTextDrawLetterSize(playerid,Pizza_Textdraw0[playerid], 0.500000, 14.000000);
  	PlayerTextDrawColor(playerid,Pizza_Textdraw0[playerid], -1);
  	PlayerTextDrawSetOutline(playerid,Pizza_Textdraw0[playerid], 0);
  	PlayerTextDrawSetProportional(playerid,Pizza_Textdraw0[playerid], 1);
 	PlayerTextDrawSetShadow(playerid,Pizza_Textdraw0[playerid], 1);
  	PlayerTextDrawUseBox(playerid,Pizza_Textdraw0[playerid], 1);
  	PlayerTextDrawBoxColor(playerid,Pizza_Textdraw0[playerid], 255);
  	PlayerTextDrawTextSize(playerid,Pizza_Textdraw0[playerid], -20.000000, 0.000000);
  	PlayerTextDrawSetSelectable(playerid,Pizza_Textdraw0[playerid], 0);

  	Pizza_Textdraw1[playerid] = CreatePlayerTextDraw(playerid,660.000000, 320.000000, "~n~");
  	PlayerTextDrawBackgroundColor(playerid,Pizza_Textdraw1[playerid], 255);
  	PlayerTextDrawFont(playerid,Pizza_Textdraw1[playerid], 1);
  	PlayerTextDrawLetterSize(playerid,Pizza_Textdraw1[playerid], 0.500000, 19.000000);
  	PlayerTextDrawColor(playerid,Pizza_Textdraw1[playerid], -1);
  	PlayerTextDrawSetOutline(playerid,Pizza_Textdraw1[playerid], 0);
  	PlayerTextDrawSetProportional(playerid,Pizza_Textdraw1[playerid], 1);
  	PlayerTextDrawSetShadow(playerid,Pizza_Textdraw1[playerid], 1);
  	PlayerTextDrawUseBox(playerid,Pizza_Textdraw1[playerid], 1);
  	PlayerTextDrawBoxColor(playerid,Pizza_Textdraw1[playerid], 255);
  	PlayerTextDrawTextSize(playerid,Pizza_Textdraw1[playerid], -20.000000, 0.000000);
  	PlayerTextDrawSetSelectable(playerid,Pizza_Textdraw1[playerid], 0);

  	Pizza_Textdraw2[playerid] = CreatePlayerTextDraw(playerid,40.000000, 350.000000, "Ini adalah Well Stacked Pizza Co. Mereka mencari pekerja part-time~n~yang membutuhkan uang disela waktu bebas mereka.");
  	PlayerTextDrawBackgroundColor(playerid,Pizza_Textdraw2[playerid], 255);
  	PlayerTextDrawFont(playerid,Pizza_Textdraw2[playerid], 1);
  	PlayerTextDrawLetterSize(playerid,Pizza_Textdraw2[playerid], 0.500000, 1.000000);
  	PlayerTextDrawColor(playerid,Pizza_Textdraw2[playerid], -1);
  	PlayerTextDrawSetOutline(playerid,Pizza_Textdraw2[playerid], 1);
  	PlayerTextDrawSetProportional(playerid,Pizza_Textdraw2[playerid], 1);
  	PlayerTextDrawSetSelectable(playerid,Pizza_Textdraw2[playerid], 0);
  	PlayerTextDrawShow(playerid,Pizza_Textdraw0[playerid]);
  	PlayerTextDrawShow(playerid,Pizza_Textdraw1[playerid]);
  	PlayerTextDrawShow(playerid,Pizza_Textdraw2[playerid]);
  	return 1;
}

public HidePlayerIntroTexts(playerid)
{
	PlayerTextDrawHide(playerid,Pizza_Textdraw0[playerid]);
  	PlayerTextDrawHide(playerid,Pizza_Textdraw1[playerid]);
  	PlayerTextDrawHide(playerid,Pizza_Textdraw2[playerid]);

  	PlayerTextDrawDestroy(playerid,Pizza_Textdraw0[playerid]);
  	PlayerTextDrawDestroy(playerid,Pizza_Textdraw1[playerid]);
  	PlayerTextDrawDestroy(playerid,Pizza_Textdraw2[playerid]);
  	return 1;
}

public ShowPlayerInfoTexts(playerid)
{
    Pizza_Textdraw0[playerid] = CreatePlayerTextDraw(playerid,150.000000, 350.000000, "~w~Gunakan salah satu ~r~kendaraan ~w~untuk memulai pekerjaan!");
  	PlayerTextDrawBackgroundColor(playerid,Pizza_Textdraw0[playerid], 255);
  	PlayerTextDrawFont(playerid,Pizza_Textdraw0[playerid], 1);
  	PlayerTextDrawLetterSize(playerid,Pizza_Textdraw0[playerid], 0.400000, 1.000000);
  	PlayerTextDrawColor(playerid,Pizza_Textdraw0[playerid], -1);
  	PlayerTextDrawSetOutline(playerid,Pizza_Textdraw0[playerid], 1);
  	PlayerTextDrawSetProportional(playerid,Pizza_Textdraw0[playerid], 1);
  	PlayerTextDrawSetSelectable(playerid,Pizza_Textdraw0[playerid], 0);

  	PlayerTextDrawShow(playerid,Pizza_Textdraw0[playerid]);
	return 1;
}

public HidePlayerInfoTexts(playerid)
{
	if(IsPlayerConnected(playerid))
	{
    	PlayerTextDrawHide(playerid,Pizza_Textdraw0[playerid]);
    	PlayerTextDrawDestroy(playerid,Pizza_Textdraw0[playerid]);
    	KillTimer(InfoTimer[playerid]);
	}
	return 1;
}

public ShowPlayerPizzaBikeTexts(playerid)
{
	new string[56];
	format(string,sizeof(string),"Pizzas: ~r~%d~w~ /~g~ 5",PizzaBikesPizzas[GetPlayerVehicleID(playerid)]);
    PizzasText[playerid] = CreatePlayerTextDraw(playerid,510.000000, 170.000000, string);
  	PlayerTextDrawBackgroundColor(playerid,PizzasText[playerid], 255);
  	PlayerTextDrawFont(playerid,PizzasText[playerid], 1);
  	PlayerTextDrawLetterSize(playerid,PizzasText[playerid], 0.300000, 1.000000);
  	PlayerTextDrawColor(playerid,PizzasText[playerid], -1);
  	PlayerTextDrawSetOutline(playerid,PizzasText[playerid], 1);
  	PlayerTextDrawSetProportional(playerid,PizzasText[playerid], 1);
  	PlayerTextDrawSetSelectable(playerid,PizzasText[playerid], 0);

  	PizzaSymbol[playerid] = CreatePlayerTextDraw(playerid,477.000000, 156.000000, "Pizzaboy");
  	PlayerTextDrawBackgroundColor(playerid,PizzaSymbol[playerid], 0);
  	PlayerTextDrawFont(playerid,PizzaSymbol[playerid], 5);
  	PlayerTextDrawLetterSize(playerid,PizzaSymbol[playerid], 0.500000, 1.000000);
  	PlayerTextDrawColor(playerid,PizzaSymbol[playerid], -1);
  	PlayerTextDrawSetOutline(playerid,PizzaSymbol[playerid], 0);
  	PlayerTextDrawSetProportional(playerid,PizzaSymbol[playerid], 1);
 	PlayerTextDrawSetShadow(playerid,PizzaSymbol[playerid], 1);
 	PlayerTextDrawUseBox(playerid,PizzaSymbol[playerid], 1);
  	PlayerTextDrawBoxColor(playerid,PizzaSymbol[playerid], 0);
  	PlayerTextDrawTextSize(playerid,PizzaSymbol[playerid], 30.000000, 30.000000);
  	PlayerTextDrawSetSelectable(playerid,PizzaSymbol[playerid], 0);
  	PlayerTextDrawSetPreviewModel(playerid,PizzaSymbol[playerid],1582);
  	PlayerTextDrawSetPreviewRot(playerid,PizzaSymbol[playerid],120.0,0.0,0.0,1.0);

    format(string,sizeof(string),"Tips: ~g~+%d$",PlayerTips[playerid]);
  	TipsText[playerid] = CreatePlayerTextDraw(playerid,510.000000, 218.000000, string);
  	PlayerTextDrawBackgroundColor(playerid,TipsText[playerid], 255);
  	PlayerTextDrawFont(playerid,TipsText[playerid], 1);
  	PlayerTextDrawLetterSize(playerid,TipsText[playerid], 0.300000, 1.000000);
  	PlayerTextDrawColor(playerid,TipsText[playerid], -1);
  	PlayerTextDrawSetOutline(playerid,TipsText[playerid], 1);
  	PlayerTextDrawSetProportional(playerid,TipsText[playerid], 1);
  	PlayerTextDrawSetSelectable(playerid,TipsText[playerid], 0);

    format(string,sizeof(string),"Earnings: ~g~%d$",PlayerEarnings[playerid]);
  	EarningsText[playerid] = CreatePlayerTextDraw(playerid,510.000000, 208.000000, string);
  	PlayerTextDrawBackgroundColor(playerid,EarningsText[playerid], 255);
  	PlayerTextDrawFont(playerid,EarningsText[playerid], 1);
  	PlayerTextDrawLetterSize(playerid,EarningsText[playerid], 0.300000, 1.000000);
  	PlayerTextDrawColor(playerid,EarningsText[playerid], -1);
  	PlayerTextDrawSetOutline(playerid,EarningsText[playerid], 1);
  	PlayerTextDrawSetProportional(playerid,EarningsText[playerid], 1);
  	PlayerTextDrawSetSelectable(playerid,EarningsText[playerid], 0);

    format(string,sizeof(string),"Total Earnings: ~g~%d$",PlayerEarnings[playerid]+PlayerTips[playerid]);
  	TotalEarningsText[playerid] = CreatePlayerTextDraw(playerid,510.000000, 228.000000, string);
  	PlayerTextDrawBackgroundColor(playerid,TotalEarningsText[playerid], 255);
  	PlayerTextDrawFont(playerid,TotalEarningsText[playerid], 1);
  	PlayerTextDrawLetterSize(playerid,TotalEarningsText[playerid], 0.300000, 1.000000);
  	PlayerTextDrawColor(playerid,TotalEarningsText[playerid], -1);
  	PlayerTextDrawSetOutline(playerid,TotalEarningsText[playerid], 1);
  	PlayerTextDrawSetProportional(playerid,TotalEarningsText[playerid], 1);
  	PlayerTextDrawSetSelectable(playerid,TotalEarningsText[playerid], 0);

  	PlayerTextDrawShow(playerid,PizzasText[playerid]);
  	PlayerTextDrawShow(playerid,PizzaSymbol[playerid]);
  	PlayerTextDrawShow(playerid,EarningsText[playerid]);
  	PlayerTextDrawShow(playerid,TotalEarningsText[playerid]);
  	PlayerTextDrawShow(playerid,TipsText[playerid]);
	return 1;
}

public HidePlayerPizzaBikeTexts(playerid)
{
    PlayerTextDrawHide(playerid,PizzasText[playerid]);
  	PlayerTextDrawHide(playerid,PizzaSymbol[playerid]);
  	PlayerTextDrawHide(playerid,EarningsText[playerid]);
  	PlayerTextDrawHide(playerid,TotalEarningsText[playerid]);
  	PlayerTextDrawHide(playerid,TipsText[playerid]);

  	PlayerTextDrawDestroy(playerid,PizzasText[playerid]);
  	PlayerTextDrawDestroy(playerid,PizzaSymbol[playerid]);
  	PlayerTextDrawDestroy(playerid,EarningsText[playerid]);
  	PlayerTextDrawDestroy(playerid,TotalEarningsText[playerid]);
  	PlayerTextDrawDestroy(playerid,TipsText[playerid]);
	return 1;
}

public ShowTipTimeText(playerid)
{
    TipTimeText[playerid] = CreatePlayerTextDraw(playerid,508.000000, 191.000000, "Tip Time: 00:30");
  	PlayerTextDrawBackgroundColor(playerid,TipTimeText[playerid], 255);
  	PlayerTextDrawFont(playerid,TipTimeText[playerid], 2);
  	PlayerTextDrawLetterSize(playerid,TipTimeText[playerid], 0.280000, 1.000000);
  	PlayerTextDrawColor(playerid,TipTimeText[playerid], -1);
  	PlayerTextDrawSetOutline(playerid,TipTimeText[playerid], 1);
  	PlayerTextDrawSetProportional(playerid,TipTimeText[playerid], 1);
  	PlayerTextDrawSetSelectable(playerid,TipTimeText[playerid], 0);

  	PlayerTextDrawShow(playerid,TipTimeText[playerid]);
  	return 1;
}

public HideTipTimeText(playerid)
{
    PlayerTextDrawHide(playerid,TipTimeText[playerid]);

    PlayerTextDrawDestroy(playerid,TipTimeText[playerid]);
	return 1;
}
TimeConvert(seconds)
{
	new tmp[256];
	new minutes = floatround(seconds/60);
	seconds -= minutes*60;
	format(tmp, sizeof(tmp), "%d:%02d", minutes, seconds);
	return tmp;
}

public TutorialTime()
{
	foreach(Player,i)
	{
	    if(PlayerTutorialTime[i] > 0)
	    {
	        PlayerTutorialTime[i]--;
	        if(PlayerTutorialTime[i] == 24)
	        {
	            InterpolateCameraPos(i, 2088.402343, -1790.125854, 16.726133, 2088.853027, -1812.807495, 14.554449, 3000);
				InterpolateCameraLookAt(i, 2092.098144, -1793.486572, 16.940910, 2093.178466, -1815.248168, 13.977611, 3000);
				PlayerTextDrawHide(i,Pizza_Textdraw2[i]);
				PlayerTextDrawSetString(i,Pizza_Textdraw2[i],"~w~Untuk memulai ~r~pekerjaan~w~, yang kamu lakukan adalah ~n~menggunakan motor itu.");
				PlayerTextDrawShow(i,Pizza_Textdraw2[i]);
	        }
	        else if(PlayerTutorialTime[i] == 18)
	        {
	            InterpolateCameraPos(i, 2088.853027, -1812.807495, 14.554449, 2046.698730, -1616.230712, 49.785942, 3000);
				InterpolateCameraLookAt(i, 2093.144042, -1815.167358, 13.545793, 2048.481201, -1620.497070, 47.883228, 3000);
				PlayerTextDrawHide(i,Pizza_Textdraw2[i]);
				PlayerTextDrawSetString(i,Pizza_Textdraw2[i],"Orang-orang di Ganton & Iddlewood membutuhkan pizza!~n~yang kamu lakukan adalah mengatarnya.");
				PlayerTextDrawShow(i,Pizza_Textdraw2[i]);
	        }
	        else if(PlayerTutorialTime[i] == 12)
	        {
	            new skin = random(311)+1;
				if(skin == 74) return skin=75;
				PlayerCustomer[i] = CreateActor(skin,2067.2793,-1703.4181,14.1484,271.5973);
				ApplyActorAnimation(PlayerCustomer[i],"DEALER","DEALER_IDLE",4.1,1,0,0,0,0);

	            InterpolateCameraPos(i, 2046.698852, -1616.231201, 49.785850, 2077.879638, -1698.481567, 16.811132, 3000);
				InterpolateCameraLookAt(i, 2047.768066, -1620.363891, 47.182411, 2073.304199, -1700.195068, 15.748975, 3000);
	            PlayerTextDrawHide(i,Pizza_Textdraw2[i]);
				PlayerTextDrawSetString(i,Pizza_Textdraw2[i],"Lakukan dengan cepat jika kamu ingin mendapatkan~n~sebuah extra tip di setiap paycheckmu!");
				PlayerTextDrawShow(i,Pizza_Textdraw2[i]);
	        }
	        else if(PlayerTutorialTime[i] == 6)
	        {
	            InterpolateCameraPos(i, 2077.879150, -1698.480346, 16.811641, 2119.111328, -1780.575683, 15.841483, 3000);
				InterpolateCameraLookAt(i, 2079.523681, -1703.201416, 16.725708, 2116.954589, -1784.953247, 14.752622, 3000);
	            PlayerTextDrawHide(i,Pizza_Textdraw2[i]);
				PlayerTextDrawSetString(i,Pizza_Textdraw2[i],"Sebuah motor hanya bisa mengangkut ~r~5~w~ pizza.~n~Jangan lupa untuk merestock mereka jika habis!");
				PlayerTextDrawShow(i,Pizza_Textdraw2[i]);
				DestroyActor(PlayerCustomer[i]);
	        }
	        else if(PlayerTutorialTime[i] <= 0)
	        {
	            TogglePlayerSpectating(i,0);
	            HidePlayerIntroTexts(i);
            	ShowPlayerInfoTexts(i);
            	InfoTimer[i] = SetTimerEx("HidePlayerInfoTexts",1000,false,"d",i);
            	SetCameraBehindPlayer(i);
            	TogglePlayerControllable(i,1);
	        }
		}
		if(TipTime[i] > 0)
		{
		    new string[26];
			TipTime[i]--;
			PlayerTextDrawHide(i,TipTimeText[i]);
			format(string,sizeof(string),"Tip Time: %s",TimeConvert(TipTime[i]));
			PlayerTextDrawSetString(i,TipTimeText[i],string);
			PlayerTextDrawShow(i,TipTimeText[i]);
			if(TipTime[i] == 0) { HideTipTimeText(i); }
		}
	}
	return 1;
}

/*CMD:ball(playerid, params[])
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	DestroyObject(Ball);
	Ball = CreateObject(2114, x+random(3), y+random(3), z-0.8, 0, 0, 96);
	return 1;
}*/

CMD:changelog(playerid, params[])
{
	new
		str[3000];
	
	//New.
	strcat(str, "{FFFFFF}--------------------------------------------------------\n");
	strcat(str, "[{9ACD32}NEW{FFFFFF}] /event system (Masih didalam pengembangan)\n");
	strcat(str, "[{9ACD32}NEW{FFFFFF}] /ban untuk banned player.\n");
	strcat(str, "[{9ACD32}NEW{FFFFFF}] /unban untuk unbanned player.\n");
	strcat(str, "[{9ACD32}NEW{FFFFFF}] /staff untuk mengecek admin dan helper yang online.\n");
	strcat(str, "[{9ACD32}NEW{FFFFFF}] /unlock untuk membuka kendaraan yang terkunci (Jika /lock bug).\n");
	strcat(str, "[{9ACD32}NEW{FFFFFF}] Pengadaan waktu untuk masa berlaku vip setiap donator.\n");
	strcat(str, "[{9ACD32}NEW{FFFFFF}] /afk jika ingin melakukan AFK.\n");
	strcat(str, "[{9ACD32}NEW{FFFFFF}] /afklist untuk mengecek orang ssedang AFK.\n");
	strcat(str, "[{9ACD32}NEW{FFFFFF}] pesan afk untuk mengecek kalau kamu lagi status afk!.\n");
	//Change.
	strcat(str, "{FFFFFF}--------------------------------------------------------\n");
	strcat(str, "[{C7DC00}CHANGE{FFFFFF}] /admins dan /helper menjadi /staff.\n");
	strcat(str, "[{C7DC00}CHANGE{FFFFFF}] Tampilan /o berubah drastis.\n");
	//Fix.
	strcat(str, "{FFFFFF}--------------------------------------------------------\n");
	strcat(str, "[{00C7DC}FIX{FFFFFF}] Bensin auto full saat keluar.\n");
	strcat(str, "[{00C7DC}FIX{FFFFFF}] /lock mungkin.\n");
	strcat(str, "[{00C7DC}FIX{FFFFFF}] /staff dan /event.\n");
	strcat(str, "[{00C7DC}FIX{FFFFFF}] /afklist yang tidak keluar.\n");
	strcat(str, "[{00C7DC}FIX{FFFFFF}] Untuk sementara menggunakan cmd /unlock jika /lock tidak bisa!.\n");
	
	//Delete.
	strcat(str, "{FFFFFF}--------------------------------------------------------\n");
	strcat(str, "[{DC0059}DELETE{FFFFFF}] /ball (sementara).\n\n");
	
	//Informasi.
	strcat(str, "{FFFFFF}--------------------------------------------------------\n");
	strcat(str, "{FFFFFF}* Untuk informasi lebih lanjut silahkan kunjungi forum kami di vandoraravens.xyz/forum.");
	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Vandora Ravens Changelog v1.2", str, "Oke", ""); 
	return 1;
}

CMD:afk(playerid, params[])
{
	if(!PlayerData[playerid][pAFK])
	{
		PlayerData[playerid][pAFK] = true;
		TogglePlayerControllable(playerid, 0);
		SendServerMessage(playerid, "Kamu sekarang sedang dalam mode AFK!, ketik /afk untuk kembali bermain");
		SetPVarInt(playerid, "LastColor", GetPlayerColor(playerid)); //save player variable color!.
		SetPlayerColor(playerid, 0x00000000);
	}
	else
	{
		PlayerData[playerid][pAFK] = false;
		TogglePlayerControllable(playerid, 1);
		SendServerMessage(playerid, "Kamu sekarang sudah tidak dalam status AFK lagi!");
		SetPlayerColor(playerid, GetPVarInt(playerid, "LastColor"));
	}
	return 1;
}

CMD:afklist(playerid, params[])
{
	new	
		str[222];

	format(str, sizeof(str), "ID\tPlayer Name\tAFK Time\n");
	foreach(new i : Player)
	{
		if(IsPlayerPaused(playerid) || PlayerData[playerid][pAFK])
		{
			format(str, sizeof(str), "%s %d\t%s\t%s\n", str, GetPlayerSQLID(playerid), PlayerCharacters[i][PlayerData[i][pCharacter] - 1], GetPlayerPausedTime(playerid));
		}
	}
	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST_HEADERS, "AFK Players", str, "Close", "");
	return 1;
}

CMD:unlock(playerid, params[])
{
	new
	    id = -1;

	if((id = Car_Nearest(playerid)) != -1)
	{
	    static
	        engine,
	        lights,
	        alarm,
	        doors,
	        bonnet,
	        boot,
	        objective;

	    GetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);

	    if(Car_IsOwner(playerid, id) || (PlayerData[playerid][pFaction] != -1 && CarData[id][carFaction] == GetFactionType(playerid)) || GetFactionType(playerid) == FACTION_POLICE)
	    {
			if (CarData[id][carLocked])
			{
				CarData[id][carLocked] = false;
				Car_Save(id);

				ShowPlayerFooter(playerid, "You have ~g~unlocked~w~ the vehicle!");
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

				SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 0, bonnet, boot, objective);
				return 1;
			}
			else SendServerMessage(playerid, "ketik /lock untuk mengunci kendaraanmu!");
		}
	}
	return 1;
}
CMD:buyrod(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid,5.0,379.1845,-2062.6423,7.8359))
	    return SendClientMessage(playerid,COLOR_ERROR,"Kamu tidak berada didekat Fishing Pier Shop");
	    
	if(GetPlayerMoney(playerid) < 150) //Ganti dengan ekonomi sekarang!
	    return SendClientMessage(playerid,COLOR_ERROR,"Kamu tidak memiliki uang sebanyak 150$");
	    
	if(FishingRod[playerid] >= 1)
	    return SendClientMessage(playerid, COLOR_ERROR,"Kamu sudah mempunyai pancingan!");
	    

	SetPlayerMoney(playerid, PlayerData[playerid][pMoney]-50);
	FishingRod[playerid] = 100;
	SendClientMessage(playerid,COLOR_NOTIFICATION,"Kamu telah membeli pancingan sebesar 150$");
	return true;
}

CMD:sellfish(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 7)
		return SendServerMessage(playerid, "Comming soon next update!");

    if(!IsPlayerInRangeOfPoint(playerid,5.0,379.1845,-2062.6423,7.8359))
	    return SendErrorMessage(playerid,COLOR_ERROR,"Kamu tidak berada di dekat Fishing Pier Shop");

	new string[128], pay;
	pay = FishWeight[playerid]*randomEx(10,100);
	format(string,sizeof(string),"Kamu telah mendapatkan uang sebanyak %i$ dari hasil penjualan ikan %i dengan berat %s kilograms",pay, FishData[playerid][FishName], FishData[playerid][FishKG]);
	SendClientMessage(playerid,COLOR_NOTIFICATION,string);
	for(new q = 0; q < FishData[playerid][FishList]; q++)
	{
		FishData[playerid][FishKG][q] = 0;
		FishData[playerid][FishName][q][0] = EOS;
	}
    FishData[playerid][FishList] = 0;
	GiveMoney(playerid, pay);
	return true;
}

CMD:fish(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 7)
		return SendServerMessage(playerid, "Comming soon next update!");
		
	new Float:x,Float:y,Float:z;
    if(IsPlayerInRangeOfPoint(playerid,10.0,354.3251,-2088.7981,7.8359) || IsPlayerInRangeOfPoint(playerid,10.0,362.3351,-2088.7979,7.8359) ||
    IsPlayerInRangeOfPoint(playerid,10.0,367.0258,-2088.7979,7.8359) || IsPlayerInRangeOfPoint(playerid,10.0,369.7540,-2088.7981,7.8359) ||
    IsPlayerInRangeOfPoint(playerid,10.0,374.0645,-2088.7969,7.8359) || IsPlayerInRangeOfPoint(playerid,10.0,383.3422,-2088.7974,7.8359) ||
    IsPlayerInRangeOfPoint(playerid,10.0,390.2083,-2088.7983,7.8359) || IsPlayerInRangeOfPoint(playerid,10.0,396.6046,-2088.7979,7.8359) ||
    IsPlayerInRangeOfPoint(playerid,10.0,403.5682,-2088.7976,7.8359) || IsPlayerInRangeOfPoint(playerid,10.0,409.2429,-2088.6521,7.8359))
	{
		if(PlayerData[playerid][pRod] != 1)
			return SendErrorMessage(playerid, "kamu harus membeli pancingan untuk memancing!");

		if(IsPlayerInRangeOfPoint(playerid, 5.0, FishData[playerid][FishPos][0], FishData[playerid][FishPos][1], FishData[playerid][FishPos][2]))
		    return SendErrorMessage(playerid, "Kamu tidak bisa memancing di tempat yang sama! Pindah sana!");

	    if(FishData[playerid][FishList] >= 5)
		    return SendErrorMessage(playerid, "Kamu telah menangkap lebih dari 5 ikan! Jual dulu ikan tersebut lalu bisa mancing lagi!.");

		GetPlayerPos(playerid,x,y,z);
		
	    FishData[playerid][FishPos][0] = x;
		FishData[playerid][FishPos][1] = y;
		FishData[playerid][FishPos][2] = z;
		FishData[playerid][FishKG][FishData[playerid][FishList]] = 0;
	
	    ApplyAnimation(playerid, "SWORD", "sword_block" ,50.0, 0, 1, 0, 1, 1);
	    SetPlayerAttachedObject(playerid, 0, 18632, 6, 0.079376, 0.037070, 0.007706, 181.482910, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		SetTimerEx("OnPlayerMancing", 5000, false, "i", playerid);
		SendFishingMessage(playerid, COLOR_WHITE, "Sedang memancing... Jangan bergerak.");
		FishingRod[playerid]--;
	}
	else SendErrorMessage(playerid,"Kamu tidak berada di spot pemancingan!");
	return true;
}

CMD:fishes(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 7)
		return SendServerMessage(playerid, "Comming soon next update!");
		
/*	new string[128];
	for(new Kin; kin < FishData[playerid][FishList]; Kin++)
	{
		format(str, sizeof(str),
*/
	return true;
}
